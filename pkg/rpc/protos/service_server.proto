syntax = "proto3";
option go_package = "./pb";

package pb;

import "model_server.proto";
import "rpc_messages.proto";

service ServerService {
	// 创建服务
	rpc createServer (CreateServerRequest) returns (CreateServerResponse);

	// 修改服务基本信息
	rpc updateServerBasic (UpdateServerBasicRequest) returns (RPCUpdateSuccess);

	// 修改服务的HTTP设置
	rpc updateServerHTTP (UpdateServerHTTPRequest) returns (RPCUpdateSuccess);

	// 修改服务的HTTPS设置
	rpc updateServerHTTPS (UpdateServerHTTPSRequest) returns (RPCUpdateSuccess);

	// 修改服务的TCP设置
	rpc updateServerTCP (UpdateServerTCPRequest) returns (RPCUpdateSuccess);

	// 修改服务的TLS设置
	rpc updateServerTLS (UpdateServerTLSRequest) returns (RPCUpdateSuccess);

	// 修改服务的Unix设置
	rpc updateServerUnix (UpdateServerUnixRequest) returns (RPCUpdateSuccess);

	// 修改服务的UDP设置
	rpc updateServerUDP (UpdateServerUDPRequest) returns (RPCUpdateSuccess);

	// 修改服务的Web设置
	rpc updateServerWeb (UpdateServerWebRequest) returns (RPCUpdateSuccess);

	// 修改服务的反向代理设置
	rpc updateServerReverseProxy (UpdateServerReverseProxyRequest) returns (RPCUpdateSuccess);

	// 修改服务的域名设置
	rpc updateServerNames (UpdateServerNamesRequest) returns (RPCUpdateSuccess);

	// 计算匹配的服务数量
	rpc countAllEnabledServersMatch (CountAllEnabledServersMatchRequest) returns (CountAllEnabledServersMatchResponse);

	// 列出单页服务
	rpc listEnabledServersMatch (ListEnabledServersMatchRequest) returns (ListEnabledServersMatchResponse);

	// 禁用某服务
	rpc disableServer (DisableServerRequest) returns (DisableServerResponse);

	// 查找单个服务
	rpc findEnabledServer (FindEnabledServerRequest) returns (FindEnabledServerResponse);

	// 查找服务的服务类型
	rpc findEnabledServerType (FindEnabledServerTypeRequest) returns (FindEnabledServerTypeResponse);

	// 查找反向代理设置
	rpc findAndInitServerReverseProxyConfig (FindAndInitServerReverseProxyConfigRequest) returns (FindAndInitServerReverseProxyConfigResponse);

	// 初始化Web设置
	rpc findAndInitServerWebConfig (FindAndInitServerWebConfigRequest) returns (FindAndInitServerWebConfigResponse);

	// 计算使用某个SSL证书的服务数量
	rpc countAllEnabledServersWithSSLCertId (CountAllEnabledServersWithSSLCertIdRequest) returns (CountAllEnabledServersWithSSLCertIdResponse);

	// 查找使用某个SSL证书的所有服务
	rpc findAllEnabledServersWithSSLCertId (FindAllEnabledServersWithSSLCertIdRequest) returns (FindAllEnabledServersWithSSLCertIdResponse);

	// 计算使用某个缓存策略的服务数量
	rpc countAllEnabledServersWithCachePolicyId (CountAllEnabledServersWithCachePolicyIdRequest) returns (CountAllEnabledServersWithCachePolicyIdResponse);

	// 查找使用某个缓存策略的所有服务
	rpc findAllEnabledServersWithCachePolicyId (FindAllEnabledServersWithCachePolicyIdRequest) returns (FindAllEnabledServersWithCachePolicyIdResponse);

	// 计算使用某个WAF策略的服务数量
	rpc countAllEnabledServersWithHTTPFirewallPolicyId (CountAllEnabledServersWithHTTPFirewallPolicyIdRequest) returns (CountAllEnabledServersWithHTTPFirewallPolicyIdResponse);

	// 计算运行在某个集群上的所有服务数量
	rpc countAllEnabledServersWithNodeClusterId (CountAllEnabledServersWithNodeClusterIdRequest) returns (CountAllEnabledServersWithNodeClusterIdResponse);

	// 计算使用某个分组的服务数量
	rpc countAllEnabledServersWithGroupId (CountAllEnabledServersWithGroupIdRequest) returns (CountAllEnabledServersWithGroupIdResponse);

	// 通知更新
	rpc notifyServersChange (NotifyServersChangeRequest) returns (NotifyServersChangeResponse);
}

// 创建服务
message CreateServerRequest {
	int64 userId = 1;
	int64 adminId = 2;
	string type = 3;
	string name = 4;
	string description = 5;

	// 配置相关
	bytes serverNamesJON = 8;
	bytes httpJSON = 9;
	bytes httpsJSON = 10;
	bytes tcpJSON = 11;
	bytes tlsJSON = 12;
	bytes unixJSON = 13;
	bytes udpJSON = 14;
	int64 webId = 15;
	bytes reverseProxyJSON = 16;
	repeated int64 groupIds = 17;

	int64 clusterId = 30;
	bytes includeNodesJSON = 31;
	bytes excludeNodesJSON = 32;
}

message CreateServerResponse {
	int64 serverId = 1;
}

// 修改服务基本信息
message UpdateServerBasicRequest {
	int64 serverId = 1;
	string name = 2;
	string description = 3;
	int64 clusterId = 4;
	bool isOn = 5;
	repeated int64 groupIds = 6;
}

// 修改服务的HTTP等设置
message UpdateServerHTTPRequest {
	int64 serverId = 1;
	bytes config = 2;
}

message UpdateServerHTTPSRequest {
	int64 serverId = 1;
	bytes config = 2;
}

message UpdateServerTCPRequest {
	int64 serverId = 1;
	bytes config = 2;
}

message UpdateServerTLSRequest {
	int64 serverId = 1;
	bytes config = 2;
}

message UpdateServerUnixRequest {
	int64 serverId = 1;
	bytes config = 2;
}

message UpdateServerUDPRequest {
	int64 serverId = 1;
	bytes config = 2;
}

message UpdateServerWebRequest {
	int64 serverId = 1;
	int64 webId = 2;
}

message UpdateServerReverseProxyRequest {
	int64 serverId = 1;
	bytes reverseProxyJSON = 2;
}

message UpdateServerNamesRequest {
	int64 serverId = 1;
	bytes config = 2;
}

// 计算服务数量
message CountAllEnabledServersMatchRequest {
	int64 groupId = 1;
	string keyword = 2;
}

message CountAllEnabledServersMatchResponse {
	int64 count = 1;
}

// 列出单页服务
message ListEnabledServersMatchRequest {
	int64 offset = 1;
	int64 size = 2;
	int64 groupId = 3;
	string keyword = 4;
}

message ListEnabledServersMatchResponse {
	repeated Server servers = 1;
}

// 禁用服务
message DisableServerRequest {
	int64 serverId = 1;
}

message DisableServerResponse {

}

// 查找单个服务
message FindEnabledServerRequest {
	int64 serverId = 1;
}

message FindEnabledServerResponse {
	Server server = 1;
}

// 查找服务的服务类型
message FindEnabledServerTypeRequest {
	int64 serverId = 1;
}

message FindEnabledServerTypeResponse {
	string type = 1;
}

// 查找反向代理设置
message FindAndInitServerReverseProxyConfigRequest {
	int64 serverId = 1;
}

message FindAndInitServerReverseProxyConfigResponse {
	bytes reverseProxyJSON = 1;
	bytes reverseProxyRefJSON = 2;
}

// 初始化Web设置
message FindAndInitServerWebConfigRequest {
	int64 serverId = 1;
}

message FindAndInitServerWebConfigResponse {
	bytes webJSON = 1;
}

// 计算使用某个SSL证书的服务数量
message CountAllEnabledServersWithSSLCertIdRequest {
	int64 certId = 1;
}

message CountAllEnabledServersWithSSLCertIdResponse {
	int64 count = 1;
}

// 查找使用某个SSL证书的所有服务
message FindAllEnabledServersWithSSLCertIdRequest {
	int64 certId = 1;
}

message FindAllEnabledServersWithSSLCertIdResponse {
	repeated Server servers = 1;
}

// 计算使用某个缓存策略的服务数量
message CountAllEnabledServersWithCachePolicyIdRequest {
	int64 cachePolicyId = 1;
}

message CountAllEnabledServersWithCachePolicyIdResponse {
	int64 count = 1;
}

// 查找使用某个缓存策略的所有服务
message FindAllEnabledServersWithCachePolicyIdRequest {
	int64 cachePolicyId = 1;
}

message FindAllEnabledServersWithCachePolicyIdResponse {
	repeated Server servers = 1;
}

// 计算使用某个WAF策略的服务数量
message CountAllEnabledServersWithHTTPFirewallPolicyIdRequest {
	int64 firewallPolicyId = 1;
}

message CountAllEnabledServersWithHTTPFirewallPolicyIdResponse {
	int64 count = 1;
}

// 计算运行在某个集群上的所有服务数量
message CountAllEnabledServersWithNodeClusterIdRequest {
	int64 nodeClusterId = 1;
}

message CountAllEnabledServersWithNodeClusterIdResponse {
	int64 count = 1;
}

// 计算使用某个分组的服务数量
message CountAllEnabledServersWithGroupIdRequest {
	int64 groupId = 1;
}

message CountAllEnabledServersWithGroupIdResponse {
	int64 count = 1;
}

// 通知更新
message NotifyServersChangeRequest {

}

message NotifyServersChangeResponse {

}