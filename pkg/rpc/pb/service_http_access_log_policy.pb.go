// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_http_access_log_policy.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 计算访问日志策略数量
type CountAllHTTPAccessLogPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllHTTPAccessLogPoliciesRequest) Reset() {
	*x = CountAllHTTPAccessLogPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllHTTPAccessLogPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllHTTPAccessLogPoliciesRequest) ProtoMessage() {}

func (x *CountAllHTTPAccessLogPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllHTTPAccessLogPoliciesRequest.ProtoReflect.Descriptor instead.
func (*CountAllHTTPAccessLogPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_policy_proto_rawDescGZIP(), []int{0}
}

// 列出单页访问日志策略
type ListHTTPAccessLogPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListHTTPAccessLogPoliciesRequest) Reset() {
	*x = ListHTTPAccessLogPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHTTPAccessLogPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHTTPAccessLogPoliciesRequest) ProtoMessage() {}

func (x *ListHTTPAccessLogPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHTTPAccessLogPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListHTTPAccessLogPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_policy_proto_rawDescGZIP(), []int{1}
}

func (x *ListHTTPAccessLogPoliciesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListHTTPAccessLogPoliciesRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListHTTPAccessLogPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpAccessLogPolicies []*HTTPAccessLogPolicy `protobuf:"bytes,1,rep,name=httpAccessLogPolicies,proto3" json:"httpAccessLogPolicies,omitempty"`
}

func (x *ListHTTPAccessLogPoliciesResponse) Reset() {
	*x = ListHTTPAccessLogPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHTTPAccessLogPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHTTPAccessLogPoliciesResponse) ProtoMessage() {}

func (x *ListHTTPAccessLogPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHTTPAccessLogPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListHTTPAccessLogPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_policy_proto_rawDescGZIP(), []int{2}
}

func (x *ListHTTPAccessLogPoliciesResponse) GetHttpAccessLogPolicies() []*HTTPAccessLogPolicy {
	if x != nil {
		return x.HttpAccessLogPolicies
	}
	return nil
}

// 创建访问日志策略
type CreateHTTPAccessLogPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type             string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	OptionsJSON      []byte `protobuf:"bytes,3,opt,name=optionsJSON,proto3" json:"optionsJSON,omitempty"`
	CondsJSON        []byte `protobuf:"bytes,4,opt,name=condsJSON,proto3" json:"condsJSON,omitempty"`
	IsPublic         bool   `protobuf:"varint,5,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	FirewallOnly     bool   `protobuf:"varint,6,opt,name=firewallOnly,proto3" json:"firewallOnly,omitempty"`
	DisableDefaultDB bool   `protobuf:"varint,7,opt,name=disableDefaultDB,proto3" json:"disableDefaultDB,omitempty"`
}

func (x *CreateHTTPAccessLogPolicyRequest) Reset() {
	*x = CreateHTTPAccessLogPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPAccessLogPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPAccessLogPolicyRequest) ProtoMessage() {}

func (x *CreateHTTPAccessLogPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPAccessLogPolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateHTTPAccessLogPolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_policy_proto_rawDescGZIP(), []int{3}
}

func (x *CreateHTTPAccessLogPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateHTTPAccessLogPolicyRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateHTTPAccessLogPolicyRequest) GetOptionsJSON() []byte {
	if x != nil {
		return x.OptionsJSON
	}
	return nil
}

func (x *CreateHTTPAccessLogPolicyRequest) GetCondsJSON() []byte {
	if x != nil {
		return x.CondsJSON
	}
	return nil
}

func (x *CreateHTTPAccessLogPolicyRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *CreateHTTPAccessLogPolicyRequest) GetFirewallOnly() bool {
	if x != nil {
		return x.FirewallOnly
	}
	return false
}

func (x *CreateHTTPAccessLogPolicyRequest) GetDisableDefaultDB() bool {
	if x != nil {
		return x.DisableDefaultDB
	}
	return false
}

type CreateHTTPAccessLogPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpAccessLogPolicyId int64 `protobuf:"varint,1,opt,name=httpAccessLogPolicyId,proto3" json:"httpAccessLogPolicyId,omitempty"`
}

func (x *CreateHTTPAccessLogPolicyResponse) Reset() {
	*x = CreateHTTPAccessLogPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPAccessLogPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPAccessLogPolicyResponse) ProtoMessage() {}

func (x *CreateHTTPAccessLogPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPAccessLogPolicyResponse.ProtoReflect.Descriptor instead.
func (*CreateHTTPAccessLogPolicyResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_policy_proto_rawDescGZIP(), []int{4}
}

func (x *CreateHTTPAccessLogPolicyResponse) GetHttpAccessLogPolicyId() int64 {
	if x != nil {
		return x.HttpAccessLogPolicyId
	}
	return 0
}

// 修改访问日志策略
type UpdateHTTPAccessLogPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpAccessLogPolicyId int64  `protobuf:"varint,1,opt,name=httpAccessLogPolicyId,proto3" json:"httpAccessLogPolicyId,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsOn                  bool   `protobuf:"varint,3,opt,name=isOn,proto3" json:"isOn,omitempty"`
	OptionsJSON           []byte `protobuf:"bytes,4,opt,name=optionsJSON,proto3" json:"optionsJSON,omitempty"`
	CondsJSON             []byte `protobuf:"bytes,5,opt,name=condsJSON,proto3" json:"condsJSON,omitempty"`
	IsPublic              bool   `protobuf:"varint,6,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	FirewallOnly          bool   `protobuf:"varint,7,opt,name=firewallOnly,proto3" json:"firewallOnly,omitempty"`
	DisableDefaultDB      bool   `protobuf:"varint,8,opt,name=disableDefaultDB,proto3" json:"disableDefaultDB,omitempty"`
}

func (x *UpdateHTTPAccessLogPolicyRequest) Reset() {
	*x = UpdateHTTPAccessLogPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPAccessLogPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPAccessLogPolicyRequest) ProtoMessage() {}

func (x *UpdateHTTPAccessLogPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPAccessLogPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPAccessLogPolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_policy_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateHTTPAccessLogPolicyRequest) GetHttpAccessLogPolicyId() int64 {
	if x != nil {
		return x.HttpAccessLogPolicyId
	}
	return 0
}

func (x *UpdateHTTPAccessLogPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateHTTPAccessLogPolicyRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateHTTPAccessLogPolicyRequest) GetOptionsJSON() []byte {
	if x != nil {
		return x.OptionsJSON
	}
	return nil
}

func (x *UpdateHTTPAccessLogPolicyRequest) GetCondsJSON() []byte {
	if x != nil {
		return x.CondsJSON
	}
	return nil
}

func (x *UpdateHTTPAccessLogPolicyRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *UpdateHTTPAccessLogPolicyRequest) GetFirewallOnly() bool {
	if x != nil {
		return x.FirewallOnly
	}
	return false
}

func (x *UpdateHTTPAccessLogPolicyRequest) GetDisableDefaultDB() bool {
	if x != nil {
		return x.DisableDefaultDB
	}
	return false
}

// 查找单个访问日志策略
type FindHTTPAccessLogPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpAccessLogPolicyId int64 `protobuf:"varint,1,opt,name=httpAccessLogPolicyId,proto3" json:"httpAccessLogPolicyId,omitempty"`
}

func (x *FindHTTPAccessLogPolicyRequest) Reset() {
	*x = FindHTTPAccessLogPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPAccessLogPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPAccessLogPolicyRequest) ProtoMessage() {}

func (x *FindHTTPAccessLogPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPAccessLogPolicyRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPAccessLogPolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_policy_proto_rawDescGZIP(), []int{6}
}

func (x *FindHTTPAccessLogPolicyRequest) GetHttpAccessLogPolicyId() int64 {
	if x != nil {
		return x.HttpAccessLogPolicyId
	}
	return 0
}

type FindHTTPAccessLogPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpAccessLogPolicy *HTTPAccessLogPolicy `protobuf:"bytes,1,opt,name=httpAccessLogPolicy,proto3" json:"httpAccessLogPolicy,omitempty"`
}

func (x *FindHTTPAccessLogPolicyResponse) Reset() {
	*x = FindHTTPAccessLogPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPAccessLogPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPAccessLogPolicyResponse) ProtoMessage() {}

func (x *FindHTTPAccessLogPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPAccessLogPolicyResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPAccessLogPolicyResponse) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_policy_proto_rawDescGZIP(), []int{7}
}

func (x *FindHTTPAccessLogPolicyResponse) GetHttpAccessLogPolicy() *HTTPAccessLogPolicy {
	if x != nil {
		return x.HttpAccessLogPolicy
	}
	return nil
}

// 删除策略
type DeleteHTTPAccessLogPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpAccessLogPolicyId int64 `protobuf:"varint,1,opt,name=httpAccessLogPolicyId,proto3" json:"httpAccessLogPolicyId,omitempty"`
}

func (x *DeleteHTTPAccessLogPolicyRequest) Reset() {
	*x = DeleteHTTPAccessLogPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHTTPAccessLogPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHTTPAccessLogPolicyRequest) ProtoMessage() {}

func (x *DeleteHTTPAccessLogPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHTTPAccessLogPolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteHTTPAccessLogPolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_policy_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteHTTPAccessLogPolicyRequest) GetHttpAccessLogPolicyId() int64 {
	if x != nil {
		return x.HttpAccessLogPolicyId
	}
	return 0
}

// 测试写入某个访问日志策略
type WriteHTTPAccessLogPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpAccessLogPolicyId int64          `protobuf:"varint,1,opt,name=httpAccessLogPolicyId,proto3" json:"httpAccessLogPolicyId,omitempty"`
	HttpAccessLog         *HTTPAccessLog `protobuf:"bytes,2,opt,name=httpAccessLog,proto3" json:"httpAccessLog,omitempty"`
}

func (x *WriteHTTPAccessLogPolicyRequest) Reset() {
	*x = WriteHTTPAccessLogPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_access_log_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteHTTPAccessLogPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteHTTPAccessLogPolicyRequest) ProtoMessage() {}

func (x *WriteHTTPAccessLogPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_access_log_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteHTTPAccessLogPolicyRequest.ProtoReflect.Descriptor instead.
func (*WriteHTTPAccessLogPolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_access_log_policy_proto_rawDescGZIP(), []int{9}
}

func (x *WriteHTTPAccessLogPolicyRequest) GetHttpAccessLogPolicyId() int64 {
	if x != nil {
		return x.HttpAccessLogPolicyId
	}
	return 0
}

func (x *WriteHTTPAccessLogPolicyRequest) GetHttpAccessLog() *HTTPAccessLog {
	if x != nil {
		return x.HttpAccessLog
	}
	return nil
}

var File_service_http_access_log_policy_proto protoreflect.FileDescriptor

var file_service_http_access_log_policy_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x29, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70,
	0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c,
	0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x72, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x15, 0x68, 0x74, 0x74, 0x70, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0xf6, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2a, 0x0a,
	0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44,
	0x42, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x42, 0x22, 0x59, 0x0a, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x68,
	0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x74, 0x74,
	0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4f,
	0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x42, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x42, 0x22, 0x56, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x1f, 0x46,
	0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x13, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x58, 0x0a, 0x20, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x15, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x68, 0x74,
	0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x1f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0d, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x32, 0xac, 0x05, 0x0a, 0x1a, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x1d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x48, 0x54,
	0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x54, 0x54,
	0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a,
	0x17, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x18, 0x77, 0x72, 0x69, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_http_access_log_policy_proto_rawDescOnce sync.Once
	file_service_http_access_log_policy_proto_rawDescData = file_service_http_access_log_policy_proto_rawDesc
)

func file_service_http_access_log_policy_proto_rawDescGZIP() []byte {
	file_service_http_access_log_policy_proto_rawDescOnce.Do(func() {
		file_service_http_access_log_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_http_access_log_policy_proto_rawDescData)
	})
	return file_service_http_access_log_policy_proto_rawDescData
}

var file_service_http_access_log_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_service_http_access_log_policy_proto_goTypes = []interface{}{
	(*CountAllHTTPAccessLogPoliciesRequest)(nil), // 0: pb.CountAllHTTPAccessLogPoliciesRequest
	(*ListHTTPAccessLogPoliciesRequest)(nil),     // 1: pb.ListHTTPAccessLogPoliciesRequest
	(*ListHTTPAccessLogPoliciesResponse)(nil),    // 2: pb.ListHTTPAccessLogPoliciesResponse
	(*CreateHTTPAccessLogPolicyRequest)(nil),     // 3: pb.CreateHTTPAccessLogPolicyRequest
	(*CreateHTTPAccessLogPolicyResponse)(nil),    // 4: pb.CreateHTTPAccessLogPolicyResponse
	(*UpdateHTTPAccessLogPolicyRequest)(nil),     // 5: pb.UpdateHTTPAccessLogPolicyRequest
	(*FindHTTPAccessLogPolicyRequest)(nil),       // 6: pb.FindHTTPAccessLogPolicyRequest
	(*FindHTTPAccessLogPolicyResponse)(nil),      // 7: pb.FindHTTPAccessLogPolicyResponse
	(*DeleteHTTPAccessLogPolicyRequest)(nil),     // 8: pb.DeleteHTTPAccessLogPolicyRequest
	(*WriteHTTPAccessLogPolicyRequest)(nil),      // 9: pb.WriteHTTPAccessLogPolicyRequest
	(*HTTPAccessLogPolicy)(nil),                  // 10: pb.HTTPAccessLogPolicy
	(*HTTPAccessLog)(nil),                        // 11: pb.HTTPAccessLog
	(*RPCCountResponse)(nil),                     // 12: pb.RPCCountResponse
	(*RPCSuccess)(nil),                           // 13: pb.RPCSuccess
}
var file_service_http_access_log_policy_proto_depIdxs = []int32{
	10, // 0: pb.ListHTTPAccessLogPoliciesResponse.httpAccessLogPolicies:type_name -> pb.HTTPAccessLogPolicy
	10, // 1: pb.FindHTTPAccessLogPolicyResponse.httpAccessLogPolicy:type_name -> pb.HTTPAccessLogPolicy
	11, // 2: pb.WriteHTTPAccessLogPolicyRequest.httpAccessLog:type_name -> pb.HTTPAccessLog
	0,  // 3: pb.HTTPAccessLogPolicyService.countAllHTTPAccessLogPolicies:input_type -> pb.CountAllHTTPAccessLogPoliciesRequest
	1,  // 4: pb.HTTPAccessLogPolicyService.listHTTPAccessLogPolicies:input_type -> pb.ListHTTPAccessLogPoliciesRequest
	3,  // 5: pb.HTTPAccessLogPolicyService.createHTTPAccessLogPolicy:input_type -> pb.CreateHTTPAccessLogPolicyRequest
	5,  // 6: pb.HTTPAccessLogPolicyService.updateHTTPAccessLogPolicy:input_type -> pb.UpdateHTTPAccessLogPolicyRequest
	6,  // 7: pb.HTTPAccessLogPolicyService.findHTTPAccessLogPolicy:input_type -> pb.FindHTTPAccessLogPolicyRequest
	8,  // 8: pb.HTTPAccessLogPolicyService.deleteHTTPAccessLogPolicy:input_type -> pb.DeleteHTTPAccessLogPolicyRequest
	9,  // 9: pb.HTTPAccessLogPolicyService.writeHTTPAccessLogPolicy:input_type -> pb.WriteHTTPAccessLogPolicyRequest
	12, // 10: pb.HTTPAccessLogPolicyService.countAllHTTPAccessLogPolicies:output_type -> pb.RPCCountResponse
	2,  // 11: pb.HTTPAccessLogPolicyService.listHTTPAccessLogPolicies:output_type -> pb.ListHTTPAccessLogPoliciesResponse
	4,  // 12: pb.HTTPAccessLogPolicyService.createHTTPAccessLogPolicy:output_type -> pb.CreateHTTPAccessLogPolicyResponse
	13, // 13: pb.HTTPAccessLogPolicyService.updateHTTPAccessLogPolicy:output_type -> pb.RPCSuccess
	7,  // 14: pb.HTTPAccessLogPolicyService.findHTTPAccessLogPolicy:output_type -> pb.FindHTTPAccessLogPolicyResponse
	13, // 15: pb.HTTPAccessLogPolicyService.deleteHTTPAccessLogPolicy:output_type -> pb.RPCSuccess
	13, // 16: pb.HTTPAccessLogPolicyService.writeHTTPAccessLogPolicy:output_type -> pb.RPCSuccess
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_http_access_log_policy_proto_init() }
func file_service_http_access_log_policy_proto_init() {
	if File_service_http_access_log_policy_proto != nil {
		return
	}
	file_models_model_http_access_log_policy_proto_init()
	file_models_rpc_messages_proto_init()
	file_models_model_http_access_log_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_http_access_log_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllHTTPAccessLogPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHTTPAccessLogPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHTTPAccessLogPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPAccessLogPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPAccessLogPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPAccessLogPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPAccessLogPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPAccessLogPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHTTPAccessLogPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_access_log_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteHTTPAccessLogPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_http_access_log_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_http_access_log_policy_proto_goTypes,
		DependencyIndexes: file_service_http_access_log_policy_proto_depIdxs,
		MessageInfos:      file_service_http_access_log_policy_proto_msgTypes,
	}.Build()
	File_service_http_access_log_policy_proto = out.File
	file_service_http_access_log_policy_proto_rawDesc = nil
	file_service_http_access_log_policy_proto_goTypes = nil
	file_service_http_access_log_policy_proto_depIdxs = nil
}
