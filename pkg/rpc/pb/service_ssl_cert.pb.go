// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_ssl_cert.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建证书
type CreateSSLCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOn        bool     `protobuf:"varint,1,opt,name=isOn,proto3" json:"isOn,omitempty"`
	UserId      int64    `protobuf:"varint,12,opt,name=userId,proto3" json:"userId,omitempty"` // 所属用户，仅管理员才能指定
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ServerName  string   `protobuf:"bytes,4,opt,name=serverName,proto3" json:"serverName,omitempty"`
	IsCA        bool     `protobuf:"varint,5,opt,name=isCA,proto3" json:"isCA,omitempty"`
	CertData    []byte   `protobuf:"bytes,6,opt,name=certData,proto3" json:"certData,omitempty"`
	KeyData     []byte   `protobuf:"bytes,7,opt,name=keyData,proto3" json:"keyData,omitempty"`
	TimeBeginAt int64    `protobuf:"varint,8,opt,name=timeBeginAt,proto3" json:"timeBeginAt,omitempty"`
	TimeEndAt   int64    `protobuf:"varint,9,opt,name=timeEndAt,proto3" json:"timeEndAt,omitempty"`
	DnsNames    []string `protobuf:"bytes,10,rep,name=dnsNames,proto3" json:"dnsNames,omitempty"`
	CommonNames []string `protobuf:"bytes,11,rep,name=commonNames,proto3" json:"commonNames,omitempty"`
}

func (x *CreateSSLCertRequest) Reset() {
	*x = CreateSSLCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSSLCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSLCertRequest) ProtoMessage() {}

func (x *CreateSSLCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSLCertRequest.ProtoReflect.Descriptor instead.
func (*CreateSSLCertRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSSLCertRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *CreateSSLCertRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateSSLCertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSSLCertRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSSLCertRequest) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *CreateSSLCertRequest) GetIsCA() bool {
	if x != nil {
		return x.IsCA
	}
	return false
}

func (x *CreateSSLCertRequest) GetCertData() []byte {
	if x != nil {
		return x.CertData
	}
	return nil
}

func (x *CreateSSLCertRequest) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *CreateSSLCertRequest) GetTimeBeginAt() int64 {
	if x != nil {
		return x.TimeBeginAt
	}
	return 0
}

func (x *CreateSSLCertRequest) GetTimeEndAt() int64 {
	if x != nil {
		return x.TimeEndAt
	}
	return 0
}

func (x *CreateSSLCertRequest) GetDnsNames() []string {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

func (x *CreateSSLCertRequest) GetCommonNames() []string {
	if x != nil {
		return x.CommonNames
	}
	return nil
}

type CreateSSLCertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *CreateSSLCertResponse) Reset() {
	*x = CreateSSLCertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSSLCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSLCertResponse) ProtoMessage() {}

func (x *CreateSSLCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSLCertResponse.ProtoReflect.Descriptor instead.
func (*CreateSSLCertResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSSLCertResponse) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

// 创建一组证书
type CreateSSLCertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SSLCerts []*CreateSSLCertsRequestCert `protobuf:"bytes,1,rep,name=SSLCerts,proto3" json:"SSLCerts,omitempty"` // 证书信息
	UserId   int64                        `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`    // 用户ID
}

func (x *CreateSSLCertsRequest) Reset() {
	*x = CreateSSLCertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSSLCertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSLCertsRequest) ProtoMessage() {}

func (x *CreateSSLCertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSLCertsRequest.ProtoReflect.Descriptor instead.
func (*CreateSSLCertsRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSSLCertsRequest) GetSSLCerts() []*CreateSSLCertsRequestCert {
	if x != nil {
		return x.SSLCerts
	}
	return nil
}

func (x *CreateSSLCertsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CreateSSLCertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertIds []int64 `protobuf:"varint,1,rep,packed,name=sslCertIds,proto3" json:"sslCertIds,omitempty"`
}

func (x *CreateSSLCertsResponse) Reset() {
	*x = CreateSSLCertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSSLCertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSLCertsResponse) ProtoMessage() {}

func (x *CreateSSLCertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSLCertsResponse.ProtoReflect.Descriptor instead.
func (*CreateSSLCertsResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSSLCertsResponse) GetSslCertIds() []int64 {
	if x != nil {
		return x.SslCertIds
	}
	return nil
}

// 修改证书
type UpdateSSLCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId   int64    `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
	IsOn        bool     `protobuf:"varint,2,opt,name=isOn,proto3" json:"isOn,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ServerName  string   `protobuf:"bytes,5,opt,name=serverName,proto3" json:"serverName,omitempty"`
	IsCA        bool     `protobuf:"varint,6,opt,name=isCA,proto3" json:"isCA,omitempty"`
	CertData    []byte   `protobuf:"bytes,7,opt,name=certData,proto3" json:"certData,omitempty"`
	KeyData     []byte   `protobuf:"bytes,8,opt,name=keyData,proto3" json:"keyData,omitempty"`
	TimeBeginAt int64    `protobuf:"varint,9,opt,name=timeBeginAt,proto3" json:"timeBeginAt,omitempty"`
	TimeEndAt   int64    `protobuf:"varint,10,opt,name=timeEndAt,proto3" json:"timeEndAt,omitempty"`
	DnsNames    []string `protobuf:"bytes,11,rep,name=dnsNames,proto3" json:"dnsNames,omitempty"`
	CommonNames []string `protobuf:"bytes,12,rep,name=commonNames,proto3" json:"commonNames,omitempty"`
}

func (x *UpdateSSLCertRequest) Reset() {
	*x = UpdateSSLCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSSLCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSLCertRequest) ProtoMessage() {}

func (x *UpdateSSLCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSLCertRequest.ProtoReflect.Descriptor instead.
func (*UpdateSSLCertRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSSLCertRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

func (x *UpdateSSLCertRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateSSLCertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSSLCertRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSSLCertRequest) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *UpdateSSLCertRequest) GetIsCA() bool {
	if x != nil {
		return x.IsCA
	}
	return false
}

func (x *UpdateSSLCertRequest) GetCertData() []byte {
	if x != nil {
		return x.CertData
	}
	return nil
}

func (x *UpdateSSLCertRequest) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *UpdateSSLCertRequest) GetTimeBeginAt() int64 {
	if x != nil {
		return x.TimeBeginAt
	}
	return 0
}

func (x *UpdateSSLCertRequest) GetTimeEndAt() int64 {
	if x != nil {
		return x.TimeEndAt
	}
	return 0
}

func (x *UpdateSSLCertRequest) GetDnsNames() []string {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

func (x *UpdateSSLCertRequest) GetCommonNames() []string {
	if x != nil {
		return x.CommonNames
	}
	return nil
}

// 查找证书配置
type FindEnabledSSLCertConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *FindEnabledSSLCertConfigRequest) Reset() {
	*x = FindEnabledSSLCertConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledSSLCertConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledSSLCertConfigRequest) ProtoMessage() {}

func (x *FindEnabledSSLCertConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledSSLCertConfigRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledSSLCertConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{5}
}

func (x *FindEnabledSSLCertConfigRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

type FindEnabledSSLCertConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertJSON []byte `protobuf:"bytes,1,opt,name=sslCertJSON,proto3" json:"sslCertJSON,omitempty"`
}

func (x *FindEnabledSSLCertConfigResponse) Reset() {
	*x = FindEnabledSSLCertConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledSSLCertConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledSSLCertConfigResponse) ProtoMessage() {}

func (x *FindEnabledSSLCertConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledSSLCertConfigResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledSSLCertConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{6}
}

func (x *FindEnabledSSLCertConfigResponse) GetSslCertJSON() []byte {
	if x != nil {
		return x.SslCertJSON
	}
	return nil
}

// 删除证书
type DeleteSSLCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *DeleteSSLCertRequest) Reset() {
	*x = DeleteSSLCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSSLCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSSLCertRequest) ProtoMessage() {}

func (x *DeleteSSLCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSSLCertRequest.ProtoReflect.Descriptor instead.
func (*DeleteSSLCertRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteSSLCertRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

// 计算匹配的证书数量
type CountSSLCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCA         bool     `protobuf:"varint,1,opt,name=isCA,proto3" json:"isCA,omitempty"`                 // 可选项，是否为CA证书
	IsAvailable  bool     `protobuf:"varint,2,opt,name=isAvailable,proto3" json:"isAvailable,omitempty"`   // 可选项，是否可用（在有效期内）
	IsExpired    bool     `protobuf:"varint,3,opt,name=isExpired,proto3" json:"isExpired,omitempty"`       // 可选项，是否已过期
	ExpiringDays int32    `protobuf:"varint,4,opt,name=expiringDays,proto3" json:"expiringDays,omitempty"` // 可选项，离过期日的天数
	Keyword      string   `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`            // 可选项，关键词
	UserId       int64    `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`             // 可选项，用户ID，不填则表示读取管理员上传的证书
	Domains      []string `protobuf:"bytes,7,rep,name=domains,proto3" json:"domains,omitempty"`            // 可选项，搜索使用的域名列表
	UserOnly     bool     `protobuf:"varint,8,opt,name=userOnly,proto3" json:"userOnly,omitempty"`         // 可选项，只列出用户上传的证书
}

func (x *CountSSLCertRequest) Reset() {
	*x = CountSSLCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSSLCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSSLCertRequest) ProtoMessage() {}

func (x *CountSSLCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSSLCertRequest.ProtoReflect.Descriptor instead.
func (*CountSSLCertRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{8}
}

func (x *CountSSLCertRequest) GetIsCA() bool {
	if x != nil {
		return x.IsCA
	}
	return false
}

func (x *CountSSLCertRequest) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *CountSSLCertRequest) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *CountSSLCertRequest) GetExpiringDays() int32 {
	if x != nil {
		return x.ExpiringDays
	}
	return 0
}

func (x *CountSSLCertRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CountSSLCertRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CountSSLCertRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *CountSSLCertRequest) GetUserOnly() bool {
	if x != nil {
		return x.UserOnly
	}
	return false
}

// 列出单页匹配的证书
type ListSSLCertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCA         bool     `protobuf:"varint,1,opt,name=isCA,proto3" json:"isCA,omitempty"`                 // 可选项，是否为CA证书
	IsAvailable  bool     `protobuf:"varint,2,opt,name=isAvailable,proto3" json:"isAvailable,omitempty"`   // 可选项，是否可用（在有效期内）
	IsExpired    bool     `protobuf:"varint,3,opt,name=isExpired,proto3" json:"isExpired,omitempty"`       //可选项， 是否已过期
	ExpiringDays int32    `protobuf:"varint,4,opt,name=expiringDays,proto3" json:"expiringDays,omitempty"` // 可选项，离过期日的天数
	Keyword      string   `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`            // 可选项，关键词
	UserId       int64    `protobuf:"varint,8,opt,name=userId,proto3" json:"userId,omitempty"`             // 可选项，用户ID，不填则表示读取管理员上传的证书
	Domains      []string `protobuf:"bytes,9,rep,name=domains,proto3" json:"domains,omitempty"`            // 可选项，搜索使用的域名列表
	Offset       int64    `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`             // 读取位置
	Size         int64    `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`                 // 读取长度，不能小于0
	UserOnly     bool     `protobuf:"varint,10,opt,name=userOnly,proto3" json:"userOnly,omitempty"`        // 可选项，只列出用户上传的证书
}

func (x *ListSSLCertsRequest) Reset() {
	*x = ListSSLCertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSSLCertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSSLCertsRequest) ProtoMessage() {}

func (x *ListSSLCertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSSLCertsRequest.ProtoReflect.Descriptor instead.
func (*ListSSLCertsRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{9}
}

func (x *ListSSLCertsRequest) GetIsCA() bool {
	if x != nil {
		return x.IsCA
	}
	return false
}

func (x *ListSSLCertsRequest) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *ListSSLCertsRequest) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *ListSSLCertsRequest) GetExpiringDays() int32 {
	if x != nil {
		return x.ExpiringDays
	}
	return 0
}

func (x *ListSSLCertsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListSSLCertsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListSSLCertsRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *ListSSLCertsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSSLCertsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListSSLCertsRequest) GetUserOnly() bool {
	if x != nil {
		return x.UserOnly
	}
	return false
}

type ListSSLCertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertsJSON []byte `protobuf:"bytes,1,opt,name=sslCertsJSON,proto3" json:"sslCertsJSON,omitempty"`
}

func (x *ListSSLCertsResponse) Reset() {
	*x = ListSSLCertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSSLCertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSSLCertsResponse) ProtoMessage() {}

func (x *ListSSLCertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSSLCertsResponse.ProtoReflect.Descriptor instead.
func (*ListSSLCertsResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{10}
}

func (x *ListSSLCertsResponse) GetSslCertsJSON() []byte {
	if x != nil {
		return x.SslCertsJSON
	}
	return nil
}

// 计算有OCSP错误的证书数量
type CountAllSSLCertsWithOCSPErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *CountAllSSLCertsWithOCSPErrorRequest) Reset() {
	*x = CountAllSSLCertsWithOCSPErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllSSLCertsWithOCSPErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllSSLCertsWithOCSPErrorRequest) ProtoMessage() {}

func (x *CountAllSSLCertsWithOCSPErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllSSLCertsWithOCSPErrorRequest.ProtoReflect.Descriptor instead.
func (*CountAllSSLCertsWithOCSPErrorRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{11}
}

func (x *CountAllSSLCertsWithOCSPErrorRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

// 列出有OCSP错误的证书
type ListSSLCertsWithOCSPErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Offset  int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size    int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListSSLCertsWithOCSPErrorRequest) Reset() {
	*x = ListSSLCertsWithOCSPErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSSLCertsWithOCSPErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSSLCertsWithOCSPErrorRequest) ProtoMessage() {}

func (x *ListSSLCertsWithOCSPErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSSLCertsWithOCSPErrorRequest.ProtoReflect.Descriptor instead.
func (*ListSSLCertsWithOCSPErrorRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{12}
}

func (x *ListSSLCertsWithOCSPErrorRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListSSLCertsWithOCSPErrorRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSSLCertsWithOCSPErrorRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListSSLCertsWithOCSPErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCerts []*SSLCert `protobuf:"bytes,1,rep,name=sslCerts,proto3" json:"sslCerts,omitempty"`
}

func (x *ListSSLCertsWithOCSPErrorResponse) Reset() {
	*x = ListSSLCertsWithOCSPErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSSLCertsWithOCSPErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSSLCertsWithOCSPErrorResponse) ProtoMessage() {}

func (x *ListSSLCertsWithOCSPErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSSLCertsWithOCSPErrorResponse.ProtoReflect.Descriptor instead.
func (*ListSSLCertsWithOCSPErrorResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{13}
}

func (x *ListSSLCertsWithOCSPErrorResponse) GetSslCerts() []*SSLCert {
	if x != nil {
		return x.SslCerts
	}
	return nil
}

// 忽略一组OCSP证书错误
type IgnoreSSLCertsWithOCSPErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertIds []int64 `protobuf:"varint,1,rep,packed,name=sslCertIds,proto3" json:"sslCertIds,omitempty"`
}

func (x *IgnoreSSLCertsWithOCSPErrorRequest) Reset() {
	*x = IgnoreSSLCertsWithOCSPErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IgnoreSSLCertsWithOCSPErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgnoreSSLCertsWithOCSPErrorRequest) ProtoMessage() {}

func (x *IgnoreSSLCertsWithOCSPErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgnoreSSLCertsWithOCSPErrorRequest.ProtoReflect.Descriptor instead.
func (*IgnoreSSLCertsWithOCSPErrorRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{14}
}

func (x *IgnoreSSLCertsWithOCSPErrorRequest) GetSslCertIds() []int64 {
	if x != nil {
		return x.SslCertIds
	}
	return nil
}

// 重置一组证书OCSP错误状态
type ResetSSLCertsWithOCSPErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertIds []int64 `protobuf:"varint,1,rep,packed,name=sslCertIds,proto3" json:"sslCertIds,omitempty"`
}

func (x *ResetSSLCertsWithOCSPErrorRequest) Reset() {
	*x = ResetSSLCertsWithOCSPErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSSLCertsWithOCSPErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSSLCertsWithOCSPErrorRequest) ProtoMessage() {}

func (x *ResetSSLCertsWithOCSPErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSSLCertsWithOCSPErrorRequest.ProtoReflect.Descriptor instead.
func (*ResetSSLCertsWithOCSPErrorRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{15}
}

func (x *ResetSSLCertsWithOCSPErrorRequest) GetSslCertIds() []int64 {
	if x != nil {
		return x.SslCertIds
	}
	return nil
}

// 重置所有证书OCSP错误状态
type ResetAllSSLCertsWithOCSPErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetAllSSLCertsWithOCSPErrorRequest) Reset() {
	*x = ResetAllSSLCertsWithOCSPErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetAllSSLCertsWithOCSPErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetAllSSLCertsWithOCSPErrorRequest) ProtoMessage() {}

func (x *ResetAllSSLCertsWithOCSPErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetAllSSLCertsWithOCSPErrorRequest.ProtoReflect.Descriptor instead.
func (*ResetAllSSLCertsWithOCSPErrorRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{16}
}

// 读取证书的OCSP
type ListUpdatedSSLCertOCSPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Size    int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListUpdatedSSLCertOCSPRequest) Reset() {
	*x = ListUpdatedSSLCertOCSPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUpdatedSSLCertOCSPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUpdatedSSLCertOCSPRequest) ProtoMessage() {}

func (x *ListUpdatedSSLCertOCSPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUpdatedSSLCertOCSPRequest.ProtoReflect.Descriptor instead.
func (*ListUpdatedSSLCertOCSPRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{17}
}

func (x *ListUpdatedSSLCertOCSPRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListUpdatedSSLCertOCSPRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListUpdatedSSLCertOCSPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertOCSP []*ListUpdatedSSLCertOCSPResponse_SSLCertOCSP `protobuf:"bytes,1,rep,name=sslCertOCSP,proto3" json:"sslCertOCSP,omitempty"`
}

func (x *ListUpdatedSSLCertOCSPResponse) Reset() {
	*x = ListUpdatedSSLCertOCSPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUpdatedSSLCertOCSPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUpdatedSSLCertOCSPResponse) ProtoMessage() {}

func (x *ListUpdatedSSLCertOCSPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUpdatedSSLCertOCSPResponse.ProtoReflect.Descriptor instead.
func (*ListUpdatedSSLCertOCSPResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{18}
}

func (x *ListUpdatedSSLCertOCSPResponse) GetSslCertOCSP() []*ListUpdatedSSLCertOCSPResponse_SSLCertOCSP {
	if x != nil {
		return x.SslCertOCSP
	}
	return nil
}

// 查找证书所属用户
type FindSSLCertUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"` // 证书ID
}

func (x *FindSSLCertUserRequest) Reset() {
	*x = FindSSLCertUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSSLCertUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSSLCertUserRequest) ProtoMessage() {}

func (x *FindSSLCertUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSSLCertUserRequest.ProtoReflect.Descriptor instead.
func (*FindSSLCertUserRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{19}
}

func (x *FindSSLCertUserRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

type FindSSLCertUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"` // 用户信息，只包含几个基本的信息
}

func (x *FindSSLCertUserResponse) Reset() {
	*x = FindSSLCertUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSSLCertUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSSLCertUserResponse) ProtoMessage() {}

func (x *FindSSLCertUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSSLCertUserResponse.ProtoReflect.Descriptor instead.
func (*FindSSLCertUserResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{20}
}

func (x *FindSSLCertUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type CreateSSLCertsRequestCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOn        bool     `protobuf:"varint,1,opt,name=isOn,proto3" json:"isOn,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ServerName  string   `protobuf:"bytes,4,opt,name=serverName,proto3" json:"serverName,omitempty"`
	IsCA        bool     `protobuf:"varint,5,opt,name=isCA,proto3" json:"isCA,omitempty"`
	CertData    []byte   `protobuf:"bytes,6,opt,name=certData,proto3" json:"certData,omitempty"`
	KeyData     []byte   `protobuf:"bytes,7,opt,name=keyData,proto3" json:"keyData,omitempty"`
	TimeBeginAt int64    `protobuf:"varint,8,opt,name=timeBeginAt,proto3" json:"timeBeginAt,omitempty"`
	TimeEndAt   int64    `protobuf:"varint,9,opt,name=timeEndAt,proto3" json:"timeEndAt,omitempty"`
	DnsNames    []string `protobuf:"bytes,10,rep,name=dnsNames,proto3" json:"dnsNames,omitempty"`
	CommonNames []string `protobuf:"bytes,11,rep,name=commonNames,proto3" json:"commonNames,omitempty"`
}

func (x *CreateSSLCertsRequestCert) Reset() {
	*x = CreateSSLCertsRequestCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSSLCertsRequestCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSLCertsRequestCert) ProtoMessage() {}

func (x *CreateSSLCertsRequestCert) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSLCertsRequestCert.ProtoReflect.Descriptor instead.
func (*CreateSSLCertsRequestCert) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CreateSSLCertsRequestCert) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *CreateSSLCertsRequestCert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSSLCertsRequestCert) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSSLCertsRequestCert) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *CreateSSLCertsRequestCert) GetIsCA() bool {
	if x != nil {
		return x.IsCA
	}
	return false
}

func (x *CreateSSLCertsRequestCert) GetCertData() []byte {
	if x != nil {
		return x.CertData
	}
	return nil
}

func (x *CreateSSLCertsRequestCert) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *CreateSSLCertsRequestCert) GetTimeBeginAt() int64 {
	if x != nil {
		return x.TimeBeginAt
	}
	return 0
}

func (x *CreateSSLCertsRequestCert) GetTimeEndAt() int64 {
	if x != nil {
		return x.TimeEndAt
	}
	return 0
}

func (x *CreateSSLCertsRequestCert) GetDnsNames() []string {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

func (x *CreateSSLCertsRequestCert) GetCommonNames() []string {
	if x != nil {
		return x.CommonNames
	}
	return nil
}

type ListUpdatedSSLCertOCSPResponse_SSLCertOCSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64  `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Version   int64  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	ExpiresAt int64  `protobuf:"varint,4,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
}

func (x *ListUpdatedSSLCertOCSPResponse_SSLCertOCSP) Reset() {
	*x = ListUpdatedSSLCertOCSPResponse_SSLCertOCSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUpdatedSSLCertOCSPResponse_SSLCertOCSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUpdatedSSLCertOCSPResponse_SSLCertOCSP) ProtoMessage() {}

func (x *ListUpdatedSSLCertOCSPResponse_SSLCertOCSP) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUpdatedSSLCertOCSPResponse_SSLCertOCSP.ProtoReflect.Descriptor instead.
func (*ListUpdatedSSLCertOCSPResponse_SSLCertOCSP) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ListUpdatedSSLCertOCSPResponse_SSLCertOCSP) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

func (x *ListUpdatedSSLCertOCSPResponse_SSLCertOCSP) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListUpdatedSSLCertOCSPResponse_SSLCertOCSP) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListUpdatedSSLCertOCSPResponse_SSLCertOCSP) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

var File_service_ssl_cert_proto protoreflect.FileDescriptor

var file_service_ssl_cert_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x02,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x43, 0x41,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43, 0x41, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x35, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c,
	0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x08, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x52, 0x08, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xb8, 0x02, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x43, 0x41,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43, 0x41, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x38, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x43, 0x41, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43, 0x41, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65,
	0x72, 0x74, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73,
	0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x34, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64,
	0x22, 0xf5, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x43, 0x41,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43, 0x41, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xa1, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x43, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x69, 0x73, 0x43, 0x41, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x3a, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x40, 0x0a, 0x24, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x68, 0x0a, 0x20, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43,
	0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0x4c, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x73, 0x6c,
	0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x08, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x22, 0x44, 0x0a, 0x22, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x53, 0x4c, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53,
	0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x22, 0x26, 0x0a,
	0x24, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x43, 0x53, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x43, 0x53, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x73, 0x6c, 0x43, 0x65,
	0x72, 0x74, 0x4f, 0x43, 0x53, 0x50, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x4c,
	0x43, 0x65, 0x72, 0x74, 0x4f, 0x43, 0x53, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x43, 0x53, 0x50, 0x52, 0x0b, 0x73, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x43, 0x53, 0x50, 0x1a, 0x77, 0x0a, 0x0b, 0x53, 0x53, 0x4c,
	0x43, 0x65, 0x72, 0x74, 0x4f, 0x43, 0x53, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c,
	0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x74, 0x22, 0x36, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x17, 0x46, 0x69,
	0x6e, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x32, 0xfe, 0x08, 0x0a, 0x0e, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x19,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x39, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x4c,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x66,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x53, 0x4c,
	0x43, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65,
	0x72, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x53,
	0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53,
	0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x53,
	0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c,
	0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x1b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x26, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65,
	0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x1d,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65,
	0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x43, 0x53,
	0x50, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x43, 0x53, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x43, 0x53, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x64,
	0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_ssl_cert_proto_rawDescOnce sync.Once
	file_service_ssl_cert_proto_rawDescData = file_service_ssl_cert_proto_rawDesc
)

func file_service_ssl_cert_proto_rawDescGZIP() []byte {
	file_service_ssl_cert_proto_rawDescOnce.Do(func() {
		file_service_ssl_cert_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ssl_cert_proto_rawDescData)
	})
	return file_service_ssl_cert_proto_rawDescData
}

var file_service_ssl_cert_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_service_ssl_cert_proto_goTypes = []interface{}{
	(*CreateSSLCertRequest)(nil),                       // 0: pb.CreateSSLCertRequest
	(*CreateSSLCertResponse)(nil),                      // 1: pb.CreateSSLCertResponse
	(*CreateSSLCertsRequest)(nil),                      // 2: pb.CreateSSLCertsRequest
	(*CreateSSLCertsResponse)(nil),                     // 3: pb.CreateSSLCertsResponse
	(*UpdateSSLCertRequest)(nil),                       // 4: pb.UpdateSSLCertRequest
	(*FindEnabledSSLCertConfigRequest)(nil),            // 5: pb.FindEnabledSSLCertConfigRequest
	(*FindEnabledSSLCertConfigResponse)(nil),           // 6: pb.FindEnabledSSLCertConfigResponse
	(*DeleteSSLCertRequest)(nil),                       // 7: pb.DeleteSSLCertRequest
	(*CountSSLCertRequest)(nil),                        // 8: pb.CountSSLCertRequest
	(*ListSSLCertsRequest)(nil),                        // 9: pb.ListSSLCertsRequest
	(*ListSSLCertsResponse)(nil),                       // 10: pb.ListSSLCertsResponse
	(*CountAllSSLCertsWithOCSPErrorRequest)(nil),       // 11: pb.CountAllSSLCertsWithOCSPErrorRequest
	(*ListSSLCertsWithOCSPErrorRequest)(nil),           // 12: pb.ListSSLCertsWithOCSPErrorRequest
	(*ListSSLCertsWithOCSPErrorResponse)(nil),          // 13: pb.ListSSLCertsWithOCSPErrorResponse
	(*IgnoreSSLCertsWithOCSPErrorRequest)(nil),         // 14: pb.IgnoreSSLCertsWithOCSPErrorRequest
	(*ResetSSLCertsWithOCSPErrorRequest)(nil),          // 15: pb.ResetSSLCertsWithOCSPErrorRequest
	(*ResetAllSSLCertsWithOCSPErrorRequest)(nil),       // 16: pb.ResetAllSSLCertsWithOCSPErrorRequest
	(*ListUpdatedSSLCertOCSPRequest)(nil),              // 17: pb.ListUpdatedSSLCertOCSPRequest
	(*ListUpdatedSSLCertOCSPResponse)(nil),             // 18: pb.ListUpdatedSSLCertOCSPResponse
	(*FindSSLCertUserRequest)(nil),                     // 19: pb.FindSSLCertUserRequest
	(*FindSSLCertUserResponse)(nil),                    // 20: pb.FindSSLCertUserResponse
	(*CreateSSLCertsRequestCert)(nil),                  // 21: pb.CreateSSLCertsRequest.cert
	(*ListUpdatedSSLCertOCSPResponse_SSLCertOCSP)(nil), // 22: pb.ListUpdatedSSLCertOCSPResponse.SSLCertOCSP
	(*SSLCert)(nil),                                    // 23: pb.SSLCert
	(*User)(nil),                                       // 24: pb.User
	(*RPCSuccess)(nil),                                 // 25: pb.RPCSuccess
	(*RPCCountResponse)(nil),                           // 26: pb.RPCCountResponse
}
var file_service_ssl_cert_proto_depIdxs = []int32{
	21, // 0: pb.CreateSSLCertsRequest.SSLCerts:type_name -> pb.CreateSSLCertsRequest.cert
	23, // 1: pb.ListSSLCertsWithOCSPErrorResponse.sslCerts:type_name -> pb.SSLCert
	22, // 2: pb.ListUpdatedSSLCertOCSPResponse.sslCertOCSP:type_name -> pb.ListUpdatedSSLCertOCSPResponse.SSLCertOCSP
	24, // 3: pb.FindSSLCertUserResponse.user:type_name -> pb.User
	0,  // 4: pb.SSLCertService.createSSLCert:input_type -> pb.CreateSSLCertRequest
	2,  // 5: pb.SSLCertService.createSSLCerts:input_type -> pb.CreateSSLCertsRequest
	4,  // 6: pb.SSLCertService.updateSSLCert:input_type -> pb.UpdateSSLCertRequest
	7,  // 7: pb.SSLCertService.deleteSSLCert:input_type -> pb.DeleteSSLCertRequest
	5,  // 8: pb.SSLCertService.findEnabledSSLCertConfig:input_type -> pb.FindEnabledSSLCertConfigRequest
	8,  // 9: pb.SSLCertService.countSSLCerts:input_type -> pb.CountSSLCertRequest
	9,  // 10: pb.SSLCertService.listSSLCerts:input_type -> pb.ListSSLCertsRequest
	11, // 11: pb.SSLCertService.countAllSSLCertsWithOCSPError:input_type -> pb.CountAllSSLCertsWithOCSPErrorRequest
	12, // 12: pb.SSLCertService.listSSLCertsWithOCSPError:input_type -> pb.ListSSLCertsWithOCSPErrorRequest
	14, // 13: pb.SSLCertService.ignoreSSLCertsWithOCSPError:input_type -> pb.IgnoreSSLCertsWithOCSPErrorRequest
	15, // 14: pb.SSLCertService.resetSSLCertsWithOCSPError:input_type -> pb.ResetSSLCertsWithOCSPErrorRequest
	16, // 15: pb.SSLCertService.resetAllSSLCertsWithOCSPError:input_type -> pb.ResetAllSSLCertsWithOCSPErrorRequest
	17, // 16: pb.SSLCertService.listUpdatedSSLCertOCSP:input_type -> pb.ListUpdatedSSLCertOCSPRequest
	19, // 17: pb.SSLCertService.findSSLCertUser:input_type -> pb.FindSSLCertUserRequest
	1,  // 18: pb.SSLCertService.createSSLCert:output_type -> pb.CreateSSLCertResponse
	3,  // 19: pb.SSLCertService.createSSLCerts:output_type -> pb.CreateSSLCertsResponse
	25, // 20: pb.SSLCertService.updateSSLCert:output_type -> pb.RPCSuccess
	25, // 21: pb.SSLCertService.deleteSSLCert:output_type -> pb.RPCSuccess
	6,  // 22: pb.SSLCertService.findEnabledSSLCertConfig:output_type -> pb.FindEnabledSSLCertConfigResponse
	26, // 23: pb.SSLCertService.countSSLCerts:output_type -> pb.RPCCountResponse
	10, // 24: pb.SSLCertService.listSSLCerts:output_type -> pb.ListSSLCertsResponse
	26, // 25: pb.SSLCertService.countAllSSLCertsWithOCSPError:output_type -> pb.RPCCountResponse
	13, // 26: pb.SSLCertService.listSSLCertsWithOCSPError:output_type -> pb.ListSSLCertsWithOCSPErrorResponse
	25, // 27: pb.SSLCertService.ignoreSSLCertsWithOCSPError:output_type -> pb.RPCSuccess
	25, // 28: pb.SSLCertService.resetSSLCertsWithOCSPError:output_type -> pb.RPCSuccess
	25, // 29: pb.SSLCertService.resetAllSSLCertsWithOCSPError:output_type -> pb.RPCSuccess
	18, // 30: pb.SSLCertService.listUpdatedSSLCertOCSP:output_type -> pb.ListUpdatedSSLCertOCSPResponse
	20, // 31: pb.SSLCertService.findSSLCertUser:output_type -> pb.FindSSLCertUserResponse
	18, // [18:32] is the sub-list for method output_type
	4,  // [4:18] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_ssl_cert_proto_init() }
func file_service_ssl_cert_proto_init() {
	if File_service_ssl_cert_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_ssl_cert_proto_init()
	file_models_model_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ssl_cert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSSLCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSSLCertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSSLCertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSSLCertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSSLCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledSSLCertConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledSSLCertConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSSLCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSSLCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSSLCertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSSLCertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllSSLCertsWithOCSPErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSSLCertsWithOCSPErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSSLCertsWithOCSPErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IgnoreSSLCertsWithOCSPErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSSLCertsWithOCSPErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetAllSSLCertsWithOCSPErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUpdatedSSLCertOCSPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUpdatedSSLCertOCSPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSSLCertUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSSLCertUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSSLCertsRequestCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUpdatedSSLCertOCSPResponse_SSLCertOCSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ssl_cert_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ssl_cert_proto_goTypes,
		DependencyIndexes: file_service_ssl_cert_proto_depIdxs,
		MessageInfos:      file_service_ssl_cert_proto_msgTypes,
	}.Build()
	File_service_ssl_cert_proto = out.File
	file_service_ssl_cert_proto_rawDesc = nil
	file_service_ssl_cert_proto_goTypes = nil
	file_service_ssl_cert_proto_depIdxs = nil
}
