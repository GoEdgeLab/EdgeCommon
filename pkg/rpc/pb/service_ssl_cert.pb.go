// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_ssl_cert.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建Cert
type CreateSSLCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOn        bool     `protobuf:"varint,1,opt,name=isOn,proto3" json:"isOn,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ServerName  string   `protobuf:"bytes,4,opt,name=serverName,proto3" json:"serverName,omitempty"`
	IsCA        bool     `protobuf:"varint,5,opt,name=isCA,proto3" json:"isCA,omitempty"`
	CertData    []byte   `protobuf:"bytes,6,opt,name=certData,proto3" json:"certData,omitempty"`
	KeyData     []byte   `protobuf:"bytes,7,opt,name=keyData,proto3" json:"keyData,omitempty"`
	TimeBeginAt int64    `protobuf:"varint,8,opt,name=timeBeginAt,proto3" json:"timeBeginAt,omitempty"`
	TimeEndAt   int64    `protobuf:"varint,9,opt,name=timeEndAt,proto3" json:"timeEndAt,omitempty"`
	DnsNames    []string `protobuf:"bytes,10,rep,name=dnsNames,proto3" json:"dnsNames,omitempty"`
	CommonNames []string `protobuf:"bytes,11,rep,name=commonNames,proto3" json:"commonNames,omitempty"`
}

func (x *CreateSSLCertRequest) Reset() {
	*x = CreateSSLCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSSLCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSLCertRequest) ProtoMessage() {}

func (x *CreateSSLCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSLCertRequest.ProtoReflect.Descriptor instead.
func (*CreateSSLCertRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSSLCertRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *CreateSSLCertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSSLCertRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSSLCertRequest) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *CreateSSLCertRequest) GetIsCA() bool {
	if x != nil {
		return x.IsCA
	}
	return false
}

func (x *CreateSSLCertRequest) GetCertData() []byte {
	if x != nil {
		return x.CertData
	}
	return nil
}

func (x *CreateSSLCertRequest) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *CreateSSLCertRequest) GetTimeBeginAt() int64 {
	if x != nil {
		return x.TimeBeginAt
	}
	return 0
}

func (x *CreateSSLCertRequest) GetTimeEndAt() int64 {
	if x != nil {
		return x.TimeEndAt
	}
	return 0
}

func (x *CreateSSLCertRequest) GetDnsNames() []string {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

func (x *CreateSSLCertRequest) GetCommonNames() []string {
	if x != nil {
		return x.CommonNames
	}
	return nil
}

type CreateSSLCertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *CreateSSLCertResponse) Reset() {
	*x = CreateSSLCertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSSLCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSLCertResponse) ProtoMessage() {}

func (x *CreateSSLCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSLCertResponse.ProtoReflect.Descriptor instead.
func (*CreateSSLCertResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSSLCertResponse) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

// 修改Cert
type UpdateSSLCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId   int64    `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
	IsOn        bool     `protobuf:"varint,2,opt,name=isOn,proto3" json:"isOn,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ServerName  string   `protobuf:"bytes,5,opt,name=serverName,proto3" json:"serverName,omitempty"`
	IsCA        bool     `protobuf:"varint,6,opt,name=isCA,proto3" json:"isCA,omitempty"`
	CertData    []byte   `protobuf:"bytes,7,opt,name=certData,proto3" json:"certData,omitempty"`
	KeyData     []byte   `protobuf:"bytes,8,opt,name=keyData,proto3" json:"keyData,omitempty"`
	TimeBeginAt int64    `protobuf:"varint,9,opt,name=timeBeginAt,proto3" json:"timeBeginAt,omitempty"`
	TimeEndAt   int64    `protobuf:"varint,10,opt,name=timeEndAt,proto3" json:"timeEndAt,omitempty"`
	DnsNames    []string `protobuf:"bytes,11,rep,name=dnsNames,proto3" json:"dnsNames,omitempty"`
	CommonNames []string `protobuf:"bytes,12,rep,name=commonNames,proto3" json:"commonNames,omitempty"`
}

func (x *UpdateSSLCertRequest) Reset() {
	*x = UpdateSSLCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSSLCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSLCertRequest) ProtoMessage() {}

func (x *UpdateSSLCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSLCertRequest.ProtoReflect.Descriptor instead.
func (*UpdateSSLCertRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSSLCertRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

func (x *UpdateSSLCertRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateSSLCertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSSLCertRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSSLCertRequest) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *UpdateSSLCertRequest) GetIsCA() bool {
	if x != nil {
		return x.IsCA
	}
	return false
}

func (x *UpdateSSLCertRequest) GetCertData() []byte {
	if x != nil {
		return x.CertData
	}
	return nil
}

func (x *UpdateSSLCertRequest) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *UpdateSSLCertRequest) GetTimeBeginAt() int64 {
	if x != nil {
		return x.TimeBeginAt
	}
	return 0
}

func (x *UpdateSSLCertRequest) GetTimeEndAt() int64 {
	if x != nil {
		return x.TimeEndAt
	}
	return 0
}

func (x *UpdateSSLCertRequest) GetDnsNames() []string {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

func (x *UpdateSSLCertRequest) GetCommonNames() []string {
	if x != nil {
		return x.CommonNames
	}
	return nil
}

// 查找证书配置
type FindEnabledSSLCertConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *FindEnabledSSLCertConfigRequest) Reset() {
	*x = FindEnabledSSLCertConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledSSLCertConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledSSLCertConfigRequest) ProtoMessage() {}

func (x *FindEnabledSSLCertConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledSSLCertConfigRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledSSLCertConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledSSLCertConfigRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

type FindEnabledSSLCertConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertJSON []byte `protobuf:"bytes,1,opt,name=sslCertJSON,proto3" json:"sslCertJSON,omitempty"`
}

func (x *FindEnabledSSLCertConfigResponse) Reset() {
	*x = FindEnabledSSLCertConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledSSLCertConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledSSLCertConfigResponse) ProtoMessage() {}

func (x *FindEnabledSSLCertConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledSSLCertConfigResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledSSLCertConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{4}
}

func (x *FindEnabledSSLCertConfigResponse) GetSslCertJSON() []byte {
	if x != nil {
		return x.SslCertJSON
	}
	return nil
}

// 删除证书
type DeleteSSLCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *DeleteSSLCertRequest) Reset() {
	*x = DeleteSSLCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSSLCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSSLCertRequest) ProtoMessage() {}

func (x *DeleteSSLCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSSLCertRequest.ProtoReflect.Descriptor instead.
func (*DeleteSSLCertRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSSLCertRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

// 计算匹配的Cert数量
type CountSSLCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCA         bool   `protobuf:"varint,1,opt,name=isCA,proto3" json:"isCA,omitempty"`
	IsAvailable  bool   `protobuf:"varint,2,opt,name=isAvailable,proto3" json:"isAvailable,omitempty"`
	IsExpired    bool   `protobuf:"varint,3,opt,name=isExpired,proto3" json:"isExpired,omitempty"`
	ExpiringDays int32  `protobuf:"varint,4,opt,name=expiringDays,proto3" json:"expiringDays,omitempty"`
	Keyword      string `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`
	UserId       int64  `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CountSSLCertRequest) Reset() {
	*x = CountSSLCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSSLCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSSLCertRequest) ProtoMessage() {}

func (x *CountSSLCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSSLCertRequest.ProtoReflect.Descriptor instead.
func (*CountSSLCertRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{6}
}

func (x *CountSSLCertRequest) GetIsCA() bool {
	if x != nil {
		return x.IsCA
	}
	return false
}

func (x *CountSSLCertRequest) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *CountSSLCertRequest) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *CountSSLCertRequest) GetExpiringDays() int32 {
	if x != nil {
		return x.ExpiringDays
	}
	return 0
}

func (x *CountSSLCertRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CountSSLCertRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 列出单页匹配的Cert
type ListSSLCertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCA         bool   `protobuf:"varint,1,opt,name=isCA,proto3" json:"isCA,omitempty"`
	IsAvailable  bool   `protobuf:"varint,2,opt,name=isAvailable,proto3" json:"isAvailable,omitempty"`
	IsExpired    bool   `protobuf:"varint,3,opt,name=isExpired,proto3" json:"isExpired,omitempty"`
	ExpiringDays int32  `protobuf:"varint,4,opt,name=expiringDays,proto3" json:"expiringDays,omitempty"`
	Keyword      string `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Offset       int64  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Size         int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	UserId       int64  `protobuf:"varint,8,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ListSSLCertsRequest) Reset() {
	*x = ListSSLCertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSSLCertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSSLCertsRequest) ProtoMessage() {}

func (x *ListSSLCertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSSLCertsRequest.ProtoReflect.Descriptor instead.
func (*ListSSLCertsRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{7}
}

func (x *ListSSLCertsRequest) GetIsCA() bool {
	if x != nil {
		return x.IsCA
	}
	return false
}

func (x *ListSSLCertsRequest) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *ListSSLCertsRequest) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *ListSSLCertsRequest) GetExpiringDays() int32 {
	if x != nil {
		return x.ExpiringDays
	}
	return 0
}

func (x *ListSSLCertsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListSSLCertsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSSLCertsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListSSLCertsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ListSSLCertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertsJSON []byte `protobuf:"bytes,1,opt,name=sslCertsJSON,proto3" json:"sslCertsJSON,omitempty"`
}

func (x *ListSSLCertsResponse) Reset() {
	*x = ListSSLCertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSSLCertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSSLCertsResponse) ProtoMessage() {}

func (x *ListSSLCertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSSLCertsResponse.ProtoReflect.Descriptor instead.
func (*ListSSLCertsResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{8}
}

func (x *ListSSLCertsResponse) GetSslCertsJSON() []byte {
	if x != nil {
		return x.SslCertsJSON
	}
	return nil
}

// 计算有OCSP错误的证书数量
type CountAllSSLCertsWithOCSPErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *CountAllSSLCertsWithOCSPErrorRequest) Reset() {
	*x = CountAllSSLCertsWithOCSPErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllSSLCertsWithOCSPErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllSSLCertsWithOCSPErrorRequest) ProtoMessage() {}

func (x *CountAllSSLCertsWithOCSPErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllSSLCertsWithOCSPErrorRequest.ProtoReflect.Descriptor instead.
func (*CountAllSSLCertsWithOCSPErrorRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{9}
}

func (x *CountAllSSLCertsWithOCSPErrorRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

// 列出有OCSP错误的证书
type ListSSLCertsWithOCSPErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Offset  int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size    int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListSSLCertsWithOCSPErrorRequest) Reset() {
	*x = ListSSLCertsWithOCSPErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSSLCertsWithOCSPErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSSLCertsWithOCSPErrorRequest) ProtoMessage() {}

func (x *ListSSLCertsWithOCSPErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSSLCertsWithOCSPErrorRequest.ProtoReflect.Descriptor instead.
func (*ListSSLCertsWithOCSPErrorRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{10}
}

func (x *ListSSLCertsWithOCSPErrorRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListSSLCertsWithOCSPErrorRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSSLCertsWithOCSPErrorRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListSSLCertsWithOCSPErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCerts []*SSLCert `protobuf:"bytes,1,rep,name=sslCerts,proto3" json:"sslCerts,omitempty"`
}

func (x *ListSSLCertsWithOCSPErrorResponse) Reset() {
	*x = ListSSLCertsWithOCSPErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSSLCertsWithOCSPErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSSLCertsWithOCSPErrorResponse) ProtoMessage() {}

func (x *ListSSLCertsWithOCSPErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSSLCertsWithOCSPErrorResponse.ProtoReflect.Descriptor instead.
func (*ListSSLCertsWithOCSPErrorResponse) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{11}
}

func (x *ListSSLCertsWithOCSPErrorResponse) GetSslCerts() []*SSLCert {
	if x != nil {
		return x.SslCerts
	}
	return nil
}

// 忽略一组OCSP证书错误
type IgnoreSSLCertsWithOCSPErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertIds []int64 `protobuf:"varint,1,rep,packed,name=sslCertIds,proto3" json:"sslCertIds,omitempty"`
}

func (x *IgnoreSSLCertsWithOCSPErrorRequest) Reset() {
	*x = IgnoreSSLCertsWithOCSPErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IgnoreSSLCertsWithOCSPErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgnoreSSLCertsWithOCSPErrorRequest) ProtoMessage() {}

func (x *IgnoreSSLCertsWithOCSPErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgnoreSSLCertsWithOCSPErrorRequest.ProtoReflect.Descriptor instead.
func (*IgnoreSSLCertsWithOCSPErrorRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{12}
}

func (x *IgnoreSSLCertsWithOCSPErrorRequest) GetSslCertIds() []int64 {
	if x != nil {
		return x.SslCertIds
	}
	return nil
}

// 重置一组证书OCSP错误状态
type ResetSSLCertsWithOCSPErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertIds []int64 `protobuf:"varint,1,rep,packed,name=sslCertIds,proto3" json:"sslCertIds,omitempty"`
}

func (x *ResetSSLCertsWithOCSPErrorRequest) Reset() {
	*x = ResetSSLCertsWithOCSPErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSSLCertsWithOCSPErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSSLCertsWithOCSPErrorRequest) ProtoMessage() {}

func (x *ResetSSLCertsWithOCSPErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSSLCertsWithOCSPErrorRequest.ProtoReflect.Descriptor instead.
func (*ResetSSLCertsWithOCSPErrorRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{13}
}

func (x *ResetSSLCertsWithOCSPErrorRequest) GetSslCertIds() []int64 {
	if x != nil {
		return x.SslCertIds
	}
	return nil
}

// 重置所有证书OCSP错误状态
type ResetAllSSLCertsWithOCSPErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetAllSSLCertsWithOCSPErrorRequest) Reset() {
	*x = ResetAllSSLCertsWithOCSPErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ssl_cert_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetAllSSLCertsWithOCSPErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetAllSSLCertsWithOCSPErrorRequest) ProtoMessage() {}

func (x *ResetAllSSLCertsWithOCSPErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ssl_cert_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetAllSSLCertsWithOCSPErrorRequest.ProtoReflect.Descriptor instead.
func (*ResetAllSSLCertsWithOCSPErrorRequest) Descriptor() ([]byte, []int) {
	return file_service_ssl_cert_proto_rawDescGZIP(), []int{14}
}

var File_service_ssl_cert_proto protoreflect.FileDescriptor

var file_service_ssl_cert_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x43, 0x41, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x35, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c,
	0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x43, 0x41, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x3f, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x53,
	0x4c, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64,
	0x22, 0x44, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x73, 0x6c, 0x43, 0x65,
	0x72, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x34, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a,
	0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x43, 0x41, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43, 0x41, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xeb,
	0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x43, 0x41, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x43, 0x41, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x40, 0x0a, 0x24, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x68, 0x0a, 0x20, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43,
	0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0x4c, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x73, 0x6c,
	0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x08, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x22, 0x44, 0x0a, 0x22, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x53, 0x4c, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53,
	0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x73, 0x22, 0x26, 0x0a,
	0x24, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x88, 0x07, 0x0a, 0x0e, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x18, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53,
	0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x1d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x28, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x53, 0x4c,
	0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x68, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x53, 0x4c, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x1b, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x53, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x43, 0x53,
	0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x43, 0x53, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_ssl_cert_proto_rawDescOnce sync.Once
	file_service_ssl_cert_proto_rawDescData = file_service_ssl_cert_proto_rawDesc
)

func file_service_ssl_cert_proto_rawDescGZIP() []byte {
	file_service_ssl_cert_proto_rawDescOnce.Do(func() {
		file_service_ssl_cert_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ssl_cert_proto_rawDescData)
	})
	return file_service_ssl_cert_proto_rawDescData
}

var file_service_ssl_cert_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_service_ssl_cert_proto_goTypes = []interface{}{
	(*CreateSSLCertRequest)(nil),                 // 0: pb.CreateSSLCertRequest
	(*CreateSSLCertResponse)(nil),                // 1: pb.CreateSSLCertResponse
	(*UpdateSSLCertRequest)(nil),                 // 2: pb.UpdateSSLCertRequest
	(*FindEnabledSSLCertConfigRequest)(nil),      // 3: pb.FindEnabledSSLCertConfigRequest
	(*FindEnabledSSLCertConfigResponse)(nil),     // 4: pb.FindEnabledSSLCertConfigResponse
	(*DeleteSSLCertRequest)(nil),                 // 5: pb.DeleteSSLCertRequest
	(*CountSSLCertRequest)(nil),                  // 6: pb.CountSSLCertRequest
	(*ListSSLCertsRequest)(nil),                  // 7: pb.ListSSLCertsRequest
	(*ListSSLCertsResponse)(nil),                 // 8: pb.ListSSLCertsResponse
	(*CountAllSSLCertsWithOCSPErrorRequest)(nil), // 9: pb.CountAllSSLCertsWithOCSPErrorRequest
	(*ListSSLCertsWithOCSPErrorRequest)(nil),     // 10: pb.ListSSLCertsWithOCSPErrorRequest
	(*ListSSLCertsWithOCSPErrorResponse)(nil),    // 11: pb.ListSSLCertsWithOCSPErrorResponse
	(*IgnoreSSLCertsWithOCSPErrorRequest)(nil),   // 12: pb.IgnoreSSLCertsWithOCSPErrorRequest
	(*ResetSSLCertsWithOCSPErrorRequest)(nil),    // 13: pb.ResetSSLCertsWithOCSPErrorRequest
	(*ResetAllSSLCertsWithOCSPErrorRequest)(nil), // 14: pb.ResetAllSSLCertsWithOCSPErrorRequest
	(*SSLCert)(nil),                              // 15: pb.SSLCert
	(*RPCSuccess)(nil),                           // 16: pb.RPCSuccess
	(*RPCCountResponse)(nil),                     // 17: pb.RPCCountResponse
}
var file_service_ssl_cert_proto_depIdxs = []int32{
	15, // 0: pb.ListSSLCertsWithOCSPErrorResponse.sslCerts:type_name -> pb.SSLCert
	0,  // 1: pb.SSLCertService.createSSLCert:input_type -> pb.CreateSSLCertRequest
	2,  // 2: pb.SSLCertService.updateSSLCert:input_type -> pb.UpdateSSLCertRequest
	5,  // 3: pb.SSLCertService.deleteSSLCert:input_type -> pb.DeleteSSLCertRequest
	3,  // 4: pb.SSLCertService.findEnabledSSLCertConfig:input_type -> pb.FindEnabledSSLCertConfigRequest
	6,  // 5: pb.SSLCertService.countSSLCerts:input_type -> pb.CountSSLCertRequest
	7,  // 6: pb.SSLCertService.listSSLCerts:input_type -> pb.ListSSLCertsRequest
	9,  // 7: pb.SSLCertService.countAllSSLCertsWithOCSPError:input_type -> pb.CountAllSSLCertsWithOCSPErrorRequest
	10, // 8: pb.SSLCertService.listSSLCertsWithOCSPError:input_type -> pb.ListSSLCertsWithOCSPErrorRequest
	12, // 9: pb.SSLCertService.ignoreSSLCertsWithOCSPError:input_type -> pb.IgnoreSSLCertsWithOCSPErrorRequest
	13, // 10: pb.SSLCertService.resetSSLCertsWithOCSPError:input_type -> pb.ResetSSLCertsWithOCSPErrorRequest
	14, // 11: pb.SSLCertService.resetAllSSLCertsWithOCSPError:input_type -> pb.ResetAllSSLCertsWithOCSPErrorRequest
	1,  // 12: pb.SSLCertService.createSSLCert:output_type -> pb.CreateSSLCertResponse
	16, // 13: pb.SSLCertService.updateSSLCert:output_type -> pb.RPCSuccess
	16, // 14: pb.SSLCertService.deleteSSLCert:output_type -> pb.RPCSuccess
	4,  // 15: pb.SSLCertService.findEnabledSSLCertConfig:output_type -> pb.FindEnabledSSLCertConfigResponse
	17, // 16: pb.SSLCertService.countSSLCerts:output_type -> pb.RPCCountResponse
	8,  // 17: pb.SSLCertService.listSSLCerts:output_type -> pb.ListSSLCertsResponse
	17, // 18: pb.SSLCertService.countAllSSLCertsWithOCSPError:output_type -> pb.RPCCountResponse
	11, // 19: pb.SSLCertService.listSSLCertsWithOCSPError:output_type -> pb.ListSSLCertsWithOCSPErrorResponse
	16, // 20: pb.SSLCertService.ignoreSSLCertsWithOCSPError:output_type -> pb.RPCSuccess
	16, // 21: pb.SSLCertService.resetSSLCertsWithOCSPError:output_type -> pb.RPCSuccess
	16, // 22: pb.SSLCertService.resetAllSSLCertsWithOCSPError:output_type -> pb.RPCSuccess
	12, // [12:23] is the sub-list for method output_type
	1,  // [1:12] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_service_ssl_cert_proto_init() }
func file_service_ssl_cert_proto_init() {
	if File_service_ssl_cert_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_ssl_cert_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ssl_cert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSSLCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSSLCertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSSLCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledSSLCertConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledSSLCertConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSSLCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSSLCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSSLCertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSSLCertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllSSLCertsWithOCSPErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSSLCertsWithOCSPErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSSLCertsWithOCSPErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IgnoreSSLCertsWithOCSPErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSSLCertsWithOCSPErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ssl_cert_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetAllSSLCertsWithOCSPErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ssl_cert_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ssl_cert_proto_goTypes,
		DependencyIndexes: file_service_ssl_cert_proto_depIdxs,
		MessageInfos:      file_service_ssl_cert_proto_msgTypes,
	}.Build()
	File_service_ssl_cert_proto = out.File
	file_service_ssl_cert_proto_rawDesc = nil
	file_service_ssl_cert_proto_goTypes = nil
	file_service_ssl_cert_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SSLCertServiceClient is the client API for SSLCertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SSLCertServiceClient interface {
	// 创建Cert
	CreateSSLCert(ctx context.Context, in *CreateSSLCertRequest, opts ...grpc.CallOption) (*CreateSSLCertResponse, error)
	// 修改Cert
	UpdateSSLCert(ctx context.Context, in *UpdateSSLCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除Cert
	DeleteSSLCert(ctx context.Context, in *DeleteSSLCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找证书配置
	FindEnabledSSLCertConfig(ctx context.Context, in *FindEnabledSSLCertConfigRequest, opts ...grpc.CallOption) (*FindEnabledSSLCertConfigResponse, error)
	// 计算匹配的Cert数量
	CountSSLCerts(ctx context.Context, in *CountSSLCertRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页匹配的Cert
	ListSSLCerts(ctx context.Context, in *ListSSLCertsRequest, opts ...grpc.CallOption) (*ListSSLCertsResponse, error)
	// 计算有OCSP错误的证书数量
	CountAllSSLCertsWithOCSPError(ctx context.Context, in *CountAllSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出有OCSP错误的证书
	ListSSLCertsWithOCSPError(ctx context.Context, in *ListSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*ListSSLCertsWithOCSPErrorResponse, error)
	// 忽略一组OCSP证书错误
	IgnoreSSLCertsWithOCSPError(ctx context.Context, in *IgnoreSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 重置一组证书OCSP错误状态
	ResetSSLCertsWithOCSPError(ctx context.Context, in *ResetSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 重置所有证书OCSP错误状态
	ResetAllSSLCertsWithOCSPError(ctx context.Context, in *ResetAllSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
}

type sSLCertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSLCertServiceClient(cc grpc.ClientConnInterface) SSLCertServiceClient {
	return &sSLCertServiceClient{cc}
}

func (c *sSLCertServiceClient) CreateSSLCert(ctx context.Context, in *CreateSSLCertRequest, opts ...grpc.CallOption) (*CreateSSLCertResponse, error) {
	out := new(CreateSSLCertResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/createSSLCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) UpdateSSLCert(ctx context.Context, in *UpdateSSLCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/updateSSLCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) DeleteSSLCert(ctx context.Context, in *DeleteSSLCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/deleteSSLCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) FindEnabledSSLCertConfig(ctx context.Context, in *FindEnabledSSLCertConfigRequest, opts ...grpc.CallOption) (*FindEnabledSSLCertConfigResponse, error) {
	out := new(FindEnabledSSLCertConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/findEnabledSSLCertConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) CountSSLCerts(ctx context.Context, in *CountSSLCertRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/countSSLCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) ListSSLCerts(ctx context.Context, in *ListSSLCertsRequest, opts ...grpc.CallOption) (*ListSSLCertsResponse, error) {
	out := new(ListSSLCertsResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/listSSLCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) CountAllSSLCertsWithOCSPError(ctx context.Context, in *CountAllSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/countAllSSLCertsWithOCSPError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) ListSSLCertsWithOCSPError(ctx context.Context, in *ListSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*ListSSLCertsWithOCSPErrorResponse, error) {
	out := new(ListSSLCertsWithOCSPErrorResponse)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/listSSLCertsWithOCSPError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) IgnoreSSLCertsWithOCSPError(ctx context.Context, in *IgnoreSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/ignoreSSLCertsWithOCSPError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) ResetSSLCertsWithOCSPError(ctx context.Context, in *ResetSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/resetSSLCertsWithOCSPError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLCertServiceClient) ResetAllSSLCertsWithOCSPError(ctx context.Context, in *ResetAllSSLCertsWithOCSPErrorRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.SSLCertService/resetAllSSLCertsWithOCSPError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSLCertServiceServer is the server API for SSLCertService service.
type SSLCertServiceServer interface {
	// 创建Cert
	CreateSSLCert(context.Context, *CreateSSLCertRequest) (*CreateSSLCertResponse, error)
	// 修改Cert
	UpdateSSLCert(context.Context, *UpdateSSLCertRequest) (*RPCSuccess, error)
	// 删除Cert
	DeleteSSLCert(context.Context, *DeleteSSLCertRequest) (*RPCSuccess, error)
	// 查找证书配置
	FindEnabledSSLCertConfig(context.Context, *FindEnabledSSLCertConfigRequest) (*FindEnabledSSLCertConfigResponse, error)
	// 计算匹配的Cert数量
	CountSSLCerts(context.Context, *CountSSLCertRequest) (*RPCCountResponse, error)
	// 列出单页匹配的Cert
	ListSSLCerts(context.Context, *ListSSLCertsRequest) (*ListSSLCertsResponse, error)
	// 计算有OCSP错误的证书数量
	CountAllSSLCertsWithOCSPError(context.Context, *CountAllSSLCertsWithOCSPErrorRequest) (*RPCCountResponse, error)
	// 列出有OCSP错误的证书
	ListSSLCertsWithOCSPError(context.Context, *ListSSLCertsWithOCSPErrorRequest) (*ListSSLCertsWithOCSPErrorResponse, error)
	// 忽略一组OCSP证书错误
	IgnoreSSLCertsWithOCSPError(context.Context, *IgnoreSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error)
	// 重置一组证书OCSP错误状态
	ResetSSLCertsWithOCSPError(context.Context, *ResetSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error)
	// 重置所有证书OCSP错误状态
	ResetAllSSLCertsWithOCSPError(context.Context, *ResetAllSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error)
}

// UnimplementedSSLCertServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSSLCertServiceServer struct {
}

func (*UnimplementedSSLCertServiceServer) CreateSSLCert(context.Context, *CreateSSLCertRequest) (*CreateSSLCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSSLCert not implemented")
}
func (*UnimplementedSSLCertServiceServer) UpdateSSLCert(context.Context, *UpdateSSLCertRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSSLCert not implemented")
}
func (*UnimplementedSSLCertServiceServer) DeleteSSLCert(context.Context, *DeleteSSLCertRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSSLCert not implemented")
}
func (*UnimplementedSSLCertServiceServer) FindEnabledSSLCertConfig(context.Context, *FindEnabledSSLCertConfigRequest) (*FindEnabledSSLCertConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledSSLCertConfig not implemented")
}
func (*UnimplementedSSLCertServiceServer) CountSSLCerts(context.Context, *CountSSLCertRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSSLCerts not implemented")
}
func (*UnimplementedSSLCertServiceServer) ListSSLCerts(context.Context, *ListSSLCertsRequest) (*ListSSLCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSSLCerts not implemented")
}
func (*UnimplementedSSLCertServiceServer) CountAllSSLCertsWithOCSPError(context.Context, *CountAllSSLCertsWithOCSPErrorRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllSSLCertsWithOCSPError not implemented")
}
func (*UnimplementedSSLCertServiceServer) ListSSLCertsWithOCSPError(context.Context, *ListSSLCertsWithOCSPErrorRequest) (*ListSSLCertsWithOCSPErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSSLCertsWithOCSPError not implemented")
}
func (*UnimplementedSSLCertServiceServer) IgnoreSSLCertsWithOCSPError(context.Context, *IgnoreSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IgnoreSSLCertsWithOCSPError not implemented")
}
func (*UnimplementedSSLCertServiceServer) ResetSSLCertsWithOCSPError(context.Context, *ResetSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSSLCertsWithOCSPError not implemented")
}
func (*UnimplementedSSLCertServiceServer) ResetAllSSLCertsWithOCSPError(context.Context, *ResetAllSSLCertsWithOCSPErrorRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAllSSLCertsWithOCSPError not implemented")
}

func RegisterSSLCertServiceServer(s *grpc.Server, srv SSLCertServiceServer) {
	s.RegisterService(&_SSLCertService_serviceDesc, srv)
}

func _SSLCertService_CreateSSLCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSSLCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).CreateSSLCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/CreateSSLCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).CreateSSLCert(ctx, req.(*CreateSSLCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_UpdateSSLCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSSLCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).UpdateSSLCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/UpdateSSLCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).UpdateSSLCert(ctx, req.(*UpdateSSLCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_DeleteSSLCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSSLCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).DeleteSSLCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/DeleteSSLCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).DeleteSSLCert(ctx, req.(*DeleteSSLCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_FindEnabledSSLCertConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledSSLCertConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).FindEnabledSSLCertConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/FindEnabledSSLCertConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).FindEnabledSSLCertConfig(ctx, req.(*FindEnabledSSLCertConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_CountSSLCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSSLCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).CountSSLCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/CountSSLCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).CountSSLCerts(ctx, req.(*CountSSLCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_ListSSLCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSSLCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).ListSSLCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/ListSSLCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).ListSSLCerts(ctx, req.(*ListSSLCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_CountAllSSLCertsWithOCSPError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllSSLCertsWithOCSPErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).CountAllSSLCertsWithOCSPError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/CountAllSSLCertsWithOCSPError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).CountAllSSLCertsWithOCSPError(ctx, req.(*CountAllSSLCertsWithOCSPErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_ListSSLCertsWithOCSPError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSSLCertsWithOCSPErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).ListSSLCertsWithOCSPError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/ListSSLCertsWithOCSPError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).ListSSLCertsWithOCSPError(ctx, req.(*ListSSLCertsWithOCSPErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_IgnoreSSLCertsWithOCSPError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IgnoreSSLCertsWithOCSPErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).IgnoreSSLCertsWithOCSPError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/IgnoreSSLCertsWithOCSPError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).IgnoreSSLCertsWithOCSPError(ctx, req.(*IgnoreSSLCertsWithOCSPErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_ResetSSLCertsWithOCSPError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetSSLCertsWithOCSPErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).ResetSSLCertsWithOCSPError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/ResetSSLCertsWithOCSPError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).ResetSSLCertsWithOCSPError(ctx, req.(*ResetSSLCertsWithOCSPErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLCertService_ResetAllSSLCertsWithOCSPError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAllSSLCertsWithOCSPErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLCertServiceServer).ResetAllSSLCertsWithOCSPError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSLCertService/ResetAllSSLCertsWithOCSPError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLCertServiceServer).ResetAllSSLCertsWithOCSPError(ctx, req.(*ResetAllSSLCertsWithOCSPErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SSLCertService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SSLCertService",
	HandlerType: (*SSLCertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createSSLCert",
			Handler:    _SSLCertService_CreateSSLCert_Handler,
		},
		{
			MethodName: "updateSSLCert",
			Handler:    _SSLCertService_UpdateSSLCert_Handler,
		},
		{
			MethodName: "deleteSSLCert",
			Handler:    _SSLCertService_DeleteSSLCert_Handler,
		},
		{
			MethodName: "findEnabledSSLCertConfig",
			Handler:    _SSLCertService_FindEnabledSSLCertConfig_Handler,
		},
		{
			MethodName: "countSSLCerts",
			Handler:    _SSLCertService_CountSSLCerts_Handler,
		},
		{
			MethodName: "listSSLCerts",
			Handler:    _SSLCertService_ListSSLCerts_Handler,
		},
		{
			MethodName: "countAllSSLCertsWithOCSPError",
			Handler:    _SSLCertService_CountAllSSLCertsWithOCSPError_Handler,
		},
		{
			MethodName: "listSSLCertsWithOCSPError",
			Handler:    _SSLCertService_ListSSLCertsWithOCSPError_Handler,
		},
		{
			MethodName: "ignoreSSLCertsWithOCSPError",
			Handler:    _SSLCertService_IgnoreSSLCertsWithOCSPError_Handler,
		},
		{
			MethodName: "resetSSLCertsWithOCSPError",
			Handler:    _SSLCertService_ResetSSLCertsWithOCSPError_Handler,
		},
		{
			MethodName: "resetAllSSLCertsWithOCSPError",
			Handler:    _SSLCertService_ResetAllSSLCertsWithOCSPError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ssl_cert.proto",
}
