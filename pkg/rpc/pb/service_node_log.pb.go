// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_node_log.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建日志
type CreateNodeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeLogs []*NodeLog `protobuf:"bytes,1,rep,name=nodeLogs,proto3" json:"nodeLogs,omitempty"`
}

func (x *CreateNodeLogsRequest) Reset() {
	*x = CreateNodeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeLogsRequest) ProtoMessage() {}

func (x *CreateNodeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeLogsRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNodeLogsRequest) GetNodeLogs() []*NodeLog {
	if x != nil {
		return x.NodeLogs
	}
	return nil
}

type CreateNodeLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateNodeLogsResponse) Reset() {
	*x = CreateNodeLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeLogsResponse) ProtoMessage() {}

func (x *CreateNodeLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeLogsResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeLogsResponse) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{1}
}

// 查询日志数量
type CountNodeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64  `protobuf:"varint,11,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	NodeId        int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Role          string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	DayFrom       string `protobuf:"bytes,3,opt,name=dayFrom,proto3" json:"dayFrom,omitempty"`
	DayTo         string `protobuf:"bytes,4,opt,name=dayTo,proto3" json:"dayTo,omitempty"`
	Keyword       string `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Level         string `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`
	ServerId      int64  `protobuf:"varint,7,opt,name=serverId,proto3" json:"serverId,omitempty"`
	OriginId      int64  `protobuf:"varint,8,opt,name=originId,proto3" json:"originId,omitempty"`
	IsUnread      bool   `protobuf:"varint,9,opt,name=isUnread,proto3" json:"isUnread,omitempty"`
	Tag           string `protobuf:"bytes,10,opt,name=tag,proto3" json:"tag,omitempty"`
	FixedState    int32  `protobuf:"varint,12,opt,name=fixedState,proto3" json:"fixedState,omitempty"`
	AllServers    bool   `protobuf:"varint,13,opt,name=allServers,proto3" json:"allServers,omitempty"` // 是否获取所有服务相关的日志
}

func (x *CountNodeLogsRequest) Reset() {
	*x = CountNodeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountNodeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountNodeLogsRequest) ProtoMessage() {}

func (x *CountNodeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountNodeLogsRequest.ProtoReflect.Descriptor instead.
func (*CountNodeLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{2}
}

func (x *CountNodeLogsRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CountNodeLogsRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *CountNodeLogsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CountNodeLogsRequest) GetDayFrom() string {
	if x != nil {
		return x.DayFrom
	}
	return ""
}

func (x *CountNodeLogsRequest) GetDayTo() string {
	if x != nil {
		return x.DayTo
	}
	return ""
}

func (x *CountNodeLogsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CountNodeLogsRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *CountNodeLogsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *CountNodeLogsRequest) GetOriginId() int64 {
	if x != nil {
		return x.OriginId
	}
	return 0
}

func (x *CountNodeLogsRequest) GetIsUnread() bool {
	if x != nil {
		return x.IsUnread
	}
	return false
}

func (x *CountNodeLogsRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *CountNodeLogsRequest) GetFixedState() int32 {
	if x != nil {
		return x.FixedState
	}
	return 0
}

func (x *CountNodeLogsRequest) GetAllServers() bool {
	if x != nil {
		return x.AllServers
	}
	return false
}

// 列出单页日志
type ListNodeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64  `protobuf:"varint,15,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	NodeId        int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Role          string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Offset        int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	DayFrom       string `protobuf:"bytes,5,opt,name=dayFrom,proto3" json:"dayFrom,omitempty"`
	DayTo         string `protobuf:"bytes,6,opt,name=dayTo,proto3" json:"dayTo,omitempty"`
	Keyword       string `protobuf:"bytes,7,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Level         string `protobuf:"bytes,8,opt,name=level,proto3" json:"level,omitempty"`
	ServerId      int64  `protobuf:"varint,9,opt,name=serverId,proto3" json:"serverId,omitempty"`
	FixedState    int32  `protobuf:"varint,10,opt,name=fixedState,proto3" json:"fixedState,omitempty"`
	AllServers    bool   `protobuf:"varint,11,opt,name=allServers,proto3" json:"allServers,omitempty"` // 是否获取所有服务相关的日志
	OriginId      int64  `protobuf:"varint,12,opt,name=originId,proto3" json:"originId,omitempty"`
	IsUnread      bool   `protobuf:"varint,13,opt,name=isUnread,proto3" json:"isUnread,omitempty"`
	Tag           string `protobuf:"bytes,14,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *ListNodeLogsRequest) Reset() {
	*x = ListNodeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeLogsRequest) ProtoMessage() {}

func (x *ListNodeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeLogsRequest.ProtoReflect.Descriptor instead.
func (*ListNodeLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{3}
}

func (x *ListNodeLogsRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *ListNodeLogsRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ListNodeLogsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ListNodeLogsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNodeLogsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListNodeLogsRequest) GetDayFrom() string {
	if x != nil {
		return x.DayFrom
	}
	return ""
}

func (x *ListNodeLogsRequest) GetDayTo() string {
	if x != nil {
		return x.DayTo
	}
	return ""
}

func (x *ListNodeLogsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListNodeLogsRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *ListNodeLogsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *ListNodeLogsRequest) GetFixedState() int32 {
	if x != nil {
		return x.FixedState
	}
	return 0
}

func (x *ListNodeLogsRequest) GetAllServers() bool {
	if x != nil {
		return x.AllServers
	}
	return false
}

func (x *ListNodeLogsRequest) GetOriginId() int64 {
	if x != nil {
		return x.OriginId
	}
	return 0
}

func (x *ListNodeLogsRequest) GetIsUnread() bool {
	if x != nil {
		return x.IsUnread
	}
	return false
}

func (x *ListNodeLogsRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type ListNodeLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeLogs []*NodeLog `protobuf:"bytes,1,rep,name=nodeLogs,proto3" json:"nodeLogs,omitempty"`
}

func (x *ListNodeLogsResponse) Reset() {
	*x = ListNodeLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeLogsResponse) ProtoMessage() {}

func (x *ListNodeLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeLogsResponse.ProtoReflect.Descriptor instead.
func (*ListNodeLogsResponse) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{4}
}

func (x *ListNodeLogsResponse) GetNodeLogs() []*NodeLog {
	if x != nil {
		return x.NodeLogs
	}
	return nil
}

// 设置日志为已修复
type FixNodeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeLogIds []int64 `protobuf:"varint,1,rep,packed,name=nodeLogIds,proto3" json:"nodeLogIds,omitempty"`
}

func (x *FixNodeLogsRequest) Reset() {
	*x = FixNodeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixNodeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixNodeLogsRequest) ProtoMessage() {}

func (x *FixNodeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixNodeLogsRequest.ProtoReflect.Descriptor instead.
func (*FixNodeLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{5}
}

func (x *FixNodeLogsRequest) GetNodeLogIds() []int64 {
	if x != nil {
		return x.NodeLogIds
	}
	return nil
}

// 设置所有日志为已修复
type FixAllNodeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FixAllNodeLogsRequest) Reset() {
	*x = FixAllNodeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixAllNodeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixAllNodeLogsRequest) ProtoMessage() {}

func (x *FixAllNodeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixAllNodeLogsRequest.ProtoReflect.Descriptor instead.
func (*FixAllNodeLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{6}
}

// 计算未读的日志数量
type CountAllUnreadNodeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllUnreadNodeLogsRequest) Reset() {
	*x = CountAllUnreadNodeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllUnreadNodeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllUnreadNodeLogsRequest) ProtoMessage() {}

func (x *CountAllUnreadNodeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllUnreadNodeLogsRequest.ProtoReflect.Descriptor instead.
func (*CountAllUnreadNodeLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{7}
}

// 设置日志为已读
type UpdateNodeLogsReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeLogIds []int64 `protobuf:"varint,1,rep,packed,name=nodeLogIds,proto3" json:"nodeLogIds,omitempty"`
	NodeId     int64   `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Role       string  `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *UpdateNodeLogsReadRequest) Reset() {
	*x = UpdateNodeLogsReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeLogsReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeLogsReadRequest) ProtoMessage() {}

func (x *UpdateNodeLogsReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeLogsReadRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeLogsReadRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNodeLogsReadRequest) GetNodeLogIds() []int64 {
	if x != nil {
		return x.NodeLogIds
	}
	return nil
}

func (x *UpdateNodeLogsReadRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *UpdateNodeLogsReadRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// 设置所有日志未已读
type UpdateAllNodeLogsReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAllNodeLogsReadRequest) Reset() {
	*x = UpdateAllNodeLogsReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllNodeLogsReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllNodeLogsReadRequest) ProtoMessage() {}

func (x *UpdateAllNodeLogsReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllNodeLogsReadRequest.ProtoReflect.Descriptor instead.
func (*UpdateAllNodeLogsReadRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{9}
}

// 删除日志
type DeleteNodeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64  `protobuf:"varint,15,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	NodeId        int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Role          string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Offset        int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	DayFrom       string `protobuf:"bytes,5,opt,name=dayFrom,proto3" json:"dayFrom,omitempty"`
	DayTo         string `protobuf:"bytes,6,opt,name=dayTo,proto3" json:"dayTo,omitempty"`
	Keyword       string `protobuf:"bytes,7,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Level         string `protobuf:"bytes,8,opt,name=level,proto3" json:"level,omitempty"`
	ServerId      int64  `protobuf:"varint,9,opt,name=serverId,proto3" json:"serverId,omitempty"`
	FixedState    int32  `protobuf:"varint,10,opt,name=fixedState,proto3" json:"fixedState,omitempty"`
	AllServers    bool   `protobuf:"varint,11,opt,name=allServers,proto3" json:"allServers,omitempty"` // 是否获取所有服务相关的日志
	OriginId      int64  `protobuf:"varint,12,opt,name=originId,proto3" json:"originId,omitempty"`
	IsUnread      bool   `protobuf:"varint,13,opt,name=isUnread,proto3" json:"isUnread,omitempty"`
	Tag           string `protobuf:"bytes,14,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *DeleteNodeLogsRequest) Reset() {
	*x = DeleteNodeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeLogsRequest) ProtoMessage() {}

func (x *DeleteNodeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeLogsRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteNodeLogsRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *DeleteNodeLogsRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *DeleteNodeLogsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *DeleteNodeLogsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DeleteNodeLogsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DeleteNodeLogsRequest) GetDayFrom() string {
	if x != nil {
		return x.DayFrom
	}
	return ""
}

func (x *DeleteNodeLogsRequest) GetDayTo() string {
	if x != nil {
		return x.DayTo
	}
	return ""
}

func (x *DeleteNodeLogsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *DeleteNodeLogsRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *DeleteNodeLogsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *DeleteNodeLogsRequest) GetFixedState() int32 {
	if x != nil {
		return x.FixedState
	}
	return 0
}

func (x *DeleteNodeLogsRequest) GetAllServers() bool {
	if x != nil {
		return x.AllServers
	}
	return false
}

func (x *DeleteNodeLogsRequest) GetOriginId() int64 {
	if x != nil {
		return x.OriginId
	}
	return 0
}

func (x *DeleteNodeLogsRequest) GetIsUnread() bool {
	if x != nil {
		return x.IsUnread
	}
	return false
}

func (x *DeleteNodeLogsRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

var File_service_node_log_proto protoreflect.FileDescriptor

var file_service_node_log_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xee, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x22, 0x99, 0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x79, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x3f, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x34,
	0x0a, 0x12, 0x46, 0x69, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x49,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x49, 0x64, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x46, 0x69, 0x78, 0x41, 0x6c, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a,
	0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b, 0x03, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x79,
	0x54, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x32, 0xf1, 0x04, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0e,
	0x66, 0x69, 0x78, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x19,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x49, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x19,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_node_log_proto_rawDescOnce sync.Once
	file_service_node_log_proto_rawDescData = file_service_node_log_proto_rawDesc
)

func file_service_node_log_proto_rawDescGZIP() []byte {
	file_service_node_log_proto_rawDescOnce.Do(func() {
		file_service_node_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_node_log_proto_rawDescData)
	})
	return file_service_node_log_proto_rawDescData
}

var file_service_node_log_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_service_node_log_proto_goTypes = []interface{}{
	(*CreateNodeLogsRequest)(nil),         // 0: pb.CreateNodeLogsRequest
	(*CreateNodeLogsResponse)(nil),        // 1: pb.CreateNodeLogsResponse
	(*CountNodeLogsRequest)(nil),          // 2: pb.CountNodeLogsRequest
	(*ListNodeLogsRequest)(nil),           // 3: pb.ListNodeLogsRequest
	(*ListNodeLogsResponse)(nil),          // 4: pb.ListNodeLogsResponse
	(*FixNodeLogsRequest)(nil),            // 5: pb.FixNodeLogsRequest
	(*FixAllNodeLogsRequest)(nil),         // 6: pb.FixAllNodeLogsRequest
	(*CountAllUnreadNodeLogsRequest)(nil), // 7: pb.CountAllUnreadNodeLogsRequest
	(*UpdateNodeLogsReadRequest)(nil),     // 8: pb.UpdateNodeLogsReadRequest
	(*UpdateAllNodeLogsReadRequest)(nil),  // 9: pb.UpdateAllNodeLogsReadRequest
	(*DeleteNodeLogsRequest)(nil),         // 10: pb.DeleteNodeLogsRequest
	(*NodeLog)(nil),                       // 11: pb.NodeLog
	(*RPCCountResponse)(nil),              // 12: pb.RPCCountResponse
	(*RPCSuccess)(nil),                    // 13: pb.RPCSuccess
}
var file_service_node_log_proto_depIdxs = []int32{
	11, // 0: pb.CreateNodeLogsRequest.nodeLogs:type_name -> pb.NodeLog
	11, // 1: pb.ListNodeLogsResponse.nodeLogs:type_name -> pb.NodeLog
	0,  // 2: pb.NodeLogService.createNodeLogs:input_type -> pb.CreateNodeLogsRequest
	2,  // 3: pb.NodeLogService.countNodeLogs:input_type -> pb.CountNodeLogsRequest
	3,  // 4: pb.NodeLogService.listNodeLogs:input_type -> pb.ListNodeLogsRequest
	5,  // 5: pb.NodeLogService.fixNodeLogs:input_type -> pb.FixNodeLogsRequest
	6,  // 6: pb.NodeLogService.fixAllNodeLogs:input_type -> pb.FixAllNodeLogsRequest
	7,  // 7: pb.NodeLogService.countAllUnreadNodeLogs:input_type -> pb.CountAllUnreadNodeLogsRequest
	8,  // 8: pb.NodeLogService.updateNodeLogsRead:input_type -> pb.UpdateNodeLogsReadRequest
	9,  // 9: pb.NodeLogService.updateAllNodeLogsRead:input_type -> pb.UpdateAllNodeLogsReadRequest
	10, // 10: pb.NodeLogService.deleteNodeLogs:input_type -> pb.DeleteNodeLogsRequest
	1,  // 11: pb.NodeLogService.createNodeLogs:output_type -> pb.CreateNodeLogsResponse
	12, // 12: pb.NodeLogService.countNodeLogs:output_type -> pb.RPCCountResponse
	4,  // 13: pb.NodeLogService.listNodeLogs:output_type -> pb.ListNodeLogsResponse
	13, // 14: pb.NodeLogService.fixNodeLogs:output_type -> pb.RPCSuccess
	13, // 15: pb.NodeLogService.fixAllNodeLogs:output_type -> pb.RPCSuccess
	12, // 16: pb.NodeLogService.countAllUnreadNodeLogs:output_type -> pb.RPCCountResponse
	13, // 17: pb.NodeLogService.updateNodeLogsRead:output_type -> pb.RPCSuccess
	13, // 18: pb.NodeLogService.updateAllNodeLogsRead:output_type -> pb.RPCSuccess
	13, // 19: pb.NodeLogService.deleteNodeLogs:output_type -> pb.RPCSuccess
	11, // [11:20] is the sub-list for method output_type
	2,  // [2:11] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_node_log_proto_init() }
func file_service_node_log_proto_init() {
	if File_service_node_log_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_node_log_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_node_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountNodeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixNodeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixAllNodeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllUnreadNodeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeLogsReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllNodeLogsReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_node_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_node_log_proto_goTypes,
		DependencyIndexes: file_service_node_log_proto_depIdxs,
		MessageInfos:      file_service_node_log_proto_msgTypes,
	}.Build()
	File_service_node_log_proto = out.File
	file_service_node_log_proto_rawDesc = nil
	file_service_node_log_proto_goTypes = nil
	file_service_node_log_proto_depIdxs = nil
}
