// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_node_log.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建日志
type CreateNodeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeLogs []*NodeLog `protobuf:"bytes,1,rep,name=nodeLogs,proto3" json:"nodeLogs,omitempty"`
}

func (x *CreateNodeLogsRequest) Reset() {
	*x = CreateNodeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeLogsRequest) ProtoMessage() {}

func (x *CreateNodeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeLogsRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNodeLogsRequest) GetNodeLogs() []*NodeLog {
	if x != nil {
		return x.NodeLogs
	}
	return nil
}

type CreateNodeLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateNodeLogsResponse) Reset() {
	*x = CreateNodeLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeLogsResponse) ProtoMessage() {}

func (x *CreateNodeLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeLogsResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeLogsResponse) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{1}
}

// 查询日志数量
type CountNodeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Role   string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *CountNodeLogsRequest) Reset() {
	*x = CountNodeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountNodeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountNodeLogsRequest) ProtoMessage() {}

func (x *CountNodeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountNodeLogsRequest.ProtoReflect.Descriptor instead.
func (*CountNodeLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{2}
}

func (x *CountNodeLogsRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *CountNodeLogsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// 列出单页日志
type ListNodeLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Role   string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Offset int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListNodeLogsRequest) Reset() {
	*x = ListNodeLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeLogsRequest) ProtoMessage() {}

func (x *ListNodeLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeLogsRequest.ProtoReflect.Descriptor instead.
func (*ListNodeLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{3}
}

func (x *ListNodeLogsRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ListNodeLogsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ListNodeLogsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNodeLogsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListNodeLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeLogs []*NodeLog `protobuf:"bytes,1,rep,name=nodeLogs,proto3" json:"nodeLogs,omitempty"`
}

func (x *ListNodeLogsResponse) Reset() {
	*x = ListNodeLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeLogsResponse) ProtoMessage() {}

func (x *ListNodeLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeLogsResponse.ProtoReflect.Descriptor instead.
func (*ListNodeLogsResponse) Descriptor() ([]byte, []int) {
	return file_service_node_log_proto_rawDescGZIP(), []int{4}
}

func (x *ListNodeLogsResponse) GetNodeLogs() []*NodeLog {
	if x != nil {
		return x.NodeLogs
	}
	return nil
}

var File_service_node_log_proto protoreflect.FileDescriptor

var file_service_node_log_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x42, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0x6d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x3f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x32, 0xdd, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_node_log_proto_rawDescOnce sync.Once
	file_service_node_log_proto_rawDescData = file_service_node_log_proto_rawDesc
)

func file_service_node_log_proto_rawDescGZIP() []byte {
	file_service_node_log_proto_rawDescOnce.Do(func() {
		file_service_node_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_node_log_proto_rawDescData)
	})
	return file_service_node_log_proto_rawDescData
}

var file_service_node_log_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_service_node_log_proto_goTypes = []interface{}{
	(*CreateNodeLogsRequest)(nil),  // 0: pb.CreateNodeLogsRequest
	(*CreateNodeLogsResponse)(nil), // 1: pb.CreateNodeLogsResponse
	(*CountNodeLogsRequest)(nil),   // 2: pb.CountNodeLogsRequest
	(*ListNodeLogsRequest)(nil),    // 3: pb.ListNodeLogsRequest
	(*ListNodeLogsResponse)(nil),   // 4: pb.ListNodeLogsResponse
	(*NodeLog)(nil),                // 5: pb.NodeLog
	(*RPCCountResponse)(nil),       // 6: pb.RPCCountResponse
}
var file_service_node_log_proto_depIdxs = []int32{
	5, // 0: pb.CreateNodeLogsRequest.nodeLogs:type_name -> pb.NodeLog
	5, // 1: pb.ListNodeLogsResponse.nodeLogs:type_name -> pb.NodeLog
	0, // 2: pb.NodeLogService.createNodeLogs:input_type -> pb.CreateNodeLogsRequest
	2, // 3: pb.NodeLogService.countNodeLogs:input_type -> pb.CountNodeLogsRequest
	3, // 4: pb.NodeLogService.listNodeLogs:input_type -> pb.ListNodeLogsRequest
	1, // 5: pb.NodeLogService.createNodeLogs:output_type -> pb.CreateNodeLogsResponse
	6, // 6: pb.NodeLogService.countNodeLogs:output_type -> pb.RPCCountResponse
	4, // 7: pb.NodeLogService.listNodeLogs:output_type -> pb.ListNodeLogsResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_service_node_log_proto_init() }
func file_service_node_log_proto_init() {
	if File_service_node_log_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_node_log_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_node_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountNodeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_node_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_node_log_proto_goTypes,
		DependencyIndexes: file_service_node_log_proto_depIdxs,
		MessageInfos:      file_service_node_log_proto_msgTypes,
	}.Build()
	File_service_node_log_proto = out.File
	file_service_node_log_proto_rawDesc = nil
	file_service_node_log_proto_goTypes = nil
	file_service_node_log_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeLogServiceClient is the client API for NodeLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeLogServiceClient interface {
	// 创建日志
	CreateNodeLogs(ctx context.Context, in *CreateNodeLogsRequest, opts ...grpc.CallOption) (*CreateNodeLogsResponse, error)
	// 查询日志数量
	CountNodeLogs(ctx context.Context, in *CountNodeLogsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页日志
	ListNodeLogs(ctx context.Context, in *ListNodeLogsRequest, opts ...grpc.CallOption) (*ListNodeLogsResponse, error)
}

type nodeLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeLogServiceClient(cc grpc.ClientConnInterface) NodeLogServiceClient {
	return &nodeLogServiceClient{cc}
}

func (c *nodeLogServiceClient) CreateNodeLogs(ctx context.Context, in *CreateNodeLogsRequest, opts ...grpc.CallOption) (*CreateNodeLogsResponse, error) {
	out := new(CreateNodeLogsResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeLogService/createNodeLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLogServiceClient) CountNodeLogs(ctx context.Context, in *CountNodeLogsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeLogService/countNodeLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLogServiceClient) ListNodeLogs(ctx context.Context, in *ListNodeLogsRequest, opts ...grpc.CallOption) (*ListNodeLogsResponse, error) {
	out := new(ListNodeLogsResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeLogService/listNodeLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeLogServiceServer is the server API for NodeLogService service.
type NodeLogServiceServer interface {
	// 创建日志
	CreateNodeLogs(context.Context, *CreateNodeLogsRequest) (*CreateNodeLogsResponse, error)
	// 查询日志数量
	CountNodeLogs(context.Context, *CountNodeLogsRequest) (*RPCCountResponse, error)
	// 列出单页日志
	ListNodeLogs(context.Context, *ListNodeLogsRequest) (*ListNodeLogsResponse, error)
}

// UnimplementedNodeLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeLogServiceServer struct {
}

func (*UnimplementedNodeLogServiceServer) CreateNodeLogs(context.Context, *CreateNodeLogsRequest) (*CreateNodeLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeLogs not implemented")
}
func (*UnimplementedNodeLogServiceServer) CountNodeLogs(context.Context, *CountNodeLogsRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountNodeLogs not implemented")
}
func (*UnimplementedNodeLogServiceServer) ListNodeLogs(context.Context, *ListNodeLogsRequest) (*ListNodeLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeLogs not implemented")
}

func RegisterNodeLogServiceServer(s *grpc.Server, srv NodeLogServiceServer) {
	s.RegisterService(&_NodeLogService_serviceDesc, srv)
}

func _NodeLogService_CreateNodeLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLogServiceServer).CreateNodeLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeLogService/CreateNodeLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLogServiceServer).CreateNodeLogs(ctx, req.(*CreateNodeLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLogService_CountNodeLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountNodeLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLogServiceServer).CountNodeLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeLogService/CountNodeLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLogServiceServer).CountNodeLogs(ctx, req.(*CountNodeLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLogService_ListNodeLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLogServiceServer).ListNodeLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeLogService/ListNodeLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLogServiceServer).ListNodeLogs(ctx, req.(*ListNodeLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NodeLogService",
	HandlerType: (*NodeLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNodeLogs",
			Handler:    _NodeLogService_CreateNodeLogs_Handler,
		},
		{
			MethodName: "countNodeLogs",
			Handler:    _NodeLogService_CountNodeLogs_Handler,
		},
		{
			MethodName: "listNodeLogs",
			Handler:    _NodeLogService_ListNodeLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_node_log.proto",
}
