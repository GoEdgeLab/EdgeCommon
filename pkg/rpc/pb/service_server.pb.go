// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_server.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建服务
type CreateServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	AdminId     int64  `protobuf:"varint,2,opt,name=adminId,proto3" json:"adminId,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// 配置相关
	ServerNamesJON   []byte  `protobuf:"bytes,8,opt,name=serverNamesJON,proto3" json:"serverNamesJON,omitempty"` // @link json:server_names
	HttpJSON         []byte  `protobuf:"bytes,9,opt,name=httpJSON,proto3" json:"httpJSON,omitempty"`
	HttpsJSON        []byte  `protobuf:"bytes,10,opt,name=httpsJSON,proto3" json:"httpsJSON,omitempty"`
	TcpJSON          []byte  `protobuf:"bytes,11,opt,name=tcpJSON,proto3" json:"tcpJSON,omitempty"`
	TlsJSON          []byte  `protobuf:"bytes,12,opt,name=tlsJSON,proto3" json:"tlsJSON,omitempty"`
	UnixJSON         []byte  `protobuf:"bytes,13,opt,name=unixJSON,proto3" json:"unixJSON,omitempty"`
	UdpJSON          []byte  `protobuf:"bytes,14,opt,name=udpJSON,proto3" json:"udpJSON,omitempty"`
	WebId            int64   `protobuf:"varint,15,opt,name=webId,proto3" json:"webId,omitempty"`
	ReverseProxyJSON []byte  `protobuf:"bytes,16,opt,name=reverseProxyJSON,proto3" json:"reverseProxyJSON,omitempty"`
	ServerGroupIds   []int64 `protobuf:"varint,17,rep,packed,name=serverGroupIds,proto3" json:"serverGroupIds,omitempty"`
	UserPlanId       int64   `protobuf:"varint,18,opt,name=userPlanId,proto3" json:"userPlanId,omitempty"`
	NodeClusterId    int64   `protobuf:"varint,30,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	IncludeNodesJSON []byte  `protobuf:"bytes,31,opt,name=includeNodesJSON,proto3" json:"includeNodesJSON,omitempty"`
	ExcludeNodesJSON []byte  `protobuf:"bytes,32,opt,name=excludeNodesJSON,proto3" json:"excludeNodesJSON,omitempty"`
}

func (x *CreateServerRequest) Reset() {
	*x = CreateServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerRequest) ProtoMessage() {}

func (x *CreateServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerRequest.ProtoReflect.Descriptor instead.
func (*CreateServerRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{0}
}

func (x *CreateServerRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateServerRequest) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *CreateServerRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateServerRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateServerRequest) GetServerNamesJON() []byte {
	if x != nil {
		return x.ServerNamesJON
	}
	return nil
}

func (x *CreateServerRequest) GetHttpJSON() []byte {
	if x != nil {
		return x.HttpJSON
	}
	return nil
}

func (x *CreateServerRequest) GetHttpsJSON() []byte {
	if x != nil {
		return x.HttpsJSON
	}
	return nil
}

func (x *CreateServerRequest) GetTcpJSON() []byte {
	if x != nil {
		return x.TcpJSON
	}
	return nil
}

func (x *CreateServerRequest) GetTlsJSON() []byte {
	if x != nil {
		return x.TlsJSON
	}
	return nil
}

func (x *CreateServerRequest) GetUnixJSON() []byte {
	if x != nil {
		return x.UnixJSON
	}
	return nil
}

func (x *CreateServerRequest) GetUdpJSON() []byte {
	if x != nil {
		return x.UdpJSON
	}
	return nil
}

func (x *CreateServerRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *CreateServerRequest) GetReverseProxyJSON() []byte {
	if x != nil {
		return x.ReverseProxyJSON
	}
	return nil
}

func (x *CreateServerRequest) GetServerGroupIds() []int64 {
	if x != nil {
		return x.ServerGroupIds
	}
	return nil
}

func (x *CreateServerRequest) GetUserPlanId() int64 {
	if x != nil {
		return x.UserPlanId
	}
	return 0
}

func (x *CreateServerRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CreateServerRequest) GetIncludeNodesJSON() []byte {
	if x != nil {
		return x.IncludeNodesJSON
	}
	return nil
}

func (x *CreateServerRequest) GetExcludeNodesJSON() []byte {
	if x != nil {
		return x.ExcludeNodesJSON
	}
	return nil
}

type CreateServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *CreateServerResponse) Reset() {
	*x = CreateServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerResponse) ProtoMessage() {}

func (x *CreateServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerResponse.ProtoReflect.Descriptor instead.
func (*CreateServerResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{1}
}

func (x *CreateServerResponse) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// 修改服务基本信息
type UpdateServerBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId       int64   `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	NodeClusterId  int64   `protobuf:"varint,4,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	KeepOldConfigs bool    `protobuf:"varint,7,opt,name=keepOldConfigs,proto3" json:"keepOldConfigs,omitempty"` // 是否在老节点上保留一段时间配置
	IsOn           bool    `protobuf:"varint,5,opt,name=isOn,proto3" json:"isOn,omitempty"`
	ServerGroupIds []int64 `protobuf:"varint,6,rep,packed,name=serverGroupIds,proto3" json:"serverGroupIds,omitempty"`
}

func (x *UpdateServerBasicRequest) Reset() {
	*x = UpdateServerBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerBasicRequest) ProtoMessage() {}

func (x *UpdateServerBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerBasicRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerBasicRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateServerBasicRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerBasicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateServerBasicRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateServerBasicRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *UpdateServerBasicRequest) GetKeepOldConfigs() bool {
	if x != nil {
		return x.KeepOldConfigs
	}
	return false
}

func (x *UpdateServerBasicRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateServerBasicRequest) GetServerGroupIds() []int64 {
	if x != nil {
		return x.ServerGroupIds
	}
	return nil
}

// 修改服务所在分组
type UpdateServerGroupIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId       int64   `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ServerGroupIds []int64 `protobuf:"varint,2,rep,packed,name=serverGroupIds,proto3" json:"serverGroupIds,omitempty"`
}

func (x *UpdateServerGroupIdsRequest) Reset() {
	*x = UpdateServerGroupIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerGroupIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerGroupIdsRequest) ProtoMessage() {}

func (x *UpdateServerGroupIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerGroupIdsRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerGroupIdsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateServerGroupIdsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerGroupIdsRequest) GetServerGroupIds() []int64 {
	if x != nil {
		return x.ServerGroupIds
	}
	return nil
}

// 修改服务启是否启用
type UpdateServerIsOnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	IsOn     bool  `protobuf:"varint,2,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateServerIsOnRequest) Reset() {
	*x = UpdateServerIsOnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerIsOnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerIsOnRequest) ProtoMessage() {}

func (x *UpdateServerIsOnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerIsOnRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerIsOnRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateServerIsOnRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerIsOnRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 修改服务的HTTP等设置
type UpdateServerHTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	HttpJSON []byte `protobuf:"bytes,2,opt,name=httpJSON,proto3" json:"httpJSON,omitempty"`
}

func (x *UpdateServerHTTPRequest) Reset() {
	*x = UpdateServerHTTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerHTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerHTTPRequest) ProtoMessage() {}

func (x *UpdateServerHTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerHTTPRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerHTTPRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateServerHTTPRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerHTTPRequest) GetHttpJSON() []byte {
	if x != nil {
		return x.HttpJSON
	}
	return nil
}

type UpdateServerHTTPSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId  int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	HttpsJSON []byte `protobuf:"bytes,2,opt,name=httpsJSON,proto3" json:"httpsJSON,omitempty"`
}

func (x *UpdateServerHTTPSRequest) Reset() {
	*x = UpdateServerHTTPSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerHTTPSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerHTTPSRequest) ProtoMessage() {}

func (x *UpdateServerHTTPSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerHTTPSRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerHTTPSRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateServerHTTPSRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerHTTPSRequest) GetHttpsJSON() []byte {
	if x != nil {
		return x.HttpsJSON
	}
	return nil
}

type UpdateServerTCPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	TcpJSON  []byte `protobuf:"bytes,2,opt,name=tcpJSON,proto3" json:"tcpJSON,omitempty"`
}

func (x *UpdateServerTCPRequest) Reset() {
	*x = UpdateServerTCPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerTCPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerTCPRequest) ProtoMessage() {}

func (x *UpdateServerTCPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerTCPRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerTCPRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateServerTCPRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerTCPRequest) GetTcpJSON() []byte {
	if x != nil {
		return x.TcpJSON
	}
	return nil
}

type UpdateServerTLSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	TlsJSON  []byte `protobuf:"bytes,2,opt,name=tlsJSON,proto3" json:"tlsJSON,omitempty"`
}

func (x *UpdateServerTLSRequest) Reset() {
	*x = UpdateServerTLSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerTLSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerTLSRequest) ProtoMessage() {}

func (x *UpdateServerTLSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerTLSRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerTLSRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateServerTLSRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerTLSRequest) GetTlsJSON() []byte {
	if x != nil {
		return x.TlsJSON
	}
	return nil
}

type UpdateServerUnixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UnixJSON []byte `protobuf:"bytes,2,opt,name=unixJSON,proto3" json:"unixJSON,omitempty"`
}

func (x *UpdateServerUnixRequest) Reset() {
	*x = UpdateServerUnixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerUnixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerUnixRequest) ProtoMessage() {}

func (x *UpdateServerUnixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerUnixRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerUnixRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateServerUnixRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerUnixRequest) GetUnixJSON() []byte {
	if x != nil {
		return x.UnixJSON
	}
	return nil
}

type UpdateServerUDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UdpJSON  []byte `protobuf:"bytes,2,opt,name=udpJSON,proto3" json:"udpJSON,omitempty"`
}

func (x *UpdateServerUDPRequest) Reset() {
	*x = UpdateServerUDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerUDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerUDPRequest) ProtoMessage() {}

func (x *UpdateServerUDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerUDPRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerUDPRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateServerUDPRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerUDPRequest) GetUdpJSON() []byte {
	if x != nil {
		return x.UdpJSON
	}
	return nil
}

type UpdateServerWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	WebId    int64 `protobuf:"varint,2,opt,name=webId,proto3" json:"webId,omitempty"`
}

func (x *UpdateServerWebRequest) Reset() {
	*x = UpdateServerWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerWebRequest) ProtoMessage() {}

func (x *UpdateServerWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerWebRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerWebRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateServerWebRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerWebRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

// 修改服务的反向代理设置
type UpdateServerReverseProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId         int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ReverseProxyJSON []byte `protobuf:"bytes,2,opt,name=reverseProxyJSON,proto3" json:"reverseProxyJSON,omitempty"`
}

func (x *UpdateServerReverseProxyRequest) Reset() {
	*x = UpdateServerReverseProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerReverseProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerReverseProxyRequest) ProtoMessage() {}

func (x *UpdateServerReverseProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerReverseProxyRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerReverseProxyRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateServerReverseProxyRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerReverseProxyRequest) GetReverseProxyJSON() []byte {
	if x != nil {
		return x.ReverseProxyJSON
	}
	return nil
}

// 查找服务的域名设置
type FindServerNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindServerNamesRequest) Reset() {
	*x = FindServerNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerNamesRequest) ProtoMessage() {}

func (x *FindServerNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerNamesRequest.ProtoReflect.Descriptor instead.
func (*FindServerNamesRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{13}
}

func (x *FindServerNamesRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindServerNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNamesJSON         []byte                    `protobuf:"bytes,1,opt,name=serverNamesJSON,proto3" json:"serverNamesJSON,omitempty"`
	IsAuditing              bool                      `protobuf:"varint,2,opt,name=isAuditing,proto3" json:"isAuditing,omitempty"`
	AuditingAt              int64                     `protobuf:"varint,5,opt,name=auditingAt,proto3" json:"auditingAt,omitempty"`
	AuditingServerNamesJSON []byte                    `protobuf:"bytes,3,opt,name=auditingServerNamesJSON,proto3" json:"auditingServerNamesJSON,omitempty"`
	AuditingResult          *ServerNameAuditingResult `protobuf:"bytes,4,opt,name=auditingResult,proto3" json:"auditingResult,omitempty"`
}

func (x *FindServerNamesResponse) Reset() {
	*x = FindServerNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerNamesResponse) ProtoMessage() {}

func (x *FindServerNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerNamesResponse.ProtoReflect.Descriptor instead.
func (*FindServerNamesResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{14}
}

func (x *FindServerNamesResponse) GetServerNamesJSON() []byte {
	if x != nil {
		return x.ServerNamesJSON
	}
	return nil
}

func (x *FindServerNamesResponse) GetIsAuditing() bool {
	if x != nil {
		return x.IsAuditing
	}
	return false
}

func (x *FindServerNamesResponse) GetAuditingAt() int64 {
	if x != nil {
		return x.AuditingAt
	}
	return 0
}

func (x *FindServerNamesResponse) GetAuditingServerNamesJSON() []byte {
	if x != nil {
		return x.AuditingServerNamesJSON
	}
	return nil
}

func (x *FindServerNamesResponse) GetAuditingResult() *ServerNameAuditingResult {
	if x != nil {
		return x.AuditingResult
	}
	return nil
}

// 修改服务的域名设置
type UpdateServerNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId        int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ServerNamesJSON []byte `protobuf:"bytes,2,opt,name=serverNamesJSON,proto3" json:"serverNamesJSON,omitempty"`
}

func (x *UpdateServerNamesRequest) Reset() {
	*x = UpdateServerNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerNamesRequest) ProtoMessage() {}

func (x *UpdateServerNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerNamesRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerNamesRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateServerNamesRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerNamesRequest) GetServerNamesJSON() []byte {
	if x != nil {
		return x.ServerNamesJSON
	}
	return nil
}

// 审核服务的域名设置
type UpdateServerNamesAuditingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId       int64                     `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	AuditingResult *ServerNameAuditingResult `protobuf:"bytes,2,opt,name=auditingResult,proto3" json:"auditingResult,omitempty"`
}

func (x *UpdateServerNamesAuditingRequest) Reset() {
	*x = UpdateServerNamesAuditingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerNamesAuditingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerNamesAuditingRequest) ProtoMessage() {}

func (x *UpdateServerNamesAuditingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerNamesAuditingRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerNamesAuditingRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateServerNamesAuditingRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerNamesAuditingRequest) GetAuditingResult() *ServerNameAuditingResult {
	if x != nil {
		return x.AuditingResult
	}
	return nil
}

// 修改服务的DNS相关设置
type UpdateServerDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId     int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	SupportCNAME bool  `protobuf:"varint,2,opt,name=supportCNAME,proto3" json:"supportCNAME,omitempty"`
}

func (x *UpdateServerDNSRequest) Reset() {
	*x = UpdateServerDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerDNSRequest) ProtoMessage() {}

func (x *UpdateServerDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerDNSRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerDNSRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateServerDNSRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerDNSRequest) GetSupportCNAME() bool {
	if x != nil {
		return x.SupportCNAME
	}
	return false
}

// 重新生成CNAME
type RegenerateServerDNSNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *RegenerateServerDNSNameRequest) Reset() {
	*x = RegenerateServerDNSNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateServerDNSNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateServerDNSNameRequest) ProtoMessage() {}

func (x *RegenerateServerDNSNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateServerDNSNameRequest.ProtoReflect.Descriptor instead.
func (*RegenerateServerDNSNameRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{18}
}

func (x *RegenerateServerDNSNameRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// 修改服务的CNAME
type UpdateServerDNSNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DnsName  string `protobuf:"bytes,2,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
}

func (x *UpdateServerDNSNameRequest) Reset() {
	*x = UpdateServerDNSNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerDNSNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerDNSNameRequest) ProtoMessage() {}

func (x *UpdateServerDNSNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerDNSNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerDNSNameRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateServerDNSNameRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerDNSNameRequest) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

// 使用CNAME查找服务
type FindServerIdWithDNSNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64  `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	DnsName       string `protobuf:"bytes,2,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
}

func (x *FindServerIdWithDNSNameRequest) Reset() {
	*x = FindServerIdWithDNSNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerIdWithDNSNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerIdWithDNSNameRequest) ProtoMessage() {}

func (x *FindServerIdWithDNSNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerIdWithDNSNameRequest.ProtoReflect.Descriptor instead.
func (*FindServerIdWithDNSNameRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{20}
}

func (x *FindServerIdWithDNSNameRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *FindServerIdWithDNSNameRequest) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

type FindServerIdWithDNSNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindServerIdWithDNSNameResponse) Reset() {
	*x = FindServerIdWithDNSNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerIdWithDNSNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerIdWithDNSNameResponse) ProtoMessage() {}

func (x *FindServerIdWithDNSNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerIdWithDNSNameResponse.ProtoReflect.Descriptor instead.
func (*FindServerIdWithDNSNameResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{21}
}

func (x *FindServerIdWithDNSNameResponse) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// 计算服务数量
type CountAllEnabledServersMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerGroupId  int64  `protobuf:"varint,1,opt,name=serverGroupId,proto3" json:"serverGroupId,omitempty"` // 服务分组ID，如果为-1表示查找未分组
	Keyword        string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	UserId         int64  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	NodeClusterId  int64  `protobuf:"varint,4,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	AuditingFlag   int32  `protobuf:"varint,5,opt,name=auditingFlag,proto3" json:"auditingFlag,omitempty"`
	ProtocolFamily string `protobuf:"bytes,6,opt,name=protocolFamily,proto3" json:"protocolFamily,omitempty"`
}

func (x *CountAllEnabledServersMatchRequest) Reset() {
	*x = CountAllEnabledServersMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledServersMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledServersMatchRequest) ProtoMessage() {}

func (x *CountAllEnabledServersMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledServersMatchRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledServersMatchRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{22}
}

func (x *CountAllEnabledServersMatchRequest) GetServerGroupId() int64 {
	if x != nil {
		return x.ServerGroupId
	}
	return 0
}

func (x *CountAllEnabledServersMatchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CountAllEnabledServersMatchRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CountAllEnabledServersMatchRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CountAllEnabledServersMatchRequest) GetAuditingFlag() int32 {
	if x != nil {
		return x.AuditingFlag
	}
	return 0
}

func (x *CountAllEnabledServersMatchRequest) GetProtocolFamily() string {
	if x != nil {
		return x.ProtocolFamily
	}
	return ""
}

// 列出单页服务
type ListEnabledServersMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset         int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size           int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ServerGroupId  int64  `protobuf:"varint,3,opt,name=serverGroupId,proto3" json:"serverGroupId,omitempty"` // 服务分组ID，如果为-1表示查找未分组
	Keyword        string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
	UserId         int64  `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`
	NodeClusterId  int64  `protobuf:"varint,6,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	AuditingFlag   int32  `protobuf:"varint,7,opt,name=auditingFlag,proto3" json:"auditingFlag,omitempty"`
	ProtocolFamily string `protobuf:"bytes,8,opt,name=protocolFamily,proto3" json:"protocolFamily,omitempty"`
	TrafficOutAsc  bool   `protobuf:"varint,9,opt,name=trafficOutAsc,proto3" json:"trafficOutAsc,omitempty"`
	TrafficOutDesc bool   `protobuf:"varint,10,opt,name=trafficOutDesc,proto3" json:"trafficOutDesc,omitempty"`
}

func (x *ListEnabledServersMatchRequest) Reset() {
	*x = ListEnabledServersMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledServersMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledServersMatchRequest) ProtoMessage() {}

func (x *ListEnabledServersMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledServersMatchRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledServersMatchRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{23}
}

func (x *ListEnabledServersMatchRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetServerGroupId() int64 {
	if x != nil {
		return x.ServerGroupId
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListEnabledServersMatchRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetAuditingFlag() int32 {
	if x != nil {
		return x.AuditingFlag
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetProtocolFamily() string {
	if x != nil {
		return x.ProtocolFamily
	}
	return ""
}

func (x *ListEnabledServersMatchRequest) GetTrafficOutAsc() bool {
	if x != nil {
		return x.TrafficOutAsc
	}
	return false
}

func (x *ListEnabledServersMatchRequest) GetTrafficOutDesc() bool {
	if x != nil {
		return x.TrafficOutDesc
	}
	return false
}

type ListEnabledServersMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *ListEnabledServersMatchResponse) Reset() {
	*x = ListEnabledServersMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledServersMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledServersMatchResponse) ProtoMessage() {}

func (x *ListEnabledServersMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledServersMatchResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledServersMatchResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{24}
}

func (x *ListEnabledServersMatchResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

// 禁用服务
type DeleteServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *DeleteServerRequest) Reset() {
	*x = DeleteServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerRequest) ProtoMessage() {}

func (x *DeleteServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteServerRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteServerRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// 查找单个服务
type FindEnabledServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerRequest) Reset() {
	*x = FindEnabledServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerRequest) ProtoMessage() {}

func (x *FindEnabledServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{26}
}

func (x *FindEnabledServerRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *FindEnabledServerResponse) Reset() {
	*x = FindEnabledServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerResponse) ProtoMessage() {}

func (x *FindEnabledServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{27}
}

func (x *FindEnabledServerResponse) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

// 查找服务配置
type FindEnabledServerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerConfigRequest) Reset() {
	*x = FindEnabledServerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerConfigRequest) ProtoMessage() {}

func (x *FindEnabledServerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerConfigRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{28}
}

func (x *FindEnabledServerConfigRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerJSON []byte `protobuf:"bytes,1,opt,name=serverJSON,proto3" json:"serverJSON,omitempty"`
}

func (x *FindEnabledServerConfigResponse) Reset() {
	*x = FindEnabledServerConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerConfigResponse) ProtoMessage() {}

func (x *FindEnabledServerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerConfigResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{29}
}

func (x *FindEnabledServerConfigResponse) GetServerJSON() []byte {
	if x != nil {
		return x.ServerJSON
	}
	return nil
}

// 查找服务的服务类型
type FindEnabledServerTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerTypeRequest) Reset() {
	*x = FindEnabledServerTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerTypeRequest) ProtoMessage() {}

func (x *FindEnabledServerTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerTypeRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerTypeRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{30}
}

func (x *FindEnabledServerTypeRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FindEnabledServerTypeResponse) Reset() {
	*x = FindEnabledServerTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerTypeResponse) ProtoMessage() {}

func (x *FindEnabledServerTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerTypeResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerTypeResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{31}
}

func (x *FindEnabledServerTypeResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 查找反向代理设置
type FindAndInitServerReverseProxyConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindAndInitServerReverseProxyConfigRequest) Reset() {
	*x = FindAndInitServerReverseProxyConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAndInitServerReverseProxyConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAndInitServerReverseProxyConfigRequest) ProtoMessage() {}

func (x *FindAndInitServerReverseProxyConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAndInitServerReverseProxyConfigRequest.ProtoReflect.Descriptor instead.
func (*FindAndInitServerReverseProxyConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{32}
}

func (x *FindAndInitServerReverseProxyConfigRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindAndInitServerReverseProxyConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxyJSON    []byte `protobuf:"bytes,1,opt,name=reverseProxyJSON,proto3" json:"reverseProxyJSON,omitempty"`
	ReverseProxyRefJSON []byte `protobuf:"bytes,2,opt,name=reverseProxyRefJSON,proto3" json:"reverseProxyRefJSON,omitempty"`
}

func (x *FindAndInitServerReverseProxyConfigResponse) Reset() {
	*x = FindAndInitServerReverseProxyConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAndInitServerReverseProxyConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAndInitServerReverseProxyConfigResponse) ProtoMessage() {}

func (x *FindAndInitServerReverseProxyConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAndInitServerReverseProxyConfigResponse.ProtoReflect.Descriptor instead.
func (*FindAndInitServerReverseProxyConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{33}
}

func (x *FindAndInitServerReverseProxyConfigResponse) GetReverseProxyJSON() []byte {
	if x != nil {
		return x.ReverseProxyJSON
	}
	return nil
}

func (x *FindAndInitServerReverseProxyConfigResponse) GetReverseProxyRefJSON() []byte {
	if x != nil {
		return x.ReverseProxyRefJSON
	}
	return nil
}

// 初始化Web设置
type FindAndInitServerWebConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindAndInitServerWebConfigRequest) Reset() {
	*x = FindAndInitServerWebConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAndInitServerWebConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAndInitServerWebConfigRequest) ProtoMessage() {}

func (x *FindAndInitServerWebConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAndInitServerWebConfigRequest.ProtoReflect.Descriptor instead.
func (*FindAndInitServerWebConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{34}
}

func (x *FindAndInitServerWebConfigRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindAndInitServerWebConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebJSON []byte `protobuf:"bytes,1,opt,name=webJSON,proto3" json:"webJSON,omitempty"`
}

func (x *FindAndInitServerWebConfigResponse) Reset() {
	*x = FindAndInitServerWebConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAndInitServerWebConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAndInitServerWebConfigResponse) ProtoMessage() {}

func (x *FindAndInitServerWebConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAndInitServerWebConfigResponse.ProtoReflect.Descriptor instead.
func (*FindAndInitServerWebConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{35}
}

func (x *FindAndInitServerWebConfigResponse) GetWebJSON() []byte {
	if x != nil {
		return x.WebJSON
	}
	return nil
}

// 计算使用某个SSL证书的服务数量
type CountAllEnabledServersWithSSLCertIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *CountAllEnabledServersWithSSLCertIdRequest) Reset() {
	*x = CountAllEnabledServersWithSSLCertIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledServersWithSSLCertIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledServersWithSSLCertIdRequest) ProtoMessage() {}

func (x *CountAllEnabledServersWithSSLCertIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledServersWithSSLCertIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledServersWithSSLCertIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{36}
}

func (x *CountAllEnabledServersWithSSLCertIdRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

// 查找使用某个SSL证书的所有服务
type FindAllEnabledServersWithSSLCertIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *FindAllEnabledServersWithSSLCertIdRequest) Reset() {
	*x = FindAllEnabledServersWithSSLCertIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServersWithSSLCertIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServersWithSSLCertIdRequest) ProtoMessage() {}

func (x *FindAllEnabledServersWithSSLCertIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServersWithSSLCertIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServersWithSSLCertIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{37}
}

func (x *FindAllEnabledServersWithSSLCertIdRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

type FindAllEnabledServersWithSSLCertIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *FindAllEnabledServersWithSSLCertIdResponse) Reset() {
	*x = FindAllEnabledServersWithSSLCertIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServersWithSSLCertIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServersWithSSLCertIdResponse) ProtoMessage() {}

func (x *FindAllEnabledServersWithSSLCertIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServersWithSSLCertIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServersWithSSLCertIdResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{38}
}

func (x *FindAllEnabledServersWithSSLCertIdResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

// 计算运行在某个集群上的所有服务数量
type CountAllEnabledServersWithNodeClusterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64 `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
}

func (x *CountAllEnabledServersWithNodeClusterIdRequest) Reset() {
	*x = CountAllEnabledServersWithNodeClusterIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledServersWithNodeClusterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledServersWithNodeClusterIdRequest) ProtoMessage() {}

func (x *CountAllEnabledServersWithNodeClusterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledServersWithNodeClusterIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledServersWithNodeClusterIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{39}
}

func (x *CountAllEnabledServersWithNodeClusterIdRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

// 计算使用某个分组的服务数量
type CountAllEnabledServersWithServerGroupIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerGroupId int64 `protobuf:"varint,1,opt,name=serverGroupId,proto3" json:"serverGroupId,omitempty"`
}

func (x *CountAllEnabledServersWithServerGroupIdRequest) Reset() {
	*x = CountAllEnabledServersWithServerGroupIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledServersWithServerGroupIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledServersWithServerGroupIdRequest) ProtoMessage() {}

func (x *CountAllEnabledServersWithServerGroupIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledServersWithServerGroupIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledServersWithServerGroupIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{40}
}

func (x *CountAllEnabledServersWithServerGroupIdRequest) GetServerGroupId() int64 {
	if x != nil {
		return x.ServerGroupId
	}
	return 0
}

// 通知更新
type NotifyServersChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotifyServersChangeRequest) Reset() {
	*x = NotifyServersChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyServersChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyServersChangeRequest) ProtoMessage() {}

func (x *NotifyServersChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyServersChangeRequest.ProtoReflect.Descriptor instead.
func (*NotifyServersChangeRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{41}
}

type NotifyServersChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotifyServersChangeResponse) Reset() {
	*x = NotifyServersChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyServersChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyServersChangeResponse) ProtoMessage() {}

func (x *NotifyServersChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyServersChangeResponse.ProtoReflect.Descriptor instead.
func (*NotifyServersChangeResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{42}
}

// 取得某个集群下的所有服务相关的DNS
type FindAllEnabledServersDNSWithNodeClusterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64 `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdRequest) Reset() {
	*x = FindAllEnabledServersDNSWithNodeClusterIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServersDNSWithNodeClusterIdRequest) ProtoMessage() {}

func (x *FindAllEnabledServersDNSWithNodeClusterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServersDNSWithNodeClusterIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServersDNSWithNodeClusterIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{43}
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

type FindAllEnabledServersDNSWithNodeClusterIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*ServerDNSInfo `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdResponse) Reset() {
	*x = FindAllEnabledServersDNSWithNodeClusterIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServersDNSWithNodeClusterIdResponse) ProtoMessage() {}

func (x *FindAllEnabledServersDNSWithNodeClusterIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServersDNSWithNodeClusterIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServersDNSWithNodeClusterIdResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{44}
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdResponse) GetServers() []*ServerDNSInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

type ServerDNSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DnsName string `protobuf:"bytes,3,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
}

func (x *ServerDNSInfo) Reset() {
	*x = ServerDNSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerDNSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerDNSInfo) ProtoMessage() {}

func (x *ServerDNSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerDNSInfo.ProtoReflect.Descriptor instead.
func (*ServerDNSInfo) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{45}
}

func (x *ServerDNSInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServerDNSInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServerDNSInfo) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

// 查找单个服务的DNS信息
type FindEnabledServerDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerDNSRequest) Reset() {
	*x = FindEnabledServerDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerDNSRequest) ProtoMessage() {}

func (x *FindEnabledServerDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerDNSRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerDNSRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{46}
}

func (x *FindEnabledServerDNSRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerDNSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsName      string     `protobuf:"bytes,1,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
	Domain       *DNSDomain `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	SupportCNAME bool       `protobuf:"varint,3,opt,name=supportCNAME,proto3" json:"supportCNAME,omitempty"`
}

func (x *FindEnabledServerDNSResponse) Reset() {
	*x = FindEnabledServerDNSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerDNSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerDNSResponse) ProtoMessage() {}

func (x *FindEnabledServerDNSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerDNSResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerDNSResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{47}
}

func (x *FindEnabledServerDNSResponse) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *FindEnabledServerDNSResponse) GetDomain() *DNSDomain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *FindEnabledServerDNSResponse) GetSupportCNAME() bool {
	if x != nil {
		return x.SupportCNAME
	}
	return false
}

// 检查服务是否属于某个用户
type CheckUserServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *CheckUserServerRequest) Reset() {
	*x = CheckUserServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserServerRequest) ProtoMessage() {}

func (x *CheckUserServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserServerRequest.ProtoReflect.Descriptor instead.
func (*CheckUserServerRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{48}
}

func (x *CheckUserServerRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// 查找一个用户下的所有域名列表
type FindAllEnabledServerNamesWithUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindAllEnabledServerNamesWithUserIdRequest) Reset() {
	*x = FindAllEnabledServerNamesWithUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServerNamesWithUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServerNamesWithUserIdRequest) ProtoMessage() {}

func (x *FindAllEnabledServerNamesWithUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServerNamesWithUserIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServerNamesWithUserIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{49}
}

func (x *FindAllEnabledServerNamesWithUserIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FindAllEnabledServerNamesWithUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNames []string `protobuf:"bytes,1,rep,name=serverNames,proto3" json:"serverNames,omitempty"`
}

func (x *FindAllEnabledServerNamesWithUserIdResponse) Reset() {
	*x = FindAllEnabledServerNamesWithUserIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServerNamesWithUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServerNamesWithUserIdResponse) ProtoMessage() {}

func (x *FindAllEnabledServerNamesWithUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServerNamesWithUserIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServerNamesWithUserIdResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{50}
}

func (x *FindAllEnabledServerNamesWithUserIdResponse) GetServerNames() []string {
	if x != nil {
		return x.ServerNames
	}
	return nil
}

// 查找用户服务基本信息
type FindEnabledUserServerBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledUserServerBasicRequest) Reset() {
	*x = FindEnabledUserServerBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledUserServerBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledUserServerBasicRequest) ProtoMessage() {}

func (x *FindEnabledUserServerBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledUserServerBasicRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledUserServerBasicRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{51}
}

func (x *FindEnabledUserServerBasicRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledUserServerBasicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *FindEnabledUserServerBasicResponse) Reset() {
	*x = FindEnabledUserServerBasicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledUserServerBasicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledUserServerBasicResponse) ProtoMessage() {}

func (x *FindEnabledUserServerBasicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledUserServerBasicResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledUserServerBasicResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{52}
}

func (x *FindEnabledUserServerBasicResponse) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

// 修改用户服务基本信息
type UpdateEnabledUserServerBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateEnabledUserServerBasicRequest) Reset() {
	*x = UpdateEnabledUserServerBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnabledUserServerBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnabledUserServerBasicRequest) ProtoMessage() {}

func (x *UpdateEnabledUserServerBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnabledUserServerBasicRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnabledUserServerBasicRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{53}
}

func (x *UpdateEnabledUserServerBasicRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateEnabledUserServerBasicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 上传HTTP请求待统计数据
type UploadServerHTTPRequestStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                  string                                                      `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	Day                    string                                                      `protobuf:"bytes,2,opt,name=day,proto3" json:"day,omitempty"`
	RegionCities           []*UploadServerHTTPRequestStatRequest_RegionCity            `protobuf:"bytes,3,rep,name=regionCities,proto3" json:"regionCities,omitempty"`
	RegionProviders        []*UploadServerHTTPRequestStatRequest_RegionProvider        `protobuf:"bytes,4,rep,name=regionProviders,proto3" json:"regionProviders,omitempty"`
	Systems                []*UploadServerHTTPRequestStatRequest_System                `protobuf:"bytes,5,rep,name=systems,proto3" json:"systems,omitempty"`
	Browsers               []*UploadServerHTTPRequestStatRequest_Browser               `protobuf:"bytes,6,rep,name=browsers,proto3" json:"browsers,omitempty"`
	HttpFirewallRuleGroups []*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup `protobuf:"bytes,7,rep,name=httpFirewallRuleGroups,proto3" json:"httpFirewallRuleGroups,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest) Reset() {
	*x = UploadServerHTTPRequestStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{54}
}

func (x *UploadServerHTTPRequestStatRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest) GetRegionCities() []*UploadServerHTTPRequestStatRequest_RegionCity {
	if x != nil {
		return x.RegionCities
	}
	return nil
}

func (x *UploadServerHTTPRequestStatRequest) GetRegionProviders() []*UploadServerHTTPRequestStatRequest_RegionProvider {
	if x != nil {
		return x.RegionProviders
	}
	return nil
}

func (x *UploadServerHTTPRequestStatRequest) GetSystems() []*UploadServerHTTPRequestStatRequest_System {
	if x != nil {
		return x.Systems
	}
	return nil
}

func (x *UploadServerHTTPRequestStatRequest) GetBrowsers() []*UploadServerHTTPRequestStatRequest_Browser {
	if x != nil {
		return x.Browsers
	}
	return nil
}

func (x *UploadServerHTTPRequestStatRequest) GetHttpFirewallRuleGroups() []*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup {
	if x != nil {
		return x.HttpFirewallRuleGroups
	}
	return nil
}

// 检查域名是否已经存在
type CheckServerNameDuplicationInNodeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId   int64    `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	ServerNames     []string `protobuf:"bytes,2,rep,name=serverNames,proto3" json:"serverNames,omitempty"`          // 可以同时检查一批域名
	ExcludeServerId int64    `protobuf:"varint,3,opt,name=excludeServerId,proto3" json:"excludeServerId,omitempty"` // 要排除的服务ID
	SupportWildcard bool     `protobuf:"varint,4,opt,name=supportWildcard,proto3" json:"supportWildcard,omitempty"` // 支持泛解析
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) Reset() {
	*x = CheckServerNameDuplicationInNodeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckServerNameDuplicationInNodeClusterRequest) ProtoMessage() {}

func (x *CheckServerNameDuplicationInNodeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckServerNameDuplicationInNodeClusterRequest.ProtoReflect.Descriptor instead.
func (*CheckServerNameDuplicationInNodeClusterRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{55}
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) GetServerNames() []string {
	if x != nil {
		return x.ServerNames
	}
	return nil
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) GetExcludeServerId() int64 {
	if x != nil {
		return x.ExcludeServerId
	}
	return 0
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) GetSupportWildcard() bool {
	if x != nil {
		return x.SupportWildcard
	}
	return false
}

type CheckServerNameDuplicationInNodeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DuplicatedServerNames []string `protobuf:"bytes,1,rep,name=duplicatedServerNames,proto3" json:"duplicatedServerNames,omitempty"`
}

func (x *CheckServerNameDuplicationInNodeClusterResponse) Reset() {
	*x = CheckServerNameDuplicationInNodeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckServerNameDuplicationInNodeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckServerNameDuplicationInNodeClusterResponse) ProtoMessage() {}

func (x *CheckServerNameDuplicationInNodeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckServerNameDuplicationInNodeClusterResponse.ProtoReflect.Descriptor instead.
func (*CheckServerNameDuplicationInNodeClusterResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{56}
}

func (x *CheckServerNameDuplicationInNodeClusterResponse) GetDuplicatedServerNames() []string {
	if x != nil {
		return x.DuplicatedServerNames
	}
	return nil
}

// 查找最近访问的服务
type FindLatestServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FindLatestServersRequest) Reset() {
	*x = FindLatestServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServersRequest) ProtoMessage() {}

func (x *FindLatestServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServersRequest.ProtoReflect.Descriptor instead.
func (*FindLatestServersRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{57}
}

func (x *FindLatestServersRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FindLatestServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *FindLatestServersResponse) Reset() {
	*x = FindLatestServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServersResponse) ProtoMessage() {}

func (x *FindLatestServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServersResponse.ProtoReflect.Descriptor instead.
func (*FindLatestServersResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{58}
}

func (x *FindLatestServersResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

// 查找某个服务附近的服务
type FindNearbyServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindNearbyServersRequest) Reset() {
	*x = FindNearbyServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNearbyServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNearbyServersRequest) ProtoMessage() {}

func (x *FindNearbyServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNearbyServersRequest.ProtoReflect.Descriptor instead.
func (*FindNearbyServersRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{59}
}

func (x *FindNearbyServersRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindNearbyServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string                                 `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"` // 范围 cluster|group
	Groups []*FindNearbyServersResponse_GroupInfo `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *FindNearbyServersResponse) Reset() {
	*x = FindNearbyServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNearbyServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNearbyServersResponse) ProtoMessage() {}

func (x *FindNearbyServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNearbyServersResponse.ProtoReflect.Descriptor instead.
func (*FindNearbyServersResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{60}
}

func (x *FindNearbyServersResponse) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *FindNearbyServersResponse) GetGroups() []*FindNearbyServersResponse_GroupInfo {
	if x != nil {
		return x.Groups
	}
	return nil
}

// 清除缓存
type PurgeServerCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys        []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Prefixes    []string `protobuf:"bytes,3,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"` // 任务描述
}

func (x *PurgeServerCacheRequest) Reset() {
	*x = PurgeServerCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeServerCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeServerCacheRequest) ProtoMessage() {}

func (x *PurgeServerCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeServerCacheRequest.ProtoReflect.Descriptor instead.
func (*PurgeServerCacheRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{61}
}

func (x *PurgeServerCacheRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PurgeServerCacheRequest) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *PurgeServerCacheRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PurgeServerCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk    bool   `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PurgeServerCacheResponse) Reset() {
	*x = PurgeServerCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeServerCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeServerCacheResponse) ProtoMessage() {}

func (x *PurgeServerCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeServerCacheResponse.ProtoReflect.Descriptor instead.
func (*PurgeServerCacheResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{62}
}

func (x *PurgeServerCacheResponse) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *PurgeServerCacheResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查找流量限制
type FindEnabledServerTrafficLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerTrafficLimitRequest) Reset() {
	*x = FindEnabledServerTrafficLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerTrafficLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerTrafficLimitRequest) ProtoMessage() {}

func (x *FindEnabledServerTrafficLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerTrafficLimitRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerTrafficLimitRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{63}
}

func (x *FindEnabledServerTrafficLimitRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerTrafficLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficLimitJSON []byte `protobuf:"bytes,1,opt,name=trafficLimitJSON,proto3" json:"trafficLimitJSON,omitempty"`
}

func (x *FindEnabledServerTrafficLimitResponse) Reset() {
	*x = FindEnabledServerTrafficLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerTrafficLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerTrafficLimitResponse) ProtoMessage() {}

func (x *FindEnabledServerTrafficLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerTrafficLimitResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerTrafficLimitResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{64}
}

func (x *FindEnabledServerTrafficLimitResponse) GetTrafficLimitJSON() []byte {
	if x != nil {
		return x.TrafficLimitJSON
	}
	return nil
}

// 设置流量限制
type UpdateServerTrafficLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId         int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	TrafficLimitJSON []byte `protobuf:"bytes,2,opt,name=trafficLimitJSON,proto3" json:"trafficLimitJSON,omitempty"`
}

func (x *UpdateServerTrafficLimitRequest) Reset() {
	*x = UpdateServerTrafficLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerTrafficLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerTrafficLimitRequest) ProtoMessage() {}

func (x *UpdateServerTrafficLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerTrafficLimitRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerTrafficLimitRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateServerTrafficLimitRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerTrafficLimitRequest) GetTrafficLimitJSON() []byte {
	if x != nil {
		return x.TrafficLimitJSON
	}
	return nil
}

// 修改服务套餐
type UpdateServerUserPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId   int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UserPlanId int64 `protobuf:"varint,2,opt,name=userPlanId,proto3" json:"userPlanId,omitempty"`
}

func (x *UpdateServerUserPlanRequest) Reset() {
	*x = UpdateServerUserPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerUserPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerUserPlanRequest) ProtoMessage() {}

func (x *UpdateServerUserPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerUserPlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerUserPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateServerUserPlanRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerUserPlanRequest) GetUserPlanId() int64 {
	if x != nil {
		return x.UserPlanId
	}
	return 0
}

// 获取服务套餐信息
type FindServerUserPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindServerUserPlanRequest) Reset() {
	*x = FindServerUserPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerUserPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerUserPlanRequest) ProtoMessage() {}

func (x *FindServerUserPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerUserPlanRequest.ProtoReflect.Descriptor instead.
func (*FindServerUserPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{67}
}

func (x *FindServerUserPlanRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindServerUserPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPlan *UserPlan `protobuf:"bytes,1,opt,name=userPlan,proto3" json:"userPlan,omitempty"`
}

func (x *FindServerUserPlanResponse) Reset() {
	*x = FindServerUserPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerUserPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerUserPlanResponse) ProtoMessage() {}

func (x *FindServerUserPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerUserPlanResponse.ProtoReflect.Descriptor instead.
func (*FindServerUserPlanResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{68}
}

func (x *FindServerUserPlanResponse) GetUserPlan() *UserPlan {
	if x != nil {
		return x.UserPlan
	}
	return nil
}

// 获取服务配置
type ComposeServerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *ComposeServerConfigRequest) Reset() {
	*x = ComposeServerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerConfigRequest) ProtoMessage() {}

func (x *ComposeServerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerConfigRequest.ProtoReflect.Descriptor instead.
func (*ComposeServerConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{69}
}

func (x *ComposeServerConfigRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type ComposeServerConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerConfigJSON []byte `protobuf:"bytes,1,opt,name=serverConfigJSON,proto3" json:"serverConfigJSON,omitempty"`
}

func (x *ComposeServerConfigResponse) Reset() {
	*x = ComposeServerConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerConfigResponse) ProtoMessage() {}

func (x *ComposeServerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerConfigResponse.ProtoReflect.Descriptor instead.
func (*ComposeServerConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{70}
}

func (x *ComposeServerConfigResponse) GetServerConfigJSON() []byte {
	if x != nil {
		return x.ServerConfigJSON
	}
	return nil
}

// 修改服务UAM设置
type UpdateServerUAMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UamJSON  []byte `protobuf:"bytes,2,opt,name=uamJSON,proto3" json:"uamJSON,omitempty"`
}

func (x *UpdateServerUAMRequest) Reset() {
	*x = UpdateServerUAMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerUAMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerUAMRequest) ProtoMessage() {}

func (x *UpdateServerUAMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerUAMRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerUAMRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateServerUAMRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerUAMRequest) GetUamJSON() []byte {
	if x != nil {
		return x.UamJSON
	}
	return nil
}

// 查找服务UAM设置
type FindEnabledServerUAMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerUAMRequest) Reset() {
	*x = FindEnabledServerUAMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerUAMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerUAMRequest) ProtoMessage() {}

func (x *FindEnabledServerUAMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerUAMRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerUAMRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{72}
}

func (x *FindEnabledServerUAMRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerUAMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UamJSON []byte `protobuf:"bytes,1,opt,name=uamJSON,proto3" json:"uamJSON,omitempty"`
}

func (x *FindEnabledServerUAMResponse) Reset() {
	*x = FindEnabledServerUAMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerUAMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerUAMResponse) ProtoMessage() {}

func (x *FindEnabledServerUAMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerUAMResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerUAMResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{73}
}

func (x *FindEnabledServerUAMResponse) GetUamJSON() []byte {
	if x != nil {
		return x.UamJSON
	}
	return nil
}

type UploadServerHTTPRequestStatRequest_RegionCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId            int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	CountryName         string `protobuf:"bytes,2,opt,name=countryName,proto3" json:"countryName,omitempty"`
	ProvinceName        string `protobuf:"bytes,3,opt,name=provinceName,proto3" json:"provinceName,omitempty"`
	CityName            string `protobuf:"bytes,4,opt,name=cityName,proto3" json:"cityName,omitempty"`
	CountRequests       int64  `protobuf:"varint,5,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	Bytes               int64  `protobuf:"varint,6,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CountAttackRequests int64  `protobuf:"varint,7,opt,name=countAttackRequests,proto3" json:"countAttackRequests,omitempty"`
	AttackBytes         int64  `protobuf:"varint,8,opt,name=attackBytes,proto3" json:"attackBytes,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) Reset() {
	*x = UploadServerHTTPRequestStatRequest_RegionCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest_RegionCity) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest_RegionCity.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest_RegionCity) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{54, 0}
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetCountAttackRequests() int64 {
	if x != nil {
		return x.CountAttackRequests
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetAttackBytes() int64 {
	if x != nil {
		return x.AttackBytes
	}
	return 0
}

type UploadServerHTTPRequestStatRequest_RegionProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Count    int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) Reset() {
	*x = UploadServerHTTPRequestStatRequest_RegionProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest_RegionProvider) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest_RegionProvider.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest_RegionProvider) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{54, 1}
}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UploadServerHTTPRequestStatRequest_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version  string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Count    int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest_System) Reset() {
	*x = UploadServerHTTPRequestStatRequest_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest_System) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest_System) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest_System.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest_System) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{54, 2}
}

func (x *UploadServerHTTPRequestStatRequest_System) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_System) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_System) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_System) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UploadServerHTTPRequestStatRequest_Browser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version  string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Count    int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest_Browser) Reset() {
	*x = UploadServerHTTPRequestStatRequest_Browser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest_Browser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest_Browser) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest_Browser) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest_Browser.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest_Browser) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{54, 3}
}

func (x *UploadServerHTTPRequestStatRequest_Browser) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_Browser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_Browser) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_Browser) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId                int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	HttpFirewallRuleGroupId int64  `protobuf:"varint,2,opt,name=httpFirewallRuleGroupId,proto3" json:"httpFirewallRuleGroupId,omitempty"`
	Action                  string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Count                   int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) Reset() {
	*x = UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{54, 4}
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) GetHttpFirewallRuleGroupId() int64 {
	if x != nil {
		return x.HttpFirewallRuleGroupId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FindNearbyServersResponse_GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Servers []*Server `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *FindNearbyServersResponse_GroupInfo) Reset() {
	*x = FindNearbyServersResponse_GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNearbyServersResponse_GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNearbyServersResponse_GroupInfo) ProtoMessage() {}

func (x *FindNearbyServersResponse_GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNearbyServersResponse_GroupInfo.ProtoReflect.Descriptor instead.
func (*FindNearbyServersResponse_GroupInfo) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{60, 0}
}

func (x *FindNearbyServersResponse_GroupInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FindNearbyServersResponse_GroupInfo) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

var File_service_server_proto protoreflect.FileDescriptor

var file_service_server_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x04,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x4a, 0x4f, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74,
	0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x74, 0x74,
	0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a,
	0x53, 0x4f, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x63, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x4a,
	0x53, 0x4f, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x64, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x75, 0x64, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65,
	0x62, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x32, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x4f, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x22, 0x61, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e,
	0x22, 0x51, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a,
	0x53, 0x4f, 0x4e, 0x22, 0x54, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x43, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x74, 0x63, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x74, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x51, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4e, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x44, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x64, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x75, 0x64, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4a, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a,
	0x53, 0x4f, 0x4e, 0x22, 0x34, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x17, 0x46, 0x69,
	0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x17, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x17, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x44, 0x0a, 0x0e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x60, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x84, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x58, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x4e, 0x41,
	0x4d, 0x45, 0x22, 0x3c, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x52, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0xe4, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4f, 0x75, 0x74, 0x41, 0x73, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4f,
	0x75, 0x74, 0x41, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x4f, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x22, 0x47, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x31, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x18, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x3f, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x3c, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x41, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4a,
	0x53, 0x4f, 0x4e, 0x22, 0x3a, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x33, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49,
	0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8b,
	0x01, 0x0a, 0x2b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x66, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x66, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x3f, 0x0a, 0x21,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a,
	0x22, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x77, 0x65, 0x62, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4a, 0x0a,
	0x2a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65,
	0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x29, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65,
	0x72, 0x74, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x56, 0x0a, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x30, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x44, 0x4e,
	0x53, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x60, 0x0a, 0x31, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x44, 0x4e, 0x53, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x4e, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x39, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1c,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x4e, 0x41, 0x4d,
	0x45, 0x22, 0x34, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a,
	0x2b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x3f,
	0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x23, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xf7, 0x09, 0x0a, 0x22, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12,
	0x55, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x4a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x16,
	0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x16, 0x68, 0x74, 0x74, 0x70,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x1a, 0x9a, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a,
	0x56, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x68, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x69, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x9b, 0x01, 0x0a,
	0x15, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x22, 0x67, 0x0a, 0x2f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x41, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61,
	0x72, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb9, 0x01,
	0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x62,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x1a, 0x45, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x6b, 0x0a, 0x17, 0x50, 0x75, 0x72,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x18, 0x50, 0x75, 0x72, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x42, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x69, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x59, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e,
	0x22, 0x38, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x1b, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x75, 0x61,
	0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x39, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x38, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x75, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x32, 0xbf, 0x22, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x73, 0x4f, 0x6e, 0x12,
	0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50,
	0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a,
	0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x43, 0x50, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x43, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x4c, 0x53, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f,
	0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x6e,
	0x69, 0x78, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x44, 0x50, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d,
	0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65,
	0x62, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a,
	0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4a,
	0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a,
	0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x4e, 0x53, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x4d, 0x0a, 0x17, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x45,
	0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e,
	0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x1b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x66, 0x69, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x23, 0x66, 0x69, 0x6e, 0x64,
	0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a,
	0x23, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x22, 0x66,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x73, 0x0a, 0x27, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x27, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x32, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x29, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x44, 0x4e, 0x53, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x34, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x44, 0x4e, 0x53, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x44, 0x4e, 0x53, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x14, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x4e, 0x53, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x23, 0x66, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x25,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x27, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x1b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x92, 0x01,
	0x0a, 0x27, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x72,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x18, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x41, 0x4d, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41, 0x4d, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04,
	0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_server_proto_rawDescOnce sync.Once
	file_service_server_proto_rawDescData = file_service_server_proto_rawDesc
)

func file_service_server_proto_rawDescGZIP() []byte {
	file_service_server_proto_rawDescOnce.Do(func() {
		file_service_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_server_proto_rawDescData)
	})
	return file_service_server_proto_rawDescData
}

var file_service_server_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_service_server_proto_goTypes = []interface{}{
	(*CreateServerRequest)(nil),                                      // 0: pb.CreateServerRequest
	(*CreateServerResponse)(nil),                                     // 1: pb.CreateServerResponse
	(*UpdateServerBasicRequest)(nil),                                 // 2: pb.UpdateServerBasicRequest
	(*UpdateServerGroupIdsRequest)(nil),                              // 3: pb.UpdateServerGroupIdsRequest
	(*UpdateServerIsOnRequest)(nil),                                  // 4: pb.UpdateServerIsOnRequest
	(*UpdateServerHTTPRequest)(nil),                                  // 5: pb.UpdateServerHTTPRequest
	(*UpdateServerHTTPSRequest)(nil),                                 // 6: pb.UpdateServerHTTPSRequest
	(*UpdateServerTCPRequest)(nil),                                   // 7: pb.UpdateServerTCPRequest
	(*UpdateServerTLSRequest)(nil),                                   // 8: pb.UpdateServerTLSRequest
	(*UpdateServerUnixRequest)(nil),                                  // 9: pb.UpdateServerUnixRequest
	(*UpdateServerUDPRequest)(nil),                                   // 10: pb.UpdateServerUDPRequest
	(*UpdateServerWebRequest)(nil),                                   // 11: pb.UpdateServerWebRequest
	(*UpdateServerReverseProxyRequest)(nil),                          // 12: pb.UpdateServerReverseProxyRequest
	(*FindServerNamesRequest)(nil),                                   // 13: pb.FindServerNamesRequest
	(*FindServerNamesResponse)(nil),                                  // 14: pb.FindServerNamesResponse
	(*UpdateServerNamesRequest)(nil),                                 // 15: pb.UpdateServerNamesRequest
	(*UpdateServerNamesAuditingRequest)(nil),                         // 16: pb.UpdateServerNamesAuditingRequest
	(*UpdateServerDNSRequest)(nil),                                   // 17: pb.UpdateServerDNSRequest
	(*RegenerateServerDNSNameRequest)(nil),                           // 18: pb.RegenerateServerDNSNameRequest
	(*UpdateServerDNSNameRequest)(nil),                               // 19: pb.UpdateServerDNSNameRequest
	(*FindServerIdWithDNSNameRequest)(nil),                           // 20: pb.FindServerIdWithDNSNameRequest
	(*FindServerIdWithDNSNameResponse)(nil),                          // 21: pb.FindServerIdWithDNSNameResponse
	(*CountAllEnabledServersMatchRequest)(nil),                       // 22: pb.CountAllEnabledServersMatchRequest
	(*ListEnabledServersMatchRequest)(nil),                           // 23: pb.ListEnabledServersMatchRequest
	(*ListEnabledServersMatchResponse)(nil),                          // 24: pb.ListEnabledServersMatchResponse
	(*DeleteServerRequest)(nil),                                      // 25: pb.DeleteServerRequest
	(*FindEnabledServerRequest)(nil),                                 // 26: pb.FindEnabledServerRequest
	(*FindEnabledServerResponse)(nil),                                // 27: pb.FindEnabledServerResponse
	(*FindEnabledServerConfigRequest)(nil),                           // 28: pb.FindEnabledServerConfigRequest
	(*FindEnabledServerConfigResponse)(nil),                          // 29: pb.FindEnabledServerConfigResponse
	(*FindEnabledServerTypeRequest)(nil),                             // 30: pb.FindEnabledServerTypeRequest
	(*FindEnabledServerTypeResponse)(nil),                            // 31: pb.FindEnabledServerTypeResponse
	(*FindAndInitServerReverseProxyConfigRequest)(nil),               // 32: pb.FindAndInitServerReverseProxyConfigRequest
	(*FindAndInitServerReverseProxyConfigResponse)(nil),              // 33: pb.FindAndInitServerReverseProxyConfigResponse
	(*FindAndInitServerWebConfigRequest)(nil),                        // 34: pb.FindAndInitServerWebConfigRequest
	(*FindAndInitServerWebConfigResponse)(nil),                       // 35: pb.FindAndInitServerWebConfigResponse
	(*CountAllEnabledServersWithSSLCertIdRequest)(nil),               // 36: pb.CountAllEnabledServersWithSSLCertIdRequest
	(*FindAllEnabledServersWithSSLCertIdRequest)(nil),                // 37: pb.FindAllEnabledServersWithSSLCertIdRequest
	(*FindAllEnabledServersWithSSLCertIdResponse)(nil),               // 38: pb.FindAllEnabledServersWithSSLCertIdResponse
	(*CountAllEnabledServersWithNodeClusterIdRequest)(nil),           // 39: pb.CountAllEnabledServersWithNodeClusterIdRequest
	(*CountAllEnabledServersWithServerGroupIdRequest)(nil),           // 40: pb.CountAllEnabledServersWithServerGroupIdRequest
	(*NotifyServersChangeRequest)(nil),                               // 41: pb.NotifyServersChangeRequest
	(*NotifyServersChangeResponse)(nil),                              // 42: pb.NotifyServersChangeResponse
	(*FindAllEnabledServersDNSWithNodeClusterIdRequest)(nil),         // 43: pb.FindAllEnabledServersDNSWithNodeClusterIdRequest
	(*FindAllEnabledServersDNSWithNodeClusterIdResponse)(nil),        // 44: pb.FindAllEnabledServersDNSWithNodeClusterIdResponse
	(*ServerDNSInfo)(nil),                                            // 45: pb.ServerDNSInfo
	(*FindEnabledServerDNSRequest)(nil),                              // 46: pb.FindEnabledServerDNSRequest
	(*FindEnabledServerDNSResponse)(nil),                             // 47: pb.FindEnabledServerDNSResponse
	(*CheckUserServerRequest)(nil),                                   // 48: pb.CheckUserServerRequest
	(*FindAllEnabledServerNamesWithUserIdRequest)(nil),               // 49: pb.FindAllEnabledServerNamesWithUserIdRequest
	(*FindAllEnabledServerNamesWithUserIdResponse)(nil),              // 50: pb.FindAllEnabledServerNamesWithUserIdResponse
	(*FindEnabledUserServerBasicRequest)(nil),                        // 51: pb.FindEnabledUserServerBasicRequest
	(*FindEnabledUserServerBasicResponse)(nil),                       // 52: pb.FindEnabledUserServerBasicResponse
	(*UpdateEnabledUserServerBasicRequest)(nil),                      // 53: pb.UpdateEnabledUserServerBasicRequest
	(*UploadServerHTTPRequestStatRequest)(nil),                       // 54: pb.UploadServerHTTPRequestStatRequest
	(*CheckServerNameDuplicationInNodeClusterRequest)(nil),           // 55: pb.CheckServerNameDuplicationInNodeClusterRequest
	(*CheckServerNameDuplicationInNodeClusterResponse)(nil),          // 56: pb.CheckServerNameDuplicationInNodeClusterResponse
	(*FindLatestServersRequest)(nil),                                 // 57: pb.FindLatestServersRequest
	(*FindLatestServersResponse)(nil),                                // 58: pb.FindLatestServersResponse
	(*FindNearbyServersRequest)(nil),                                 // 59: pb.FindNearbyServersRequest
	(*FindNearbyServersResponse)(nil),                                // 60: pb.FindNearbyServersResponse
	(*PurgeServerCacheRequest)(nil),                                  // 61: pb.PurgeServerCacheRequest
	(*PurgeServerCacheResponse)(nil),                                 // 62: pb.PurgeServerCacheResponse
	(*FindEnabledServerTrafficLimitRequest)(nil),                     // 63: pb.FindEnabledServerTrafficLimitRequest
	(*FindEnabledServerTrafficLimitResponse)(nil),                    // 64: pb.FindEnabledServerTrafficLimitResponse
	(*UpdateServerTrafficLimitRequest)(nil),                          // 65: pb.UpdateServerTrafficLimitRequest
	(*UpdateServerUserPlanRequest)(nil),                              // 66: pb.UpdateServerUserPlanRequest
	(*FindServerUserPlanRequest)(nil),                                // 67: pb.FindServerUserPlanRequest
	(*FindServerUserPlanResponse)(nil),                               // 68: pb.FindServerUserPlanResponse
	(*ComposeServerConfigRequest)(nil),                               // 69: pb.ComposeServerConfigRequest
	(*ComposeServerConfigResponse)(nil),                              // 70: pb.ComposeServerConfigResponse
	(*UpdateServerUAMRequest)(nil),                                   // 71: pb.UpdateServerUAMRequest
	(*FindEnabledServerUAMRequest)(nil),                              // 72: pb.FindEnabledServerUAMRequest
	(*FindEnabledServerUAMResponse)(nil),                             // 73: pb.FindEnabledServerUAMResponse
	(*UploadServerHTTPRequestStatRequest_RegionCity)(nil),            // 74: pb.UploadServerHTTPRequestStatRequest.RegionCity
	(*UploadServerHTTPRequestStatRequest_RegionProvider)(nil),        // 75: pb.UploadServerHTTPRequestStatRequest.RegionProvider
	(*UploadServerHTTPRequestStatRequest_System)(nil),                // 76: pb.UploadServerHTTPRequestStatRequest.System
	(*UploadServerHTTPRequestStatRequest_Browser)(nil),               // 77: pb.UploadServerHTTPRequestStatRequest.Browser
	(*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup)(nil), // 78: pb.UploadServerHTTPRequestStatRequest.HTTPFirewallRuleGroup
	(*FindNearbyServersResponse_GroupInfo)(nil),                      // 79: pb.FindNearbyServersResponse.GroupInfo
	(*ServerNameAuditingResult)(nil),                                 // 80: pb.ServerNameAuditingResult
	(*Server)(nil),                                                   // 81: pb.Server
	(*DNSDomain)(nil),                                                // 82: pb.DNSDomain
	(*UserPlan)(nil),                                                 // 83: pb.UserPlan
	(*RPCSuccess)(nil),                                               // 84: pb.RPCSuccess
	(*RPCCountResponse)(nil),                                         // 85: pb.RPCCountResponse
}
var file_service_server_proto_depIdxs = []int32{
	80, // 0: pb.FindServerNamesResponse.auditingResult:type_name -> pb.ServerNameAuditingResult
	80, // 1: pb.UpdateServerNamesAuditingRequest.auditingResult:type_name -> pb.ServerNameAuditingResult
	81, // 2: pb.ListEnabledServersMatchResponse.servers:type_name -> pb.Server
	81, // 3: pb.FindEnabledServerResponse.server:type_name -> pb.Server
	81, // 4: pb.FindAllEnabledServersWithSSLCertIdResponse.servers:type_name -> pb.Server
	45, // 5: pb.FindAllEnabledServersDNSWithNodeClusterIdResponse.servers:type_name -> pb.ServerDNSInfo
	82, // 6: pb.FindEnabledServerDNSResponse.domain:type_name -> pb.DNSDomain
	81, // 7: pb.FindEnabledUserServerBasicResponse.server:type_name -> pb.Server
	74, // 8: pb.UploadServerHTTPRequestStatRequest.regionCities:type_name -> pb.UploadServerHTTPRequestStatRequest.RegionCity
	75, // 9: pb.UploadServerHTTPRequestStatRequest.regionProviders:type_name -> pb.UploadServerHTTPRequestStatRequest.RegionProvider
	76, // 10: pb.UploadServerHTTPRequestStatRequest.systems:type_name -> pb.UploadServerHTTPRequestStatRequest.System
	77, // 11: pb.UploadServerHTTPRequestStatRequest.browsers:type_name -> pb.UploadServerHTTPRequestStatRequest.Browser
	78, // 12: pb.UploadServerHTTPRequestStatRequest.httpFirewallRuleGroups:type_name -> pb.UploadServerHTTPRequestStatRequest.HTTPFirewallRuleGroup
	81, // 13: pb.FindLatestServersResponse.servers:type_name -> pb.Server
	79, // 14: pb.FindNearbyServersResponse.groups:type_name -> pb.FindNearbyServersResponse.GroupInfo
	83, // 15: pb.FindServerUserPlanResponse.userPlan:type_name -> pb.UserPlan
	81, // 16: pb.FindNearbyServersResponse.GroupInfo.servers:type_name -> pb.Server
	0,  // 17: pb.ServerService.createServer:input_type -> pb.CreateServerRequest
	2,  // 18: pb.ServerService.updateServerBasic:input_type -> pb.UpdateServerBasicRequest
	3,  // 19: pb.ServerService.updateServerGroupIds:input_type -> pb.UpdateServerGroupIdsRequest
	4,  // 20: pb.ServerService.updateServerIsOn:input_type -> pb.UpdateServerIsOnRequest
	5,  // 21: pb.ServerService.updateServerHTTP:input_type -> pb.UpdateServerHTTPRequest
	6,  // 22: pb.ServerService.updateServerHTTPS:input_type -> pb.UpdateServerHTTPSRequest
	7,  // 23: pb.ServerService.updateServerTCP:input_type -> pb.UpdateServerTCPRequest
	8,  // 24: pb.ServerService.updateServerTLS:input_type -> pb.UpdateServerTLSRequest
	9,  // 25: pb.ServerService.updateServerUnix:input_type -> pb.UpdateServerUnixRequest
	10, // 26: pb.ServerService.updateServerUDP:input_type -> pb.UpdateServerUDPRequest
	11, // 27: pb.ServerService.updateServerWeb:input_type -> pb.UpdateServerWebRequest
	12, // 28: pb.ServerService.updateServerReverseProxy:input_type -> pb.UpdateServerReverseProxyRequest
	13, // 29: pb.ServerService.findServerNames:input_type -> pb.FindServerNamesRequest
	15, // 30: pb.ServerService.updateServerNames:input_type -> pb.UpdateServerNamesRequest
	16, // 31: pb.ServerService.updateServerNamesAuditing:input_type -> pb.UpdateServerNamesAuditingRequest
	17, // 32: pb.ServerService.updateServerDNS:input_type -> pb.UpdateServerDNSRequest
	18, // 33: pb.ServerService.regenerateServerDNSName:input_type -> pb.RegenerateServerDNSNameRequest
	19, // 34: pb.ServerService.updateServerDNSName:input_type -> pb.UpdateServerDNSNameRequest
	20, // 35: pb.ServerService.findServerIdWithDNSName:input_type -> pb.FindServerIdWithDNSNameRequest
	22, // 36: pb.ServerService.countAllEnabledServersMatch:input_type -> pb.CountAllEnabledServersMatchRequest
	23, // 37: pb.ServerService.listEnabledServersMatch:input_type -> pb.ListEnabledServersMatchRequest
	25, // 38: pb.ServerService.deleteServer:input_type -> pb.DeleteServerRequest
	26, // 39: pb.ServerService.findEnabledServer:input_type -> pb.FindEnabledServerRequest
	28, // 40: pb.ServerService.findEnabledServerConfig:input_type -> pb.FindEnabledServerConfigRequest
	30, // 41: pb.ServerService.findEnabledServerType:input_type -> pb.FindEnabledServerTypeRequest
	32, // 42: pb.ServerService.findAndInitServerReverseProxyConfig:input_type -> pb.FindAndInitServerReverseProxyConfigRequest
	34, // 43: pb.ServerService.findAndInitServerWebConfig:input_type -> pb.FindAndInitServerWebConfigRequest
	36, // 44: pb.ServerService.countAllEnabledServersWithSSLCertId:input_type -> pb.CountAllEnabledServersWithSSLCertIdRequest
	37, // 45: pb.ServerService.findAllEnabledServersWithSSLCertId:input_type -> pb.FindAllEnabledServersWithSSLCertIdRequest
	39, // 46: pb.ServerService.countAllEnabledServersWithNodeClusterId:input_type -> pb.CountAllEnabledServersWithNodeClusterIdRequest
	40, // 47: pb.ServerService.countAllEnabledServersWithServerGroupId:input_type -> pb.CountAllEnabledServersWithServerGroupIdRequest
	41, // 48: pb.ServerService.notifyServersChange:input_type -> pb.NotifyServersChangeRequest
	43, // 49: pb.ServerService.findAllEnabledServersDNSWithNodeClusterId:input_type -> pb.FindAllEnabledServersDNSWithNodeClusterIdRequest
	46, // 50: pb.ServerService.findEnabledServerDNS:input_type -> pb.FindEnabledServerDNSRequest
	48, // 51: pb.ServerService.checkUserServer:input_type -> pb.CheckUserServerRequest
	49, // 52: pb.ServerService.findAllEnabledServerNamesWithUserId:input_type -> pb.FindAllEnabledServerNamesWithUserIdRequest
	51, // 53: pb.ServerService.findEnabledUserServerBasic:input_type -> pb.FindEnabledUserServerBasicRequest
	53, // 54: pb.ServerService.updateEnabledUserServerBasic:input_type -> pb.UpdateEnabledUserServerBasicRequest
	54, // 55: pb.ServerService.uploadServerHTTPRequestStat:input_type -> pb.UploadServerHTTPRequestStatRequest
	55, // 56: pb.ServerService.checkServerNameDuplicationInNodeCluster:input_type -> pb.CheckServerNameDuplicationInNodeClusterRequest
	57, // 57: pb.ServerService.findLatestServers:input_type -> pb.FindLatestServersRequest
	59, // 58: pb.ServerService.findNearbyServers:input_type -> pb.FindNearbyServersRequest
	61, // 59: pb.ServerService.purgeServerCache:input_type -> pb.PurgeServerCacheRequest
	63, // 60: pb.ServerService.findEnabledServerTrafficLimit:input_type -> pb.FindEnabledServerTrafficLimitRequest
	65, // 61: pb.ServerService.updateServerTrafficLimit:input_type -> pb.UpdateServerTrafficLimitRequest
	66, // 62: pb.ServerService.updateServerUserPlan:input_type -> pb.UpdateServerUserPlanRequest
	67, // 63: pb.ServerService.findServerUserPlan:input_type -> pb.FindServerUserPlanRequest
	69, // 64: pb.ServerService.composeServerConfig:input_type -> pb.ComposeServerConfigRequest
	71, // 65: pb.ServerService.updateServerUAM:input_type -> pb.UpdateServerUAMRequest
	72, // 66: pb.ServerService.findEnabledServerUAM:input_type -> pb.FindEnabledServerUAMRequest
	1,  // 67: pb.ServerService.createServer:output_type -> pb.CreateServerResponse
	84, // 68: pb.ServerService.updateServerBasic:output_type -> pb.RPCSuccess
	84, // 69: pb.ServerService.updateServerGroupIds:output_type -> pb.RPCSuccess
	84, // 70: pb.ServerService.updateServerIsOn:output_type -> pb.RPCSuccess
	84, // 71: pb.ServerService.updateServerHTTP:output_type -> pb.RPCSuccess
	84, // 72: pb.ServerService.updateServerHTTPS:output_type -> pb.RPCSuccess
	84, // 73: pb.ServerService.updateServerTCP:output_type -> pb.RPCSuccess
	84, // 74: pb.ServerService.updateServerTLS:output_type -> pb.RPCSuccess
	84, // 75: pb.ServerService.updateServerUnix:output_type -> pb.RPCSuccess
	84, // 76: pb.ServerService.updateServerUDP:output_type -> pb.RPCSuccess
	84, // 77: pb.ServerService.updateServerWeb:output_type -> pb.RPCSuccess
	84, // 78: pb.ServerService.updateServerReverseProxy:output_type -> pb.RPCSuccess
	14, // 79: pb.ServerService.findServerNames:output_type -> pb.FindServerNamesResponse
	84, // 80: pb.ServerService.updateServerNames:output_type -> pb.RPCSuccess
	84, // 81: pb.ServerService.updateServerNamesAuditing:output_type -> pb.RPCSuccess
	84, // 82: pb.ServerService.updateServerDNS:output_type -> pb.RPCSuccess
	84, // 83: pb.ServerService.regenerateServerDNSName:output_type -> pb.RPCSuccess
	84, // 84: pb.ServerService.updateServerDNSName:output_type -> pb.RPCSuccess
	21, // 85: pb.ServerService.findServerIdWithDNSName:output_type -> pb.FindServerIdWithDNSNameResponse
	85, // 86: pb.ServerService.countAllEnabledServersMatch:output_type -> pb.RPCCountResponse
	24, // 87: pb.ServerService.listEnabledServersMatch:output_type -> pb.ListEnabledServersMatchResponse
	84, // 88: pb.ServerService.deleteServer:output_type -> pb.RPCSuccess
	27, // 89: pb.ServerService.findEnabledServer:output_type -> pb.FindEnabledServerResponse
	29, // 90: pb.ServerService.findEnabledServerConfig:output_type -> pb.FindEnabledServerConfigResponse
	31, // 91: pb.ServerService.findEnabledServerType:output_type -> pb.FindEnabledServerTypeResponse
	33, // 92: pb.ServerService.findAndInitServerReverseProxyConfig:output_type -> pb.FindAndInitServerReverseProxyConfigResponse
	35, // 93: pb.ServerService.findAndInitServerWebConfig:output_type -> pb.FindAndInitServerWebConfigResponse
	85, // 94: pb.ServerService.countAllEnabledServersWithSSLCertId:output_type -> pb.RPCCountResponse
	38, // 95: pb.ServerService.findAllEnabledServersWithSSLCertId:output_type -> pb.FindAllEnabledServersWithSSLCertIdResponse
	85, // 96: pb.ServerService.countAllEnabledServersWithNodeClusterId:output_type -> pb.RPCCountResponse
	85, // 97: pb.ServerService.countAllEnabledServersWithServerGroupId:output_type -> pb.RPCCountResponse
	42, // 98: pb.ServerService.notifyServersChange:output_type -> pb.NotifyServersChangeResponse
	44, // 99: pb.ServerService.findAllEnabledServersDNSWithNodeClusterId:output_type -> pb.FindAllEnabledServersDNSWithNodeClusterIdResponse
	47, // 100: pb.ServerService.findEnabledServerDNS:output_type -> pb.FindEnabledServerDNSResponse
	84, // 101: pb.ServerService.checkUserServer:output_type -> pb.RPCSuccess
	50, // 102: pb.ServerService.findAllEnabledServerNamesWithUserId:output_type -> pb.FindAllEnabledServerNamesWithUserIdResponse
	52, // 103: pb.ServerService.findEnabledUserServerBasic:output_type -> pb.FindEnabledUserServerBasicResponse
	84, // 104: pb.ServerService.updateEnabledUserServerBasic:output_type -> pb.RPCSuccess
	84, // 105: pb.ServerService.uploadServerHTTPRequestStat:output_type -> pb.RPCSuccess
	56, // 106: pb.ServerService.checkServerNameDuplicationInNodeCluster:output_type -> pb.CheckServerNameDuplicationInNodeClusterResponse
	58, // 107: pb.ServerService.findLatestServers:output_type -> pb.FindLatestServersResponse
	60, // 108: pb.ServerService.findNearbyServers:output_type -> pb.FindNearbyServersResponse
	62, // 109: pb.ServerService.purgeServerCache:output_type -> pb.PurgeServerCacheResponse
	64, // 110: pb.ServerService.findEnabledServerTrafficLimit:output_type -> pb.FindEnabledServerTrafficLimitResponse
	84, // 111: pb.ServerService.updateServerTrafficLimit:output_type -> pb.RPCSuccess
	84, // 112: pb.ServerService.updateServerUserPlan:output_type -> pb.RPCSuccess
	68, // 113: pb.ServerService.findServerUserPlan:output_type -> pb.FindServerUserPlanResponse
	70, // 114: pb.ServerService.composeServerConfig:output_type -> pb.ComposeServerConfigResponse
	84, // 115: pb.ServerService.updateServerUAM:output_type -> pb.RPCSuccess
	73, // 116: pb.ServerService.findEnabledServerUAM:output_type -> pb.FindEnabledServerUAMResponse
	67, // [67:117] is the sub-list for method output_type
	17, // [17:67] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_service_server_proto_init() }
func file_service_server_proto_init() {
	if File_service_server_proto != nil {
		return
	}
	file_models_model_server_proto_init()
	file_models_model_dns_domain_proto_init()
	file_models_model_server_name_auditing_result_proto_init()
	file_models_rpc_messages_proto_init()
	file_models_model_user_plan_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerGroupIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerIsOnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerHTTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerHTTPSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerTCPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerTLSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerUnixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerUDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerReverseProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerNamesAuditingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateServerDNSNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerDNSNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerIdWithDNSNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerIdWithDNSNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledServersMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledServersMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledServersMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAndInitServerReverseProxyConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAndInitServerReverseProxyConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAndInitServerWebConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAndInitServerWebConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledServersWithSSLCertIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServersWithSSLCertIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServersWithSSLCertIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledServersWithNodeClusterIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledServersWithServerGroupIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyServersChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyServersChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServersDNSWithNodeClusterIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServersDNSWithNodeClusterIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerDNSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerDNSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServerNamesWithUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServerNamesWithUserIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledUserServerBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledUserServerBasicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnabledUserServerBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckServerNameDuplicationInNodeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckServerNameDuplicationInNodeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNearbyServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNearbyServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeServerCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeServerCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerTrafficLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerTrafficLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerTrafficLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerUserPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerUserPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerUserPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerUAMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerUAMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerUAMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest_RegionCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest_RegionProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest_Browser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNearbyServersResponse_GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_server_proto_goTypes,
		DependencyIndexes: file_service_server_proto_depIdxs,
		MessageInfos:      file_service_server_proto_msgTypes,
	}.Build()
	File_service_server_proto = out.File
	file_service_server_proto_rawDesc = nil
	file_service_server_proto_goTypes = nil
	file_service_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerServiceClient interface {
	// 创建服务
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	// 修改服务基本信息
	UpdateServerBasic(ctx context.Context, in *UpdateServerBasicRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务所在分组
	UpdateServerGroupIds(ctx context.Context, in *UpdateServerGroupIdsRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务是否启用
	UpdateServerIsOn(ctx context.Context, in *UpdateServerIsOnRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务的HTTP设置
	UpdateServerHTTP(ctx context.Context, in *UpdateServerHTTPRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务的HTTPS设置
	UpdateServerHTTPS(ctx context.Context, in *UpdateServerHTTPSRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务的TCP设置
	UpdateServerTCP(ctx context.Context, in *UpdateServerTCPRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务的TLS设置
	UpdateServerTLS(ctx context.Context, in *UpdateServerTLSRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务的Unix设置
	UpdateServerUnix(ctx context.Context, in *UpdateServerUnixRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务的UDP设置
	UpdateServerUDP(ctx context.Context, in *UpdateServerUDPRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务的Web设置
	UpdateServerWeb(ctx context.Context, in *UpdateServerWebRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务的反向代理设置
	UpdateServerReverseProxy(ctx context.Context, in *UpdateServerReverseProxyRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找服务的域名设置
	FindServerNames(ctx context.Context, in *FindServerNamesRequest, opts ...grpc.CallOption) (*FindServerNamesResponse, error)
	// 修改服务的域名设置
	UpdateServerNames(ctx context.Context, in *UpdateServerNamesRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 审核服务的域名设置
	UpdateServerNamesAuditing(ctx context.Context, in *UpdateServerNamesAuditingRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务的DNS相关设置
	UpdateServerDNS(ctx context.Context, in *UpdateServerDNSRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 重新生成CNAME
	RegenerateServerDNSName(ctx context.Context, in *RegenerateServerDNSNameRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务的CNAME
	UpdateServerDNSName(ctx context.Context, in *UpdateServerDNSNameRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 使用CNAME查找服务
	FindServerIdWithDNSName(ctx context.Context, in *FindServerIdWithDNSNameRequest, opts ...grpc.CallOption) (*FindServerIdWithDNSNameResponse, error)
	// 计算匹配的服务数量
	CountAllEnabledServersMatch(ctx context.Context, in *CountAllEnabledServersMatchRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页服务
	ListEnabledServersMatch(ctx context.Context, in *ListEnabledServersMatchRequest, opts ...grpc.CallOption) (*ListEnabledServersMatchResponse, error)
	// 禁用某服务
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找单个服务
	FindEnabledServer(ctx context.Context, in *FindEnabledServerRequest, opts ...grpc.CallOption) (*FindEnabledServerResponse, error)
	// 查找服务配置
	FindEnabledServerConfig(ctx context.Context, in *FindEnabledServerConfigRequest, opts ...grpc.CallOption) (*FindEnabledServerConfigResponse, error)
	// 查找服务的服务类型
	FindEnabledServerType(ctx context.Context, in *FindEnabledServerTypeRequest, opts ...grpc.CallOption) (*FindEnabledServerTypeResponse, error)
	// 查找反向代理设置
	FindAndInitServerReverseProxyConfig(ctx context.Context, in *FindAndInitServerReverseProxyConfigRequest, opts ...grpc.CallOption) (*FindAndInitServerReverseProxyConfigResponse, error)
	// 初始化Web设置
	FindAndInitServerWebConfig(ctx context.Context, in *FindAndInitServerWebConfigRequest, opts ...grpc.CallOption) (*FindAndInitServerWebConfigResponse, error)
	// 计算使用某个SSL证书的服务数量
	CountAllEnabledServersWithSSLCertId(ctx context.Context, in *CountAllEnabledServersWithSSLCertIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 查找使用某个SSL证书的所有服务
	FindAllEnabledServersWithSSLCertId(ctx context.Context, in *FindAllEnabledServersWithSSLCertIdRequest, opts ...grpc.CallOption) (*FindAllEnabledServersWithSSLCertIdResponse, error)
	// 计算运行在某个集群上的所有服务数量
	CountAllEnabledServersWithNodeClusterId(ctx context.Context, in *CountAllEnabledServersWithNodeClusterIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 计算使用某个分组的服务数量
	CountAllEnabledServersWithServerGroupId(ctx context.Context, in *CountAllEnabledServersWithServerGroupIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 通知更新
	NotifyServersChange(ctx context.Context, in *NotifyServersChangeRequest, opts ...grpc.CallOption) (*NotifyServersChangeResponse, error)
	// 取得某个集群下的所有服务相关的DNS
	FindAllEnabledServersDNSWithNodeClusterId(ctx context.Context, in *FindAllEnabledServersDNSWithNodeClusterIdRequest, opts ...grpc.CallOption) (*FindAllEnabledServersDNSWithNodeClusterIdResponse, error)
	// 查找单个服务的DNS信息
	FindEnabledServerDNS(ctx context.Context, in *FindEnabledServerDNSRequest, opts ...grpc.CallOption) (*FindEnabledServerDNSResponse, error)
	// 检查服务是否属于某个用户
	CheckUserServer(ctx context.Context, in *CheckUserServerRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找一个用户下的所有域名列表
	FindAllEnabledServerNamesWithUserId(ctx context.Context, in *FindAllEnabledServerNamesWithUserIdRequest, opts ...grpc.CallOption) (*FindAllEnabledServerNamesWithUserIdResponse, error)
	// 查找用户服务基本信息
	FindEnabledUserServerBasic(ctx context.Context, in *FindEnabledUserServerBasicRequest, opts ...grpc.CallOption) (*FindEnabledUserServerBasicResponse, error)
	// 修改用户服务基本信息
	UpdateEnabledUserServerBasic(ctx context.Context, in *UpdateEnabledUserServerBasicRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 上传HTTP请求待统计数据
	UploadServerHTTPRequestStat(ctx context.Context, in *UploadServerHTTPRequestStatRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 检查域名是否已经存在
	CheckServerNameDuplicationInNodeCluster(ctx context.Context, in *CheckServerNameDuplicationInNodeClusterRequest, opts ...grpc.CallOption) (*CheckServerNameDuplicationInNodeClusterResponse, error)
	// 查找最近访问的服务
	FindLatestServers(ctx context.Context, in *FindLatestServersRequest, opts ...grpc.CallOption) (*FindLatestServersResponse, error)
	// 查找某个服务附近的服务
	FindNearbyServers(ctx context.Context, in *FindNearbyServersRequest, opts ...grpc.CallOption) (*FindNearbyServersResponse, error)
	// 清除缓存
	PurgeServerCache(ctx context.Context, in *PurgeServerCacheRequest, opts ...grpc.CallOption) (*PurgeServerCacheResponse, error)
	// 查找流量限制
	FindEnabledServerTrafficLimit(ctx context.Context, in *FindEnabledServerTrafficLimitRequest, opts ...grpc.CallOption) (*FindEnabledServerTrafficLimitResponse, error)
	// 设置流量限制
	UpdateServerTrafficLimit(ctx context.Context, in *UpdateServerTrafficLimitRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改服务套餐
	UpdateServerUserPlan(ctx context.Context, in *UpdateServerUserPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 获取服务套餐信息
	FindServerUserPlan(ctx context.Context, in *FindServerUserPlanRequest, opts ...grpc.CallOption) (*FindServerUserPlanResponse, error)
	// 获取服务配置
	ComposeServerConfig(ctx context.Context, in *ComposeServerConfigRequest, opts ...grpc.CallOption) (*ComposeServerConfigResponse, error)
	// 修改服务UAM设置
	UpdateServerUAM(ctx context.Context, in *UpdateServerUAMRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找服务UAM设置
	FindEnabledServerUAM(ctx context.Context, in *FindEnabledServerUAMRequest, opts ...grpc.CallOption) (*FindEnabledServerUAMResponse, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	out := new(CreateServerResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/createServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerBasic(ctx context.Context, in *UpdateServerBasicRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerGroupIds(ctx context.Context, in *UpdateServerGroupIdsRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerGroupIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerIsOn(ctx context.Context, in *UpdateServerIsOnRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerIsOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerHTTP(ctx context.Context, in *UpdateServerHTTPRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerHTTPS(ctx context.Context, in *UpdateServerHTTPSRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerHTTPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerTCP(ctx context.Context, in *UpdateServerTCPRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerTCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerTLS(ctx context.Context, in *UpdateServerTLSRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerTLS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerUnix(ctx context.Context, in *UpdateServerUnixRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerUnix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerUDP(ctx context.Context, in *UpdateServerUDPRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerUDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerWeb(ctx context.Context, in *UpdateServerWebRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerReverseProxy(ctx context.Context, in *UpdateServerReverseProxyRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerReverseProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindServerNames(ctx context.Context, in *FindServerNamesRequest, opts ...grpc.CallOption) (*FindServerNamesResponse, error) {
	out := new(FindServerNamesResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findServerNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerNames(ctx context.Context, in *UpdateServerNamesRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerNamesAuditing(ctx context.Context, in *UpdateServerNamesAuditingRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerNamesAuditing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerDNS(ctx context.Context, in *UpdateServerDNSRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) RegenerateServerDNSName(ctx context.Context, in *RegenerateServerDNSNameRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/regenerateServerDNSName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerDNSName(ctx context.Context, in *UpdateServerDNSNameRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerDNSName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindServerIdWithDNSName(ctx context.Context, in *FindServerIdWithDNSNameRequest, opts ...grpc.CallOption) (*FindServerIdWithDNSNameResponse, error) {
	out := new(FindServerIdWithDNSNameResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findServerIdWithDNSName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CountAllEnabledServersMatch(ctx context.Context, in *CountAllEnabledServersMatchRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/countAllEnabledServersMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ListEnabledServersMatch(ctx context.Context, in *ListEnabledServersMatchRequest, opts ...grpc.CallOption) (*ListEnabledServersMatchResponse, error) {
	out := new(ListEnabledServersMatchResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/listEnabledServersMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/deleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindEnabledServer(ctx context.Context, in *FindEnabledServerRequest, opts ...grpc.CallOption) (*FindEnabledServerResponse, error) {
	out := new(FindEnabledServerResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findEnabledServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindEnabledServerConfig(ctx context.Context, in *FindEnabledServerConfigRequest, opts ...grpc.CallOption) (*FindEnabledServerConfigResponse, error) {
	out := new(FindEnabledServerConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findEnabledServerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindEnabledServerType(ctx context.Context, in *FindEnabledServerTypeRequest, opts ...grpc.CallOption) (*FindEnabledServerTypeResponse, error) {
	out := new(FindEnabledServerTypeResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findEnabledServerType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindAndInitServerReverseProxyConfig(ctx context.Context, in *FindAndInitServerReverseProxyConfigRequest, opts ...grpc.CallOption) (*FindAndInitServerReverseProxyConfigResponse, error) {
	out := new(FindAndInitServerReverseProxyConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findAndInitServerReverseProxyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindAndInitServerWebConfig(ctx context.Context, in *FindAndInitServerWebConfigRequest, opts ...grpc.CallOption) (*FindAndInitServerWebConfigResponse, error) {
	out := new(FindAndInitServerWebConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findAndInitServerWebConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CountAllEnabledServersWithSSLCertId(ctx context.Context, in *CountAllEnabledServersWithSSLCertIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/countAllEnabledServersWithSSLCertId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindAllEnabledServersWithSSLCertId(ctx context.Context, in *FindAllEnabledServersWithSSLCertIdRequest, opts ...grpc.CallOption) (*FindAllEnabledServersWithSSLCertIdResponse, error) {
	out := new(FindAllEnabledServersWithSSLCertIdResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findAllEnabledServersWithSSLCertId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CountAllEnabledServersWithNodeClusterId(ctx context.Context, in *CountAllEnabledServersWithNodeClusterIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/countAllEnabledServersWithNodeClusterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CountAllEnabledServersWithServerGroupId(ctx context.Context, in *CountAllEnabledServersWithServerGroupIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/countAllEnabledServersWithServerGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) NotifyServersChange(ctx context.Context, in *NotifyServersChangeRequest, opts ...grpc.CallOption) (*NotifyServersChangeResponse, error) {
	out := new(NotifyServersChangeResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/notifyServersChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindAllEnabledServersDNSWithNodeClusterId(ctx context.Context, in *FindAllEnabledServersDNSWithNodeClusterIdRequest, opts ...grpc.CallOption) (*FindAllEnabledServersDNSWithNodeClusterIdResponse, error) {
	out := new(FindAllEnabledServersDNSWithNodeClusterIdResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findAllEnabledServersDNSWithNodeClusterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindEnabledServerDNS(ctx context.Context, in *FindEnabledServerDNSRequest, opts ...grpc.CallOption) (*FindEnabledServerDNSResponse, error) {
	out := new(FindEnabledServerDNSResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findEnabledServerDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CheckUserServer(ctx context.Context, in *CheckUserServerRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/checkUserServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindAllEnabledServerNamesWithUserId(ctx context.Context, in *FindAllEnabledServerNamesWithUserIdRequest, opts ...grpc.CallOption) (*FindAllEnabledServerNamesWithUserIdResponse, error) {
	out := new(FindAllEnabledServerNamesWithUserIdResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findAllEnabledServerNamesWithUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindEnabledUserServerBasic(ctx context.Context, in *FindEnabledUserServerBasicRequest, opts ...grpc.CallOption) (*FindEnabledUserServerBasicResponse, error) {
	out := new(FindEnabledUserServerBasicResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findEnabledUserServerBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateEnabledUserServerBasic(ctx context.Context, in *UpdateEnabledUserServerBasicRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateEnabledUserServerBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UploadServerHTTPRequestStat(ctx context.Context, in *UploadServerHTTPRequestStatRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/uploadServerHTTPRequestStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) CheckServerNameDuplicationInNodeCluster(ctx context.Context, in *CheckServerNameDuplicationInNodeClusterRequest, opts ...grpc.CallOption) (*CheckServerNameDuplicationInNodeClusterResponse, error) {
	out := new(CheckServerNameDuplicationInNodeClusterResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/checkServerNameDuplicationInNodeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindLatestServers(ctx context.Context, in *FindLatestServersRequest, opts ...grpc.CallOption) (*FindLatestServersResponse, error) {
	out := new(FindLatestServersResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findLatestServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindNearbyServers(ctx context.Context, in *FindNearbyServersRequest, opts ...grpc.CallOption) (*FindNearbyServersResponse, error) {
	out := new(FindNearbyServersResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findNearbyServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) PurgeServerCache(ctx context.Context, in *PurgeServerCacheRequest, opts ...grpc.CallOption) (*PurgeServerCacheResponse, error) {
	out := new(PurgeServerCacheResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/purgeServerCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindEnabledServerTrafficLimit(ctx context.Context, in *FindEnabledServerTrafficLimitRequest, opts ...grpc.CallOption) (*FindEnabledServerTrafficLimitResponse, error) {
	out := new(FindEnabledServerTrafficLimitResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findEnabledServerTrafficLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerTrafficLimit(ctx context.Context, in *UpdateServerTrafficLimitRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerTrafficLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerUserPlan(ctx context.Context, in *UpdateServerUserPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindServerUserPlan(ctx context.Context, in *FindServerUserPlanRequest, opts ...grpc.CallOption) (*FindServerUserPlanResponse, error) {
	out := new(FindServerUserPlanResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findServerUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ComposeServerConfig(ctx context.Context, in *ComposeServerConfigRequest, opts ...grpc.CallOption) (*ComposeServerConfigResponse, error) {
	out := new(ComposeServerConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/composeServerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UpdateServerUAM(ctx context.Context, in *UpdateServerUAMRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ServerService/updateServerUAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) FindEnabledServerUAM(ctx context.Context, in *FindEnabledServerUAMRequest, opts ...grpc.CallOption) (*FindEnabledServerUAMResponse, error) {
	out := new(FindEnabledServerUAMResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerService/findEnabledServerUAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServiceServer is the server API for ServerService service.
type ServerServiceServer interface {
	// 创建服务
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	// 修改服务基本信息
	UpdateServerBasic(context.Context, *UpdateServerBasicRequest) (*RPCSuccess, error)
	// 修改服务所在分组
	UpdateServerGroupIds(context.Context, *UpdateServerGroupIdsRequest) (*RPCSuccess, error)
	// 修改服务是否启用
	UpdateServerIsOn(context.Context, *UpdateServerIsOnRequest) (*RPCSuccess, error)
	// 修改服务的HTTP设置
	UpdateServerHTTP(context.Context, *UpdateServerHTTPRequest) (*RPCSuccess, error)
	// 修改服务的HTTPS设置
	UpdateServerHTTPS(context.Context, *UpdateServerHTTPSRequest) (*RPCSuccess, error)
	// 修改服务的TCP设置
	UpdateServerTCP(context.Context, *UpdateServerTCPRequest) (*RPCSuccess, error)
	// 修改服务的TLS设置
	UpdateServerTLS(context.Context, *UpdateServerTLSRequest) (*RPCSuccess, error)
	// 修改服务的Unix设置
	UpdateServerUnix(context.Context, *UpdateServerUnixRequest) (*RPCSuccess, error)
	// 修改服务的UDP设置
	UpdateServerUDP(context.Context, *UpdateServerUDPRequest) (*RPCSuccess, error)
	// 修改服务的Web设置
	UpdateServerWeb(context.Context, *UpdateServerWebRequest) (*RPCSuccess, error)
	// 修改服务的反向代理设置
	UpdateServerReverseProxy(context.Context, *UpdateServerReverseProxyRequest) (*RPCSuccess, error)
	// 查找服务的域名设置
	FindServerNames(context.Context, *FindServerNamesRequest) (*FindServerNamesResponse, error)
	// 修改服务的域名设置
	UpdateServerNames(context.Context, *UpdateServerNamesRequest) (*RPCSuccess, error)
	// 审核服务的域名设置
	UpdateServerNamesAuditing(context.Context, *UpdateServerNamesAuditingRequest) (*RPCSuccess, error)
	// 修改服务的DNS相关设置
	UpdateServerDNS(context.Context, *UpdateServerDNSRequest) (*RPCSuccess, error)
	// 重新生成CNAME
	RegenerateServerDNSName(context.Context, *RegenerateServerDNSNameRequest) (*RPCSuccess, error)
	// 修改服务的CNAME
	UpdateServerDNSName(context.Context, *UpdateServerDNSNameRequest) (*RPCSuccess, error)
	// 使用CNAME查找服务
	FindServerIdWithDNSName(context.Context, *FindServerIdWithDNSNameRequest) (*FindServerIdWithDNSNameResponse, error)
	// 计算匹配的服务数量
	CountAllEnabledServersMatch(context.Context, *CountAllEnabledServersMatchRequest) (*RPCCountResponse, error)
	// 列出单页服务
	ListEnabledServersMatch(context.Context, *ListEnabledServersMatchRequest) (*ListEnabledServersMatchResponse, error)
	// 禁用某服务
	DeleteServer(context.Context, *DeleteServerRequest) (*RPCSuccess, error)
	// 查找单个服务
	FindEnabledServer(context.Context, *FindEnabledServerRequest) (*FindEnabledServerResponse, error)
	// 查找服务配置
	FindEnabledServerConfig(context.Context, *FindEnabledServerConfigRequest) (*FindEnabledServerConfigResponse, error)
	// 查找服务的服务类型
	FindEnabledServerType(context.Context, *FindEnabledServerTypeRequest) (*FindEnabledServerTypeResponse, error)
	// 查找反向代理设置
	FindAndInitServerReverseProxyConfig(context.Context, *FindAndInitServerReverseProxyConfigRequest) (*FindAndInitServerReverseProxyConfigResponse, error)
	// 初始化Web设置
	FindAndInitServerWebConfig(context.Context, *FindAndInitServerWebConfigRequest) (*FindAndInitServerWebConfigResponse, error)
	// 计算使用某个SSL证书的服务数量
	CountAllEnabledServersWithSSLCertId(context.Context, *CountAllEnabledServersWithSSLCertIdRequest) (*RPCCountResponse, error)
	// 查找使用某个SSL证书的所有服务
	FindAllEnabledServersWithSSLCertId(context.Context, *FindAllEnabledServersWithSSLCertIdRequest) (*FindAllEnabledServersWithSSLCertIdResponse, error)
	// 计算运行在某个集群上的所有服务数量
	CountAllEnabledServersWithNodeClusterId(context.Context, *CountAllEnabledServersWithNodeClusterIdRequest) (*RPCCountResponse, error)
	// 计算使用某个分组的服务数量
	CountAllEnabledServersWithServerGroupId(context.Context, *CountAllEnabledServersWithServerGroupIdRequest) (*RPCCountResponse, error)
	// 通知更新
	NotifyServersChange(context.Context, *NotifyServersChangeRequest) (*NotifyServersChangeResponse, error)
	// 取得某个集群下的所有服务相关的DNS
	FindAllEnabledServersDNSWithNodeClusterId(context.Context, *FindAllEnabledServersDNSWithNodeClusterIdRequest) (*FindAllEnabledServersDNSWithNodeClusterIdResponse, error)
	// 查找单个服务的DNS信息
	FindEnabledServerDNS(context.Context, *FindEnabledServerDNSRequest) (*FindEnabledServerDNSResponse, error)
	// 检查服务是否属于某个用户
	CheckUserServer(context.Context, *CheckUserServerRequest) (*RPCSuccess, error)
	// 查找一个用户下的所有域名列表
	FindAllEnabledServerNamesWithUserId(context.Context, *FindAllEnabledServerNamesWithUserIdRequest) (*FindAllEnabledServerNamesWithUserIdResponse, error)
	// 查找用户服务基本信息
	FindEnabledUserServerBasic(context.Context, *FindEnabledUserServerBasicRequest) (*FindEnabledUserServerBasicResponse, error)
	// 修改用户服务基本信息
	UpdateEnabledUserServerBasic(context.Context, *UpdateEnabledUserServerBasicRequest) (*RPCSuccess, error)
	// 上传HTTP请求待统计数据
	UploadServerHTTPRequestStat(context.Context, *UploadServerHTTPRequestStatRequest) (*RPCSuccess, error)
	// 检查域名是否已经存在
	CheckServerNameDuplicationInNodeCluster(context.Context, *CheckServerNameDuplicationInNodeClusterRequest) (*CheckServerNameDuplicationInNodeClusterResponse, error)
	// 查找最近访问的服务
	FindLatestServers(context.Context, *FindLatestServersRequest) (*FindLatestServersResponse, error)
	// 查找某个服务附近的服务
	FindNearbyServers(context.Context, *FindNearbyServersRequest) (*FindNearbyServersResponse, error)
	// 清除缓存
	PurgeServerCache(context.Context, *PurgeServerCacheRequest) (*PurgeServerCacheResponse, error)
	// 查找流量限制
	FindEnabledServerTrafficLimit(context.Context, *FindEnabledServerTrafficLimitRequest) (*FindEnabledServerTrafficLimitResponse, error)
	// 设置流量限制
	UpdateServerTrafficLimit(context.Context, *UpdateServerTrafficLimitRequest) (*RPCSuccess, error)
	// 修改服务套餐
	UpdateServerUserPlan(context.Context, *UpdateServerUserPlanRequest) (*RPCSuccess, error)
	// 获取服务套餐信息
	FindServerUserPlan(context.Context, *FindServerUserPlanRequest) (*FindServerUserPlanResponse, error)
	// 获取服务配置
	ComposeServerConfig(context.Context, *ComposeServerConfigRequest) (*ComposeServerConfigResponse, error)
	// 修改服务UAM设置
	UpdateServerUAM(context.Context, *UpdateServerUAMRequest) (*RPCSuccess, error)
	// 查找服务UAM设置
	FindEnabledServerUAM(context.Context, *FindEnabledServerUAMRequest) (*FindEnabledServerUAMResponse, error)
}

// UnimplementedServerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (*UnimplementedServerServiceServer) CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerBasic(context.Context, *UpdateServerBasicRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerBasic not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerGroupIds(context.Context, *UpdateServerGroupIdsRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerGroupIds not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerIsOn(context.Context, *UpdateServerIsOnRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerIsOn not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerHTTP(context.Context, *UpdateServerHTTPRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerHTTP not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerHTTPS(context.Context, *UpdateServerHTTPSRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerHTTPS not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerTCP(context.Context, *UpdateServerTCPRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerTCP not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerTLS(context.Context, *UpdateServerTLSRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerTLS not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerUnix(context.Context, *UpdateServerUnixRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerUnix not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerUDP(context.Context, *UpdateServerUDPRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerUDP not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerWeb(context.Context, *UpdateServerWebRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerWeb not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerReverseProxy(context.Context, *UpdateServerReverseProxyRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerReverseProxy not implemented")
}
func (*UnimplementedServerServiceServer) FindServerNames(context.Context, *FindServerNamesRequest) (*FindServerNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindServerNames not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerNames(context.Context, *UpdateServerNamesRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerNames not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerNamesAuditing(context.Context, *UpdateServerNamesAuditingRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerNamesAuditing not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerDNS(context.Context, *UpdateServerDNSRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerDNS not implemented")
}
func (*UnimplementedServerServiceServer) RegenerateServerDNSName(context.Context, *RegenerateServerDNSNameRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateServerDNSName not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerDNSName(context.Context, *UpdateServerDNSNameRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerDNSName not implemented")
}
func (*UnimplementedServerServiceServer) FindServerIdWithDNSName(context.Context, *FindServerIdWithDNSNameRequest) (*FindServerIdWithDNSNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindServerIdWithDNSName not implemented")
}
func (*UnimplementedServerServiceServer) CountAllEnabledServersMatch(context.Context, *CountAllEnabledServersMatchRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledServersMatch not implemented")
}
func (*UnimplementedServerServiceServer) ListEnabledServersMatch(context.Context, *ListEnabledServersMatchRequest) (*ListEnabledServersMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledServersMatch not implemented")
}
func (*UnimplementedServerServiceServer) DeleteServer(context.Context, *DeleteServerRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (*UnimplementedServerServiceServer) FindEnabledServer(context.Context, *FindEnabledServerRequest) (*FindEnabledServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledServer not implemented")
}
func (*UnimplementedServerServiceServer) FindEnabledServerConfig(context.Context, *FindEnabledServerConfigRequest) (*FindEnabledServerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledServerConfig not implemented")
}
func (*UnimplementedServerServiceServer) FindEnabledServerType(context.Context, *FindEnabledServerTypeRequest) (*FindEnabledServerTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledServerType not implemented")
}
func (*UnimplementedServerServiceServer) FindAndInitServerReverseProxyConfig(context.Context, *FindAndInitServerReverseProxyConfigRequest) (*FindAndInitServerReverseProxyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAndInitServerReverseProxyConfig not implemented")
}
func (*UnimplementedServerServiceServer) FindAndInitServerWebConfig(context.Context, *FindAndInitServerWebConfigRequest) (*FindAndInitServerWebConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAndInitServerWebConfig not implemented")
}
func (*UnimplementedServerServiceServer) CountAllEnabledServersWithSSLCertId(context.Context, *CountAllEnabledServersWithSSLCertIdRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledServersWithSSLCertId not implemented")
}
func (*UnimplementedServerServiceServer) FindAllEnabledServersWithSSLCertId(context.Context, *FindAllEnabledServersWithSSLCertIdRequest) (*FindAllEnabledServersWithSSLCertIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledServersWithSSLCertId not implemented")
}
func (*UnimplementedServerServiceServer) CountAllEnabledServersWithNodeClusterId(context.Context, *CountAllEnabledServersWithNodeClusterIdRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledServersWithNodeClusterId not implemented")
}
func (*UnimplementedServerServiceServer) CountAllEnabledServersWithServerGroupId(context.Context, *CountAllEnabledServersWithServerGroupIdRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledServersWithServerGroupId not implemented")
}
func (*UnimplementedServerServiceServer) NotifyServersChange(context.Context, *NotifyServersChangeRequest) (*NotifyServersChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyServersChange not implemented")
}
func (*UnimplementedServerServiceServer) FindAllEnabledServersDNSWithNodeClusterId(context.Context, *FindAllEnabledServersDNSWithNodeClusterIdRequest) (*FindAllEnabledServersDNSWithNodeClusterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledServersDNSWithNodeClusterId not implemented")
}
func (*UnimplementedServerServiceServer) FindEnabledServerDNS(context.Context, *FindEnabledServerDNSRequest) (*FindEnabledServerDNSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledServerDNS not implemented")
}
func (*UnimplementedServerServiceServer) CheckUserServer(context.Context, *CheckUserServerRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserServer not implemented")
}
func (*UnimplementedServerServiceServer) FindAllEnabledServerNamesWithUserId(context.Context, *FindAllEnabledServerNamesWithUserIdRequest) (*FindAllEnabledServerNamesWithUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledServerNamesWithUserId not implemented")
}
func (*UnimplementedServerServiceServer) FindEnabledUserServerBasic(context.Context, *FindEnabledUserServerBasicRequest) (*FindEnabledUserServerBasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledUserServerBasic not implemented")
}
func (*UnimplementedServerServiceServer) UpdateEnabledUserServerBasic(context.Context, *UpdateEnabledUserServerBasicRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnabledUserServerBasic not implemented")
}
func (*UnimplementedServerServiceServer) UploadServerHTTPRequestStat(context.Context, *UploadServerHTTPRequestStatRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadServerHTTPRequestStat not implemented")
}
func (*UnimplementedServerServiceServer) CheckServerNameDuplicationInNodeCluster(context.Context, *CheckServerNameDuplicationInNodeClusterRequest) (*CheckServerNameDuplicationInNodeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckServerNameDuplicationInNodeCluster not implemented")
}
func (*UnimplementedServerServiceServer) FindLatestServers(context.Context, *FindLatestServersRequest) (*FindLatestServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLatestServers not implemented")
}
func (*UnimplementedServerServiceServer) FindNearbyServers(context.Context, *FindNearbyServersRequest) (*FindNearbyServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNearbyServers not implemented")
}
func (*UnimplementedServerServiceServer) PurgeServerCache(context.Context, *PurgeServerCacheRequest) (*PurgeServerCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeServerCache not implemented")
}
func (*UnimplementedServerServiceServer) FindEnabledServerTrafficLimit(context.Context, *FindEnabledServerTrafficLimitRequest) (*FindEnabledServerTrafficLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledServerTrafficLimit not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerTrafficLimit(context.Context, *UpdateServerTrafficLimitRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerTrafficLimit not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerUserPlan(context.Context, *UpdateServerUserPlanRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerUserPlan not implemented")
}
func (*UnimplementedServerServiceServer) FindServerUserPlan(context.Context, *FindServerUserPlanRequest) (*FindServerUserPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindServerUserPlan not implemented")
}
func (*UnimplementedServerServiceServer) ComposeServerConfig(context.Context, *ComposeServerConfigRequest) (*ComposeServerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposeServerConfig not implemented")
}
func (*UnimplementedServerServiceServer) UpdateServerUAM(context.Context, *UpdateServerUAMRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerUAM not implemented")
}
func (*UnimplementedServerServiceServer) FindEnabledServerUAM(context.Context, *FindEnabledServerUAMRequest) (*FindEnabledServerUAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledServerUAM not implemented")
}

func RegisterServerServiceServer(s *grpc.Server, srv ServerServiceServer) {
	s.RegisterService(&_ServerService_serviceDesc, srv)
}

func _ServerService_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerBasic(ctx, req.(*UpdateServerBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerGroupIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerGroupIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerGroupIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerGroupIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerGroupIds(ctx, req.(*UpdateServerGroupIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerIsOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerIsOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerIsOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerIsOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerIsOn(ctx, req.(*UpdateServerIsOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerHTTP(ctx, req.(*UpdateServerHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerHTTPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerHTTPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerHTTPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerHTTPS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerHTTPS(ctx, req.(*UpdateServerHTTPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerTCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerTCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerTCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerTCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerTCP(ctx, req.(*UpdateServerTCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerTLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerTLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerTLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerTLS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerTLS(ctx, req.(*UpdateServerTLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerUnix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerUnixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerUnix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerUnix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerUnix(ctx, req.(*UpdateServerUnixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerUDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerUDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerUDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerUDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerUDP(ctx, req.(*UpdateServerUDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerWeb(ctx, req.(*UpdateServerWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerReverseProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerReverseProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerReverseProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerReverseProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerReverseProxy(ctx, req.(*UpdateServerReverseProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindServerNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindServerNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindServerNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindServerNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindServerNames(ctx, req.(*FindServerNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerNames(ctx, req.(*UpdateServerNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerNamesAuditing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerNamesAuditingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerNamesAuditing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerNamesAuditing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerNamesAuditing(ctx, req.(*UpdateServerNamesAuditingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerDNS(ctx, req.(*UpdateServerDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_RegenerateServerDNSName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateServerDNSNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).RegenerateServerDNSName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/RegenerateServerDNSName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).RegenerateServerDNSName(ctx, req.(*RegenerateServerDNSNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerDNSName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerDNSNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerDNSName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerDNSName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerDNSName(ctx, req.(*UpdateServerDNSNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindServerIdWithDNSName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindServerIdWithDNSNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindServerIdWithDNSName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindServerIdWithDNSName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindServerIdWithDNSName(ctx, req.(*FindServerIdWithDNSNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CountAllEnabledServersMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledServersMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CountAllEnabledServersMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/CountAllEnabledServersMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CountAllEnabledServersMatch(ctx, req.(*CountAllEnabledServersMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ListEnabledServersMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledServersMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ListEnabledServersMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/ListEnabledServersMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ListEnabledServersMatch(ctx, req.(*ListEnabledServersMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindEnabledServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindEnabledServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindEnabledServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindEnabledServer(ctx, req.(*FindEnabledServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindEnabledServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledServerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindEnabledServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindEnabledServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindEnabledServerConfig(ctx, req.(*FindEnabledServerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindEnabledServerType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledServerTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindEnabledServerType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindEnabledServerType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindEnabledServerType(ctx, req.(*FindEnabledServerTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindAndInitServerReverseProxyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAndInitServerReverseProxyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindAndInitServerReverseProxyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindAndInitServerReverseProxyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindAndInitServerReverseProxyConfig(ctx, req.(*FindAndInitServerReverseProxyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindAndInitServerWebConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAndInitServerWebConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindAndInitServerWebConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindAndInitServerWebConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindAndInitServerWebConfig(ctx, req.(*FindAndInitServerWebConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CountAllEnabledServersWithSSLCertId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledServersWithSSLCertIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CountAllEnabledServersWithSSLCertId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/CountAllEnabledServersWithSSLCertId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CountAllEnabledServersWithSSLCertId(ctx, req.(*CountAllEnabledServersWithSSLCertIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindAllEnabledServersWithSSLCertId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledServersWithSSLCertIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindAllEnabledServersWithSSLCertId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindAllEnabledServersWithSSLCertId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindAllEnabledServersWithSSLCertId(ctx, req.(*FindAllEnabledServersWithSSLCertIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CountAllEnabledServersWithNodeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledServersWithNodeClusterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CountAllEnabledServersWithNodeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/CountAllEnabledServersWithNodeClusterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CountAllEnabledServersWithNodeClusterId(ctx, req.(*CountAllEnabledServersWithNodeClusterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CountAllEnabledServersWithServerGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledServersWithServerGroupIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CountAllEnabledServersWithServerGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/CountAllEnabledServersWithServerGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CountAllEnabledServersWithServerGroupId(ctx, req.(*CountAllEnabledServersWithServerGroupIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_NotifyServersChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyServersChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).NotifyServersChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/NotifyServersChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).NotifyServersChange(ctx, req.(*NotifyServersChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindAllEnabledServersDNSWithNodeClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledServersDNSWithNodeClusterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindAllEnabledServersDNSWithNodeClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindAllEnabledServersDNSWithNodeClusterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindAllEnabledServersDNSWithNodeClusterId(ctx, req.(*FindAllEnabledServersDNSWithNodeClusterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindEnabledServerDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledServerDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindEnabledServerDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindEnabledServerDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindEnabledServerDNS(ctx, req.(*FindEnabledServerDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CheckUserServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CheckUserServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/CheckUserServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CheckUserServer(ctx, req.(*CheckUserServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindAllEnabledServerNamesWithUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledServerNamesWithUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindAllEnabledServerNamesWithUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindAllEnabledServerNamesWithUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindAllEnabledServerNamesWithUserId(ctx, req.(*FindAllEnabledServerNamesWithUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindEnabledUserServerBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledUserServerBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindEnabledUserServerBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindEnabledUserServerBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindEnabledUserServerBasic(ctx, req.(*FindEnabledUserServerBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateEnabledUserServerBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnabledUserServerBasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateEnabledUserServerBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateEnabledUserServerBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateEnabledUserServerBasic(ctx, req.(*UpdateEnabledUserServerBasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UploadServerHTTPRequestStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadServerHTTPRequestStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UploadServerHTTPRequestStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UploadServerHTTPRequestStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UploadServerHTTPRequestStat(ctx, req.(*UploadServerHTTPRequestStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_CheckServerNameDuplicationInNodeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckServerNameDuplicationInNodeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).CheckServerNameDuplicationInNodeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/CheckServerNameDuplicationInNodeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).CheckServerNameDuplicationInNodeCluster(ctx, req.(*CheckServerNameDuplicationInNodeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindLatestServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLatestServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindLatestServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindLatestServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindLatestServers(ctx, req.(*FindLatestServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindNearbyServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNearbyServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindNearbyServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindNearbyServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindNearbyServers(ctx, req.(*FindNearbyServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_PurgeServerCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeServerCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).PurgeServerCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/PurgeServerCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).PurgeServerCache(ctx, req.(*PurgeServerCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindEnabledServerTrafficLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledServerTrafficLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindEnabledServerTrafficLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindEnabledServerTrafficLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindEnabledServerTrafficLimit(ctx, req.(*FindEnabledServerTrafficLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerTrafficLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerTrafficLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerTrafficLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerTrafficLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerTrafficLimit(ctx, req.(*UpdateServerTrafficLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerUserPlan(ctx, req.(*UpdateServerUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindServerUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindServerUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindServerUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindServerUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindServerUserPlan(ctx, req.(*FindServerUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ComposeServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposeServerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).ComposeServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/ComposeServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).ComposeServerConfig(ctx, req.(*ComposeServerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UpdateServerUAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerUAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UpdateServerUAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/UpdateServerUAM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UpdateServerUAM(ctx, req.(*UpdateServerUAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_FindEnabledServerUAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledServerUAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).FindEnabledServerUAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerService/FindEnabledServerUAM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).FindEnabledServerUAM(ctx, req.(*FindEnabledServerUAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createServer",
			Handler:    _ServerService_CreateServer_Handler,
		},
		{
			MethodName: "updateServerBasic",
			Handler:    _ServerService_UpdateServerBasic_Handler,
		},
		{
			MethodName: "updateServerGroupIds",
			Handler:    _ServerService_UpdateServerGroupIds_Handler,
		},
		{
			MethodName: "updateServerIsOn",
			Handler:    _ServerService_UpdateServerIsOn_Handler,
		},
		{
			MethodName: "updateServerHTTP",
			Handler:    _ServerService_UpdateServerHTTP_Handler,
		},
		{
			MethodName: "updateServerHTTPS",
			Handler:    _ServerService_UpdateServerHTTPS_Handler,
		},
		{
			MethodName: "updateServerTCP",
			Handler:    _ServerService_UpdateServerTCP_Handler,
		},
		{
			MethodName: "updateServerTLS",
			Handler:    _ServerService_UpdateServerTLS_Handler,
		},
		{
			MethodName: "updateServerUnix",
			Handler:    _ServerService_UpdateServerUnix_Handler,
		},
		{
			MethodName: "updateServerUDP",
			Handler:    _ServerService_UpdateServerUDP_Handler,
		},
		{
			MethodName: "updateServerWeb",
			Handler:    _ServerService_UpdateServerWeb_Handler,
		},
		{
			MethodName: "updateServerReverseProxy",
			Handler:    _ServerService_UpdateServerReverseProxy_Handler,
		},
		{
			MethodName: "findServerNames",
			Handler:    _ServerService_FindServerNames_Handler,
		},
		{
			MethodName: "updateServerNames",
			Handler:    _ServerService_UpdateServerNames_Handler,
		},
		{
			MethodName: "updateServerNamesAuditing",
			Handler:    _ServerService_UpdateServerNamesAuditing_Handler,
		},
		{
			MethodName: "updateServerDNS",
			Handler:    _ServerService_UpdateServerDNS_Handler,
		},
		{
			MethodName: "regenerateServerDNSName",
			Handler:    _ServerService_RegenerateServerDNSName_Handler,
		},
		{
			MethodName: "updateServerDNSName",
			Handler:    _ServerService_UpdateServerDNSName_Handler,
		},
		{
			MethodName: "findServerIdWithDNSName",
			Handler:    _ServerService_FindServerIdWithDNSName_Handler,
		},
		{
			MethodName: "countAllEnabledServersMatch",
			Handler:    _ServerService_CountAllEnabledServersMatch_Handler,
		},
		{
			MethodName: "listEnabledServersMatch",
			Handler:    _ServerService_ListEnabledServersMatch_Handler,
		},
		{
			MethodName: "deleteServer",
			Handler:    _ServerService_DeleteServer_Handler,
		},
		{
			MethodName: "findEnabledServer",
			Handler:    _ServerService_FindEnabledServer_Handler,
		},
		{
			MethodName: "findEnabledServerConfig",
			Handler:    _ServerService_FindEnabledServerConfig_Handler,
		},
		{
			MethodName: "findEnabledServerType",
			Handler:    _ServerService_FindEnabledServerType_Handler,
		},
		{
			MethodName: "findAndInitServerReverseProxyConfig",
			Handler:    _ServerService_FindAndInitServerReverseProxyConfig_Handler,
		},
		{
			MethodName: "findAndInitServerWebConfig",
			Handler:    _ServerService_FindAndInitServerWebConfig_Handler,
		},
		{
			MethodName: "countAllEnabledServersWithSSLCertId",
			Handler:    _ServerService_CountAllEnabledServersWithSSLCertId_Handler,
		},
		{
			MethodName: "findAllEnabledServersWithSSLCertId",
			Handler:    _ServerService_FindAllEnabledServersWithSSLCertId_Handler,
		},
		{
			MethodName: "countAllEnabledServersWithNodeClusterId",
			Handler:    _ServerService_CountAllEnabledServersWithNodeClusterId_Handler,
		},
		{
			MethodName: "countAllEnabledServersWithServerGroupId",
			Handler:    _ServerService_CountAllEnabledServersWithServerGroupId_Handler,
		},
		{
			MethodName: "notifyServersChange",
			Handler:    _ServerService_NotifyServersChange_Handler,
		},
		{
			MethodName: "findAllEnabledServersDNSWithNodeClusterId",
			Handler:    _ServerService_FindAllEnabledServersDNSWithNodeClusterId_Handler,
		},
		{
			MethodName: "findEnabledServerDNS",
			Handler:    _ServerService_FindEnabledServerDNS_Handler,
		},
		{
			MethodName: "checkUserServer",
			Handler:    _ServerService_CheckUserServer_Handler,
		},
		{
			MethodName: "findAllEnabledServerNamesWithUserId",
			Handler:    _ServerService_FindAllEnabledServerNamesWithUserId_Handler,
		},
		{
			MethodName: "findEnabledUserServerBasic",
			Handler:    _ServerService_FindEnabledUserServerBasic_Handler,
		},
		{
			MethodName: "updateEnabledUserServerBasic",
			Handler:    _ServerService_UpdateEnabledUserServerBasic_Handler,
		},
		{
			MethodName: "uploadServerHTTPRequestStat",
			Handler:    _ServerService_UploadServerHTTPRequestStat_Handler,
		},
		{
			MethodName: "checkServerNameDuplicationInNodeCluster",
			Handler:    _ServerService_CheckServerNameDuplicationInNodeCluster_Handler,
		},
		{
			MethodName: "findLatestServers",
			Handler:    _ServerService_FindLatestServers_Handler,
		},
		{
			MethodName: "findNearbyServers",
			Handler:    _ServerService_FindNearbyServers_Handler,
		},
		{
			MethodName: "purgeServerCache",
			Handler:    _ServerService_PurgeServerCache_Handler,
		},
		{
			MethodName: "findEnabledServerTrafficLimit",
			Handler:    _ServerService_FindEnabledServerTrafficLimit_Handler,
		},
		{
			MethodName: "updateServerTrafficLimit",
			Handler:    _ServerService_UpdateServerTrafficLimit_Handler,
		},
		{
			MethodName: "updateServerUserPlan",
			Handler:    _ServerService_UpdateServerUserPlan_Handler,
		},
		{
			MethodName: "findServerUserPlan",
			Handler:    _ServerService_FindServerUserPlan_Handler,
		},
		{
			MethodName: "composeServerConfig",
			Handler:    _ServerService_ComposeServerConfig_Handler,
		},
		{
			MethodName: "updateServerUAM",
			Handler:    _ServerService_UpdateServerUAM_Handler,
		},
		{
			MethodName: "findEnabledServerUAM",
			Handler:    _ServerService_FindEnabledServerUAM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_server.proto",
}
