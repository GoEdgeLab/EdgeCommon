// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_dns_domain.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建域名
type CreateDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64  `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateDNSDomainRequest) Reset() {
	*x = CreateDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSDomainRequest) ProtoMessage() {}

func (x *CreateDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*CreateDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDNSDomainRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

func (x *CreateDNSDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateDNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *CreateDNSDomainResponse) Reset() {
	*x = CreateDNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSDomainResponse) ProtoMessage() {}

func (x *CreateDNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSDomainResponse.ProtoReflect.Descriptor instead.
func (*CreateDNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDNSDomainResponse) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

// 修改域名
type UpdateDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64  `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsOn        bool   `protobuf:"varint,3,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateDNSDomainRequest) Reset() {
	*x = UpdateDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDNSDomainRequest) ProtoMessage() {}

func (x *UpdateDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*UpdateDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

func (x *UpdateDNSDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDNSDomainRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除域名
type DeleteDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *DeleteDNSDomainRequest) Reset() {
	*x = DeleteDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDNSDomainRequest) ProtoMessage() {}

func (x *DeleteDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*DeleteDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

// 恢复删除的域名
type RecoverDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *RecoverDNSDomainRequest) Reset() {
	*x = RecoverDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverDNSDomainRequest) ProtoMessage() {}

func (x *RecoverDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*RecoverDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{4}
}

func (x *RecoverDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

// 查询单个域名信息
type FindEnabledDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *FindEnabledDNSDomainRequest) Reset() {
	*x = FindEnabledDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledDNSDomainRequest) ProtoMessage() {}

func (x *FindEnabledDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{5}
}

func (x *FindEnabledDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

type FindEnabledDNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomain *DNSDomain `protobuf:"bytes,1,opt,name=dnsDomain,proto3" json:"dnsDomain,omitempty"`
}

func (x *FindEnabledDNSDomainResponse) Reset() {
	*x = FindEnabledDNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledDNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledDNSDomainResponse) ProtoMessage() {}

func (x *FindEnabledDNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledDNSDomainResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledDNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{6}
}

func (x *FindEnabledDNSDomainResponse) GetDnsDomain() *DNSDomain {
	if x != nil {
		return x.DnsDomain
	}
	return nil
}

// 查询单个域名的基础信息
type FindEnabledBasicDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *FindEnabledBasicDNSDomainRequest) Reset() {
	*x = FindEnabledBasicDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledBasicDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledBasicDNSDomainRequest) ProtoMessage() {}

func (x *FindEnabledBasicDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledBasicDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledBasicDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{7}
}

func (x *FindEnabledBasicDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

type FindEnabledBasicDNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomain *DNSDomain `protobuf:"bytes,1,opt,name=dnsDomain,proto3" json:"dnsDomain,omitempty"`
}

func (x *FindEnabledBasicDNSDomainResponse) Reset() {
	*x = FindEnabledBasicDNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledBasicDNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledBasicDNSDomainResponse) ProtoMessage() {}

func (x *FindEnabledBasicDNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledBasicDNSDomainResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledBasicDNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{8}
}

func (x *FindEnabledBasicDNSDomainResponse) GetDnsDomain() *DNSDomain {
	if x != nil {
		return x.DnsDomain
	}
	return nil
}

// 计算服务商下的域名数量
type CountAllEnabledDNSDomainsWithDNSProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) Reset() {
	*x = CountAllEnabledDNSDomainsWithDNSProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledDNSDomainsWithDNSProviderIdRequest) ProtoMessage() {}

func (x *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledDNSDomainsWithDNSProviderIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledDNSDomainsWithDNSProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{9}
}

func (x *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

// 列出服务商下的所有域名
type FindAllEnabledDNSDomainsWithDNSProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) Reset() {
	*x = FindAllEnabledDNSDomainsWithDNSProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledDNSDomainsWithDNSProviderIdRequest) ProtoMessage() {}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledDNSDomainsWithDNSProviderIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledDNSDomainsWithDNSProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{10}
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

type FindAllEnabledDNSDomainsWithDNSProviderIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomains []*DNSDomain `protobuf:"bytes,1,rep,name=dnsDomains,proto3" json:"dnsDomains,omitempty"`
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdResponse) Reset() {
	*x = FindAllEnabledDNSDomainsWithDNSProviderIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse) ProtoMessage() {}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledDNSDomainsWithDNSProviderIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{11}
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdResponse) GetDnsDomains() []*DNSDomain {
	if x != nil {
		return x.DnsDomains
	}
	return nil
}

// 列出服务商下的所有域名基本信息
type FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest) Reset() {
	*x = FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest) ProtoMessage() {}

func (x *FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{12}
}

func (x *FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

type FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomains []*DNSDomain `protobuf:"bytes,1,rep,name=dnsDomains,proto3" json:"dnsDomains,omitempty"`
}

func (x *FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse) Reset() {
	*x = FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse) ProtoMessage() {}

func (x *FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{13}
}

func (x *FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse) GetDnsDomains() []*DNSDomain {
	if x != nil {
		return x.DnsDomains
	}
	return nil
}

// 同步域名数据
type SyncDNSDomainDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId   int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
	NodeClusterId int64 `protobuf:"varint,2,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"` // 如果指定，表示只更新单个集群ID
}

func (x *SyncDNSDomainDataRequest) Reset() {
	*x = SyncDNSDomainDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDNSDomainDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDNSDomainDataRequest) ProtoMessage() {}

func (x *SyncDNSDomainDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDNSDomainDataRequest.ProtoReflect.Descriptor instead.
func (*SyncDNSDomainDataRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{14}
}

func (x *SyncDNSDomainDataRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

func (x *SyncDNSDomainDataRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

type SyncDNSDomainDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk      bool   `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ShouldFix bool   `protobuf:"varint,3,opt,name=shouldFix,proto3" json:"shouldFix,omitempty"`
}

func (x *SyncDNSDomainDataResponse) Reset() {
	*x = SyncDNSDomainDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDNSDomainDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDNSDomainDataResponse) ProtoMessage() {}

func (x *SyncDNSDomainDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDNSDomainDataResponse.ProtoReflect.Descriptor instead.
func (*SyncDNSDomainDataResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{15}
}

func (x *SyncDNSDomainDataResponse) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *SyncDNSDomainDataResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SyncDNSDomainDataResponse) GetShouldFix() bool {
	if x != nil {
		return x.ShouldFix
	}
	return false
}

// 查看支持的线路
type FindAllDNSDomainRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *FindAllDNSDomainRoutesRequest) Reset() {
	*x = FindAllDNSDomainRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDNSDomainRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDNSDomainRoutesRequest) ProtoMessage() {}

func (x *FindAllDNSDomainRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDNSDomainRoutesRequest.ProtoReflect.Descriptor instead.
func (*FindAllDNSDomainRoutesRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{16}
}

func (x *FindAllDNSDomainRoutesRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

type FindAllDNSDomainRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*DNSRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *FindAllDNSDomainRoutesResponse) Reset() {
	*x = FindAllDNSDomainRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDNSDomainRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDNSDomainRoutesResponse) ProtoMessage() {}

func (x *FindAllDNSDomainRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDNSDomainRoutesResponse.ProtoReflect.Descriptor instead.
func (*FindAllDNSDomainRoutesResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{17}
}

func (x *FindAllDNSDomainRoutesResponse) GetRoutes() []*DNSRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

// 判断是否有域名可选
type ExistAvailableDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExistAvailableDomainsRequest) Reset() {
	*x = ExistAvailableDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAvailableDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAvailableDomainsRequest) ProtoMessage() {}

func (x *ExistAvailableDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAvailableDomainsRequest.ProtoReflect.Descriptor instead.
func (*ExistAvailableDomainsRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{18}
}

type ExistAvailableDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *ExistAvailableDomainsResponse) Reset() {
	*x = ExistAvailableDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAvailableDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAvailableDomainsResponse) ProtoMessage() {}

func (x *ExistAvailableDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAvailableDomainsResponse.ProtoReflect.Descriptor instead.
func (*ExistAvailableDomainsResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{19}
}

func (x *ExistAvailableDomainsResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

// 检查域名是否在记录中
type ExistDNSDomainRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64  `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`   // 解析类型，比如A, CNAME等
	Route       string `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"` // 线路
	Value       string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *ExistDNSDomainRecordRequest) Reset() {
	*x = ExistDNSDomainRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistDNSDomainRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistDNSDomainRecordRequest) ProtoMessage() {}

func (x *ExistDNSDomainRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistDNSDomainRecordRequest.ProtoReflect.Descriptor instead.
func (*ExistDNSDomainRecordRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{20}
}

func (x *ExistDNSDomainRecordRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

func (x *ExistDNSDomainRecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExistDNSDomainRecordRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExistDNSDomainRecordRequest) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *ExistDNSDomainRecordRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ExistDNSDomainRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk bool `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
}

func (x *ExistDNSDomainRecordResponse) Reset() {
	*x = ExistDNSDomainRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistDNSDomainRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistDNSDomainRecordResponse) ProtoMessage() {}

func (x *ExistDNSDomainRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistDNSDomainRecordResponse.ProtoReflect.Descriptor instead.
func (*ExistDNSDomainRecordResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{21}
}

func (x *ExistDNSDomainRecordResponse) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

// 从服务商同步域名
type SyncDNSDomainsFromProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *SyncDNSDomainsFromProviderRequest) Reset() {
	*x = SyncDNSDomainsFromProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDNSDomainsFromProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDNSDomainsFromProviderRequest) ProtoMessage() {}

func (x *SyncDNSDomainsFromProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDNSDomainsFromProviderRequest.ProtoReflect.Descriptor instead.
func (*SyncDNSDomainsFromProviderRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{22}
}

func (x *SyncDNSDomainsFromProviderRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

type SyncDNSDomainsFromProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasChanges bool `protobuf:"varint,1,opt,name=hasChanges,proto3" json:"hasChanges,omitempty"`
}

func (x *SyncDNSDomainsFromProviderResponse) Reset() {
	*x = SyncDNSDomainsFromProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDNSDomainsFromProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDNSDomainsFromProviderResponse) ProtoMessage() {}

func (x *SyncDNSDomainsFromProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDNSDomainsFromProviderResponse.ProtoReflect.Descriptor instead.
func (*SyncDNSDomainsFromProviderResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{23}
}

func (x *SyncDNSDomainsFromProviderResponse) GetHasChanges() bool {
	if x != nil {
		return x.HasChanges
	}
	return false
}

var File_service_dns_domain_proto protoreflect.FileDescriptor

var file_service_dns_domain_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x22, 0x3a, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0x44, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x59, 0x0a, 0x31, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x30, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x62, 0x0a, 0x31, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x22, 0x5d, 0x0a, 0x35, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x36, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a,
	0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x62, 0x0a, 0x18, 0x53,
	0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x63, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x46, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x46, 0x69, 0x78, 0x22, 0x41, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x1e, 0x0a, 0x1c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x35, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x1c,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b,
	0x22, 0x49, 0x0a, 0x21, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x22, 0x53,
	0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x32, 0xfb, 0x0a, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3f, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19,
	0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x2a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x98, 0x01, 0x0a, 0x29, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x34, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01, 0x0a,
	0x2e, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x39, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x44, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_dns_domain_proto_rawDescOnce sync.Once
	file_service_dns_domain_proto_rawDescData = file_service_dns_domain_proto_rawDesc
)

func file_service_dns_domain_proto_rawDescGZIP() []byte {
	file_service_dns_domain_proto_rawDescOnce.Do(func() {
		file_service_dns_domain_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_dns_domain_proto_rawDescData)
	})
	return file_service_dns_domain_proto_rawDescData
}

var file_service_dns_domain_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_service_dns_domain_proto_goTypes = []interface{}{
	(*CreateDNSDomainRequest)(nil),                                 // 0: pb.CreateDNSDomainRequest
	(*CreateDNSDomainResponse)(nil),                                // 1: pb.CreateDNSDomainResponse
	(*UpdateDNSDomainRequest)(nil),                                 // 2: pb.UpdateDNSDomainRequest
	(*DeleteDNSDomainRequest)(nil),                                 // 3: pb.DeleteDNSDomainRequest
	(*RecoverDNSDomainRequest)(nil),                                // 4: pb.RecoverDNSDomainRequest
	(*FindEnabledDNSDomainRequest)(nil),                            // 5: pb.FindEnabledDNSDomainRequest
	(*FindEnabledDNSDomainResponse)(nil),                           // 6: pb.FindEnabledDNSDomainResponse
	(*FindEnabledBasicDNSDomainRequest)(nil),                       // 7: pb.FindEnabledBasicDNSDomainRequest
	(*FindEnabledBasicDNSDomainResponse)(nil),                      // 8: pb.FindEnabledBasicDNSDomainResponse
	(*CountAllEnabledDNSDomainsWithDNSProviderIdRequest)(nil),      // 9: pb.CountAllEnabledDNSDomainsWithDNSProviderIdRequest
	(*FindAllEnabledDNSDomainsWithDNSProviderIdRequest)(nil),       // 10: pb.FindAllEnabledDNSDomainsWithDNSProviderIdRequest
	(*FindAllEnabledDNSDomainsWithDNSProviderIdResponse)(nil),      // 11: pb.FindAllEnabledDNSDomainsWithDNSProviderIdResponse
	(*FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest)(nil),  // 12: pb.FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest
	(*FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse)(nil), // 13: pb.FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse
	(*SyncDNSDomainDataRequest)(nil),                               // 14: pb.SyncDNSDomainDataRequest
	(*SyncDNSDomainDataResponse)(nil),                              // 15: pb.SyncDNSDomainDataResponse
	(*FindAllDNSDomainRoutesRequest)(nil),                          // 16: pb.FindAllDNSDomainRoutesRequest
	(*FindAllDNSDomainRoutesResponse)(nil),                         // 17: pb.FindAllDNSDomainRoutesResponse
	(*ExistAvailableDomainsRequest)(nil),                           // 18: pb.ExistAvailableDomainsRequest
	(*ExistAvailableDomainsResponse)(nil),                          // 19: pb.ExistAvailableDomainsResponse
	(*ExistDNSDomainRecordRequest)(nil),                            // 20: pb.ExistDNSDomainRecordRequest
	(*ExistDNSDomainRecordResponse)(nil),                           // 21: pb.ExistDNSDomainRecordResponse
	(*SyncDNSDomainsFromProviderRequest)(nil),                      // 22: pb.SyncDNSDomainsFromProviderRequest
	(*SyncDNSDomainsFromProviderResponse)(nil),                     // 23: pb.SyncDNSDomainsFromProviderResponse
	(*DNSDomain)(nil),                                              // 24: pb.DNSDomain
	(*DNSRoute)(nil),                                               // 25: pb.DNSRoute
	(*RPCSuccess)(nil),                                             // 26: pb.RPCSuccess
	(*RPCCountResponse)(nil),                                       // 27: pb.RPCCountResponse
}
var file_service_dns_domain_proto_depIdxs = []int32{
	24, // 0: pb.FindEnabledDNSDomainResponse.dnsDomain:type_name -> pb.DNSDomain
	24, // 1: pb.FindEnabledBasicDNSDomainResponse.dnsDomain:type_name -> pb.DNSDomain
	24, // 2: pb.FindAllEnabledDNSDomainsWithDNSProviderIdResponse.dnsDomains:type_name -> pb.DNSDomain
	24, // 3: pb.FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse.dnsDomains:type_name -> pb.DNSDomain
	25, // 4: pb.FindAllDNSDomainRoutesResponse.routes:type_name -> pb.DNSRoute
	0,  // 5: pb.DNSDomainService.createDNSDomain:input_type -> pb.CreateDNSDomainRequest
	2,  // 6: pb.DNSDomainService.updateDNSDomain:input_type -> pb.UpdateDNSDomainRequest
	3,  // 7: pb.DNSDomainService.deleteDNSDomain:input_type -> pb.DeleteDNSDomainRequest
	4,  // 8: pb.DNSDomainService.recoverDNSDomain:input_type -> pb.RecoverDNSDomainRequest
	5,  // 9: pb.DNSDomainService.findEnabledDNSDomain:input_type -> pb.FindEnabledDNSDomainRequest
	7,  // 10: pb.DNSDomainService.findEnabledBasicDNSDomain:input_type -> pb.FindEnabledBasicDNSDomainRequest
	9,  // 11: pb.DNSDomainService.countAllEnabledDNSDomainsWithDNSProviderId:input_type -> pb.CountAllEnabledDNSDomainsWithDNSProviderIdRequest
	10, // 12: pb.DNSDomainService.findAllEnabledDNSDomainsWithDNSProviderId:input_type -> pb.FindAllEnabledDNSDomainsWithDNSProviderIdRequest
	12, // 13: pb.DNSDomainService.findAllEnabledBasicDNSDomainsWithDNSProviderId:input_type -> pb.FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest
	14, // 14: pb.DNSDomainService.syncDNSDomainData:input_type -> pb.SyncDNSDomainDataRequest
	16, // 15: pb.DNSDomainService.findAllDNSDomainRoutes:input_type -> pb.FindAllDNSDomainRoutesRequest
	18, // 16: pb.DNSDomainService.existAvailableDomains:input_type -> pb.ExistAvailableDomainsRequest
	20, // 17: pb.DNSDomainService.existDNSDomainRecord:input_type -> pb.ExistDNSDomainRecordRequest
	22, // 18: pb.DNSDomainService.syncDNSDomainsFromProvider:input_type -> pb.SyncDNSDomainsFromProviderRequest
	1,  // 19: pb.DNSDomainService.createDNSDomain:output_type -> pb.CreateDNSDomainResponse
	26, // 20: pb.DNSDomainService.updateDNSDomain:output_type -> pb.RPCSuccess
	26, // 21: pb.DNSDomainService.deleteDNSDomain:output_type -> pb.RPCSuccess
	26, // 22: pb.DNSDomainService.recoverDNSDomain:output_type -> pb.RPCSuccess
	6,  // 23: pb.DNSDomainService.findEnabledDNSDomain:output_type -> pb.FindEnabledDNSDomainResponse
	8,  // 24: pb.DNSDomainService.findEnabledBasicDNSDomain:output_type -> pb.FindEnabledBasicDNSDomainResponse
	27, // 25: pb.DNSDomainService.countAllEnabledDNSDomainsWithDNSProviderId:output_type -> pb.RPCCountResponse
	11, // 26: pb.DNSDomainService.findAllEnabledDNSDomainsWithDNSProviderId:output_type -> pb.FindAllEnabledDNSDomainsWithDNSProviderIdResponse
	13, // 27: pb.DNSDomainService.findAllEnabledBasicDNSDomainsWithDNSProviderId:output_type -> pb.FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse
	15, // 28: pb.DNSDomainService.syncDNSDomainData:output_type -> pb.SyncDNSDomainDataResponse
	17, // 29: pb.DNSDomainService.findAllDNSDomainRoutes:output_type -> pb.FindAllDNSDomainRoutesResponse
	19, // 30: pb.DNSDomainService.existAvailableDomains:output_type -> pb.ExistAvailableDomainsResponse
	21, // 31: pb.DNSDomainService.existDNSDomainRecord:output_type -> pb.ExistDNSDomainRecordResponse
	23, // 32: pb.DNSDomainService.syncDNSDomainsFromProvider:output_type -> pb.SyncDNSDomainsFromProviderResponse
	19, // [19:33] is the sub-list for method output_type
	5,  // [5:19] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_service_dns_domain_proto_init() }
func file_service_dns_domain_proto_init() {
	if File_service_dns_domain_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_dns_domain_proto_init()
	file_models_model_dns_route_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_dns_domain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledDNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledBasicDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledBasicDNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledDNSDomainsWithDNSProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledDNSDomainsWithDNSProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledDNSDomainsWithDNSProviderIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDNSDomainDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDNSDomainDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDNSDomainRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDNSDomainRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAvailableDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAvailableDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistDNSDomainRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistDNSDomainRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDNSDomainsFromProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDNSDomainsFromProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_dns_domain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_dns_domain_proto_goTypes,
		DependencyIndexes: file_service_dns_domain_proto_depIdxs,
		MessageInfos:      file_service_dns_domain_proto_msgTypes,
	}.Build()
	File_service_dns_domain_proto = out.File
	file_service_dns_domain_proto_rawDesc = nil
	file_service_dns_domain_proto_goTypes = nil
	file_service_dns_domain_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DNSDomainServiceClient is the client API for DNSDomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DNSDomainServiceClient interface {
	// 创建域名
	CreateDNSDomain(ctx context.Context, in *CreateDNSDomainRequest, opts ...grpc.CallOption) (*CreateDNSDomainResponse, error)
	// 修改域名
	UpdateDNSDomain(ctx context.Context, in *UpdateDNSDomainRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除域名
	DeleteDNSDomain(ctx context.Context, in *DeleteDNSDomainRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 恢复删除的域名
	RecoverDNSDomain(ctx context.Context, in *RecoverDNSDomainRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查询单个域名完整信息
	FindEnabledDNSDomain(ctx context.Context, in *FindEnabledDNSDomainRequest, opts ...grpc.CallOption) (*FindEnabledDNSDomainResponse, error)
	// 查询单个域名基础信息
	FindEnabledBasicDNSDomain(ctx context.Context, in *FindEnabledBasicDNSDomainRequest, opts ...grpc.CallOption) (*FindEnabledBasicDNSDomainResponse, error)
	// 计算服务商下的域名数量
	CountAllEnabledDNSDomainsWithDNSProviderId(ctx context.Context, in *CountAllEnabledDNSDomainsWithDNSProviderIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出服务商下的所有域名
	FindAllEnabledDNSDomainsWithDNSProviderId(ctx context.Context, in *FindAllEnabledDNSDomainsWithDNSProviderIdRequest, opts ...grpc.CallOption) (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse, error)
	// 列出服务商下的所有域名基本信息
	FindAllEnabledBasicDNSDomainsWithDNSProviderId(ctx context.Context, in *FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest, opts ...grpc.CallOption) (*FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse, error)
	// 同步域名解析
	SyncDNSDomainData(ctx context.Context, in *SyncDNSDomainDataRequest, opts ...grpc.CallOption) (*SyncDNSDomainDataResponse, error)
	// 查看支持的线路
	FindAllDNSDomainRoutes(ctx context.Context, in *FindAllDNSDomainRoutesRequest, opts ...grpc.CallOption) (*FindAllDNSDomainRoutesResponse, error)
	// 判断是否有域名可选
	ExistAvailableDomains(ctx context.Context, in *ExistAvailableDomainsRequest, opts ...grpc.CallOption) (*ExistAvailableDomainsResponse, error)
	// 检查域名是否在记录中
	ExistDNSDomainRecord(ctx context.Context, in *ExistDNSDomainRecordRequest, opts ...grpc.CallOption) (*ExistDNSDomainRecordResponse, error)
	// 从服务商同步域名
	SyncDNSDomainsFromProvider(ctx context.Context, in *SyncDNSDomainsFromProviderRequest, opts ...grpc.CallOption) (*SyncDNSDomainsFromProviderResponse, error)
}

type dNSDomainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSDomainServiceClient(cc grpc.ClientConnInterface) DNSDomainServiceClient {
	return &dNSDomainServiceClient{cc}
}

func (c *dNSDomainServiceClient) CreateDNSDomain(ctx context.Context, in *CreateDNSDomainRequest, opts ...grpc.CallOption) (*CreateDNSDomainResponse, error) {
	out := new(CreateDNSDomainResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/createDNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) UpdateDNSDomain(ctx context.Context, in *UpdateDNSDomainRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/updateDNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) DeleteDNSDomain(ctx context.Context, in *DeleteDNSDomainRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/deleteDNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) RecoverDNSDomain(ctx context.Context, in *RecoverDNSDomainRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/recoverDNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) FindEnabledDNSDomain(ctx context.Context, in *FindEnabledDNSDomainRequest, opts ...grpc.CallOption) (*FindEnabledDNSDomainResponse, error) {
	out := new(FindEnabledDNSDomainResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/findEnabledDNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) FindEnabledBasicDNSDomain(ctx context.Context, in *FindEnabledBasicDNSDomainRequest, opts ...grpc.CallOption) (*FindEnabledBasicDNSDomainResponse, error) {
	out := new(FindEnabledBasicDNSDomainResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/findEnabledBasicDNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) CountAllEnabledDNSDomainsWithDNSProviderId(ctx context.Context, in *CountAllEnabledDNSDomainsWithDNSProviderIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/countAllEnabledDNSDomainsWithDNSProviderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) FindAllEnabledDNSDomainsWithDNSProviderId(ctx context.Context, in *FindAllEnabledDNSDomainsWithDNSProviderIdRequest, opts ...grpc.CallOption) (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse, error) {
	out := new(FindAllEnabledDNSDomainsWithDNSProviderIdResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/findAllEnabledDNSDomainsWithDNSProviderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) FindAllEnabledBasicDNSDomainsWithDNSProviderId(ctx context.Context, in *FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest, opts ...grpc.CallOption) (*FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse, error) {
	out := new(FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/findAllEnabledBasicDNSDomainsWithDNSProviderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) SyncDNSDomainData(ctx context.Context, in *SyncDNSDomainDataRequest, opts ...grpc.CallOption) (*SyncDNSDomainDataResponse, error) {
	out := new(SyncDNSDomainDataResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/syncDNSDomainData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) FindAllDNSDomainRoutes(ctx context.Context, in *FindAllDNSDomainRoutesRequest, opts ...grpc.CallOption) (*FindAllDNSDomainRoutesResponse, error) {
	out := new(FindAllDNSDomainRoutesResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/findAllDNSDomainRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) ExistAvailableDomains(ctx context.Context, in *ExistAvailableDomainsRequest, opts ...grpc.CallOption) (*ExistAvailableDomainsResponse, error) {
	out := new(ExistAvailableDomainsResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/existAvailableDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) ExistDNSDomainRecord(ctx context.Context, in *ExistDNSDomainRecordRequest, opts ...grpc.CallOption) (*ExistDNSDomainRecordResponse, error) {
	out := new(ExistDNSDomainRecordResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/existDNSDomainRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) SyncDNSDomainsFromProvider(ctx context.Context, in *SyncDNSDomainsFromProviderRequest, opts ...grpc.CallOption) (*SyncDNSDomainsFromProviderResponse, error) {
	out := new(SyncDNSDomainsFromProviderResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/syncDNSDomainsFromProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSDomainServiceServer is the server API for DNSDomainService service.
type DNSDomainServiceServer interface {
	// 创建域名
	CreateDNSDomain(context.Context, *CreateDNSDomainRequest) (*CreateDNSDomainResponse, error)
	// 修改域名
	UpdateDNSDomain(context.Context, *UpdateDNSDomainRequest) (*RPCSuccess, error)
	// 删除域名
	DeleteDNSDomain(context.Context, *DeleteDNSDomainRequest) (*RPCSuccess, error)
	// 恢复删除的域名
	RecoverDNSDomain(context.Context, *RecoverDNSDomainRequest) (*RPCSuccess, error)
	// 查询单个域名完整信息
	FindEnabledDNSDomain(context.Context, *FindEnabledDNSDomainRequest) (*FindEnabledDNSDomainResponse, error)
	// 查询单个域名基础信息
	FindEnabledBasicDNSDomain(context.Context, *FindEnabledBasicDNSDomainRequest) (*FindEnabledBasicDNSDomainResponse, error)
	// 计算服务商下的域名数量
	CountAllEnabledDNSDomainsWithDNSProviderId(context.Context, *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) (*RPCCountResponse, error)
	// 列出服务商下的所有域名
	FindAllEnabledDNSDomainsWithDNSProviderId(context.Context, *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse, error)
	// 列出服务商下的所有域名基本信息
	FindAllEnabledBasicDNSDomainsWithDNSProviderId(context.Context, *FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest) (*FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse, error)
	// 同步域名解析
	SyncDNSDomainData(context.Context, *SyncDNSDomainDataRequest) (*SyncDNSDomainDataResponse, error)
	// 查看支持的线路
	FindAllDNSDomainRoutes(context.Context, *FindAllDNSDomainRoutesRequest) (*FindAllDNSDomainRoutesResponse, error)
	// 判断是否有域名可选
	ExistAvailableDomains(context.Context, *ExistAvailableDomainsRequest) (*ExistAvailableDomainsResponse, error)
	// 检查域名是否在记录中
	ExistDNSDomainRecord(context.Context, *ExistDNSDomainRecordRequest) (*ExistDNSDomainRecordResponse, error)
	// 从服务商同步域名
	SyncDNSDomainsFromProvider(context.Context, *SyncDNSDomainsFromProviderRequest) (*SyncDNSDomainsFromProviderResponse, error)
}

// UnimplementedDNSDomainServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDNSDomainServiceServer struct {
}

func (*UnimplementedDNSDomainServiceServer) CreateDNSDomain(context.Context, *CreateDNSDomainRequest) (*CreateDNSDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDNSDomain not implemented")
}
func (*UnimplementedDNSDomainServiceServer) UpdateDNSDomain(context.Context, *UpdateDNSDomainRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDNSDomain not implemented")
}
func (*UnimplementedDNSDomainServiceServer) DeleteDNSDomain(context.Context, *DeleteDNSDomainRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDNSDomain not implemented")
}
func (*UnimplementedDNSDomainServiceServer) RecoverDNSDomain(context.Context, *RecoverDNSDomainRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverDNSDomain not implemented")
}
func (*UnimplementedDNSDomainServiceServer) FindEnabledDNSDomain(context.Context, *FindEnabledDNSDomainRequest) (*FindEnabledDNSDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledDNSDomain not implemented")
}
func (*UnimplementedDNSDomainServiceServer) FindEnabledBasicDNSDomain(context.Context, *FindEnabledBasicDNSDomainRequest) (*FindEnabledBasicDNSDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledBasicDNSDomain not implemented")
}
func (*UnimplementedDNSDomainServiceServer) CountAllEnabledDNSDomainsWithDNSProviderId(context.Context, *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledDNSDomainsWithDNSProviderId not implemented")
}
func (*UnimplementedDNSDomainServiceServer) FindAllEnabledDNSDomainsWithDNSProviderId(context.Context, *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledDNSDomainsWithDNSProviderId not implemented")
}
func (*UnimplementedDNSDomainServiceServer) FindAllEnabledBasicDNSDomainsWithDNSProviderId(context.Context, *FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest) (*FindAllEnabledBasicDNSDomainsWithDNSProviderIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledBasicDNSDomainsWithDNSProviderId not implemented")
}
func (*UnimplementedDNSDomainServiceServer) SyncDNSDomainData(context.Context, *SyncDNSDomainDataRequest) (*SyncDNSDomainDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDNSDomainData not implemented")
}
func (*UnimplementedDNSDomainServiceServer) FindAllDNSDomainRoutes(context.Context, *FindAllDNSDomainRoutesRequest) (*FindAllDNSDomainRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllDNSDomainRoutes not implemented")
}
func (*UnimplementedDNSDomainServiceServer) ExistAvailableDomains(context.Context, *ExistAvailableDomainsRequest) (*ExistAvailableDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAvailableDomains not implemented")
}
func (*UnimplementedDNSDomainServiceServer) ExistDNSDomainRecord(context.Context, *ExistDNSDomainRecordRequest) (*ExistDNSDomainRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDNSDomainRecord not implemented")
}
func (*UnimplementedDNSDomainServiceServer) SyncDNSDomainsFromProvider(context.Context, *SyncDNSDomainsFromProviderRequest) (*SyncDNSDomainsFromProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDNSDomainsFromProvider not implemented")
}

func RegisterDNSDomainServiceServer(s *grpc.Server, srv DNSDomainServiceServer) {
	s.RegisterService(&_DNSDomainService_serviceDesc, srv)
}

func _DNSDomainService_CreateDNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).CreateDNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/CreateDNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).CreateDNSDomain(ctx, req.(*CreateDNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_UpdateDNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).UpdateDNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/UpdateDNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).UpdateDNSDomain(ctx, req.(*UpdateDNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_DeleteDNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).DeleteDNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/DeleteDNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).DeleteDNSDomain(ctx, req.(*DeleteDNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_RecoverDNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverDNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).RecoverDNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/RecoverDNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).RecoverDNSDomain(ctx, req.(*RecoverDNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_FindEnabledDNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledDNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).FindEnabledDNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/FindEnabledDNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).FindEnabledDNSDomain(ctx, req.(*FindEnabledDNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_FindEnabledBasicDNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledBasicDNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).FindEnabledBasicDNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/FindEnabledBasicDNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).FindEnabledBasicDNSDomain(ctx, req.(*FindEnabledBasicDNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_CountAllEnabledDNSDomainsWithDNSProviderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledDNSDomainsWithDNSProviderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).CountAllEnabledDNSDomainsWithDNSProviderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/CountAllEnabledDNSDomainsWithDNSProviderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).CountAllEnabledDNSDomainsWithDNSProviderId(ctx, req.(*CountAllEnabledDNSDomainsWithDNSProviderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_FindAllEnabledDNSDomainsWithDNSProviderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledDNSDomainsWithDNSProviderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).FindAllEnabledDNSDomainsWithDNSProviderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/FindAllEnabledDNSDomainsWithDNSProviderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).FindAllEnabledDNSDomainsWithDNSProviderId(ctx, req.(*FindAllEnabledDNSDomainsWithDNSProviderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_FindAllEnabledBasicDNSDomainsWithDNSProviderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).FindAllEnabledBasicDNSDomainsWithDNSProviderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/FindAllEnabledBasicDNSDomainsWithDNSProviderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).FindAllEnabledBasicDNSDomainsWithDNSProviderId(ctx, req.(*FindAllEnabledBasicDNSDomainsWithDNSProviderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_SyncDNSDomainData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDNSDomainDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).SyncDNSDomainData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/SyncDNSDomainData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).SyncDNSDomainData(ctx, req.(*SyncDNSDomainDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_FindAllDNSDomainRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllDNSDomainRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).FindAllDNSDomainRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/FindAllDNSDomainRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).FindAllDNSDomainRoutes(ctx, req.(*FindAllDNSDomainRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_ExistAvailableDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAvailableDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).ExistAvailableDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/ExistAvailableDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).ExistAvailableDomains(ctx, req.(*ExistAvailableDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_ExistDNSDomainRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDNSDomainRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).ExistDNSDomainRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/ExistDNSDomainRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).ExistDNSDomainRecord(ctx, req.(*ExistDNSDomainRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_SyncDNSDomainsFromProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDNSDomainsFromProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).SyncDNSDomainsFromProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/SyncDNSDomainsFromProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).SyncDNSDomainsFromProvider(ctx, req.(*SyncDNSDomainsFromProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DNSDomainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DNSDomainService",
	HandlerType: (*DNSDomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createDNSDomain",
			Handler:    _DNSDomainService_CreateDNSDomain_Handler,
		},
		{
			MethodName: "updateDNSDomain",
			Handler:    _DNSDomainService_UpdateDNSDomain_Handler,
		},
		{
			MethodName: "deleteDNSDomain",
			Handler:    _DNSDomainService_DeleteDNSDomain_Handler,
		},
		{
			MethodName: "recoverDNSDomain",
			Handler:    _DNSDomainService_RecoverDNSDomain_Handler,
		},
		{
			MethodName: "findEnabledDNSDomain",
			Handler:    _DNSDomainService_FindEnabledDNSDomain_Handler,
		},
		{
			MethodName: "findEnabledBasicDNSDomain",
			Handler:    _DNSDomainService_FindEnabledBasicDNSDomain_Handler,
		},
		{
			MethodName: "countAllEnabledDNSDomainsWithDNSProviderId",
			Handler:    _DNSDomainService_CountAllEnabledDNSDomainsWithDNSProviderId_Handler,
		},
		{
			MethodName: "findAllEnabledDNSDomainsWithDNSProviderId",
			Handler:    _DNSDomainService_FindAllEnabledDNSDomainsWithDNSProviderId_Handler,
		},
		{
			MethodName: "findAllEnabledBasicDNSDomainsWithDNSProviderId",
			Handler:    _DNSDomainService_FindAllEnabledBasicDNSDomainsWithDNSProviderId_Handler,
		},
		{
			MethodName: "syncDNSDomainData",
			Handler:    _DNSDomainService_SyncDNSDomainData_Handler,
		},
		{
			MethodName: "findAllDNSDomainRoutes",
			Handler:    _DNSDomainService_FindAllDNSDomainRoutes_Handler,
		},
		{
			MethodName: "existAvailableDomains",
			Handler:    _DNSDomainService_ExistAvailableDomains_Handler,
		},
		{
			MethodName: "existDNSDomainRecord",
			Handler:    _DNSDomainService_ExistDNSDomainRecord_Handler,
		},
		{
			MethodName: "syncDNSDomainsFromProvider",
			Handler:    _DNSDomainService_SyncDNSDomainsFromProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_dns_domain.proto",
}
