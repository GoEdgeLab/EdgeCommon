// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_dns_domain.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建域名
type CreateDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64  `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateDNSDomainRequest) Reset() {
	*x = CreateDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSDomainRequest) ProtoMessage() {}

func (x *CreateDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*CreateDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDNSDomainRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

func (x *CreateDNSDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateDNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *CreateDNSDomainResponse) Reset() {
	*x = CreateDNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSDomainResponse) ProtoMessage() {}

func (x *CreateDNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSDomainResponse.ProtoReflect.Descriptor instead.
func (*CreateDNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDNSDomainResponse) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

// 修改域名
type UpdateDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64  `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsOn        bool   `protobuf:"varint,3,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateDNSDomainRequest) Reset() {
	*x = UpdateDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDNSDomainRequest) ProtoMessage() {}

func (x *UpdateDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*UpdateDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

func (x *UpdateDNSDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDNSDomainRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除域名
type DeleteDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *DeleteDNSDomainRequest) Reset() {
	*x = DeleteDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDNSDomainRequest) ProtoMessage() {}

func (x *DeleteDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*DeleteDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

// 恢复删除的域名
type RecoverDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *RecoverDNSDomainRequest) Reset() {
	*x = RecoverDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverDNSDomainRequest) ProtoMessage() {}

func (x *RecoverDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*RecoverDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{4}
}

func (x *RecoverDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

// 查询单个域名信息
type FindDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *FindDNSDomainRequest) Reset() {
	*x = FindDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDNSDomainRequest) ProtoMessage() {}

func (x *FindDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*FindDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{5}
}

func (x *FindDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

type FindDNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomain *DNSDomain `protobuf:"bytes,1,opt,name=dnsDomain,proto3" json:"dnsDomain,omitempty"`
}

func (x *FindDNSDomainResponse) Reset() {
	*x = FindDNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDNSDomainResponse) ProtoMessage() {}

func (x *FindDNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDNSDomainResponse.ProtoReflect.Descriptor instead.
func (*FindDNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{6}
}

func (x *FindDNSDomainResponse) GetDnsDomain() *DNSDomain {
	if x != nil {
		return x.DnsDomain
	}
	return nil
}

// 查询单个域名的基础信息
type FindBasicDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *FindBasicDNSDomainRequest) Reset() {
	*x = FindBasicDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBasicDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBasicDNSDomainRequest) ProtoMessage() {}

func (x *FindBasicDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBasicDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*FindBasicDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{7}
}

func (x *FindBasicDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

type FindBasicDNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomain *DNSDomain `protobuf:"bytes,1,opt,name=dnsDomain,proto3" json:"dnsDomain,omitempty"`
}

func (x *FindBasicDNSDomainResponse) Reset() {
	*x = FindBasicDNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindBasicDNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindBasicDNSDomainResponse) ProtoMessage() {}

func (x *FindBasicDNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindBasicDNSDomainResponse.ProtoReflect.Descriptor instead.
func (*FindBasicDNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{8}
}

func (x *FindBasicDNSDomainResponse) GetDnsDomain() *DNSDomain {
	if x != nil {
		return x.DnsDomain
	}
	return nil
}

// 计算服务商下的域名数量
type CountAllDNSDomainsWithDNSProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
	IsDeleted     bool  `protobuf:"varint,2,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	IsDown        bool  `protobuf:"varint,3,opt,name=isDown,proto3" json:"isDown,omitempty"`
}

func (x *CountAllDNSDomainsWithDNSProviderIdRequest) Reset() {
	*x = CountAllDNSDomainsWithDNSProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllDNSDomainsWithDNSProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllDNSDomainsWithDNSProviderIdRequest) ProtoMessage() {}

func (x *CountAllDNSDomainsWithDNSProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllDNSDomainsWithDNSProviderIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllDNSDomainsWithDNSProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{9}
}

func (x *CountAllDNSDomainsWithDNSProviderIdRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

func (x *CountAllDNSDomainsWithDNSProviderIdRequest) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *CountAllDNSDomainsWithDNSProviderIdRequest) GetIsDown() bool {
	if x != nil {
		return x.IsDown
	}
	return false
}

// 列出服务商下的所有域名
type FindAllDNSDomainsWithDNSProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *FindAllDNSDomainsWithDNSProviderIdRequest) Reset() {
	*x = FindAllDNSDomainsWithDNSProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDNSDomainsWithDNSProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDNSDomainsWithDNSProviderIdRequest) ProtoMessage() {}

func (x *FindAllDNSDomainsWithDNSProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDNSDomainsWithDNSProviderIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllDNSDomainsWithDNSProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{10}
}

func (x *FindAllDNSDomainsWithDNSProviderIdRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

type FindAllDNSDomainsWithDNSProviderIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomains []*DNSDomain `protobuf:"bytes,1,rep,name=dnsDomains,proto3" json:"dnsDomains,omitempty"`
}

func (x *FindAllDNSDomainsWithDNSProviderIdResponse) Reset() {
	*x = FindAllDNSDomainsWithDNSProviderIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDNSDomainsWithDNSProviderIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDNSDomainsWithDNSProviderIdResponse) ProtoMessage() {}

func (x *FindAllDNSDomainsWithDNSProviderIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDNSDomainsWithDNSProviderIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllDNSDomainsWithDNSProviderIdResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{11}
}

func (x *FindAllDNSDomainsWithDNSProviderIdResponse) GetDnsDomains() []*DNSDomain {
	if x != nil {
		return x.DnsDomains
	}
	return nil
}

// 列出服务商下的所有域名基本信息
type FindAllBasicDNSDomainsWithDNSProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *FindAllBasicDNSDomainsWithDNSProviderIdRequest) Reset() {
	*x = FindAllBasicDNSDomainsWithDNSProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllBasicDNSDomainsWithDNSProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllBasicDNSDomainsWithDNSProviderIdRequest) ProtoMessage() {}

func (x *FindAllBasicDNSDomainsWithDNSProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllBasicDNSDomainsWithDNSProviderIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllBasicDNSDomainsWithDNSProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{12}
}

func (x *FindAllBasicDNSDomainsWithDNSProviderIdRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

type FindAllBasicDNSDomainsWithDNSProviderIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomains []*DNSDomain `protobuf:"bytes,1,rep,name=dnsDomains,proto3" json:"dnsDomains,omitempty"`
}

func (x *FindAllBasicDNSDomainsWithDNSProviderIdResponse) Reset() {
	*x = FindAllBasicDNSDomainsWithDNSProviderIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllBasicDNSDomainsWithDNSProviderIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllBasicDNSDomainsWithDNSProviderIdResponse) ProtoMessage() {}

func (x *FindAllBasicDNSDomainsWithDNSProviderIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllBasicDNSDomainsWithDNSProviderIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllBasicDNSDomainsWithDNSProviderIdResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{13}
}

func (x *FindAllBasicDNSDomainsWithDNSProviderIdResponse) GetDnsDomains() []*DNSDomain {
	if x != nil {
		return x.DnsDomains
	}
	return nil
}

// 列出服务商下的单页域名信息
type ListBasicDNSDomainsWithDNSProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
	IsDeleted     bool  `protobuf:"varint,2,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	IsDown        bool  `protobuf:"varint,3,opt,name=isDown,proto3" json:"isDown,omitempty"`
	Offset        int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListBasicDNSDomainsWithDNSProviderIdRequest) Reset() {
	*x = ListBasicDNSDomainsWithDNSProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBasicDNSDomainsWithDNSProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBasicDNSDomainsWithDNSProviderIdRequest) ProtoMessage() {}

func (x *ListBasicDNSDomainsWithDNSProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBasicDNSDomainsWithDNSProviderIdRequest.ProtoReflect.Descriptor instead.
func (*ListBasicDNSDomainsWithDNSProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{14}
}

func (x *ListBasicDNSDomainsWithDNSProviderIdRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

func (x *ListBasicDNSDomainsWithDNSProviderIdRequest) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *ListBasicDNSDomainsWithDNSProviderIdRequest) GetIsDown() bool {
	if x != nil {
		return x.IsDown
	}
	return false
}

func (x *ListBasicDNSDomainsWithDNSProviderIdRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListBasicDNSDomainsWithDNSProviderIdRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListDNSDomainsWithDNSProviderIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomains []*DNSDomain `protobuf:"bytes,1,rep,name=dnsDomains,proto3" json:"dnsDomains,omitempty"`
}

func (x *ListDNSDomainsWithDNSProviderIdResponse) Reset() {
	*x = ListDNSDomainsWithDNSProviderIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDNSDomainsWithDNSProviderIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDNSDomainsWithDNSProviderIdResponse) ProtoMessage() {}

func (x *ListDNSDomainsWithDNSProviderIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDNSDomainsWithDNSProviderIdResponse.ProtoReflect.Descriptor instead.
func (*ListDNSDomainsWithDNSProviderIdResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{15}
}

func (x *ListDNSDomainsWithDNSProviderIdResponse) GetDnsDomains() []*DNSDomain {
	if x != nil {
		return x.DnsDomains
	}
	return nil
}

// 同步域名数据
type SyncDNSDomainDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId     int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
	NodeClusterId   int64 `protobuf:"varint,2,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`     // 如果指定，表示只更新单个集群ID
	CheckNodeIssues bool  `protobuf:"varint,3,opt,name=checkNodeIssues,proto3" json:"checkNodeIssues,omitempty"` // 是否检查节点问题
}

func (x *SyncDNSDomainDataRequest) Reset() {
	*x = SyncDNSDomainDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDNSDomainDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDNSDomainDataRequest) ProtoMessage() {}

func (x *SyncDNSDomainDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDNSDomainDataRequest.ProtoReflect.Descriptor instead.
func (*SyncDNSDomainDataRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{16}
}

func (x *SyncDNSDomainDataRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

func (x *SyncDNSDomainDataRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *SyncDNSDomainDataRequest) GetCheckNodeIssues() bool {
	if x != nil {
		return x.CheckNodeIssues
	}
	return false
}

type SyncDNSDomainDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk      bool   `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	ShouldFix bool   `protobuf:"varint,3,opt,name=shouldFix,proto3" json:"shouldFix,omitempty"`
}

func (x *SyncDNSDomainDataResponse) Reset() {
	*x = SyncDNSDomainDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDNSDomainDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDNSDomainDataResponse) ProtoMessage() {}

func (x *SyncDNSDomainDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDNSDomainDataResponse.ProtoReflect.Descriptor instead.
func (*SyncDNSDomainDataResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{17}
}

func (x *SyncDNSDomainDataResponse) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *SyncDNSDomainDataResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SyncDNSDomainDataResponse) GetShouldFix() bool {
	if x != nil {
		return x.ShouldFix
	}
	return false
}

// 查看支持的线路
type FindAllDNSDomainRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *FindAllDNSDomainRoutesRequest) Reset() {
	*x = FindAllDNSDomainRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDNSDomainRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDNSDomainRoutesRequest) ProtoMessage() {}

func (x *FindAllDNSDomainRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDNSDomainRoutesRequest.ProtoReflect.Descriptor instead.
func (*FindAllDNSDomainRoutesRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{18}
}

func (x *FindAllDNSDomainRoutesRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

type FindAllDNSDomainRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*DNSRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *FindAllDNSDomainRoutesResponse) Reset() {
	*x = FindAllDNSDomainRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDNSDomainRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDNSDomainRoutesResponse) ProtoMessage() {}

func (x *FindAllDNSDomainRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDNSDomainRoutesResponse.ProtoReflect.Descriptor instead.
func (*FindAllDNSDomainRoutesResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{19}
}

func (x *FindAllDNSDomainRoutesResponse) GetRoutes() []*DNSRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

// 判断是否有域名可选
type ExistAvailableDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExistAvailableDomainsRequest) Reset() {
	*x = ExistAvailableDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAvailableDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAvailableDomainsRequest) ProtoMessage() {}

func (x *ExistAvailableDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAvailableDomainsRequest.ProtoReflect.Descriptor instead.
func (*ExistAvailableDomainsRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{20}
}

type ExistAvailableDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *ExistAvailableDomainsResponse) Reset() {
	*x = ExistAvailableDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAvailableDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAvailableDomainsResponse) ProtoMessage() {}

func (x *ExistAvailableDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAvailableDomainsResponse.ProtoReflect.Descriptor instead.
func (*ExistAvailableDomainsResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{21}
}

func (x *ExistAvailableDomainsResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

// 检查域名是否在记录中
type ExistDNSDomainRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64  `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`   // 解析类型，比如A, CNAME等
	Route       string `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"` // 线路
	Value       string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"` // 值
}

func (x *ExistDNSDomainRecordRequest) Reset() {
	*x = ExistDNSDomainRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistDNSDomainRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistDNSDomainRecordRequest) ProtoMessage() {}

func (x *ExistDNSDomainRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistDNSDomainRecordRequest.ProtoReflect.Descriptor instead.
func (*ExistDNSDomainRecordRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{22}
}

func (x *ExistDNSDomainRecordRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

func (x *ExistDNSDomainRecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExistDNSDomainRecordRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExistDNSDomainRecordRequest) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *ExistDNSDomainRecordRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ExistDNSDomainRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk bool `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
}

func (x *ExistDNSDomainRecordResponse) Reset() {
	*x = ExistDNSDomainRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistDNSDomainRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistDNSDomainRecordResponse) ProtoMessage() {}

func (x *ExistDNSDomainRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistDNSDomainRecordResponse.ProtoReflect.Descriptor instead.
func (*ExistDNSDomainRecordResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{23}
}

func (x *ExistDNSDomainRecordResponse) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

// 从服务商同步域名
type SyncDNSDomainsFromProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *SyncDNSDomainsFromProviderRequest) Reset() {
	*x = SyncDNSDomainsFromProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDNSDomainsFromProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDNSDomainsFromProviderRequest) ProtoMessage() {}

func (x *SyncDNSDomainsFromProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDNSDomainsFromProviderRequest.ProtoReflect.Descriptor instead.
func (*SyncDNSDomainsFromProviderRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{24}
}

func (x *SyncDNSDomainsFromProviderRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

type SyncDNSDomainsFromProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasChanges bool `protobuf:"varint,1,opt,name=hasChanges,proto3" json:"hasChanges,omitempty"`
}

func (x *SyncDNSDomainsFromProviderResponse) Reset() {
	*x = SyncDNSDomainsFromProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDNSDomainsFromProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDNSDomainsFromProviderResponse) ProtoMessage() {}

func (x *SyncDNSDomainsFromProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDNSDomainsFromProviderResponse.ProtoReflect.Descriptor instead.
func (*SyncDNSDomainsFromProviderResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{25}
}

func (x *SyncDNSDomainsFromProviderResponse) GetHasChanges() bool {
	if x != nil {
		return x.HasChanges
	}
	return false
}

var File_service_dns_domain_proto protoreflect.FileDescriptor

var file_service_dns_domain_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x22, 0x3a, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x44,
	0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x22, 0x3d, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x88,
	0x01, 0x0a, 0x2a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0x51, 0x0a, 0x29, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64,
	0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x2a,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x64, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x64,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x60, 0x0a, 0x2f, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x77,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x58, 0x0a, 0x27, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x4f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x69, 0x78, 0x22, 0x41, 0x0a, 0x1d, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1e,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x1b,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x32, 0x0a, 0x1c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x4f, 0x6b, 0x22, 0x49, 0x0a, 0x21, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x44, 0x0a, 0x22, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x32, 0xa0, 0x0b, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x44, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12,
	0x66, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x23, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x22, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x27, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x24, 0x6c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x65, 0x78, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x14, 0x65, 0x78, 0x69, 0x73, 0x74, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1a,
	0x73, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_dns_domain_proto_rawDescOnce sync.Once
	file_service_dns_domain_proto_rawDescData = file_service_dns_domain_proto_rawDesc
)

func file_service_dns_domain_proto_rawDescGZIP() []byte {
	file_service_dns_domain_proto_rawDescOnce.Do(func() {
		file_service_dns_domain_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_dns_domain_proto_rawDescData)
	})
	return file_service_dns_domain_proto_rawDescData
}

var file_service_dns_domain_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_service_dns_domain_proto_goTypes = []interface{}{
	(*CreateDNSDomainRequest)(nil),                          // 0: pb.CreateDNSDomainRequest
	(*CreateDNSDomainResponse)(nil),                         // 1: pb.CreateDNSDomainResponse
	(*UpdateDNSDomainRequest)(nil),                          // 2: pb.UpdateDNSDomainRequest
	(*DeleteDNSDomainRequest)(nil),                          // 3: pb.DeleteDNSDomainRequest
	(*RecoverDNSDomainRequest)(nil),                         // 4: pb.RecoverDNSDomainRequest
	(*FindDNSDomainRequest)(nil),                            // 5: pb.FindDNSDomainRequest
	(*FindDNSDomainResponse)(nil),                           // 6: pb.FindDNSDomainResponse
	(*FindBasicDNSDomainRequest)(nil),                       // 7: pb.FindBasicDNSDomainRequest
	(*FindBasicDNSDomainResponse)(nil),                      // 8: pb.FindBasicDNSDomainResponse
	(*CountAllDNSDomainsWithDNSProviderIdRequest)(nil),      // 9: pb.CountAllDNSDomainsWithDNSProviderIdRequest
	(*FindAllDNSDomainsWithDNSProviderIdRequest)(nil),       // 10: pb.FindAllDNSDomainsWithDNSProviderIdRequest
	(*FindAllDNSDomainsWithDNSProviderIdResponse)(nil),      // 11: pb.FindAllDNSDomainsWithDNSProviderIdResponse
	(*FindAllBasicDNSDomainsWithDNSProviderIdRequest)(nil),  // 12: pb.FindAllBasicDNSDomainsWithDNSProviderIdRequest
	(*FindAllBasicDNSDomainsWithDNSProviderIdResponse)(nil), // 13: pb.FindAllBasicDNSDomainsWithDNSProviderIdResponse
	(*ListBasicDNSDomainsWithDNSProviderIdRequest)(nil),     // 14: pb.ListBasicDNSDomainsWithDNSProviderIdRequest
	(*ListDNSDomainsWithDNSProviderIdResponse)(nil),         // 15: pb.ListDNSDomainsWithDNSProviderIdResponse
	(*SyncDNSDomainDataRequest)(nil),                        // 16: pb.SyncDNSDomainDataRequest
	(*SyncDNSDomainDataResponse)(nil),                       // 17: pb.SyncDNSDomainDataResponse
	(*FindAllDNSDomainRoutesRequest)(nil),                   // 18: pb.FindAllDNSDomainRoutesRequest
	(*FindAllDNSDomainRoutesResponse)(nil),                  // 19: pb.FindAllDNSDomainRoutesResponse
	(*ExistAvailableDomainsRequest)(nil),                    // 20: pb.ExistAvailableDomainsRequest
	(*ExistAvailableDomainsResponse)(nil),                   // 21: pb.ExistAvailableDomainsResponse
	(*ExistDNSDomainRecordRequest)(nil),                     // 22: pb.ExistDNSDomainRecordRequest
	(*ExistDNSDomainRecordResponse)(nil),                    // 23: pb.ExistDNSDomainRecordResponse
	(*SyncDNSDomainsFromProviderRequest)(nil),               // 24: pb.SyncDNSDomainsFromProviderRequest
	(*SyncDNSDomainsFromProviderResponse)(nil),              // 25: pb.SyncDNSDomainsFromProviderResponse
	(*DNSDomain)(nil),                                       // 26: pb.DNSDomain
	(*DNSRoute)(nil),                                        // 27: pb.DNSRoute
	(*RPCSuccess)(nil),                                      // 28: pb.RPCSuccess
	(*RPCCountResponse)(nil),                                // 29: pb.RPCCountResponse
}
var file_service_dns_domain_proto_depIdxs = []int32{
	26, // 0: pb.FindDNSDomainResponse.dnsDomain:type_name -> pb.DNSDomain
	26, // 1: pb.FindBasicDNSDomainResponse.dnsDomain:type_name -> pb.DNSDomain
	26, // 2: pb.FindAllDNSDomainsWithDNSProviderIdResponse.dnsDomains:type_name -> pb.DNSDomain
	26, // 3: pb.FindAllBasicDNSDomainsWithDNSProviderIdResponse.dnsDomains:type_name -> pb.DNSDomain
	26, // 4: pb.ListDNSDomainsWithDNSProviderIdResponse.dnsDomains:type_name -> pb.DNSDomain
	27, // 5: pb.FindAllDNSDomainRoutesResponse.routes:type_name -> pb.DNSRoute
	0,  // 6: pb.DNSDomainService.createDNSDomain:input_type -> pb.CreateDNSDomainRequest
	2,  // 7: pb.DNSDomainService.updateDNSDomain:input_type -> pb.UpdateDNSDomainRequest
	3,  // 8: pb.DNSDomainService.deleteDNSDomain:input_type -> pb.DeleteDNSDomainRequest
	4,  // 9: pb.DNSDomainService.recoverDNSDomain:input_type -> pb.RecoverDNSDomainRequest
	5,  // 10: pb.DNSDomainService.findDNSDomain:input_type -> pb.FindDNSDomainRequest
	7,  // 11: pb.DNSDomainService.findBasicDNSDomain:input_type -> pb.FindBasicDNSDomainRequest
	9,  // 12: pb.DNSDomainService.countAllDNSDomainsWithDNSProviderId:input_type -> pb.CountAllDNSDomainsWithDNSProviderIdRequest
	10, // 13: pb.DNSDomainService.findAllDNSDomainsWithDNSProviderId:input_type -> pb.FindAllDNSDomainsWithDNSProviderIdRequest
	12, // 14: pb.DNSDomainService.findAllBasicDNSDomainsWithDNSProviderId:input_type -> pb.FindAllBasicDNSDomainsWithDNSProviderIdRequest
	14, // 15: pb.DNSDomainService.listBasicDNSDomainsWithDNSProviderId:input_type -> pb.ListBasicDNSDomainsWithDNSProviderIdRequest
	16, // 16: pb.DNSDomainService.syncDNSDomainData:input_type -> pb.SyncDNSDomainDataRequest
	18, // 17: pb.DNSDomainService.findAllDNSDomainRoutes:input_type -> pb.FindAllDNSDomainRoutesRequest
	20, // 18: pb.DNSDomainService.existAvailableDomains:input_type -> pb.ExistAvailableDomainsRequest
	22, // 19: pb.DNSDomainService.existDNSDomainRecord:input_type -> pb.ExistDNSDomainRecordRequest
	24, // 20: pb.DNSDomainService.syncDNSDomainsFromProvider:input_type -> pb.SyncDNSDomainsFromProviderRequest
	1,  // 21: pb.DNSDomainService.createDNSDomain:output_type -> pb.CreateDNSDomainResponse
	28, // 22: pb.DNSDomainService.updateDNSDomain:output_type -> pb.RPCSuccess
	28, // 23: pb.DNSDomainService.deleteDNSDomain:output_type -> pb.RPCSuccess
	28, // 24: pb.DNSDomainService.recoverDNSDomain:output_type -> pb.RPCSuccess
	6,  // 25: pb.DNSDomainService.findDNSDomain:output_type -> pb.FindDNSDomainResponse
	8,  // 26: pb.DNSDomainService.findBasicDNSDomain:output_type -> pb.FindBasicDNSDomainResponse
	29, // 27: pb.DNSDomainService.countAllDNSDomainsWithDNSProviderId:output_type -> pb.RPCCountResponse
	11, // 28: pb.DNSDomainService.findAllDNSDomainsWithDNSProviderId:output_type -> pb.FindAllDNSDomainsWithDNSProviderIdResponse
	13, // 29: pb.DNSDomainService.findAllBasicDNSDomainsWithDNSProviderId:output_type -> pb.FindAllBasicDNSDomainsWithDNSProviderIdResponse
	15, // 30: pb.DNSDomainService.listBasicDNSDomainsWithDNSProviderId:output_type -> pb.ListDNSDomainsWithDNSProviderIdResponse
	17, // 31: pb.DNSDomainService.syncDNSDomainData:output_type -> pb.SyncDNSDomainDataResponse
	19, // 32: pb.DNSDomainService.findAllDNSDomainRoutes:output_type -> pb.FindAllDNSDomainRoutesResponse
	21, // 33: pb.DNSDomainService.existAvailableDomains:output_type -> pb.ExistAvailableDomainsResponse
	23, // 34: pb.DNSDomainService.existDNSDomainRecord:output_type -> pb.ExistDNSDomainRecordResponse
	25, // 35: pb.DNSDomainService.syncDNSDomainsFromProvider:output_type -> pb.SyncDNSDomainsFromProviderResponse
	21, // [21:36] is the sub-list for method output_type
	6,  // [6:21] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_service_dns_domain_proto_init() }
func file_service_dns_domain_proto_init() {
	if File_service_dns_domain_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_dns_domain_proto_init()
	file_models_model_dns_route_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_dns_domain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindBasicDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindBasicDNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllDNSDomainsWithDNSProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDNSDomainsWithDNSProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDNSDomainsWithDNSProviderIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllBasicDNSDomainsWithDNSProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllBasicDNSDomainsWithDNSProviderIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBasicDNSDomainsWithDNSProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDNSDomainsWithDNSProviderIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDNSDomainDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDNSDomainDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDNSDomainRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDNSDomainRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAvailableDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAvailableDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistDNSDomainRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistDNSDomainRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDNSDomainsFromProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDNSDomainsFromProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_dns_domain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_dns_domain_proto_goTypes,
		DependencyIndexes: file_service_dns_domain_proto_depIdxs,
		MessageInfos:      file_service_dns_domain_proto_msgTypes,
	}.Build()
	File_service_dns_domain_proto = out.File
	file_service_dns_domain_proto_rawDesc = nil
	file_service_dns_domain_proto_goTypes = nil
	file_service_dns_domain_proto_depIdxs = nil
}
