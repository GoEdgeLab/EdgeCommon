// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_dns_domain.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建域名
type CreateDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64  `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateDNSDomainRequest) Reset() {
	*x = CreateDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSDomainRequest) ProtoMessage() {}

func (x *CreateDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*CreateDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDNSDomainRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

func (x *CreateDNSDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateDNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *CreateDNSDomainResponse) Reset() {
	*x = CreateDNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSDomainResponse) ProtoMessage() {}

func (x *CreateDNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSDomainResponse.ProtoReflect.Descriptor instead.
func (*CreateDNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDNSDomainResponse) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

// 修改域名
type UpdateDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64  `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsOn        bool   `protobuf:"varint,3,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateDNSDomainRequest) Reset() {
	*x = UpdateDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDNSDomainRequest) ProtoMessage() {}

func (x *UpdateDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*UpdateDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

func (x *UpdateDNSDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDNSDomainRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除域名
type DeleteDNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomainId int64 `protobuf:"varint,1,opt,name=dnsDomainId,proto3" json:"dnsDomainId,omitempty"`
}

func (x *DeleteDNSDomainRequest) Reset() {
	*x = DeleteDNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDNSDomainRequest) ProtoMessage() {}

func (x *DeleteDNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDNSDomainRequest.ProtoReflect.Descriptor instead.
func (*DeleteDNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDNSDomainRequest) GetDnsDomainId() int64 {
	if x != nil {
		return x.DnsDomainId
	}
	return 0
}

// 计算服务商下的域名数量
type CountAllEnabledDNSDomainsWithDNSProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) Reset() {
	*x = CountAllEnabledDNSDomainsWithDNSProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledDNSDomainsWithDNSProviderIdRequest) ProtoMessage() {}

func (x *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledDNSDomainsWithDNSProviderIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledDNSDomainsWithDNSProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{4}
}

func (x *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

// 列出服务商下的所有域名
type FindAllEnabledDNSDomainsWithDNSProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) Reset() {
	*x = FindAllEnabledDNSDomainsWithDNSProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledDNSDomainsWithDNSProviderIdRequest) ProtoMessage() {}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledDNSDomainsWithDNSProviderIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledDNSDomainsWithDNSProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

type FindAllEnabledDNSDomainsWithDNSProviderIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsDomains []*DNSDomain `protobuf:"bytes,1,rep,name=dnsDomains,proto3" json:"dnsDomains,omitempty"`
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdResponse) Reset() {
	*x = FindAllEnabledDNSDomainsWithDNSProviderIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_domain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse) ProtoMessage() {}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_domain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledDNSDomainsWithDNSProviderIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_domain_proto_rawDescGZIP(), []int{6}
}

func (x *FindAllEnabledDNSDomainsWithDNSProviderIdResponse) GetDnsDomains() []*DNSDomain {
	if x != nil {
		return x.DnsDomains
	}
	return nil
}

var File_service_dns_domain_proto protoreflect.FileDescriptor

var file_service_dns_domain_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x12,
	0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x4f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x22,
	0x3a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x31, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x30, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x62, 0x0a, 0x31, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x32, 0xfe, 0x03, 0x0a, 0x10, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x79, 0x0a, 0x2a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x29, 0x66,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_dns_domain_proto_rawDescOnce sync.Once
	file_service_dns_domain_proto_rawDescData = file_service_dns_domain_proto_rawDesc
)

func file_service_dns_domain_proto_rawDescGZIP() []byte {
	file_service_dns_domain_proto_rawDescOnce.Do(func() {
		file_service_dns_domain_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_dns_domain_proto_rawDescData)
	})
	return file_service_dns_domain_proto_rawDescData
}

var file_service_dns_domain_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_service_dns_domain_proto_goTypes = []interface{}{
	(*CreateDNSDomainRequest)(nil),                            // 0: pb.CreateDNSDomainRequest
	(*CreateDNSDomainResponse)(nil),                           // 1: pb.CreateDNSDomainResponse
	(*UpdateDNSDomainRequest)(nil),                            // 2: pb.UpdateDNSDomainRequest
	(*DeleteDNSDomainRequest)(nil),                            // 3: pb.DeleteDNSDomainRequest
	(*CountAllEnabledDNSDomainsWithDNSProviderIdRequest)(nil), // 4: pb.CountAllEnabledDNSDomainsWithDNSProviderIdRequest
	(*FindAllEnabledDNSDomainsWithDNSProviderIdRequest)(nil),  // 5: pb.FindAllEnabledDNSDomainsWithDNSProviderIdRequest
	(*FindAllEnabledDNSDomainsWithDNSProviderIdResponse)(nil), // 6: pb.FindAllEnabledDNSDomainsWithDNSProviderIdResponse
	(*DNSDomain)(nil),                                         // 7: pb.DNSDomain
	(*RPCUpdateSuccess)(nil),                                  // 8: pb.RPCUpdateSuccess
	(*RPCDeleteSuccess)(nil),                                  // 9: pb.RPCDeleteSuccess
	(*RPCCountResponse)(nil),                                  // 10: pb.RPCCountResponse
}
var file_service_dns_domain_proto_depIdxs = []int32{
	7,  // 0: pb.FindAllEnabledDNSDomainsWithDNSProviderIdResponse.dnsDomains:type_name -> pb.DNSDomain
	0,  // 1: pb.DNSDomainService.createDNSDomain:input_type -> pb.CreateDNSDomainRequest
	2,  // 2: pb.DNSDomainService.updateDNSDomain:input_type -> pb.UpdateDNSDomainRequest
	3,  // 3: pb.DNSDomainService.deleteDNSDomain:input_type -> pb.DeleteDNSDomainRequest
	4,  // 4: pb.DNSDomainService.countAllEnabledDNSDomainsWithDNSProviderId:input_type -> pb.CountAllEnabledDNSDomainsWithDNSProviderIdRequest
	5,  // 5: pb.DNSDomainService.findAllEnabledDNSDomainsWithDNSProviderId:input_type -> pb.FindAllEnabledDNSDomainsWithDNSProviderIdRequest
	1,  // 6: pb.DNSDomainService.createDNSDomain:output_type -> pb.CreateDNSDomainResponse
	8,  // 7: pb.DNSDomainService.updateDNSDomain:output_type -> pb.RPCUpdateSuccess
	9,  // 8: pb.DNSDomainService.deleteDNSDomain:output_type -> pb.RPCDeleteSuccess
	10, // 9: pb.DNSDomainService.countAllEnabledDNSDomainsWithDNSProviderId:output_type -> pb.RPCCountResponse
	6,  // 10: pb.DNSDomainService.findAllEnabledDNSDomainsWithDNSProviderId:output_type -> pb.FindAllEnabledDNSDomainsWithDNSProviderIdResponse
	6,  // [6:11] is the sub-list for method output_type
	1,  // [1:6] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_service_dns_domain_proto_init() }
func file_service_dns_domain_proto_init() {
	if File_service_dns_domain_proto != nil {
		return
	}
	file_rpc_messages_proto_init()
	file_model_dns_domain_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_dns_domain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledDNSDomainsWithDNSProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledDNSDomainsWithDNSProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_domain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledDNSDomainsWithDNSProviderIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_dns_domain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_dns_domain_proto_goTypes,
		DependencyIndexes: file_service_dns_domain_proto_depIdxs,
		MessageInfos:      file_service_dns_domain_proto_msgTypes,
	}.Build()
	File_service_dns_domain_proto = out.File
	file_service_dns_domain_proto_rawDesc = nil
	file_service_dns_domain_proto_goTypes = nil
	file_service_dns_domain_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DNSDomainServiceClient is the client API for DNSDomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DNSDomainServiceClient interface {
	// 创建域名
	CreateDNSDomain(ctx context.Context, in *CreateDNSDomainRequest, opts ...grpc.CallOption) (*CreateDNSDomainResponse, error)
	// 修改域名
	UpdateDNSDomain(ctx context.Context, in *UpdateDNSDomainRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 删除域名
	DeleteDNSDomain(ctx context.Context, in *DeleteDNSDomainRequest, opts ...grpc.CallOption) (*RPCDeleteSuccess, error)
	// 计算服务商下的域名数量
	CountAllEnabledDNSDomainsWithDNSProviderId(ctx context.Context, in *CountAllEnabledDNSDomainsWithDNSProviderIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出服务商下的所有域名
	FindAllEnabledDNSDomainsWithDNSProviderId(ctx context.Context, in *FindAllEnabledDNSDomainsWithDNSProviderIdRequest, opts ...grpc.CallOption) (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse, error)
}

type dNSDomainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSDomainServiceClient(cc grpc.ClientConnInterface) DNSDomainServiceClient {
	return &dNSDomainServiceClient{cc}
}

func (c *dNSDomainServiceClient) CreateDNSDomain(ctx context.Context, in *CreateDNSDomainRequest, opts ...grpc.CallOption) (*CreateDNSDomainResponse, error) {
	out := new(CreateDNSDomainResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/createDNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) UpdateDNSDomain(ctx context.Context, in *UpdateDNSDomainRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/updateDNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) DeleteDNSDomain(ctx context.Context, in *DeleteDNSDomainRequest, opts ...grpc.CallOption) (*RPCDeleteSuccess, error) {
	out := new(RPCDeleteSuccess)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/deleteDNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) CountAllEnabledDNSDomainsWithDNSProviderId(ctx context.Context, in *CountAllEnabledDNSDomainsWithDNSProviderIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/countAllEnabledDNSDomainsWithDNSProviderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSDomainServiceClient) FindAllEnabledDNSDomainsWithDNSProviderId(ctx context.Context, in *FindAllEnabledDNSDomainsWithDNSProviderIdRequest, opts ...grpc.CallOption) (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse, error) {
	out := new(FindAllEnabledDNSDomainsWithDNSProviderIdResponse)
	err := c.cc.Invoke(ctx, "/pb.DNSDomainService/findAllEnabledDNSDomainsWithDNSProviderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSDomainServiceServer is the server API for DNSDomainService service.
type DNSDomainServiceServer interface {
	// 创建域名
	CreateDNSDomain(context.Context, *CreateDNSDomainRequest) (*CreateDNSDomainResponse, error)
	// 修改域名
	UpdateDNSDomain(context.Context, *UpdateDNSDomainRequest) (*RPCUpdateSuccess, error)
	// 删除域名
	DeleteDNSDomain(context.Context, *DeleteDNSDomainRequest) (*RPCDeleteSuccess, error)
	// 计算服务商下的域名数量
	CountAllEnabledDNSDomainsWithDNSProviderId(context.Context, *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) (*RPCCountResponse, error)
	// 列出服务商下的所有域名
	FindAllEnabledDNSDomainsWithDNSProviderId(context.Context, *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse, error)
}

// UnimplementedDNSDomainServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDNSDomainServiceServer struct {
}

func (*UnimplementedDNSDomainServiceServer) CreateDNSDomain(context.Context, *CreateDNSDomainRequest) (*CreateDNSDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDNSDomain not implemented")
}
func (*UnimplementedDNSDomainServiceServer) UpdateDNSDomain(context.Context, *UpdateDNSDomainRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDNSDomain not implemented")
}
func (*UnimplementedDNSDomainServiceServer) DeleteDNSDomain(context.Context, *DeleteDNSDomainRequest) (*RPCDeleteSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDNSDomain not implemented")
}
func (*UnimplementedDNSDomainServiceServer) CountAllEnabledDNSDomainsWithDNSProviderId(context.Context, *CountAllEnabledDNSDomainsWithDNSProviderIdRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledDNSDomainsWithDNSProviderId not implemented")
}
func (*UnimplementedDNSDomainServiceServer) FindAllEnabledDNSDomainsWithDNSProviderId(context.Context, *FindAllEnabledDNSDomainsWithDNSProviderIdRequest) (*FindAllEnabledDNSDomainsWithDNSProviderIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledDNSDomainsWithDNSProviderId not implemented")
}

func RegisterDNSDomainServiceServer(s *grpc.Server, srv DNSDomainServiceServer) {
	s.RegisterService(&_DNSDomainService_serviceDesc, srv)
}

func _DNSDomainService_CreateDNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).CreateDNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/CreateDNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).CreateDNSDomain(ctx, req.(*CreateDNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_UpdateDNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).UpdateDNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/UpdateDNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).UpdateDNSDomain(ctx, req.(*UpdateDNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_DeleteDNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).DeleteDNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/DeleteDNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).DeleteDNSDomain(ctx, req.(*DeleteDNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_CountAllEnabledDNSDomainsWithDNSProviderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledDNSDomainsWithDNSProviderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).CountAllEnabledDNSDomainsWithDNSProviderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/CountAllEnabledDNSDomainsWithDNSProviderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).CountAllEnabledDNSDomainsWithDNSProviderId(ctx, req.(*CountAllEnabledDNSDomainsWithDNSProviderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSDomainService_FindAllEnabledDNSDomainsWithDNSProviderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledDNSDomainsWithDNSProviderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSDomainServiceServer).FindAllEnabledDNSDomainsWithDNSProviderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNSDomainService/FindAllEnabledDNSDomainsWithDNSProviderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSDomainServiceServer).FindAllEnabledDNSDomainsWithDNSProviderId(ctx, req.(*FindAllEnabledDNSDomainsWithDNSProviderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DNSDomainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DNSDomainService",
	HandlerType: (*DNSDomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createDNSDomain",
			Handler:    _DNSDomainService_CreateDNSDomain_Handler,
		},
		{
			MethodName: "updateDNSDomain",
			Handler:    _DNSDomainService_UpdateDNSDomain_Handler,
		},
		{
			MethodName: "deleteDNSDomain",
			Handler:    _DNSDomainService_DeleteDNSDomain_Handler,
		},
		{
			MethodName: "countAllEnabledDNSDomainsWithDNSProviderId",
			Handler:    _DNSDomainService_CountAllEnabledDNSDomainsWithDNSProviderId_Handler,
		},
		{
			MethodName: "findAllEnabledDNSDomainsWithDNSProviderId",
			Handler:    _DNSDomainService_FindAllEnabledDNSDomainsWithDNSProviderId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_dns_domain.proto",
}
