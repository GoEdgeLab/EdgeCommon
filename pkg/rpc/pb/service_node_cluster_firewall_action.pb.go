// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_node_cluster_firewall_action.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建动作
type CreateNodeClusterFirewallActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64  `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EventLevel    string `protobuf:"bytes,3,opt,name=eventLevel,proto3" json:"eventLevel,omitempty"`
	Type          string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ParamsJSON    []byte `protobuf:"bytes,5,opt,name=paramsJSON,proto3" json:"paramsJSON,omitempty"`
}

func (x *CreateNodeClusterFirewallActionRequest) Reset() {
	*x = CreateNodeClusterFirewallActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_firewall_action_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeClusterFirewallActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeClusterFirewallActionRequest) ProtoMessage() {}

func (x *CreateNodeClusterFirewallActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_firewall_action_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeClusterFirewallActionRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeClusterFirewallActionRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_firewall_action_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNodeClusterFirewallActionRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CreateNodeClusterFirewallActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeClusterFirewallActionRequest) GetEventLevel() string {
	if x != nil {
		return x.EventLevel
	}
	return ""
}

func (x *CreateNodeClusterFirewallActionRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateNodeClusterFirewallActionRequest) GetParamsJSON() []byte {
	if x != nil {
		return x.ParamsJSON
	}
	return nil
}

type NodeClusterFirewallActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterFirewallActionId int64 `protobuf:"varint,1,opt,name=nodeClusterFirewallActionId,proto3" json:"nodeClusterFirewallActionId,omitempty"`
}

func (x *NodeClusterFirewallActionResponse) Reset() {
	*x = NodeClusterFirewallActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_firewall_action_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeClusterFirewallActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeClusterFirewallActionResponse) ProtoMessage() {}

func (x *NodeClusterFirewallActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_firewall_action_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeClusterFirewallActionResponse.ProtoReflect.Descriptor instead.
func (*NodeClusterFirewallActionResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_firewall_action_proto_rawDescGZIP(), []int{1}
}

func (x *NodeClusterFirewallActionResponse) GetNodeClusterFirewallActionId() int64 {
	if x != nil {
		return x.NodeClusterFirewallActionId
	}
	return 0
}

// 修改动作
type UpdateNodeClusterFirewallActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterFirewallActionId int64  `protobuf:"varint,1,opt,name=nodeClusterFirewallActionId,proto3" json:"nodeClusterFirewallActionId,omitempty"`
	Name                        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EventLevel                  string `protobuf:"bytes,3,opt,name=eventLevel,proto3" json:"eventLevel,omitempty"`
	Type                        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ParamsJSON                  []byte `protobuf:"bytes,5,opt,name=paramsJSON,proto3" json:"paramsJSON,omitempty"`
}

func (x *UpdateNodeClusterFirewallActionRequest) Reset() {
	*x = UpdateNodeClusterFirewallActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_firewall_action_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeClusterFirewallActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeClusterFirewallActionRequest) ProtoMessage() {}

func (x *UpdateNodeClusterFirewallActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_firewall_action_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeClusterFirewallActionRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeClusterFirewallActionRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_firewall_action_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNodeClusterFirewallActionRequest) GetNodeClusterFirewallActionId() int64 {
	if x != nil {
		return x.NodeClusterFirewallActionId
	}
	return 0
}

func (x *UpdateNodeClusterFirewallActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNodeClusterFirewallActionRequest) GetEventLevel() string {
	if x != nil {
		return x.EventLevel
	}
	return ""
}

func (x *UpdateNodeClusterFirewallActionRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateNodeClusterFirewallActionRequest) GetParamsJSON() []byte {
	if x != nil {
		return x.ParamsJSON
	}
	return nil
}

// 删除动作
type DeleteNodeClusterFirewallActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterFirewallActionId int64 `protobuf:"varint,1,opt,name=nodeClusterFirewallActionId,proto3" json:"nodeClusterFirewallActionId,omitempty"`
}

func (x *DeleteNodeClusterFirewallActionRequest) Reset() {
	*x = DeleteNodeClusterFirewallActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_firewall_action_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeClusterFirewallActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeClusterFirewallActionRequest) ProtoMessage() {}

func (x *DeleteNodeClusterFirewallActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_firewall_action_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeClusterFirewallActionRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeClusterFirewallActionRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_firewall_action_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteNodeClusterFirewallActionRequest) GetNodeClusterFirewallActionId() int64 {
	if x != nil {
		return x.NodeClusterFirewallActionId
	}
	return 0
}

// 查询集群的所有动作
type FindAllEnabledNodeClusterFirewallActionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64 `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
}

func (x *FindAllEnabledNodeClusterFirewallActionsRequest) Reset() {
	*x = FindAllEnabledNodeClusterFirewallActionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_firewall_action_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNodeClusterFirewallActionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNodeClusterFirewallActionsRequest) ProtoMessage() {}

func (x *FindAllEnabledNodeClusterFirewallActionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_firewall_action_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNodeClusterFirewallActionsRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNodeClusterFirewallActionsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_firewall_action_proto_rawDescGZIP(), []int{4}
}

func (x *FindAllEnabledNodeClusterFirewallActionsRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

type FindAllEnabledNodeClusterFirewallActionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterFirewallActions []*NodeClusterFirewallAction `protobuf:"bytes,1,rep,name=nodeClusterFirewallActions,proto3" json:"nodeClusterFirewallActions,omitempty"`
}

func (x *FindAllEnabledNodeClusterFirewallActionsResponse) Reset() {
	*x = FindAllEnabledNodeClusterFirewallActionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_firewall_action_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNodeClusterFirewallActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNodeClusterFirewallActionsResponse) ProtoMessage() {}

func (x *FindAllEnabledNodeClusterFirewallActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_firewall_action_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNodeClusterFirewallActionsResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNodeClusterFirewallActionsResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_firewall_action_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllEnabledNodeClusterFirewallActionsResponse) GetNodeClusterFirewallActions() []*NodeClusterFirewallAction {
	if x != nil {
		return x.NodeClusterFirewallActions
	}
	return nil
}

// 查询单个动作
type FindEnabledNodeClusterFirewallActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterFirewallActionId int64 `protobuf:"varint,1,opt,name=nodeClusterFirewallActionId,proto3" json:"nodeClusterFirewallActionId,omitempty"`
}

func (x *FindEnabledNodeClusterFirewallActionRequest) Reset() {
	*x = FindEnabledNodeClusterFirewallActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_firewall_action_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNodeClusterFirewallActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNodeClusterFirewallActionRequest) ProtoMessage() {}

func (x *FindEnabledNodeClusterFirewallActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_firewall_action_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNodeClusterFirewallActionRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledNodeClusterFirewallActionRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_firewall_action_proto_rawDescGZIP(), []int{6}
}

func (x *FindEnabledNodeClusterFirewallActionRequest) GetNodeClusterFirewallActionId() int64 {
	if x != nil {
		return x.NodeClusterFirewallActionId
	}
	return 0
}

type FindEnabledNodeClusterFirewallActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterFirewallAction *NodeClusterFirewallAction `protobuf:"bytes,1,opt,name=nodeClusterFirewallAction,proto3" json:"nodeClusterFirewallAction,omitempty"`
}

func (x *FindEnabledNodeClusterFirewallActionResponse) Reset() {
	*x = FindEnabledNodeClusterFirewallActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_firewall_action_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNodeClusterFirewallActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNodeClusterFirewallActionResponse) ProtoMessage() {}

func (x *FindEnabledNodeClusterFirewallActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_firewall_action_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNodeClusterFirewallActionResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledNodeClusterFirewallActionResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_firewall_action_proto_rawDescGZIP(), []int{7}
}

func (x *FindEnabledNodeClusterFirewallActionResponse) GetNodeClusterFirewallAction() *NodeClusterFirewallAction {
	if x != nil {
		return x.NodeClusterFirewallAction
	}
	return nil
}

// 计算动作数量
type CountAllEnabledNodeClusterFirewallActionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64 `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
}

func (x *CountAllEnabledNodeClusterFirewallActionsRequest) Reset() {
	*x = CountAllEnabledNodeClusterFirewallActionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_firewall_action_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledNodeClusterFirewallActionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledNodeClusterFirewallActionsRequest) ProtoMessage() {}

func (x *CountAllEnabledNodeClusterFirewallActionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_firewall_action_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledNodeClusterFirewallActionsRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledNodeClusterFirewallActionsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_firewall_action_proto_rawDescGZIP(), []int{8}
}

func (x *CountAllEnabledNodeClusterFirewallActionsRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

var File_service_node_cluster_firewall_action_proto protoreflect.FileDescriptor

var file_service_node_cluster_firewall_action_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a,
	0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x65, 0x0a, 0x21, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1b, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a,
	0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x6a, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x57, 0x0a,
	0x2f, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x30, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6f, 0x0a, 0x2b, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x2c,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x19,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x30, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x32, 0xf3, 0x05, 0x0a, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d,
	0x0a, 0x1f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a,
	0x1f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x95, 0x01, 0x0a,
	0x28, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x24, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x77, 0x0a, 0x29, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_node_cluster_firewall_action_proto_rawDescOnce sync.Once
	file_service_node_cluster_firewall_action_proto_rawDescData = file_service_node_cluster_firewall_action_proto_rawDesc
)

func file_service_node_cluster_firewall_action_proto_rawDescGZIP() []byte {
	file_service_node_cluster_firewall_action_proto_rawDescOnce.Do(func() {
		file_service_node_cluster_firewall_action_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_node_cluster_firewall_action_proto_rawDescData)
	})
	return file_service_node_cluster_firewall_action_proto_rawDescData
}

var file_service_node_cluster_firewall_action_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_node_cluster_firewall_action_proto_goTypes = []interface{}{
	(*CreateNodeClusterFirewallActionRequest)(nil),           // 0: pb.CreateNodeClusterFirewallActionRequest
	(*NodeClusterFirewallActionResponse)(nil),                // 1: pb.NodeClusterFirewallActionResponse
	(*UpdateNodeClusterFirewallActionRequest)(nil),           // 2: pb.UpdateNodeClusterFirewallActionRequest
	(*DeleteNodeClusterFirewallActionRequest)(nil),           // 3: pb.DeleteNodeClusterFirewallActionRequest
	(*FindAllEnabledNodeClusterFirewallActionsRequest)(nil),  // 4: pb.FindAllEnabledNodeClusterFirewallActionsRequest
	(*FindAllEnabledNodeClusterFirewallActionsResponse)(nil), // 5: pb.FindAllEnabledNodeClusterFirewallActionsResponse
	(*FindEnabledNodeClusterFirewallActionRequest)(nil),      // 6: pb.FindEnabledNodeClusterFirewallActionRequest
	(*FindEnabledNodeClusterFirewallActionResponse)(nil),     // 7: pb.FindEnabledNodeClusterFirewallActionResponse
	(*CountAllEnabledNodeClusterFirewallActionsRequest)(nil), // 8: pb.CountAllEnabledNodeClusterFirewallActionsRequest
	(*NodeClusterFirewallAction)(nil),                        // 9: pb.NodeClusterFirewallAction
	(*RPCSuccess)(nil),                                       // 10: pb.RPCSuccess
	(*RPCCountResponse)(nil),                                 // 11: pb.RPCCountResponse
}
var file_service_node_cluster_firewall_action_proto_depIdxs = []int32{
	9,  // 0: pb.FindAllEnabledNodeClusterFirewallActionsResponse.nodeClusterFirewallActions:type_name -> pb.NodeClusterFirewallAction
	9,  // 1: pb.FindEnabledNodeClusterFirewallActionResponse.nodeClusterFirewallAction:type_name -> pb.NodeClusterFirewallAction
	0,  // 2: pb.NodeClusterFirewallActionService.createNodeClusterFirewallAction:input_type -> pb.CreateNodeClusterFirewallActionRequest
	2,  // 3: pb.NodeClusterFirewallActionService.updateNodeClusterFirewallAction:input_type -> pb.UpdateNodeClusterFirewallActionRequest
	3,  // 4: pb.NodeClusterFirewallActionService.deleteNodeClusterFirewallAction:input_type -> pb.DeleteNodeClusterFirewallActionRequest
	4,  // 5: pb.NodeClusterFirewallActionService.findAllEnabledNodeClusterFirewallActions:input_type -> pb.FindAllEnabledNodeClusterFirewallActionsRequest
	6,  // 6: pb.NodeClusterFirewallActionService.findEnabledNodeClusterFirewallAction:input_type -> pb.FindEnabledNodeClusterFirewallActionRequest
	8,  // 7: pb.NodeClusterFirewallActionService.countAllEnabledNodeClusterFirewallActions:input_type -> pb.CountAllEnabledNodeClusterFirewallActionsRequest
	1,  // 8: pb.NodeClusterFirewallActionService.createNodeClusterFirewallAction:output_type -> pb.NodeClusterFirewallActionResponse
	10, // 9: pb.NodeClusterFirewallActionService.updateNodeClusterFirewallAction:output_type -> pb.RPCSuccess
	10, // 10: pb.NodeClusterFirewallActionService.deleteNodeClusterFirewallAction:output_type -> pb.RPCSuccess
	5,  // 11: pb.NodeClusterFirewallActionService.findAllEnabledNodeClusterFirewallActions:output_type -> pb.FindAllEnabledNodeClusterFirewallActionsResponse
	7,  // 12: pb.NodeClusterFirewallActionService.findEnabledNodeClusterFirewallAction:output_type -> pb.FindEnabledNodeClusterFirewallActionResponse
	11, // 13: pb.NodeClusterFirewallActionService.countAllEnabledNodeClusterFirewallActions:output_type -> pb.RPCCountResponse
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_node_cluster_firewall_action_proto_init() }
func file_service_node_cluster_firewall_action_proto_init() {
	if File_service_node_cluster_firewall_action_proto != nil {
		return
	}
	file_models_model_node_cluster_firewall_action_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_node_cluster_firewall_action_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeClusterFirewallActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_firewall_action_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeClusterFirewallActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_firewall_action_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeClusterFirewallActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_firewall_action_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeClusterFirewallActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_firewall_action_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNodeClusterFirewallActionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_firewall_action_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNodeClusterFirewallActionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_firewall_action_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNodeClusterFirewallActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_firewall_action_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNodeClusterFirewallActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_firewall_action_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledNodeClusterFirewallActionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_node_cluster_firewall_action_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_node_cluster_firewall_action_proto_goTypes,
		DependencyIndexes: file_service_node_cluster_firewall_action_proto_depIdxs,
		MessageInfos:      file_service_node_cluster_firewall_action_proto_msgTypes,
	}.Build()
	File_service_node_cluster_firewall_action_proto = out.File
	file_service_node_cluster_firewall_action_proto_rawDesc = nil
	file_service_node_cluster_firewall_action_proto_goTypes = nil
	file_service_node_cluster_firewall_action_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeClusterFirewallActionServiceClient is the client API for NodeClusterFirewallActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClusterFirewallActionServiceClient interface {
	// 创建动作
	CreateNodeClusterFirewallAction(ctx context.Context, in *CreateNodeClusterFirewallActionRequest, opts ...grpc.CallOption) (*NodeClusterFirewallActionResponse, error)
	// 修改动作
	UpdateNodeClusterFirewallAction(ctx context.Context, in *UpdateNodeClusterFirewallActionRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除动作
	DeleteNodeClusterFirewallAction(ctx context.Context, in *DeleteNodeClusterFirewallActionRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查询集群的所有动作
	FindAllEnabledNodeClusterFirewallActions(ctx context.Context, in *FindAllEnabledNodeClusterFirewallActionsRequest, opts ...grpc.CallOption) (*FindAllEnabledNodeClusterFirewallActionsResponse, error)
	// 查询单个动作
	FindEnabledNodeClusterFirewallAction(ctx context.Context, in *FindEnabledNodeClusterFirewallActionRequest, opts ...grpc.CallOption) (*FindEnabledNodeClusterFirewallActionResponse, error)
	// 计算动作数量
	CountAllEnabledNodeClusterFirewallActions(ctx context.Context, in *CountAllEnabledNodeClusterFirewallActionsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
}

type nodeClusterFirewallActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClusterFirewallActionServiceClient(cc grpc.ClientConnInterface) NodeClusterFirewallActionServiceClient {
	return &nodeClusterFirewallActionServiceClient{cc}
}

func (c *nodeClusterFirewallActionServiceClient) CreateNodeClusterFirewallAction(ctx context.Context, in *CreateNodeClusterFirewallActionRequest, opts ...grpc.CallOption) (*NodeClusterFirewallActionResponse, error) {
	out := new(NodeClusterFirewallActionResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterFirewallActionService/createNodeClusterFirewallAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterFirewallActionServiceClient) UpdateNodeClusterFirewallAction(ctx context.Context, in *UpdateNodeClusterFirewallActionRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterFirewallActionService/updateNodeClusterFirewallAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterFirewallActionServiceClient) DeleteNodeClusterFirewallAction(ctx context.Context, in *DeleteNodeClusterFirewallActionRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterFirewallActionService/deleteNodeClusterFirewallAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterFirewallActionServiceClient) FindAllEnabledNodeClusterFirewallActions(ctx context.Context, in *FindAllEnabledNodeClusterFirewallActionsRequest, opts ...grpc.CallOption) (*FindAllEnabledNodeClusterFirewallActionsResponse, error) {
	out := new(FindAllEnabledNodeClusterFirewallActionsResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterFirewallActionService/findAllEnabledNodeClusterFirewallActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterFirewallActionServiceClient) FindEnabledNodeClusterFirewallAction(ctx context.Context, in *FindEnabledNodeClusterFirewallActionRequest, opts ...grpc.CallOption) (*FindEnabledNodeClusterFirewallActionResponse, error) {
	out := new(FindEnabledNodeClusterFirewallActionResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterFirewallActionService/findEnabledNodeClusterFirewallAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterFirewallActionServiceClient) CountAllEnabledNodeClusterFirewallActions(ctx context.Context, in *CountAllEnabledNodeClusterFirewallActionsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterFirewallActionService/countAllEnabledNodeClusterFirewallActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeClusterFirewallActionServiceServer is the server API for NodeClusterFirewallActionService service.
type NodeClusterFirewallActionServiceServer interface {
	// 创建动作
	CreateNodeClusterFirewallAction(context.Context, *CreateNodeClusterFirewallActionRequest) (*NodeClusterFirewallActionResponse, error)
	// 修改动作
	UpdateNodeClusterFirewallAction(context.Context, *UpdateNodeClusterFirewallActionRequest) (*RPCSuccess, error)
	// 删除动作
	DeleteNodeClusterFirewallAction(context.Context, *DeleteNodeClusterFirewallActionRequest) (*RPCSuccess, error)
	// 查询集群的所有动作
	FindAllEnabledNodeClusterFirewallActions(context.Context, *FindAllEnabledNodeClusterFirewallActionsRequest) (*FindAllEnabledNodeClusterFirewallActionsResponse, error)
	// 查询单个动作
	FindEnabledNodeClusterFirewallAction(context.Context, *FindEnabledNodeClusterFirewallActionRequest) (*FindEnabledNodeClusterFirewallActionResponse, error)
	// 计算动作数量
	CountAllEnabledNodeClusterFirewallActions(context.Context, *CountAllEnabledNodeClusterFirewallActionsRequest) (*RPCCountResponse, error)
}

// UnimplementedNodeClusterFirewallActionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeClusterFirewallActionServiceServer struct {
}

func (*UnimplementedNodeClusterFirewallActionServiceServer) CreateNodeClusterFirewallAction(context.Context, *CreateNodeClusterFirewallActionRequest) (*NodeClusterFirewallActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeClusterFirewallAction not implemented")
}
func (*UnimplementedNodeClusterFirewallActionServiceServer) UpdateNodeClusterFirewallAction(context.Context, *UpdateNodeClusterFirewallActionRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeClusterFirewallAction not implemented")
}
func (*UnimplementedNodeClusterFirewallActionServiceServer) DeleteNodeClusterFirewallAction(context.Context, *DeleteNodeClusterFirewallActionRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeClusterFirewallAction not implemented")
}
func (*UnimplementedNodeClusterFirewallActionServiceServer) FindAllEnabledNodeClusterFirewallActions(context.Context, *FindAllEnabledNodeClusterFirewallActionsRequest) (*FindAllEnabledNodeClusterFirewallActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledNodeClusterFirewallActions not implemented")
}
func (*UnimplementedNodeClusterFirewallActionServiceServer) FindEnabledNodeClusterFirewallAction(context.Context, *FindEnabledNodeClusterFirewallActionRequest) (*FindEnabledNodeClusterFirewallActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledNodeClusterFirewallAction not implemented")
}
func (*UnimplementedNodeClusterFirewallActionServiceServer) CountAllEnabledNodeClusterFirewallActions(context.Context, *CountAllEnabledNodeClusterFirewallActionsRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledNodeClusterFirewallActions not implemented")
}

func RegisterNodeClusterFirewallActionServiceServer(s *grpc.Server, srv NodeClusterFirewallActionServiceServer) {
	s.RegisterService(&_NodeClusterFirewallActionService_serviceDesc, srv)
}

func _NodeClusterFirewallActionService_CreateNodeClusterFirewallAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeClusterFirewallActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterFirewallActionServiceServer).CreateNodeClusterFirewallAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterFirewallActionService/CreateNodeClusterFirewallAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterFirewallActionServiceServer).CreateNodeClusterFirewallAction(ctx, req.(*CreateNodeClusterFirewallActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterFirewallActionService_UpdateNodeClusterFirewallAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeClusterFirewallActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterFirewallActionServiceServer).UpdateNodeClusterFirewallAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterFirewallActionService/UpdateNodeClusterFirewallAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterFirewallActionServiceServer).UpdateNodeClusterFirewallAction(ctx, req.(*UpdateNodeClusterFirewallActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterFirewallActionService_DeleteNodeClusterFirewallAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeClusterFirewallActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterFirewallActionServiceServer).DeleteNodeClusterFirewallAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterFirewallActionService/DeleteNodeClusterFirewallAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterFirewallActionServiceServer).DeleteNodeClusterFirewallAction(ctx, req.(*DeleteNodeClusterFirewallActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterFirewallActionService_FindAllEnabledNodeClusterFirewallActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledNodeClusterFirewallActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterFirewallActionServiceServer).FindAllEnabledNodeClusterFirewallActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterFirewallActionService/FindAllEnabledNodeClusterFirewallActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterFirewallActionServiceServer).FindAllEnabledNodeClusterFirewallActions(ctx, req.(*FindAllEnabledNodeClusterFirewallActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterFirewallActionService_FindEnabledNodeClusterFirewallAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledNodeClusterFirewallActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterFirewallActionServiceServer).FindEnabledNodeClusterFirewallAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterFirewallActionService/FindEnabledNodeClusterFirewallAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterFirewallActionServiceServer).FindEnabledNodeClusterFirewallAction(ctx, req.(*FindEnabledNodeClusterFirewallActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterFirewallActionService_CountAllEnabledNodeClusterFirewallActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledNodeClusterFirewallActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterFirewallActionServiceServer).CountAllEnabledNodeClusterFirewallActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterFirewallActionService/CountAllEnabledNodeClusterFirewallActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterFirewallActionServiceServer).CountAllEnabledNodeClusterFirewallActions(ctx, req.(*CountAllEnabledNodeClusterFirewallActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeClusterFirewallActionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NodeClusterFirewallActionService",
	HandlerType: (*NodeClusterFirewallActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNodeClusterFirewallAction",
			Handler:    _NodeClusterFirewallActionService_CreateNodeClusterFirewallAction_Handler,
		},
		{
			MethodName: "updateNodeClusterFirewallAction",
			Handler:    _NodeClusterFirewallActionService_UpdateNodeClusterFirewallAction_Handler,
		},
		{
			MethodName: "deleteNodeClusterFirewallAction",
			Handler:    _NodeClusterFirewallActionService_DeleteNodeClusterFirewallAction_Handler,
		},
		{
			MethodName: "findAllEnabledNodeClusterFirewallActions",
			Handler:    _NodeClusterFirewallActionService_FindAllEnabledNodeClusterFirewallActions_Handler,
		},
		{
			MethodName: "findEnabledNodeClusterFirewallAction",
			Handler:    _NodeClusterFirewallActionService_FindEnabledNodeClusterFirewallAction_Handler,
		},
		{
			MethodName: "countAllEnabledNodeClusterFirewallActions",
			Handler:    _NodeClusterFirewallActionService_CountAllEnabledNodeClusterFirewallActions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_node_cluster_firewall_action.proto",
}
