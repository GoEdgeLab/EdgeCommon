// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_server_stat_board.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 读取所有看板
type FindAllEnabledServerStatBoardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64 `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
}

func (x *FindAllEnabledServerStatBoardsRequest) Reset() {
	*x = FindAllEnabledServerStatBoardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_stat_board_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServerStatBoardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServerStatBoardsRequest) ProtoMessage() {}

func (x *FindAllEnabledServerStatBoardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_stat_board_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServerStatBoardsRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServerStatBoardsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_stat_board_proto_rawDescGZIP(), []int{0}
}

func (x *FindAllEnabledServerStatBoardsRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

type FindAllEnabledServerStatBoardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerStatBoards []*ServerStatBoard `protobuf:"bytes,1,rep,name=serverStatBoards,proto3" json:"serverStatBoards,omitempty"`
}

func (x *FindAllEnabledServerStatBoardsResponse) Reset() {
	*x = FindAllEnabledServerStatBoardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_stat_board_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServerStatBoardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServerStatBoardsResponse) ProtoMessage() {}

func (x *FindAllEnabledServerStatBoardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_stat_board_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServerStatBoardsResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServerStatBoardsResponse) Descriptor() ([]byte, []int) {
	return file_service_server_stat_board_proto_rawDescGZIP(), []int{1}
}

func (x *FindAllEnabledServerStatBoardsResponse) GetServerStatBoards() []*ServerStatBoard {
	if x != nil {
		return x.ServerStatBoards
	}
	return nil
}

// 组合集群看板数据
type ComposeServerStatNodeClusterBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64 `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
}

func (x *ComposeServerStatNodeClusterBoardRequest) Reset() {
	*x = ComposeServerStatNodeClusterBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_stat_board_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerStatNodeClusterBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerStatNodeClusterBoardRequest) ProtoMessage() {}

func (x *ComposeServerStatNodeClusterBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_stat_board_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerStatNodeClusterBoardRequest.ProtoReflect.Descriptor instead.
func (*ComposeServerStatNodeClusterBoardRequest) Descriptor() ([]byte, []int) {
	return file_service_server_stat_board_proto_rawDescGZIP(), []int{2}
}

func (x *ComposeServerStatNodeClusterBoardRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

type ComposeServerStatNodeClusterBoardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountActiveNodes   int64                                                          `protobuf:"varint,1,opt,name=countActiveNodes,proto3" json:"countActiveNodes,omitempty"`
	CountInactiveNodes int64                                                          `protobuf:"varint,2,opt,name=countInactiveNodes,proto3" json:"countInactiveNodes,omitempty"`
	CountServers       int64                                                          `protobuf:"varint,3,opt,name=countServers,proto3" json:"countServers,omitempty"`
	CountUsers         int64                                                          `protobuf:"varint,4,opt,name=countUsers,proto3" json:"countUsers,omitempty"`
	DailyTrafficStats  []*ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat  `protobuf:"bytes,30,rep,name=dailyTrafficStats,proto3" json:"dailyTrafficStats,omitempty"`
	HourlyTrafficStats []*ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat `protobuf:"bytes,31,rep,name=hourlyTrafficStats,proto3" json:"hourlyTrafficStats,omitempty"`
	TopNodeStats       []*ComposeServerStatNodeClusterBoardResponse_NodeStat          `protobuf:"bytes,32,rep,name=topNodeStats,proto3" json:"topNodeStats,omitempty"`
	TopDomainStats     []*ComposeServerStatNodeClusterBoardResponse_DomainStat        `protobuf:"bytes,33,rep,name=topDomainStats,proto3" json:"topDomainStats,omitempty"`
	CpuNodeValues      []*NodeValue                                                   `protobuf:"bytes,34,rep,name=cpuNodeValues,proto3" json:"cpuNodeValues,omitempty"`
	MemoryNodeValues   []*NodeValue                                                   `protobuf:"bytes,35,rep,name=memoryNodeValues,proto3" json:"memoryNodeValues,omitempty"`
	LoadNodeValues     []*NodeValue                                                   `protobuf:"bytes,36,rep,name=loadNodeValues,proto3" json:"loadNodeValues,omitempty"`
}

func (x *ComposeServerStatNodeClusterBoardResponse) Reset() {
	*x = ComposeServerStatNodeClusterBoardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_stat_board_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerStatNodeClusterBoardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerStatNodeClusterBoardResponse) ProtoMessage() {}

func (x *ComposeServerStatNodeClusterBoardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_stat_board_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerStatNodeClusterBoardResponse.ProtoReflect.Descriptor instead.
func (*ComposeServerStatNodeClusterBoardResponse) Descriptor() ([]byte, []int) {
	return file_service_server_stat_board_proto_rawDescGZIP(), []int{3}
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetCountActiveNodes() int64 {
	if x != nil {
		return x.CountActiveNodes
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetCountInactiveNodes() int64 {
	if x != nil {
		return x.CountInactiveNodes
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetCountServers() int64 {
	if x != nil {
		return x.CountServers
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetCountUsers() int64 {
	if x != nil {
		return x.CountUsers
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetDailyTrafficStats() []*ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat {
	if x != nil {
		return x.DailyTrafficStats
	}
	return nil
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetHourlyTrafficStats() []*ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat {
	if x != nil {
		return x.HourlyTrafficStats
	}
	return nil
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetTopNodeStats() []*ComposeServerStatNodeClusterBoardResponse_NodeStat {
	if x != nil {
		return x.TopNodeStats
	}
	return nil
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetTopDomainStats() []*ComposeServerStatNodeClusterBoardResponse_DomainStat {
	if x != nil {
		return x.TopDomainStats
	}
	return nil
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetCpuNodeValues() []*NodeValue {
	if x != nil {
		return x.CpuNodeValues
	}
	return nil
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetMemoryNodeValues() []*NodeValue {
	if x != nil {
		return x.MemoryNodeValues
	}
	return nil
}

func (x *ComposeServerStatNodeClusterBoardResponse) GetLoadNodeValues() []*NodeValue {
	if x != nil {
		return x.LoadNodeValues
	}
	return nil
}

type ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day                 string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Bytes               int64  `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CachedBytes         int64  `protobuf:"varint,3,opt,name=cachedBytes,proto3" json:"cachedBytes,omitempty"`
	CountRequests       int64  `protobuf:"varint,4,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	CountCachedRequests int64  `protobuf:"varint,5,opt,name=countCachedRequests,proto3" json:"countCachedRequests,omitempty"`
}

func (x *ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat) Reset() {
	*x = ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_stat_board_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat) ProtoMessage() {}

func (x *ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_stat_board_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat.ProtoReflect.Descriptor instead.
func (*ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat) Descriptor() ([]byte, []int) {
	return file_service_server_stat_board_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat) GetCachedBytes() int64 {
	if x != nil {
		return x.CachedBytes
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat) GetCountCachedRequests() int64 {
	if x != nil {
		return x.CountCachedRequests
	}
	return 0
}

type ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour                string `protobuf:"bytes,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Bytes               int64  `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CachedBytes         int64  `protobuf:"varint,3,opt,name=cachedBytes,proto3" json:"cachedBytes,omitempty"`
	CountRequests       int64  `protobuf:"varint,4,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	CountCachedRequests int64  `protobuf:"varint,5,opt,name=countCachedRequests,proto3" json:"countCachedRequests,omitempty"`
}

func (x *ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat) Reset() {
	*x = ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_stat_board_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat) ProtoMessage() {}

func (x *ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_stat_board_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat.ProtoReflect.Descriptor instead.
func (*ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat) Descriptor() ([]byte, []int) {
	return file_service_server_stat_board_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat) GetHour() string {
	if x != nil {
		return x.Hour
	}
	return ""
}

func (x *ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat) GetCachedBytes() int64 {
	if x != nil {
		return x.CachedBytes
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat) GetCountCachedRequests() int64 {
	if x != nil {
		return x.CountCachedRequests
	}
	return 0
}

type ComposeServerStatNodeClusterBoardResponse_NodeStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId        int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	NodeName      string `protobuf:"bytes,2,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	CountRequests int64  `protobuf:"varint,3,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	Bytes         int64  `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *ComposeServerStatNodeClusterBoardResponse_NodeStat) Reset() {
	*x = ComposeServerStatNodeClusterBoardResponse_NodeStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_stat_board_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerStatNodeClusterBoardResponse_NodeStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerStatNodeClusterBoardResponse_NodeStat) ProtoMessage() {}

func (x *ComposeServerStatNodeClusterBoardResponse_NodeStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_stat_board_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerStatNodeClusterBoardResponse_NodeStat.ProtoReflect.Descriptor instead.
func (*ComposeServerStatNodeClusterBoardResponse_NodeStat) Descriptor() ([]byte, []int) {
	return file_service_server_stat_board_proto_rawDescGZIP(), []int{3, 2}
}

func (x *ComposeServerStatNodeClusterBoardResponse_NodeStat) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse_NodeStat) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ComposeServerStatNodeClusterBoardResponse_NodeStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse_NodeStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type ComposeServerStatNodeClusterBoardResponse_DomainStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId      int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Domain        string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	CountRequests int64  `protobuf:"varint,3,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	Bytes         int64  `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *ComposeServerStatNodeClusterBoardResponse_DomainStat) Reset() {
	*x = ComposeServerStatNodeClusterBoardResponse_DomainStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_stat_board_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerStatNodeClusterBoardResponse_DomainStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerStatNodeClusterBoardResponse_DomainStat) ProtoMessage() {}

func (x *ComposeServerStatNodeClusterBoardResponse_DomainStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_stat_board_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerStatNodeClusterBoardResponse_DomainStat.ProtoReflect.Descriptor instead.
func (*ComposeServerStatNodeClusterBoardResponse_DomainStat) Descriptor() ([]byte, []int) {
	return file_service_server_stat_board_proto_rawDescGZIP(), []int{3, 3}
}

func (x *ComposeServerStatNodeClusterBoardResponse_DomainStat) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse_DomainStat) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ComposeServerStatNodeClusterBoardResponse_DomainStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *ComposeServerStatNodeClusterBoardResponse_DomainStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

var File_service_server_stat_board_proto protoreflect.FileDescriptor

var file_service_server_stat_board_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x69, 0x0a, 0x26, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x28,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfa,
	0x0a, 0x0a, 0x29, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x6c, 0x0a, 0x11,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x52, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x12, 0x68, 0x6f,
	0x75, 0x72, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x52, 0x12, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0c, 0x74,
	0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0e, 0x74, 0x6f, 0x70, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x63, 0x70, 0x75,
	0x4e, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x63, 0x70, 0x75, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x6c, 0x6f, 0x61,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0xb4, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0xb7, 0x01, 0x0a, 0x11, 0x48, 0x6f, 0x75, 0x72,
	0x6c, 0x79, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x1a, 0x7a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x7c, 0x0a,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x94, 0x02, 0x0a, 0x16,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x80, 0x01, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_service_server_stat_board_proto_rawDescOnce sync.Once
	file_service_server_stat_board_proto_rawDescData = file_service_server_stat_board_proto_rawDesc
)

func file_service_server_stat_board_proto_rawDescGZIP() []byte {
	file_service_server_stat_board_proto_rawDescOnce.Do(func() {
		file_service_server_stat_board_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_server_stat_board_proto_rawDescData)
	})
	return file_service_server_stat_board_proto_rawDescData
}

var file_service_server_stat_board_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_service_server_stat_board_proto_goTypes = []interface{}{
	(*FindAllEnabledServerStatBoardsRequest)(nil),                       // 0: pb.FindAllEnabledServerStatBoardsRequest
	(*FindAllEnabledServerStatBoardsResponse)(nil),                      // 1: pb.FindAllEnabledServerStatBoardsResponse
	(*ComposeServerStatNodeClusterBoardRequest)(nil),                    // 2: pb.ComposeServerStatNodeClusterBoardRequest
	(*ComposeServerStatNodeClusterBoardResponse)(nil),                   // 3: pb.ComposeServerStatNodeClusterBoardResponse
	(*ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat)(nil),  // 4: pb.ComposeServerStatNodeClusterBoardResponse.DailyTrafficStat
	(*ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat)(nil), // 5: pb.ComposeServerStatNodeClusterBoardResponse.HourlyTrafficStat
	(*ComposeServerStatNodeClusterBoardResponse_NodeStat)(nil),          // 6: pb.ComposeServerStatNodeClusterBoardResponse.NodeStat
	(*ComposeServerStatNodeClusterBoardResponse_DomainStat)(nil),        // 7: pb.ComposeServerStatNodeClusterBoardResponse.DomainStat
	(*ServerStatBoard)(nil),                                             // 8: pb.ServerStatBoard
	(*NodeValue)(nil),                                                   // 9: pb.NodeValue
}
var file_service_server_stat_board_proto_depIdxs = []int32{
	8,  // 0: pb.FindAllEnabledServerStatBoardsResponse.serverStatBoards:type_name -> pb.ServerStatBoard
	4,  // 1: pb.ComposeServerStatNodeClusterBoardResponse.dailyTrafficStats:type_name -> pb.ComposeServerStatNodeClusterBoardResponse.DailyTrafficStat
	5,  // 2: pb.ComposeServerStatNodeClusterBoardResponse.hourlyTrafficStats:type_name -> pb.ComposeServerStatNodeClusterBoardResponse.HourlyTrafficStat
	6,  // 3: pb.ComposeServerStatNodeClusterBoardResponse.topNodeStats:type_name -> pb.ComposeServerStatNodeClusterBoardResponse.NodeStat
	7,  // 4: pb.ComposeServerStatNodeClusterBoardResponse.topDomainStats:type_name -> pb.ComposeServerStatNodeClusterBoardResponse.DomainStat
	9,  // 5: pb.ComposeServerStatNodeClusterBoardResponse.cpuNodeValues:type_name -> pb.NodeValue
	9,  // 6: pb.ComposeServerStatNodeClusterBoardResponse.memoryNodeValues:type_name -> pb.NodeValue
	9,  // 7: pb.ComposeServerStatNodeClusterBoardResponse.loadNodeValues:type_name -> pb.NodeValue
	0,  // 8: pb.ServerStatBoardService.findAllEnabledServerStatBoards:input_type -> pb.FindAllEnabledServerStatBoardsRequest
	2,  // 9: pb.ServerStatBoardService.composeServerStatNodeClusterBoard:input_type -> pb.ComposeServerStatNodeClusterBoardRequest
	1,  // 10: pb.ServerStatBoardService.findAllEnabledServerStatBoards:output_type -> pb.FindAllEnabledServerStatBoardsResponse
	3,  // 11: pb.ServerStatBoardService.composeServerStatNodeClusterBoard:output_type -> pb.ComposeServerStatNodeClusterBoardResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_service_server_stat_board_proto_init() }
func file_service_server_stat_board_proto_init() {
	if File_service_server_stat_board_proto != nil {
		return
	}
	file_models_model_server_stat_board_proto_init()
	file_models_model_message_node_value_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_server_stat_board_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServerStatBoardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_stat_board_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServerStatBoardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_stat_board_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerStatNodeClusterBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_stat_board_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerStatNodeClusterBoardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_stat_board_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerStatNodeClusterBoardResponse_DailyTrafficStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_stat_board_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerStatNodeClusterBoardResponse_HourlyTrafficStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_stat_board_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerStatNodeClusterBoardResponse_NodeStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_stat_board_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerStatNodeClusterBoardResponse_DomainStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_server_stat_board_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_server_stat_board_proto_goTypes,
		DependencyIndexes: file_service_server_stat_board_proto_depIdxs,
		MessageInfos:      file_service_server_stat_board_proto_msgTypes,
	}.Build()
	File_service_server_stat_board_proto = out.File
	file_service_server_stat_board_proto_rawDesc = nil
	file_service_server_stat_board_proto_goTypes = nil
	file_service_server_stat_board_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServerStatBoardServiceClient is the client API for ServerStatBoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerStatBoardServiceClient interface {
	// 读取所有看板
	FindAllEnabledServerStatBoards(ctx context.Context, in *FindAllEnabledServerStatBoardsRequest, opts ...grpc.CallOption) (*FindAllEnabledServerStatBoardsResponse, error)
	// 组合集群看板数据
	ComposeServerStatNodeClusterBoard(ctx context.Context, in *ComposeServerStatNodeClusterBoardRequest, opts ...grpc.CallOption) (*ComposeServerStatNodeClusterBoardResponse, error)
}

type serverStatBoardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStatBoardServiceClient(cc grpc.ClientConnInterface) ServerStatBoardServiceClient {
	return &serverStatBoardServiceClient{cc}
}

func (c *serverStatBoardServiceClient) FindAllEnabledServerStatBoards(ctx context.Context, in *FindAllEnabledServerStatBoardsRequest, opts ...grpc.CallOption) (*FindAllEnabledServerStatBoardsResponse, error) {
	out := new(FindAllEnabledServerStatBoardsResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerStatBoardService/findAllEnabledServerStatBoards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverStatBoardServiceClient) ComposeServerStatNodeClusterBoard(ctx context.Context, in *ComposeServerStatNodeClusterBoardRequest, opts ...grpc.CallOption) (*ComposeServerStatNodeClusterBoardResponse, error) {
	out := new(ComposeServerStatNodeClusterBoardResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerStatBoardService/composeServerStatNodeClusterBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerStatBoardServiceServer is the server API for ServerStatBoardService service.
type ServerStatBoardServiceServer interface {
	// 读取所有看板
	FindAllEnabledServerStatBoards(context.Context, *FindAllEnabledServerStatBoardsRequest) (*FindAllEnabledServerStatBoardsResponse, error)
	// 组合集群看板数据
	ComposeServerStatNodeClusterBoard(context.Context, *ComposeServerStatNodeClusterBoardRequest) (*ComposeServerStatNodeClusterBoardResponse, error)
}

// UnimplementedServerStatBoardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServerStatBoardServiceServer struct {
}

func (*UnimplementedServerStatBoardServiceServer) FindAllEnabledServerStatBoards(context.Context, *FindAllEnabledServerStatBoardsRequest) (*FindAllEnabledServerStatBoardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledServerStatBoards not implemented")
}
func (*UnimplementedServerStatBoardServiceServer) ComposeServerStatNodeClusterBoard(context.Context, *ComposeServerStatNodeClusterBoardRequest) (*ComposeServerStatNodeClusterBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposeServerStatNodeClusterBoard not implemented")
}

func RegisterServerStatBoardServiceServer(s *grpc.Server, srv ServerStatBoardServiceServer) {
	s.RegisterService(&_ServerStatBoardService_serviceDesc, srv)
}

func _ServerStatBoardService_FindAllEnabledServerStatBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledServerStatBoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerStatBoardServiceServer).FindAllEnabledServerStatBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerStatBoardService/FindAllEnabledServerStatBoards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerStatBoardServiceServer).FindAllEnabledServerStatBoards(ctx, req.(*FindAllEnabledServerStatBoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerStatBoardService_ComposeServerStatNodeClusterBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposeServerStatNodeClusterBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerStatBoardServiceServer).ComposeServerStatNodeClusterBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerStatBoardService/ComposeServerStatNodeClusterBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerStatBoardServiceServer).ComposeServerStatNodeClusterBoard(ctx, req.(*ComposeServerStatNodeClusterBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerStatBoardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServerStatBoardService",
	HandlerType: (*ServerStatBoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findAllEnabledServerStatBoards",
			Handler:    _ServerStatBoardService_FindAllEnabledServerStatBoards_Handler,
		},
		{
			MethodName: "composeServerStatNodeClusterBoard",
			Handler:    _ServerStatBoardService_ComposeServerStatNodeClusterBoard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_server_stat_board.proto",
}
