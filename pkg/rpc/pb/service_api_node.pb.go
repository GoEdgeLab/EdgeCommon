// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_api_node.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建API节点
type CreateAPINodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                       // API节点名称
	Description     string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`         // API节点描述
	HttpJSON        []byte `protobuf:"bytes,3,opt,name=httpJSON,proto3" json:"httpJSON,omitempty"`               // 监听HTTP地址配置 @link json:http_protocol
	HttpsJSON       []byte `protobuf:"bytes,4,opt,name=httpsJSON,proto3" json:"httpsJSON,omitempty"`             // 监听HTTPS地址配置 @link json:https_protocol
	AccessAddrsJSON []byte `protobuf:"bytes,5,opt,name=accessAddrsJSON,proto3" json:"accessAddrsJSON,omitempty"` // 访问地址 @link json:network_address
	IsOn            bool   `protobuf:"varint,6,opt,name=isOn,proto3" json:"isOn,omitempty"`                      // 是否启用当前API节点
	RestIsOn        bool   `protobuf:"varint,7,opt,name=restIsOn,proto3" json:"restIsOn,omitempty"`              // 是否启用API
	RestHTTPJSON    []byte `protobuf:"bytes,8,opt,name=restHTTPJSON,proto3" json:"restHTTPJSON,omitempty"`       // API地址HTTP地址配置 @link json:http_protocol
	RestHTTPSJSON   []byte `protobuf:"bytes,9,opt,name=restHTTPSJSON,proto3" json:"restHTTPSJSON,omitempty"`     // API地址HTTPS地址配置 @link json:https_protocol
}

func (x *CreateAPINodeRequest) Reset() {
	*x = CreateAPINodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAPINodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAPINodeRequest) ProtoMessage() {}

func (x *CreateAPINodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAPINodeRequest.ProtoReflect.Descriptor instead.
func (*CreateAPINodeRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAPINodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAPINodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateAPINodeRequest) GetHttpJSON() []byte {
	if x != nil {
		return x.HttpJSON
	}
	return nil
}

func (x *CreateAPINodeRequest) GetHttpsJSON() []byte {
	if x != nil {
		return x.HttpsJSON
	}
	return nil
}

func (x *CreateAPINodeRequest) GetAccessAddrsJSON() []byte {
	if x != nil {
		return x.AccessAddrsJSON
	}
	return nil
}

func (x *CreateAPINodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *CreateAPINodeRequest) GetRestIsOn() bool {
	if x != nil {
		return x.RestIsOn
	}
	return false
}

func (x *CreateAPINodeRequest) GetRestHTTPJSON() []byte {
	if x != nil {
		return x.RestHTTPJSON
	}
	return nil
}

func (x *CreateAPINodeRequest) GetRestHTTPSJSON() []byte {
	if x != nil {
		return x.RestHTTPSJSON
	}
	return nil
}

type CreateAPINodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiNodeId int64 `protobuf:"varint,1,opt,name=apiNodeId,proto3" json:"apiNodeId,omitempty"`
}

func (x *CreateAPINodeResponse) Reset() {
	*x = CreateAPINodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAPINodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAPINodeResponse) ProtoMessage() {}

func (x *CreateAPINodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAPINodeResponse.ProtoReflect.Descriptor instead.
func (*CreateAPINodeResponse) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAPINodeResponse) GetApiNodeId() int64 {
	if x != nil {
		return x.ApiNodeId
	}
	return 0
}

// 修改API节点
type UpdateAPINodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiNodeId       int64  `protobuf:"varint,1,opt,name=apiNodeId,proto3" json:"apiNodeId,omitempty"`            // API节点ID
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                       // API节点名称
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`         // API节点描述
	HttpJSON        []byte `protobuf:"bytes,4,opt,name=httpJSON,proto3" json:"httpJSON,omitempty"`               // 监听HTTP地址配置 @link json:http_protocol
	HttpsJSON       []byte `protobuf:"bytes,5,opt,name=httpsJSON,proto3" json:"httpsJSON,omitempty"`             // 监听HTTPS地址配置 @link json:https_protocol
	AccessAddrsJSON []byte `protobuf:"bytes,6,opt,name=accessAddrsJSON,proto3" json:"accessAddrsJSON,omitempty"` // 访问地址 @link json:network_address
	IsOn            bool   `protobuf:"varint,7,opt,name=isOn,proto3" json:"isOn,omitempty"`                      // 是否启用当前API节点
	RestIsOn        bool   `protobuf:"varint,8,opt,name=restIsOn,proto3" json:"restIsOn,omitempty"`              // 是否启用API
	RestHTTPJSON    []byte `protobuf:"bytes,9,opt,name=restHTTPJSON,proto3" json:"restHTTPJSON,omitempty"`       // API地址HTTP地址配置 @link json:http_protocol
	RestHTTPSJSON   []byte `protobuf:"bytes,10,opt,name=restHTTPSJSON,proto3" json:"restHTTPSJSON,omitempty"`    // API地址HTTPS地址配置 @link json:https_protocol
	IsPrimary       bool   `protobuf:"varint,11,opt,name=isPrimary,proto3" json:"isPrimary,omitempty"`           // 是否为主要API节点，日常任务主要运行在主要API节点上
}

func (x *UpdateAPINodeRequest) Reset() {
	*x = UpdateAPINodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAPINodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAPINodeRequest) ProtoMessage() {}

func (x *UpdateAPINodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAPINodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateAPINodeRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAPINodeRequest) GetApiNodeId() int64 {
	if x != nil {
		return x.ApiNodeId
	}
	return 0
}

func (x *UpdateAPINodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAPINodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateAPINodeRequest) GetHttpJSON() []byte {
	if x != nil {
		return x.HttpJSON
	}
	return nil
}

func (x *UpdateAPINodeRequest) GetHttpsJSON() []byte {
	if x != nil {
		return x.HttpsJSON
	}
	return nil
}

func (x *UpdateAPINodeRequest) GetAccessAddrsJSON() []byte {
	if x != nil {
		return x.AccessAddrsJSON
	}
	return nil
}

func (x *UpdateAPINodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateAPINodeRequest) GetRestIsOn() bool {
	if x != nil {
		return x.RestIsOn
	}
	return false
}

func (x *UpdateAPINodeRequest) GetRestHTTPJSON() []byte {
	if x != nil {
		return x.RestHTTPJSON
	}
	return nil
}

func (x *UpdateAPINodeRequest) GetRestHTTPSJSON() []byte {
	if x != nil {
		return x.RestHTTPSJSON
	}
	return nil
}

func (x *UpdateAPINodeRequest) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

// 删除API节点
type DeleteAPINodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiNodeId int64 `protobuf:"varint,1,opt,name=apiNodeId,proto3" json:"apiNodeId,omitempty"`
}

func (x *DeleteAPINodeRequest) Reset() {
	*x = DeleteAPINodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAPINodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAPINodeRequest) ProtoMessage() {}

func (x *DeleteAPINodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAPINodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteAPINodeRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteAPINodeRequest) GetApiNodeId() int64 {
	if x != nil {
		return x.ApiNodeId
	}
	return 0
}

// 列出所有可用API节点
type FindAllEnabledAPINodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledAPINodesRequest) Reset() {
	*x = FindAllEnabledAPINodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledAPINodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledAPINodesRequest) ProtoMessage() {}

func (x *FindAllEnabledAPINodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledAPINodesRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledAPINodesRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{4}
}

type FindAllEnabledAPINodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiNodes []*APINode `protobuf:"bytes,1,rep,name=apiNodes,proto3" json:"apiNodes,omitempty"`
}

func (x *FindAllEnabledAPINodesResponse) Reset() {
	*x = FindAllEnabledAPINodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledAPINodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledAPINodesResponse) ProtoMessage() {}

func (x *FindAllEnabledAPINodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledAPINodesResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledAPINodesResponse) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllEnabledAPINodesResponse) GetApiNodes() []*APINode {
	if x != nil {
		return x.ApiNodes
	}
	return nil
}

// 计算API节点数量
type CountAllEnabledAPINodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllEnabledAPINodesRequest) Reset() {
	*x = CountAllEnabledAPINodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledAPINodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledAPINodesRequest) ProtoMessage() {}

func (x *CountAllEnabledAPINodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledAPINodesRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledAPINodesRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{6}
}

// 计算启用的API节点数量
type CountAllEnabledAndOnAPINodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllEnabledAndOnAPINodesRequest) Reset() {
	*x = CountAllEnabledAndOnAPINodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledAndOnAPINodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledAndOnAPINodesRequest) ProtoMessage() {}

func (x *CountAllEnabledAndOnAPINodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledAndOnAPINodesRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledAndOnAPINodesRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{7}
}

// 列出单页的API节点
type ListEnabledAPINodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledAPINodesRequest) Reset() {
	*x = ListEnabledAPINodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledAPINodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledAPINodesRequest) ProtoMessage() {}

func (x *ListEnabledAPINodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledAPINodesRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledAPINodesRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{8}
}

func (x *ListEnabledAPINodesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledAPINodesRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledAPINodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiNodes []*APINode `protobuf:"bytes,1,rep,name=apiNodes,proto3" json:"apiNodes,omitempty"`
}

func (x *ListEnabledAPINodesResponse) Reset() {
	*x = ListEnabledAPINodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledAPINodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledAPINodesResponse) ProtoMessage() {}

func (x *ListEnabledAPINodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledAPINodesResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledAPINodesResponse) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{9}
}

func (x *ListEnabledAPINodesResponse) GetApiNodes() []*APINode {
	if x != nil {
		return x.ApiNodes
	}
	return nil
}

// 根据ID查找节点
type FindEnabledAPINodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiNodeId int64 `protobuf:"varint,1,opt,name=apiNodeId,proto3" json:"apiNodeId,omitempty"`
}

func (x *FindEnabledAPINodeRequest) Reset() {
	*x = FindEnabledAPINodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledAPINodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledAPINodeRequest) ProtoMessage() {}

func (x *FindEnabledAPINodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledAPINodeRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledAPINodeRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{10}
}

func (x *FindEnabledAPINodeRequest) GetApiNodeId() int64 {
	if x != nil {
		return x.ApiNodeId
	}
	return 0
}

type FindEnabledAPINodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiNode *APINode `protobuf:"bytes,1,opt,name=apiNode,proto3" json:"apiNode,omitempty"`
}

func (x *FindEnabledAPINodeResponse) Reset() {
	*x = FindEnabledAPINodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledAPINodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledAPINodeResponse) ProtoMessage() {}

func (x *FindEnabledAPINodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledAPINodeResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledAPINodeResponse) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{11}
}

func (x *FindEnabledAPINodeResponse) GetApiNode() *APINode {
	if x != nil {
		return x.ApiNode
	}
	return nil
}

// 获取当前API节点的版本
type FindCurrentAPINodeVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindCurrentAPINodeVersionRequest) Reset() {
	*x = FindCurrentAPINodeVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentAPINodeVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentAPINodeVersionRequest) ProtoMessage() {}

func (x *FindCurrentAPINodeVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentAPINodeVersionRequest.ProtoReflect.Descriptor instead.
func (*FindCurrentAPINodeVersionRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{12}
}

type FindCurrentAPINodeVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // 版本号
	Os      string `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`           // 系统代号，比如linux
	Arch    string `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`       // 架构，比如amd64
	Role    string `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`       // 角色，通常为api
}

func (x *FindCurrentAPINodeVersionResponse) Reset() {
	*x = FindCurrentAPINodeVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentAPINodeVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentAPINodeVersionResponse) ProtoMessage() {}

func (x *FindCurrentAPINodeVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentAPINodeVersionResponse.ProtoReflect.Descriptor instead.
func (*FindCurrentAPINodeVersionResponse) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{13}
}

func (x *FindCurrentAPINodeVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FindCurrentAPINodeVersionResponse) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *FindCurrentAPINodeVersionResponse) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *FindCurrentAPINodeVersionResponse) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// 获取当前API节点的信息
type FindCurrentAPINodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindCurrentAPINodeRequest) Reset() {
	*x = FindCurrentAPINodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentAPINodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentAPINodeRequest) ProtoMessage() {}

func (x *FindCurrentAPINodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentAPINodeRequest.ProtoReflect.Descriptor instead.
func (*FindCurrentAPINodeRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{14}
}

type FindCurrentAPINodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiNode *APINode `protobuf:"bytes,1,opt,name=apiNode,proto3" json:"apiNode,omitempty"`
}

func (x *FindCurrentAPINodeResponse) Reset() {
	*x = FindCurrentAPINodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentAPINodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentAPINodeResponse) ProtoMessage() {}

func (x *FindCurrentAPINodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentAPINodeResponse.ProtoReflect.Descriptor instead.
func (*FindCurrentAPINodeResponse) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{15}
}

func (x *FindCurrentAPINodeResponse) GetApiNode() *APINode {
	if x != nil {
		return x.ApiNode
	}
	return nil
}

// 计算使用某个SSL证书的API节点数量
type CountAllEnabledAPINodesWithSSLCertIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *CountAllEnabledAPINodesWithSSLCertIdRequest) Reset() {
	*x = CountAllEnabledAPINodesWithSSLCertIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledAPINodesWithSSLCertIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledAPINodesWithSSLCertIdRequest) ProtoMessage() {}

func (x *CountAllEnabledAPINodesWithSSLCertIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledAPINodesWithSSLCertIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledAPINodesWithSSLCertIdRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{16}
}

func (x *CountAllEnabledAPINodesWithSSLCertIdRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

// 修改调试模式状态
type DebugAPINodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug bool `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *DebugAPINodeRequest) Reset() {
	*x = DebugAPINodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugAPINodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugAPINodeRequest) ProtoMessage() {}

func (x *DebugAPINodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugAPINodeRequest.ProtoReflect.Descriptor instead.
func (*DebugAPINodeRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{17}
}

func (x *DebugAPINodeRequest) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

// 上传新版API节点文件
type UploadAPINodeFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename     string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`          // 文件名
	Sum          string `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`                    // 整个文件的SUM值
	ChunkData    []byte `protobuf:"bytes,3,opt,name=chunkData,proto3" json:"chunkData,omitempty"`        // 片段数据
	IsFirstChunk bool   `protobuf:"varint,4,opt,name=isFirstChunk,proto3" json:"isFirstChunk,omitempty"` // 是否为第一个片段
	IsLastChunk  bool   `protobuf:"varint,5,opt,name=isLastChunk,proto3" json:"isLastChunk,omitempty"`   // 是否为最后一个片段
}

func (x *UploadAPINodeFileRequest) Reset() {
	*x = UploadAPINodeFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAPINodeFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAPINodeFileRequest) ProtoMessage() {}

func (x *UploadAPINodeFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAPINodeFileRequest.ProtoReflect.Descriptor instead.
func (*UploadAPINodeFileRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{18}
}

func (x *UploadAPINodeFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UploadAPINodeFileRequest) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

func (x *UploadAPINodeFileRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *UploadAPINodeFileRequest) GetIsFirstChunk() bool {
	if x != nil {
		return x.IsFirstChunk
	}
	return false
}

func (x *UploadAPINodeFileRequest) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

type UploadAPINodeFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadAPINodeFileResponse) Reset() {
	*x = UploadAPINodeFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAPINodeFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAPINodeFileResponse) ProtoMessage() {}

func (x *UploadAPINodeFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAPINodeFileResponse.ProtoReflect.Descriptor instead.
func (*UploadAPINodeFileResponse) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{19}
}

// 上传节点安装文件
type UploadDeployFileToAPINodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename     string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`          // 文件名
	Sum          string `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`                    // 整个文件的SUM值
	ChunkData    []byte `protobuf:"bytes,3,opt,name=chunkData,proto3" json:"chunkData,omitempty"`        // 片段数据
	IsFirstChunk bool   `protobuf:"varint,4,opt,name=isFirstChunk,proto3" json:"isFirstChunk,omitempty"` // 是否为第一个片段
	IsLastChunk  bool   `protobuf:"varint,5,opt,name=isLastChunk,proto3" json:"isLastChunk,omitempty"`   // 是否为最后一个片段
}

func (x *UploadDeployFileToAPINodeRequest) Reset() {
	*x = UploadDeployFileToAPINodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDeployFileToAPINodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDeployFileToAPINodeRequest) ProtoMessage() {}

func (x *UploadDeployFileToAPINodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDeployFileToAPINodeRequest.ProtoReflect.Descriptor instead.
func (*UploadDeployFileToAPINodeRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{20}
}

func (x *UploadDeployFileToAPINodeRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UploadDeployFileToAPINodeRequest) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

func (x *UploadDeployFileToAPINodeRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *UploadDeployFileToAPINodeRequest) GetIsFirstChunk() bool {
	if x != nil {
		return x.IsFirstChunk
	}
	return false
}

func (x *UploadDeployFileToAPINodeRequest) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

// 查找已有节点安装文件信息
type FindLatestDeployFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindLatestDeployFilesRequest) Reset() {
	*x = FindLatestDeployFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestDeployFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestDeployFilesRequest) ProtoMessage() {}

func (x *FindLatestDeployFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestDeployFilesRequest.ProtoReflect.Descriptor instead.
func (*FindLatestDeployFilesRequest) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{21}
}

type FindLatestDeployFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeDeployFiles   []*FindLatestDeployFilesResponse_DeployFile `protobuf:"bytes,1,rep,name=nodeDeployFiles,proto3" json:"nodeDeployFiles,omitempty"`     // 边缘节点
	NsNodeDeployFiles []*FindLatestDeployFilesResponse_DeployFile `protobuf:"bytes,2,rep,name=nsNodeDeployFiles,proto3" json:"nsNodeDeployFiles,omitempty"` // NS节点
}

func (x *FindLatestDeployFilesResponse) Reset() {
	*x = FindLatestDeployFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestDeployFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestDeployFilesResponse) ProtoMessage() {}

func (x *FindLatestDeployFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestDeployFilesResponse.ProtoReflect.Descriptor instead.
func (*FindLatestDeployFilesResponse) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{22}
}

func (x *FindLatestDeployFilesResponse) GetNodeDeployFiles() []*FindLatestDeployFilesResponse_DeployFile {
	if x != nil {
		return x.NodeDeployFiles
	}
	return nil
}

func (x *FindLatestDeployFilesResponse) GetNsNodeDeployFiles() []*FindLatestDeployFilesResponse_DeployFile {
	if x != nil {
		return x.NsNodeDeployFiles
	}
	return nil
}

type FindLatestDeployFilesResponse_DeployFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Os      string `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`           // 操作系统代号
	Arch    string `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`       // 架构
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` // 版本号
}

func (x *FindLatestDeployFilesResponse_DeployFile) Reset() {
	*x = FindLatestDeployFilesResponse_DeployFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_api_node_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestDeployFilesResponse_DeployFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestDeployFilesResponse_DeployFile) ProtoMessage() {}

func (x *FindLatestDeployFilesResponse_DeployFile) ProtoReflect() protoreflect.Message {
	mi := &file_service_api_node_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestDeployFilesResponse_DeployFile.ProtoReflect.Descriptor instead.
func (*FindLatestDeployFilesResponse_DeployFile) Descriptor() ([]byte, []int) {
	return file_service_api_node_proto_rawDescGZIP(), []int{22, 0}
}

func (x *FindLatestDeployFilesResponse_DeployFile) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *FindLatestDeployFilesResponse_DeployFile) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *FindLatestDeployFilesResponse_DeployFile) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_service_api_node_proto protoreflect.FileDescriptor

var file_service_api_node_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64,
	0x64, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x74, 0x49, 0x73, 0x4f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x74, 0x49, 0x73, 0x4f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x53, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x53, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70,
	0x69, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a, 0x53, 0x4f,
	0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x73, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x41, 0x64, 0x64, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x74, 0x49, 0x73, 0x4f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x74, 0x49, 0x73, 0x4f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x48, 0x54, 0x54, 0x50, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x53, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x53, 0x4a,
	0x53, 0x4f, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0x34, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x70,
	0x69, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x61, 0x70,
	0x69, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x61, 0x70, 0x69, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x41, 0x50, 0x49,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x46, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x50, 0x49,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x61, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x39,
	0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x1a, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x50,
	0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x22,
	0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49,
	0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x75, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x50, 0x49, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x2b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50,
	0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x13, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x50,
	0x49, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb4, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x1e, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x1d, 0x46, 0x69, 0x6e,
	0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x11, 0x6e, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x4a,
	0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xf8, 0x09, 0x0a, 0x0e, 0x41,
	0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39,
	0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5d, 0x0a, 0x1c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x27, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x66,
	0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x50, 0x49, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x24, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x50, 0x49, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x64, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_api_node_proto_rawDescOnce sync.Once
	file_service_api_node_proto_rawDescData = file_service_api_node_proto_rawDesc
)

func file_service_api_node_proto_rawDescGZIP() []byte {
	file_service_api_node_proto_rawDescOnce.Do(func() {
		file_service_api_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_api_node_proto_rawDescData)
	})
	return file_service_api_node_proto_rawDescData
}

var file_service_api_node_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_service_api_node_proto_goTypes = []interface{}{
	(*CreateAPINodeRequest)(nil),                        // 0: pb.CreateAPINodeRequest
	(*CreateAPINodeResponse)(nil),                       // 1: pb.CreateAPINodeResponse
	(*UpdateAPINodeRequest)(nil),                        // 2: pb.UpdateAPINodeRequest
	(*DeleteAPINodeRequest)(nil),                        // 3: pb.DeleteAPINodeRequest
	(*FindAllEnabledAPINodesRequest)(nil),               // 4: pb.FindAllEnabledAPINodesRequest
	(*FindAllEnabledAPINodesResponse)(nil),              // 5: pb.FindAllEnabledAPINodesResponse
	(*CountAllEnabledAPINodesRequest)(nil),              // 6: pb.CountAllEnabledAPINodesRequest
	(*CountAllEnabledAndOnAPINodesRequest)(nil),         // 7: pb.CountAllEnabledAndOnAPINodesRequest
	(*ListEnabledAPINodesRequest)(nil),                  // 8: pb.ListEnabledAPINodesRequest
	(*ListEnabledAPINodesResponse)(nil),                 // 9: pb.ListEnabledAPINodesResponse
	(*FindEnabledAPINodeRequest)(nil),                   // 10: pb.FindEnabledAPINodeRequest
	(*FindEnabledAPINodeResponse)(nil),                  // 11: pb.FindEnabledAPINodeResponse
	(*FindCurrentAPINodeVersionRequest)(nil),            // 12: pb.FindCurrentAPINodeVersionRequest
	(*FindCurrentAPINodeVersionResponse)(nil),           // 13: pb.FindCurrentAPINodeVersionResponse
	(*FindCurrentAPINodeRequest)(nil),                   // 14: pb.FindCurrentAPINodeRequest
	(*FindCurrentAPINodeResponse)(nil),                  // 15: pb.FindCurrentAPINodeResponse
	(*CountAllEnabledAPINodesWithSSLCertIdRequest)(nil), // 16: pb.CountAllEnabledAPINodesWithSSLCertIdRequest
	(*DebugAPINodeRequest)(nil),                         // 17: pb.DebugAPINodeRequest
	(*UploadAPINodeFileRequest)(nil),                    // 18: pb.UploadAPINodeFileRequest
	(*UploadAPINodeFileResponse)(nil),                   // 19: pb.UploadAPINodeFileResponse
	(*UploadDeployFileToAPINodeRequest)(nil),            // 20: pb.UploadDeployFileToAPINodeRequest
	(*FindLatestDeployFilesRequest)(nil),                // 21: pb.FindLatestDeployFilesRequest
	(*FindLatestDeployFilesResponse)(nil),               // 22: pb.FindLatestDeployFilesResponse
	(*FindLatestDeployFilesResponse_DeployFile)(nil),    // 23: pb.FindLatestDeployFilesResponse.DeployFile
	(*APINode)(nil),                                     // 24: pb.APINode
	(*RPCSuccess)(nil),                                  // 25: pb.RPCSuccess
	(*RPCCountResponse)(nil),                            // 26: pb.RPCCountResponse
}
var file_service_api_node_proto_depIdxs = []int32{
	24, // 0: pb.FindAllEnabledAPINodesResponse.apiNodes:type_name -> pb.APINode
	24, // 1: pb.ListEnabledAPINodesResponse.apiNodes:type_name -> pb.APINode
	24, // 2: pb.FindEnabledAPINodeResponse.apiNode:type_name -> pb.APINode
	24, // 3: pb.FindCurrentAPINodeResponse.apiNode:type_name -> pb.APINode
	23, // 4: pb.FindLatestDeployFilesResponse.nodeDeployFiles:type_name -> pb.FindLatestDeployFilesResponse.DeployFile
	23, // 5: pb.FindLatestDeployFilesResponse.nsNodeDeployFiles:type_name -> pb.FindLatestDeployFilesResponse.DeployFile
	0,  // 6: pb.APINodeService.createAPINode:input_type -> pb.CreateAPINodeRequest
	2,  // 7: pb.APINodeService.updateAPINode:input_type -> pb.UpdateAPINodeRequest
	3,  // 8: pb.APINodeService.deleteAPINode:input_type -> pb.DeleteAPINodeRequest
	4,  // 9: pb.APINodeService.findAllEnabledAPINodes:input_type -> pb.FindAllEnabledAPINodesRequest
	6,  // 10: pb.APINodeService.countAllEnabledAPINodes:input_type -> pb.CountAllEnabledAPINodesRequest
	7,  // 11: pb.APINodeService.countAllEnabledAndOnAPINodes:input_type -> pb.CountAllEnabledAndOnAPINodesRequest
	8,  // 12: pb.APINodeService.listEnabledAPINodes:input_type -> pb.ListEnabledAPINodesRequest
	10, // 13: pb.APINodeService.findEnabledAPINode:input_type -> pb.FindEnabledAPINodeRequest
	12, // 14: pb.APINodeService.findCurrentAPINodeVersion:input_type -> pb.FindCurrentAPINodeVersionRequest
	14, // 15: pb.APINodeService.findCurrentAPINode:input_type -> pb.FindCurrentAPINodeRequest
	16, // 16: pb.APINodeService.countAllEnabledAPINodesWithSSLCertId:input_type -> pb.CountAllEnabledAPINodesWithSSLCertIdRequest
	17, // 17: pb.APINodeService.debugAPINode:input_type -> pb.DebugAPINodeRequest
	18, // 18: pb.APINodeService.uploadAPINodeFile:input_type -> pb.UploadAPINodeFileRequest
	20, // 19: pb.APINodeService.uploadDeployFileToAPINode:input_type -> pb.UploadDeployFileToAPINodeRequest
	21, // 20: pb.APINodeService.findLatestDeployFiles:input_type -> pb.FindLatestDeployFilesRequest
	1,  // 21: pb.APINodeService.createAPINode:output_type -> pb.CreateAPINodeResponse
	25, // 22: pb.APINodeService.updateAPINode:output_type -> pb.RPCSuccess
	25, // 23: pb.APINodeService.deleteAPINode:output_type -> pb.RPCSuccess
	5,  // 24: pb.APINodeService.findAllEnabledAPINodes:output_type -> pb.FindAllEnabledAPINodesResponse
	26, // 25: pb.APINodeService.countAllEnabledAPINodes:output_type -> pb.RPCCountResponse
	26, // 26: pb.APINodeService.countAllEnabledAndOnAPINodes:output_type -> pb.RPCCountResponse
	9,  // 27: pb.APINodeService.listEnabledAPINodes:output_type -> pb.ListEnabledAPINodesResponse
	11, // 28: pb.APINodeService.findEnabledAPINode:output_type -> pb.FindEnabledAPINodeResponse
	13, // 29: pb.APINodeService.findCurrentAPINodeVersion:output_type -> pb.FindCurrentAPINodeVersionResponse
	15, // 30: pb.APINodeService.findCurrentAPINode:output_type -> pb.FindCurrentAPINodeResponse
	26, // 31: pb.APINodeService.countAllEnabledAPINodesWithSSLCertId:output_type -> pb.RPCCountResponse
	25, // 32: pb.APINodeService.debugAPINode:output_type -> pb.RPCSuccess
	19, // 33: pb.APINodeService.uploadAPINodeFile:output_type -> pb.UploadAPINodeFileResponse
	25, // 34: pb.APINodeService.uploadDeployFileToAPINode:output_type -> pb.RPCSuccess
	22, // 35: pb.APINodeService.findLatestDeployFiles:output_type -> pb.FindLatestDeployFilesResponse
	21, // [21:36] is the sub-list for method output_type
	6,  // [6:21] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_service_api_node_proto_init() }
func file_service_api_node_proto_init() {
	if File_service_api_node_proto != nil {
		return
	}
	file_models_model_api_node_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_api_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAPINodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAPINodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAPINodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAPINodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledAPINodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledAPINodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledAPINodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledAndOnAPINodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledAPINodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledAPINodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledAPINodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledAPINodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentAPINodeVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentAPINodeVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentAPINodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentAPINodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledAPINodesWithSSLCertIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugAPINodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAPINodeFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAPINodeFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDeployFileToAPINodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestDeployFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestDeployFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_api_node_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestDeployFilesResponse_DeployFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_api_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_api_node_proto_goTypes,
		DependencyIndexes: file_service_api_node_proto_depIdxs,
		MessageInfos:      file_service_api_node_proto_msgTypes,
	}.Build()
	File_service_api_node_proto = out.File
	file_service_api_node_proto_rawDesc = nil
	file_service_api_node_proto_goTypes = nil
	file_service_api_node_proto_depIdxs = nil
}
