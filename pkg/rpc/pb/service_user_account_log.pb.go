// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_user_account_log.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 计算日志数量
type CountUserAccountLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccountId int64  `protobuf:"varint,1,opt,name=userAccountId,proto3" json:"userAccountId,omitempty"`
	Keyword       string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	EventType     string `protobuf:"bytes,3,opt,name=eventType,proto3" json:"eventType,omitempty"`
}

func (x *CountUserAccountLogsRequest) Reset() {
	*x = CountUserAccountLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_account_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountUserAccountLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountUserAccountLogsRequest) ProtoMessage() {}

func (x *CountUserAccountLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_account_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountUserAccountLogsRequest.ProtoReflect.Descriptor instead.
func (*CountUserAccountLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_user_account_log_proto_rawDescGZIP(), []int{0}
}

func (x *CountUserAccountLogsRequest) GetUserAccountId() int64 {
	if x != nil {
		return x.UserAccountId
	}
	return 0
}

func (x *CountUserAccountLogsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CountUserAccountLogsRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

// 列出单页日志
type ListUserAccountLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccountId int64  `protobuf:"varint,1,opt,name=userAccountId,proto3" json:"userAccountId,omitempty"`
	Keyword       string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	EventType     string `protobuf:"bytes,3,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListUserAccountLogsRequest) Reset() {
	*x = ListUserAccountLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_account_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserAccountLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserAccountLogsRequest) ProtoMessage() {}

func (x *ListUserAccountLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_account_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserAccountLogsRequest.ProtoReflect.Descriptor instead.
func (*ListUserAccountLogsRequest) Descriptor() ([]byte, []int) {
	return file_service_user_account_log_proto_rawDescGZIP(), []int{1}
}

func (x *ListUserAccountLogsRequest) GetUserAccountId() int64 {
	if x != nil {
		return x.UserAccountId
	}
	return 0
}

func (x *ListUserAccountLogsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListUserAccountLogsRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *ListUserAccountLogsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListUserAccountLogsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListUserAccountLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccountLogs []*UserAccountLog `protobuf:"bytes,1,rep,name=userAccountLogs,proto3" json:"userAccountLogs,omitempty"`
}

func (x *ListUserAccountLogsResponse) Reset() {
	*x = ListUserAccountLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_account_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserAccountLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserAccountLogsResponse) ProtoMessage() {}

func (x *ListUserAccountLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_account_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserAccountLogsResponse.ProtoReflect.Descriptor instead.
func (*ListUserAccountLogsResponse) Descriptor() ([]byte, []int) {
	return file_service_user_account_log_proto_rawDescGZIP(), []int{2}
}

func (x *ListUserAccountLogsResponse) GetUserAccountLogs() []*UserAccountLog {
	if x != nil {
		return x.UserAccountLogs
	}
	return nil
}

var File_service_user_account_log_proto protoreflect.FileDescriptor

var file_service_user_account_log_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x70, 0x62, 0x1a, 0x23, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x5b, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x32, 0xbe, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_user_account_log_proto_rawDescOnce sync.Once
	file_service_user_account_log_proto_rawDescData = file_service_user_account_log_proto_rawDesc
)

func file_service_user_account_log_proto_rawDescGZIP() []byte {
	file_service_user_account_log_proto_rawDescOnce.Do(func() {
		file_service_user_account_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_user_account_log_proto_rawDescData)
	})
	return file_service_user_account_log_proto_rawDescData
}

var file_service_user_account_log_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_service_user_account_log_proto_goTypes = []interface{}{
	(*CountUserAccountLogsRequest)(nil), // 0: pb.CountUserAccountLogsRequest
	(*ListUserAccountLogsRequest)(nil),  // 1: pb.ListUserAccountLogsRequest
	(*ListUserAccountLogsResponse)(nil), // 2: pb.ListUserAccountLogsResponse
	(*UserAccountLog)(nil),              // 3: pb.UserAccountLog
	(*RPCCountResponse)(nil),            // 4: pb.RPCCountResponse
}
var file_service_user_account_log_proto_depIdxs = []int32{
	3, // 0: pb.ListUserAccountLogsResponse.userAccountLogs:type_name -> pb.UserAccountLog
	0, // 1: pb.UserAccountLogService.countUserAccountLogs:input_type -> pb.CountUserAccountLogsRequest
	1, // 2: pb.UserAccountLogService.listUserAccountLogs:input_type -> pb.ListUserAccountLogsRequest
	4, // 3: pb.UserAccountLogService.countUserAccountLogs:output_type -> pb.RPCCountResponse
	2, // 4: pb.UserAccountLogService.listUserAccountLogs:output_type -> pb.ListUserAccountLogsResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_service_user_account_log_proto_init() }
func file_service_user_account_log_proto_init() {
	if File_service_user_account_log_proto != nil {
		return
	}
	file_models_model_user_account_log_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_user_account_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountUserAccountLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_account_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserAccountLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_account_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserAccountLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_user_account_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_user_account_log_proto_goTypes,
		DependencyIndexes: file_service_user_account_log_proto_depIdxs,
		MessageInfos:      file_service_user_account_log_proto_msgTypes,
	}.Build()
	File_service_user_account_log_proto = out.File
	file_service_user_account_log_proto_rawDesc = nil
	file_service_user_account_log_proto_goTypes = nil
	file_service_user_account_log_proto_depIdxs = nil
}
