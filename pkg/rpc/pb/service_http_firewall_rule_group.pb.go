// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_http_firewall_rule_group.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 设置是否启用分组
type UpdateHTTPFirewallRuleGroupIsOnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirewallRuleGroupId int64 `protobuf:"varint,1,opt,name=firewallRuleGroupId,proto3" json:"firewallRuleGroupId,omitempty"`
	IsOn                bool  `protobuf:"varint,2,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateHTTPFirewallRuleGroupIsOnRequest) Reset() {
	*x = UpdateHTTPFirewallRuleGroupIsOnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_firewall_rule_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPFirewallRuleGroupIsOnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPFirewallRuleGroupIsOnRequest) ProtoMessage() {}

func (x *UpdateHTTPFirewallRuleGroupIsOnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_firewall_rule_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPFirewallRuleGroupIsOnRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPFirewallRuleGroupIsOnRequest) Descriptor() ([]byte, []int) {
	return file_service_http_firewall_rule_group_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateHTTPFirewallRuleGroupIsOnRequest) GetFirewallRuleGroupId() int64 {
	if x != nil {
		return x.FirewallRuleGroupId
	}
	return 0
}

func (x *UpdateHTTPFirewallRuleGroupIsOnRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 创建分组
type CreateHTTPFirewallRuleGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOn        bool   `protobuf:"varint,1,opt,name=isOn,proto3" json:"isOn,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateHTTPFirewallRuleGroupRequest) Reset() {
	*x = CreateHTTPFirewallRuleGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_firewall_rule_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPFirewallRuleGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPFirewallRuleGroupRequest) ProtoMessage() {}

func (x *CreateHTTPFirewallRuleGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_firewall_rule_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPFirewallRuleGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateHTTPFirewallRuleGroupRequest) Descriptor() ([]byte, []int) {
	return file_service_http_firewall_rule_group_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHTTPFirewallRuleGroupRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *CreateHTTPFirewallRuleGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateHTTPFirewallRuleGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateHTTPFirewallRuleGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirewallRuleGroupId int64 `protobuf:"varint,1,opt,name=firewallRuleGroupId,proto3" json:"firewallRuleGroupId,omitempty"`
}

func (x *CreateHTTPFirewallRuleGroupResponse) Reset() {
	*x = CreateHTTPFirewallRuleGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_firewall_rule_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPFirewallRuleGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPFirewallRuleGroupResponse) ProtoMessage() {}

func (x *CreateHTTPFirewallRuleGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_firewall_rule_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPFirewallRuleGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateHTTPFirewallRuleGroupResponse) Descriptor() ([]byte, []int) {
	return file_service_http_firewall_rule_group_proto_rawDescGZIP(), []int{2}
}

func (x *CreateHTTPFirewallRuleGroupResponse) GetFirewallRuleGroupId() int64 {
	if x != nil {
		return x.FirewallRuleGroupId
	}
	return 0
}

// 修改分组
type UpdateHTTPFirewallRuleGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirewallRuleGroupId int64  `protobuf:"varint,1,opt,name=firewallRuleGroupId,proto3" json:"firewallRuleGroupId,omitempty"`
	IsOn                bool   `protobuf:"varint,2,opt,name=isOn,proto3" json:"isOn,omitempty"`
	Name                string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description         string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateHTTPFirewallRuleGroupRequest) Reset() {
	*x = UpdateHTTPFirewallRuleGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_firewall_rule_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPFirewallRuleGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPFirewallRuleGroupRequest) ProtoMessage() {}

func (x *UpdateHTTPFirewallRuleGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_firewall_rule_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPFirewallRuleGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPFirewallRuleGroupRequest) Descriptor() ([]byte, []int) {
	return file_service_http_firewall_rule_group_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateHTTPFirewallRuleGroupRequest) GetFirewallRuleGroupId() int64 {
	if x != nil {
		return x.FirewallRuleGroupId
	}
	return 0
}

func (x *UpdateHTTPFirewallRuleGroupRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateHTTPFirewallRuleGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateHTTPFirewallRuleGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 获取分组配置
type FindHTTPFirewallRuleGroupConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirewallRuleGroupId int64 `protobuf:"varint,1,opt,name=firewallRuleGroupId,proto3" json:"firewallRuleGroupId,omitempty"`
}

func (x *FindHTTPFirewallRuleGroupConfigRequest) Reset() {
	*x = FindHTTPFirewallRuleGroupConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_firewall_rule_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPFirewallRuleGroupConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPFirewallRuleGroupConfigRequest) ProtoMessage() {}

func (x *FindHTTPFirewallRuleGroupConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_firewall_rule_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPFirewallRuleGroupConfigRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPFirewallRuleGroupConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_http_firewall_rule_group_proto_rawDescGZIP(), []int{4}
}

func (x *FindHTTPFirewallRuleGroupConfigRequest) GetFirewallRuleGroupId() int64 {
	if x != nil {
		return x.FirewallRuleGroupId
	}
	return 0
}

type FindHTTPFirewallRuleGroupConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirewallRuleGroupJSON []byte `protobuf:"bytes,1,opt,name=firewallRuleGroupJSON,proto3" json:"firewallRuleGroupJSON,omitempty"`
}

func (x *FindHTTPFirewallRuleGroupConfigResponse) Reset() {
	*x = FindHTTPFirewallRuleGroupConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_firewall_rule_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPFirewallRuleGroupConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPFirewallRuleGroupConfigResponse) ProtoMessage() {}

func (x *FindHTTPFirewallRuleGroupConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_firewall_rule_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPFirewallRuleGroupConfigResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPFirewallRuleGroupConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_http_firewall_rule_group_proto_rawDescGZIP(), []int{5}
}

func (x *FindHTTPFirewallRuleGroupConfigResponse) GetFirewallRuleGroupJSON() []byte {
	if x != nil {
		return x.FirewallRuleGroupJSON
	}
	return nil
}

var File_service_http_firewall_rule_group_proto protoreflect.FileDescriptor

var file_service_http_firewall_rule_group_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x12, 0x72, 0x70,
	0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6e, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x73, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e,
	0x22, 0x6e, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x57, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x22, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x26,
	0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x15, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x32, 0xcc, 0x03, 0x0a, 0x1c, 0x48, 0x54,
	0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x1f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x73, 0x4f, 0x6e, 0x12, 0x2a, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x73,
	0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x6e, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x1b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x7a, 0x0a, 0x1f,
	0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_http_firewall_rule_group_proto_rawDescOnce sync.Once
	file_service_http_firewall_rule_group_proto_rawDescData = file_service_http_firewall_rule_group_proto_rawDesc
)

func file_service_http_firewall_rule_group_proto_rawDescGZIP() []byte {
	file_service_http_firewall_rule_group_proto_rawDescOnce.Do(func() {
		file_service_http_firewall_rule_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_http_firewall_rule_group_proto_rawDescData)
	})
	return file_service_http_firewall_rule_group_proto_rawDescData
}

var file_service_http_firewall_rule_group_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_service_http_firewall_rule_group_proto_goTypes = []interface{}{
	(*UpdateHTTPFirewallRuleGroupIsOnRequest)(nil),  // 0: pb.UpdateHTTPFirewallRuleGroupIsOnRequest
	(*CreateHTTPFirewallRuleGroupRequest)(nil),      // 1: pb.CreateHTTPFirewallRuleGroupRequest
	(*CreateHTTPFirewallRuleGroupResponse)(nil),     // 2: pb.CreateHTTPFirewallRuleGroupResponse
	(*UpdateHTTPFirewallRuleGroupRequest)(nil),      // 3: pb.UpdateHTTPFirewallRuleGroupRequest
	(*FindHTTPFirewallRuleGroupConfigRequest)(nil),  // 4: pb.FindHTTPFirewallRuleGroupConfigRequest
	(*FindHTTPFirewallRuleGroupConfigResponse)(nil), // 5: pb.FindHTTPFirewallRuleGroupConfigResponse
	(*RPCUpdateSuccess)(nil),                        // 6: pb.RPCUpdateSuccess
}
var file_service_http_firewall_rule_group_proto_depIdxs = []int32{
	0, // 0: pb.HTTPFirewallRuleGroupService.updateHTTPFirewallRuleGroupIsOn:input_type -> pb.UpdateHTTPFirewallRuleGroupIsOnRequest
	1, // 1: pb.HTTPFirewallRuleGroupService.createHTTPFirewallRuleGroup:input_type -> pb.CreateHTTPFirewallRuleGroupRequest
	3, // 2: pb.HTTPFirewallRuleGroupService.updateHTTPFirewallRuleGroup:input_type -> pb.UpdateHTTPFirewallRuleGroupRequest
	4, // 3: pb.HTTPFirewallRuleGroupService.findHTTPFirewallRuleGroupConfig:input_type -> pb.FindHTTPFirewallRuleGroupConfigRequest
	6, // 4: pb.HTTPFirewallRuleGroupService.updateHTTPFirewallRuleGroupIsOn:output_type -> pb.RPCUpdateSuccess
	2, // 5: pb.HTTPFirewallRuleGroupService.createHTTPFirewallRuleGroup:output_type -> pb.CreateHTTPFirewallRuleGroupResponse
	6, // 6: pb.HTTPFirewallRuleGroupService.updateHTTPFirewallRuleGroup:output_type -> pb.RPCUpdateSuccess
	5, // 7: pb.HTTPFirewallRuleGroupService.findHTTPFirewallRuleGroupConfig:output_type -> pb.FindHTTPFirewallRuleGroupConfigResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_service_http_firewall_rule_group_proto_init() }
func file_service_http_firewall_rule_group_proto_init() {
	if File_service_http_firewall_rule_group_proto != nil {
		return
	}
	file_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_http_firewall_rule_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPFirewallRuleGroupIsOnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_firewall_rule_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPFirewallRuleGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_firewall_rule_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPFirewallRuleGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_firewall_rule_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPFirewallRuleGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_firewall_rule_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPFirewallRuleGroupConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_firewall_rule_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPFirewallRuleGroupConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_http_firewall_rule_group_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_http_firewall_rule_group_proto_goTypes,
		DependencyIndexes: file_service_http_firewall_rule_group_proto_depIdxs,
		MessageInfos:      file_service_http_firewall_rule_group_proto_msgTypes,
	}.Build()
	File_service_http_firewall_rule_group_proto = out.File
	file_service_http_firewall_rule_group_proto_rawDesc = nil
	file_service_http_firewall_rule_group_proto_goTypes = nil
	file_service_http_firewall_rule_group_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HTTPFirewallRuleGroupServiceClient is the client API for HTTPFirewallRuleGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HTTPFirewallRuleGroupServiceClient interface {
	// 设置是否启用分组
	UpdateHTTPFirewallRuleGroupIsOn(ctx context.Context, in *UpdateHTTPFirewallRuleGroupIsOnRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 创建分组
	CreateHTTPFirewallRuleGroup(ctx context.Context, in *CreateHTTPFirewallRuleGroupRequest, opts ...grpc.CallOption) (*CreateHTTPFirewallRuleGroupResponse, error)
	// 修改分组
	UpdateHTTPFirewallRuleGroup(ctx context.Context, in *UpdateHTTPFirewallRuleGroupRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 获取分组配置
	FindHTTPFirewallRuleGroupConfig(ctx context.Context, in *FindHTTPFirewallRuleGroupConfigRequest, opts ...grpc.CallOption) (*FindHTTPFirewallRuleGroupConfigResponse, error)
}

type hTTPFirewallRuleGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPFirewallRuleGroupServiceClient(cc grpc.ClientConnInterface) HTTPFirewallRuleGroupServiceClient {
	return &hTTPFirewallRuleGroupServiceClient{cc}
}

func (c *hTTPFirewallRuleGroupServiceClient) UpdateHTTPFirewallRuleGroupIsOn(ctx context.Context, in *UpdateHTTPFirewallRuleGroupIsOnRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPFirewallRuleGroupService/updateHTTPFirewallRuleGroupIsOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPFirewallRuleGroupServiceClient) CreateHTTPFirewallRuleGroup(ctx context.Context, in *CreateHTTPFirewallRuleGroupRequest, opts ...grpc.CallOption) (*CreateHTTPFirewallRuleGroupResponse, error) {
	out := new(CreateHTTPFirewallRuleGroupResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPFirewallRuleGroupService/createHTTPFirewallRuleGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPFirewallRuleGroupServiceClient) UpdateHTTPFirewallRuleGroup(ctx context.Context, in *UpdateHTTPFirewallRuleGroupRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPFirewallRuleGroupService/updateHTTPFirewallRuleGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPFirewallRuleGroupServiceClient) FindHTTPFirewallRuleGroupConfig(ctx context.Context, in *FindHTTPFirewallRuleGroupConfigRequest, opts ...grpc.CallOption) (*FindHTTPFirewallRuleGroupConfigResponse, error) {
	out := new(FindHTTPFirewallRuleGroupConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPFirewallRuleGroupService/findHTTPFirewallRuleGroupConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPFirewallRuleGroupServiceServer is the server API for HTTPFirewallRuleGroupService service.
type HTTPFirewallRuleGroupServiceServer interface {
	// 设置是否启用分组
	UpdateHTTPFirewallRuleGroupIsOn(context.Context, *UpdateHTTPFirewallRuleGroupIsOnRequest) (*RPCUpdateSuccess, error)
	// 创建分组
	CreateHTTPFirewallRuleGroup(context.Context, *CreateHTTPFirewallRuleGroupRequest) (*CreateHTTPFirewallRuleGroupResponse, error)
	// 修改分组
	UpdateHTTPFirewallRuleGroup(context.Context, *UpdateHTTPFirewallRuleGroupRequest) (*RPCUpdateSuccess, error)
	// 获取分组配置
	FindHTTPFirewallRuleGroupConfig(context.Context, *FindHTTPFirewallRuleGroupConfigRequest) (*FindHTTPFirewallRuleGroupConfigResponse, error)
}

// UnimplementedHTTPFirewallRuleGroupServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHTTPFirewallRuleGroupServiceServer struct {
}

func (*UnimplementedHTTPFirewallRuleGroupServiceServer) UpdateHTTPFirewallRuleGroupIsOn(context.Context, *UpdateHTTPFirewallRuleGroupIsOnRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPFirewallRuleGroupIsOn not implemented")
}
func (*UnimplementedHTTPFirewallRuleGroupServiceServer) CreateHTTPFirewallRuleGroup(context.Context, *CreateHTTPFirewallRuleGroupRequest) (*CreateHTTPFirewallRuleGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHTTPFirewallRuleGroup not implemented")
}
func (*UnimplementedHTTPFirewallRuleGroupServiceServer) UpdateHTTPFirewallRuleGroup(context.Context, *UpdateHTTPFirewallRuleGroupRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPFirewallRuleGroup not implemented")
}
func (*UnimplementedHTTPFirewallRuleGroupServiceServer) FindHTTPFirewallRuleGroupConfig(context.Context, *FindHTTPFirewallRuleGroupConfigRequest) (*FindHTTPFirewallRuleGroupConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHTTPFirewallRuleGroupConfig not implemented")
}

func RegisterHTTPFirewallRuleGroupServiceServer(s *grpc.Server, srv HTTPFirewallRuleGroupServiceServer) {
	s.RegisterService(&_HTTPFirewallRuleGroupService_serviceDesc, srv)
}

func _HTTPFirewallRuleGroupService_UpdateHTTPFirewallRuleGroupIsOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPFirewallRuleGroupIsOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPFirewallRuleGroupServiceServer).UpdateHTTPFirewallRuleGroupIsOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPFirewallRuleGroupService/UpdateHTTPFirewallRuleGroupIsOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPFirewallRuleGroupServiceServer).UpdateHTTPFirewallRuleGroupIsOn(ctx, req.(*UpdateHTTPFirewallRuleGroupIsOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPFirewallRuleGroupService_CreateHTTPFirewallRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHTTPFirewallRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPFirewallRuleGroupServiceServer).CreateHTTPFirewallRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPFirewallRuleGroupService/CreateHTTPFirewallRuleGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPFirewallRuleGroupServiceServer).CreateHTTPFirewallRuleGroup(ctx, req.(*CreateHTTPFirewallRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPFirewallRuleGroupService_UpdateHTTPFirewallRuleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPFirewallRuleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPFirewallRuleGroupServiceServer).UpdateHTTPFirewallRuleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPFirewallRuleGroupService/UpdateHTTPFirewallRuleGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPFirewallRuleGroupServiceServer).UpdateHTTPFirewallRuleGroup(ctx, req.(*UpdateHTTPFirewallRuleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPFirewallRuleGroupService_FindHTTPFirewallRuleGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHTTPFirewallRuleGroupConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPFirewallRuleGroupServiceServer).FindHTTPFirewallRuleGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPFirewallRuleGroupService/FindHTTPFirewallRuleGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPFirewallRuleGroupServiceServer).FindHTTPFirewallRuleGroupConfig(ctx, req.(*FindHTTPFirewallRuleGroupConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTPFirewallRuleGroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HTTPFirewallRuleGroupService",
	HandlerType: (*HTTPFirewallRuleGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updateHTTPFirewallRuleGroupIsOn",
			Handler:    _HTTPFirewallRuleGroupService_UpdateHTTPFirewallRuleGroupIsOn_Handler,
		},
		{
			MethodName: "createHTTPFirewallRuleGroup",
			Handler:    _HTTPFirewallRuleGroupService_CreateHTTPFirewallRuleGroup_Handler,
		},
		{
			MethodName: "updateHTTPFirewallRuleGroup",
			Handler:    _HTTPFirewallRuleGroupService_UpdateHTTPFirewallRuleGroup_Handler,
		},
		{
			MethodName: "findHTTPFirewallRuleGroupConfig",
			Handler:    _HTTPFirewallRuleGroupService_FindHTTPFirewallRuleGroupConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_http_firewall_rule_group.proto",
}
