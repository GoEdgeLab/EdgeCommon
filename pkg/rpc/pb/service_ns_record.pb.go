// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_ns_record.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建记录
type CreateNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId  int64  `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value       string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Ttl         int32  `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Deprecated: Do not use.
	NsRouteIds   []int64  `protobuf:"varint,7,rep,packed,name=nsRouteIds,proto3" json:"nsRouteIds,omitempty"`
	NsRouteCodes []string `protobuf:"bytes,8,rep,name=nsRouteCodes,proto3" json:"nsRouteCodes,omitempty"` // 路线代号
}

func (x *CreateNSRecordRequest) Reset() {
	*x = CreateNSRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSRecordRequest) ProtoMessage() {}

func (x *CreateNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNSRecordRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *CreateNSRecordRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateNSRecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNSRecordRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateNSRecordRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateNSRecordRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// Deprecated: Do not use.
func (x *CreateNSRecordRequest) GetNsRouteIds() []int64 {
	if x != nil {
		return x.NsRouteIds
	}
	return nil
}

func (x *CreateNSRecordRequest) GetNsRouteCodes() []string {
	if x != nil {
		return x.NsRouteCodes
	}
	return nil
}

type CreateNSRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecordId int64 `protobuf:"varint,1,opt,name=nsRecordId,proto3" json:"nsRecordId,omitempty"`
}

func (x *CreateNSRecordResponse) Reset() {
	*x = CreateNSRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSRecordResponse) ProtoMessage() {}

func (x *CreateNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSRecordResponse.ProtoReflect.Descriptor instead.
func (*CreateNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNSRecordResponse) GetNsRecordId() int64 {
	if x != nil {
		return x.NsRecordId
	}
	return 0
}

// 批量创建记录
type CreateNSRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId   int64    `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	Description  string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Names        []string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	Type         string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value        string   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Ttl          int32    `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	NsRouteCodes []string `protobuf:"bytes,7,rep,name=nsRouteCodes,proto3" json:"nsRouteCodes,omitempty"` // 路线代号
}

func (x *CreateNSRecordsRequest) Reset() {
	*x = CreateNSRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSRecordsRequest) ProtoMessage() {}

func (x *CreateNSRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSRecordsRequest.ProtoReflect.Descriptor instead.
func (*CreateNSRecordsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{2}
}

func (x *CreateNSRecordsRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *CreateNSRecordsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateNSRecordsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *CreateNSRecordsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateNSRecordsRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateNSRecordsRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CreateNSRecordsRequest) GetNsRouteCodes() []string {
	if x != nil {
		return x.NsRouteCodes
	}
	return nil
}

type CreateNSRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecordIds []int64 `protobuf:"varint,1,rep,packed,name=nsRecordIds,proto3" json:"nsRecordIds,omitempty"`
}

func (x *CreateNSRecordsResponse) Reset() {
	*x = CreateNSRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSRecordsResponse) ProtoMessage() {}

func (x *CreateNSRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSRecordsResponse.ProtoReflect.Descriptor instead.
func (*CreateNSRecordsResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNSRecordsResponse) GetNsRecordIds() []int64 {
	if x != nil {
		return x.NsRecordIds
	}
	return nil
}

// 为一组域名批量创建记录
type CreateNSRecordsWithDomainNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainNames []string `protobuf:"bytes,1,rep,name=nsDomainNames,proto3" json:"nsDomainNames,omitempty"`
	RecordsJSON   []byte   `protobuf:"bytes,2,opt,name=recordsJSON,proto3" json:"recordsJSON,omitempty"`
	RemoveOld     bool     `protobuf:"varint,3,opt,name=removeOld,proto3" json:"removeOld,omitempty"`
	RemoveAll     bool     `protobuf:"varint,4,opt,name=removeAll,proto3" json:"removeAll,omitempty"`
	UserId        int64    `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CreateNSRecordsWithDomainNamesRequest) Reset() {
	*x = CreateNSRecordsWithDomainNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSRecordsWithDomainNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSRecordsWithDomainNamesRequest) ProtoMessage() {}

func (x *CreateNSRecordsWithDomainNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSRecordsWithDomainNamesRequest.ProtoReflect.Descriptor instead.
func (*CreateNSRecordsWithDomainNamesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNSRecordsWithDomainNamesRequest) GetNsDomainNames() []string {
	if x != nil {
		return x.NsDomainNames
	}
	return nil
}

func (x *CreateNSRecordsWithDomainNamesRequest) GetRecordsJSON() []byte {
	if x != nil {
		return x.RecordsJSON
	}
	return nil
}

func (x *CreateNSRecordsWithDomainNamesRequest) GetRemoveOld() bool {
	if x != nil {
		return x.RemoveOld
	}
	return false
}

func (x *CreateNSRecordsWithDomainNamesRequest) GetRemoveAll() bool {
	if x != nil {
		return x.RemoveAll
	}
	return false
}

func (x *CreateNSRecordsWithDomainNamesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 批量修改一组域名的一组记录
type UpdateNSRecordsWithDomainNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainNames      []string `protobuf:"bytes,1,rep,name=nsDomainNames,proto3" json:"nsDomainNames,omitempty"`
	SearchName         string   `protobuf:"bytes,2,opt,name=searchName,proto3" json:"searchName,omitempty"`
	SearchValue        string   `protobuf:"bytes,3,opt,name=searchValue,proto3" json:"searchValue,omitempty"`
	SearchType         string   `protobuf:"bytes,4,opt,name=searchType,proto3" json:"searchType,omitempty"`
	SearchNSRouteCodes []string `protobuf:"bytes,5,rep,name=searchNSRouteCodes,proto3" json:"searchNSRouteCodes,omitempty"`
	NewName            string   `protobuf:"bytes,6,opt,name=newName,proto3" json:"newName,omitempty"`
	NewValue           string   `protobuf:"bytes,7,opt,name=newValue,proto3" json:"newValue,omitempty"`
	NewType            string   `protobuf:"bytes,8,opt,name=newType,proto3" json:"newType,omitempty"`
	NewNSRouteCodes    []string `protobuf:"bytes,9,rep,name=newNSRouteCodes,proto3" json:"newNSRouteCodes,omitempty"`
	UserId             int64    `protobuf:"varint,10,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UpdateNSRecordsWithDomainNamesRequest) Reset() {
	*x = UpdateNSRecordsWithDomainNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSRecordsWithDomainNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSRecordsWithDomainNamesRequest) ProtoMessage() {}

func (x *UpdateNSRecordsWithDomainNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSRecordsWithDomainNamesRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSRecordsWithDomainNamesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateNSRecordsWithDomainNamesRequest) GetNsDomainNames() []string {
	if x != nil {
		return x.NsDomainNames
	}
	return nil
}

func (x *UpdateNSRecordsWithDomainNamesRequest) GetSearchName() string {
	if x != nil {
		return x.SearchName
	}
	return ""
}

func (x *UpdateNSRecordsWithDomainNamesRequest) GetSearchValue() string {
	if x != nil {
		return x.SearchValue
	}
	return ""
}

func (x *UpdateNSRecordsWithDomainNamesRequest) GetSearchType() string {
	if x != nil {
		return x.SearchType
	}
	return ""
}

func (x *UpdateNSRecordsWithDomainNamesRequest) GetSearchNSRouteCodes() []string {
	if x != nil {
		return x.SearchNSRouteCodes
	}
	return nil
}

func (x *UpdateNSRecordsWithDomainNamesRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *UpdateNSRecordsWithDomainNamesRequest) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *UpdateNSRecordsWithDomainNamesRequest) GetNewType() string {
	if x != nil {
		return x.NewType
	}
	return ""
}

func (x *UpdateNSRecordsWithDomainNamesRequest) GetNewNSRouteCodes() []string {
	if x != nil {
		return x.NewNSRouteCodes
	}
	return nil
}

func (x *UpdateNSRecordsWithDomainNamesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 批量删除一组域名的一组记录
type DeleteNSRecordsWithDomainNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainNames      []string `protobuf:"bytes,1,rep,name=nsDomainNames,proto3" json:"nsDomainNames,omitempty"`
	SearchName         string   `protobuf:"bytes,2,opt,name=searchName,proto3" json:"searchName,omitempty"`
	SearchValue        string   `protobuf:"bytes,3,opt,name=searchValue,proto3" json:"searchValue,omitempty"`
	SearchType         string   `protobuf:"bytes,4,opt,name=searchType,proto3" json:"searchType,omitempty"`
	SearchNSRouteCodes []string `protobuf:"bytes,5,rep,name=searchNSRouteCodes,proto3" json:"searchNSRouteCodes,omitempty"`
	UserId             int64    `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *DeleteNSRecordsWithDomainNamesRequest) Reset() {
	*x = DeleteNSRecordsWithDomainNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNSRecordsWithDomainNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNSRecordsWithDomainNamesRequest) ProtoMessage() {}

func (x *DeleteNSRecordsWithDomainNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNSRecordsWithDomainNamesRequest.ProtoReflect.Descriptor instead.
func (*DeleteNSRecordsWithDomainNamesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteNSRecordsWithDomainNamesRequest) GetNsDomainNames() []string {
	if x != nil {
		return x.NsDomainNames
	}
	return nil
}

func (x *DeleteNSRecordsWithDomainNamesRequest) GetSearchName() string {
	if x != nil {
		return x.SearchName
	}
	return ""
}

func (x *DeleteNSRecordsWithDomainNamesRequest) GetSearchValue() string {
	if x != nil {
		return x.SearchValue
	}
	return ""
}

func (x *DeleteNSRecordsWithDomainNamesRequest) GetSearchType() string {
	if x != nil {
		return x.SearchType
	}
	return ""
}

func (x *DeleteNSRecordsWithDomainNamesRequest) GetSearchNSRouteCodes() []string {
	if x != nil {
		return x.SearchNSRouteCodes
	}
	return nil
}

func (x *DeleteNSRecordsWithDomainNamesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 批量一组域名的一组记录启用状态
type UpdateNSRecordsIsOnWithDomainNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainNames      []string `protobuf:"bytes,1,rep,name=nsDomainNames,proto3" json:"nsDomainNames,omitempty"`
	SearchName         string   `protobuf:"bytes,2,opt,name=searchName,proto3" json:"searchName,omitempty"`
	SearchValue        string   `protobuf:"bytes,3,opt,name=searchValue,proto3" json:"searchValue,omitempty"`
	SearchType         string   `protobuf:"bytes,4,opt,name=searchType,proto3" json:"searchType,omitempty"`
	SearchNSRouteCodes []string `protobuf:"bytes,5,rep,name=searchNSRouteCodes,proto3" json:"searchNSRouteCodes,omitempty"`
	IsOn               bool     `protobuf:"varint,6,opt,name=isOn,proto3" json:"isOn,omitempty"`
	UserId             int64    `protobuf:"varint,7,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UpdateNSRecordsIsOnWithDomainNamesRequest) Reset() {
	*x = UpdateNSRecordsIsOnWithDomainNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSRecordsIsOnWithDomainNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSRecordsIsOnWithDomainNamesRequest) ProtoMessage() {}

func (x *UpdateNSRecordsIsOnWithDomainNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSRecordsIsOnWithDomainNamesRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSRecordsIsOnWithDomainNamesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNSRecordsIsOnWithDomainNamesRequest) GetNsDomainNames() []string {
	if x != nil {
		return x.NsDomainNames
	}
	return nil
}

func (x *UpdateNSRecordsIsOnWithDomainNamesRequest) GetSearchName() string {
	if x != nil {
		return x.SearchName
	}
	return ""
}

func (x *UpdateNSRecordsIsOnWithDomainNamesRequest) GetSearchValue() string {
	if x != nil {
		return x.SearchValue
	}
	return ""
}

func (x *UpdateNSRecordsIsOnWithDomainNamesRequest) GetSearchType() string {
	if x != nil {
		return x.SearchType
	}
	return ""
}

func (x *UpdateNSRecordsIsOnWithDomainNamesRequest) GetSearchNSRouteCodes() []string {
	if x != nil {
		return x.SearchNSRouteCodes
	}
	return nil
}

func (x *UpdateNSRecordsIsOnWithDomainNamesRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateNSRecordsIsOnWithDomainNamesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 导入域名解析
type ImportNSRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecords []*ImportNSRecordsRequest_Record `protobuf:"bytes,1,rep,name=nsRecords,proto3" json:"nsRecords,omitempty"`
	UserId    int64                            `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ImportNSRecordsRequest) Reset() {
	*x = ImportNSRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportNSRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportNSRecordsRequest) ProtoMessage() {}

func (x *ImportNSRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportNSRecordsRequest.ProtoReflect.Descriptor instead.
func (*ImportNSRecordsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{8}
}

func (x *ImportNSRecordsRequest) GetNsRecords() []*ImportNSRecordsRequest_Record {
	if x != nil {
		return x.NsRecords
	}
	return nil
}

func (x *ImportNSRecordsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 修改记录
type UpdateNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecordId  int64  `protobuf:"varint,1,opt,name=nsRecordId,proto3" json:"nsRecordId,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value       string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Ttl         int32  `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Deprecated: Do not use.
	NsRouteIds   []int64  `protobuf:"varint,7,rep,packed,name=nsRouteIds,proto3" json:"nsRouteIds,omitempty"`
	IsOn         bool     `protobuf:"varint,8,opt,name=isOn,proto3" json:"isOn,omitempty"`
	NsRouteCodes []string `protobuf:"bytes,9,rep,name=nsRouteCodes,proto3" json:"nsRouteCodes,omitempty"` // 路线代号
}

func (x *UpdateNSRecordRequest) Reset() {
	*x = UpdateNSRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSRecordRequest) ProtoMessage() {}

func (x *UpdateNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSRecordRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateNSRecordRequest) GetNsRecordId() int64 {
	if x != nil {
		return x.NsRecordId
	}
	return 0
}

func (x *UpdateNSRecordRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateNSRecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNSRecordRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateNSRecordRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateNSRecordRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// Deprecated: Do not use.
func (x *UpdateNSRecordRequest) GetNsRouteIds() []int64 {
	if x != nil {
		return x.NsRouteIds
	}
	return nil
}

func (x *UpdateNSRecordRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateNSRecordRequest) GetNsRouteCodes() []string {
	if x != nil {
		return x.NsRouteCodes
	}
	return nil
}

// 删除记录
type DeleteNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecordId int64 `protobuf:"varint,1,opt,name=nsRecordId,proto3" json:"nsRecordId,omitempty"`
}

func (x *DeleteNSRecordRequest) Reset() {
	*x = DeleteNSRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNSRecordRequest) ProtoMessage() {}

func (x *DeleteNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNSRecordRequest.ProtoReflect.Descriptor instead.
func (*DeleteNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteNSRecordRequest) GetNsRecordId() int64 {
	if x != nil {
		return x.NsRecordId
	}
	return 0
}

// 计算记录数量
type CountAllNSRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64  `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Deprecated: Do not use.
	NsRouteId   int64  `protobuf:"varint,3,opt,name=nsRouteId,proto3" json:"nsRouteId,omitempty"` // 使用nsRouteCode代替
	NsRouteCode string `protobuf:"bytes,5,opt,name=nsRouteCode,proto3" json:"nsRouteCode,omitempty"`
	Keyword     string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *CountAllNSRecordsRequest) Reset() {
	*x = CountAllNSRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllNSRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllNSRecordsRequest) ProtoMessage() {}

func (x *CountAllNSRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllNSRecordsRequest.ProtoReflect.Descriptor instead.
func (*CountAllNSRecordsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{11}
}

func (x *CountAllNSRecordsRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *CountAllNSRecordsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Deprecated: Do not use.
func (x *CountAllNSRecordsRequest) GetNsRouteId() int64 {
	if x != nil {
		return x.NsRouteId
	}
	return 0
}

func (x *CountAllNSRecordsRequest) GetNsRouteCode() string {
	if x != nil {
		return x.NsRouteCode
	}
	return ""
}

func (x *CountAllNSRecordsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

// 读取单页记录
type ListNSRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64  `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Deprecated: Do not use.
	NsRouteId   int64  `protobuf:"varint,3,opt,name=nsRouteId,proto3" json:"nsRouteId,omitempty"` // 使用nsRouteCode代替
	NsRouteCode string `protobuf:"bytes,7,opt,name=nsRouteCode,proto3" json:"nsRouteCode,omitempty"`
	Keyword     string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
	NameAsc     bool   `protobuf:"varint,8,opt,name=nameAsc,proto3" json:"nameAsc,omitempty"`
	NameDesc    bool   `protobuf:"varint,9,opt,name=nameDesc,proto3" json:"nameDesc,omitempty"`
	TypeAsc     bool   `protobuf:"varint,10,opt,name=typeAsc,proto3" json:"typeAsc,omitempty"`
	TypeDesc    bool   `protobuf:"varint,11,opt,name=typeDesc,proto3" json:"typeDesc,omitempty"`
	TtlAsc      bool   `protobuf:"varint,12,opt,name=ttlAsc,proto3" json:"ttlAsc,omitempty"`
	TtlDesc     bool   `protobuf:"varint,13,opt,name=ttlDesc,proto3" json:"ttlDesc,omitempty"`
	Offset      int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Size        int64  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListNSRecordsRequest) Reset() {
	*x = ListNSRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSRecordsRequest) ProtoMessage() {}

func (x *ListNSRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListNSRecordsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{12}
}

func (x *ListNSRecordsRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *ListNSRecordsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Deprecated: Do not use.
func (x *ListNSRecordsRequest) GetNsRouteId() int64 {
	if x != nil {
		return x.NsRouteId
	}
	return 0
}

func (x *ListNSRecordsRequest) GetNsRouteCode() string {
	if x != nil {
		return x.NsRouteCode
	}
	return ""
}

func (x *ListNSRecordsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListNSRecordsRequest) GetNameAsc() bool {
	if x != nil {
		return x.NameAsc
	}
	return false
}

func (x *ListNSRecordsRequest) GetNameDesc() bool {
	if x != nil {
		return x.NameDesc
	}
	return false
}

func (x *ListNSRecordsRequest) GetTypeAsc() bool {
	if x != nil {
		return x.TypeAsc
	}
	return false
}

func (x *ListNSRecordsRequest) GetTypeDesc() bool {
	if x != nil {
		return x.TypeDesc
	}
	return false
}

func (x *ListNSRecordsRequest) GetTtlAsc() bool {
	if x != nil {
		return x.TtlAsc
	}
	return false
}

func (x *ListNSRecordsRequest) GetTtlDesc() bool {
	if x != nil {
		return x.TtlDesc
	}
	return false
}

func (x *ListNSRecordsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNSRecordsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListNSRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecords []*NSRecord `protobuf:"bytes,1,rep,name=nsRecords,proto3" json:"nsRecords,omitempty"`
}

func (x *ListNSRecordsResponse) Reset() {
	*x = ListNSRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSRecordsResponse) ProtoMessage() {}

func (x *ListNSRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListNSRecordsResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{13}
}

func (x *ListNSRecordsResponse) GetNsRecords() []*NSRecord {
	if x != nil {
		return x.NsRecords
	}
	return nil
}

// 查询单个记录信息
type FindNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecordId int64 `protobuf:"varint,1,opt,name=nsRecordId,proto3" json:"nsRecordId,omitempty"`
}

func (x *FindNSRecordRequest) Reset() {
	*x = FindNSRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSRecordRequest) ProtoMessage() {}

func (x *FindNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSRecordRequest.ProtoReflect.Descriptor instead.
func (*FindNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{14}
}

func (x *FindNSRecordRequest) GetNsRecordId() int64 {
	if x != nil {
		return x.NsRecordId
	}
	return 0
}

type FindNSRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecord *NSRecord `protobuf:"bytes,1,opt,name=nsRecord,proto3" json:"nsRecord,omitempty"`
}

func (x *FindNSRecordResponse) Reset() {
	*x = FindNSRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSRecordResponse) ProtoMessage() {}

func (x *FindNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSRecordResponse.ProtoReflect.Descriptor instead.
func (*FindNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{15}
}

func (x *FindNSRecordResponse) GetNsRecord() *NSRecord {
	if x != nil {
		return x.NsRecord
	}
	return nil
}

// 根据版本列出一组记录
type ListNSRecordsAfterVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Size    int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListNSRecordsAfterVersionRequest) Reset() {
	*x = ListNSRecordsAfterVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSRecordsAfterVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSRecordsAfterVersionRequest) ProtoMessage() {}

func (x *ListNSRecordsAfterVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSRecordsAfterVersionRequest.ProtoReflect.Descriptor instead.
func (*ListNSRecordsAfterVersionRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{16}
}

func (x *ListNSRecordsAfterVersionRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListNSRecordsAfterVersionRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListNSRecordsAfterVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecords []*NSRecord `protobuf:"bytes,1,rep,name=nsRecords,proto3" json:"nsRecords,omitempty"`
}

func (x *ListNSRecordsAfterVersionResponse) Reset() {
	*x = ListNSRecordsAfterVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSRecordsAfterVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSRecordsAfterVersionResponse) ProtoMessage() {}

func (x *ListNSRecordsAfterVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSRecordsAfterVersionResponse.ProtoReflect.Descriptor instead.
func (*ListNSRecordsAfterVersionResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{17}
}

func (x *ListNSRecordsAfterVersionResponse) GetNsRecords() []*NSRecord {
	if x != nil {
		return x.NsRecords
	}
	return nil
}

type ImportNSRecordsRequest_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainName string `protobuf:"bytes,1,opt,name=nsDomainName,proto3" json:"nsDomainName,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type         string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Value        string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Ttl          int32  `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *ImportNSRecordsRequest_Record) Reset() {
	*x = ImportNSRecordsRequest_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportNSRecordsRequest_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportNSRecordsRequest_Record) ProtoMessage() {}

func (x *ImportNSRecordsRequest_Record) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportNSRecordsRequest_Record.ProtoReflect.Descriptor instead.
func (*ImportNSRecordsRequest_Record) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ImportNSRecordsRequest_Record) GetNsDomainName() string {
	if x != nil {
		return x.NsDomainName
	}
	return ""
}

func (x *ImportNSRecordsRequest_Record) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImportNSRecordsRequest_Record) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ImportNSRecordsRequest_Record) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ImportNSRecordsRequest_Record) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

var File_service_ns_record_proto protoreflect.FileDescriptor

var file_service_ns_record_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x6e, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x74, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x25, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x6e, 0x65, 0x77, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf7,
	0x01, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8f, 0x02, 0x0a, 0x29, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x73, 0x4f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x4f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x16, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x6e, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x7c,
	0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x85, 0x02, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0a, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x4f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xac, 0x01,
	0x0a, 0x18, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x09, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xf2, 0x02, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x73, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x09, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x41,
	0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x73,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x41, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x41, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x74, 0x6c, 0x41, 0x73, 0x63, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x74, 0x6c, 0x41, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x74, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x74,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x43, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x6e, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x40, 0x0a,
	0x14, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0x50, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x4f, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x32, 0x97, 0x08, 0x0a, 0x0f, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x1e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x1e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x1e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x63, 0x0a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x73, 0x4f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x73, 0x4f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x47, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6c, 0x69, 0x73,
	0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04,
	0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_ns_record_proto_rawDescOnce sync.Once
	file_service_ns_record_proto_rawDescData = file_service_ns_record_proto_rawDesc
)

func file_service_ns_record_proto_rawDescGZIP() []byte {
	file_service_ns_record_proto_rawDescOnce.Do(func() {
		file_service_ns_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ns_record_proto_rawDescData)
	})
	return file_service_ns_record_proto_rawDescData
}

var file_service_ns_record_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_service_ns_record_proto_goTypes = []interface{}{
	(*CreateNSRecordRequest)(nil),                     // 0: pb.CreateNSRecordRequest
	(*CreateNSRecordResponse)(nil),                    // 1: pb.CreateNSRecordResponse
	(*CreateNSRecordsRequest)(nil),                    // 2: pb.CreateNSRecordsRequest
	(*CreateNSRecordsResponse)(nil),                   // 3: pb.CreateNSRecordsResponse
	(*CreateNSRecordsWithDomainNamesRequest)(nil),     // 4: pb.CreateNSRecordsWithDomainNamesRequest
	(*UpdateNSRecordsWithDomainNamesRequest)(nil),     // 5: pb.UpdateNSRecordsWithDomainNamesRequest
	(*DeleteNSRecordsWithDomainNamesRequest)(nil),     // 6: pb.DeleteNSRecordsWithDomainNamesRequest
	(*UpdateNSRecordsIsOnWithDomainNamesRequest)(nil), // 7: pb.UpdateNSRecordsIsOnWithDomainNamesRequest
	(*ImportNSRecordsRequest)(nil),                    // 8: pb.ImportNSRecordsRequest
	(*UpdateNSRecordRequest)(nil),                     // 9: pb.UpdateNSRecordRequest
	(*DeleteNSRecordRequest)(nil),                     // 10: pb.DeleteNSRecordRequest
	(*CountAllNSRecordsRequest)(nil),                  // 11: pb.CountAllNSRecordsRequest
	(*ListNSRecordsRequest)(nil),                      // 12: pb.ListNSRecordsRequest
	(*ListNSRecordsResponse)(nil),                     // 13: pb.ListNSRecordsResponse
	(*FindNSRecordRequest)(nil),                       // 14: pb.FindNSRecordRequest
	(*FindNSRecordResponse)(nil),                      // 15: pb.FindNSRecordResponse
	(*ListNSRecordsAfterVersionRequest)(nil),          // 16: pb.ListNSRecordsAfterVersionRequest
	(*ListNSRecordsAfterVersionResponse)(nil),         // 17: pb.ListNSRecordsAfterVersionResponse
	(*ImportNSRecordsRequest_Record)(nil),             // 18: pb.ImportNSRecordsRequest.Record
	(*NSRecord)(nil),                                  // 19: pb.NSRecord
	(*RPCSuccess)(nil),                                // 20: pb.RPCSuccess
	(*RPCCountResponse)(nil),                          // 21: pb.RPCCountResponse
}
var file_service_ns_record_proto_depIdxs = []int32{
	18, // 0: pb.ImportNSRecordsRequest.nsRecords:type_name -> pb.ImportNSRecordsRequest.Record
	19, // 1: pb.ListNSRecordsResponse.nsRecords:type_name -> pb.NSRecord
	19, // 2: pb.FindNSRecordResponse.nsRecord:type_name -> pb.NSRecord
	19, // 3: pb.ListNSRecordsAfterVersionResponse.nsRecords:type_name -> pb.NSRecord
	0,  // 4: pb.NSRecordService.createNSRecord:input_type -> pb.CreateNSRecordRequest
	2,  // 5: pb.NSRecordService.createNSRecords:input_type -> pb.CreateNSRecordsRequest
	4,  // 6: pb.NSRecordService.createNSRecordsWithDomainNames:input_type -> pb.CreateNSRecordsWithDomainNamesRequest
	5,  // 7: pb.NSRecordService.updateNSRecordsWithDomainNames:input_type -> pb.UpdateNSRecordsWithDomainNamesRequest
	6,  // 8: pb.NSRecordService.deleteNSRecordsWithDomainNames:input_type -> pb.DeleteNSRecordsWithDomainNamesRequest
	7,  // 9: pb.NSRecordService.updateNSRecordsIsOnWithDomainNames:input_type -> pb.UpdateNSRecordsIsOnWithDomainNamesRequest
	8,  // 10: pb.NSRecordService.importNSRecords:input_type -> pb.ImportNSRecordsRequest
	9,  // 11: pb.NSRecordService.updateNSRecord:input_type -> pb.UpdateNSRecordRequest
	10, // 12: pb.NSRecordService.deleteNSRecord:input_type -> pb.DeleteNSRecordRequest
	11, // 13: pb.NSRecordService.countAllNSRecords:input_type -> pb.CountAllNSRecordsRequest
	12, // 14: pb.NSRecordService.listNSRecords:input_type -> pb.ListNSRecordsRequest
	14, // 15: pb.NSRecordService.findNSRecord:input_type -> pb.FindNSRecordRequest
	16, // 16: pb.NSRecordService.listNSRecordsAfterVersion:input_type -> pb.ListNSRecordsAfterVersionRequest
	1,  // 17: pb.NSRecordService.createNSRecord:output_type -> pb.CreateNSRecordResponse
	3,  // 18: pb.NSRecordService.createNSRecords:output_type -> pb.CreateNSRecordsResponse
	20, // 19: pb.NSRecordService.createNSRecordsWithDomainNames:output_type -> pb.RPCSuccess
	20, // 20: pb.NSRecordService.updateNSRecordsWithDomainNames:output_type -> pb.RPCSuccess
	20, // 21: pb.NSRecordService.deleteNSRecordsWithDomainNames:output_type -> pb.RPCSuccess
	20, // 22: pb.NSRecordService.updateNSRecordsIsOnWithDomainNames:output_type -> pb.RPCSuccess
	20, // 23: pb.NSRecordService.importNSRecords:output_type -> pb.RPCSuccess
	20, // 24: pb.NSRecordService.updateNSRecord:output_type -> pb.RPCSuccess
	20, // 25: pb.NSRecordService.deleteNSRecord:output_type -> pb.RPCSuccess
	21, // 26: pb.NSRecordService.countAllNSRecords:output_type -> pb.RPCCountResponse
	13, // 27: pb.NSRecordService.listNSRecords:output_type -> pb.ListNSRecordsResponse
	15, // 28: pb.NSRecordService.findNSRecord:output_type -> pb.FindNSRecordResponse
	17, // 29: pb.NSRecordService.listNSRecordsAfterVersion:output_type -> pb.ListNSRecordsAfterVersionResponse
	17, // [17:30] is the sub-list for method output_type
	4,  // [4:17] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_ns_record_proto_init() }
func file_service_ns_record_proto_init() {
	if File_service_ns_record_proto != nil {
		return
	}
	file_models_model_ns_record_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ns_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSRecordsWithDomainNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSRecordsWithDomainNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNSRecordsWithDomainNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSRecordsIsOnWithDomainNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportNSRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNSRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllNSRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSRecordsAfterVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSRecordsAfterVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportNSRecordsRequest_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ns_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ns_record_proto_goTypes,
		DependencyIndexes: file_service_ns_record_proto_depIdxs,
		MessageInfos:      file_service_ns_record_proto_msgTypes,
	}.Build()
	File_service_ns_record_proto = out.File
	file_service_ns_record_proto_rawDesc = nil
	file_service_ns_record_proto_goTypes = nil
	file_service_ns_record_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NSRecordServiceClient is the client API for NSRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NSRecordServiceClient interface {
	// 创建记录
	CreateNSRecord(ctx context.Context, in *CreateNSRecordRequest, opts ...grpc.CallOption) (*CreateNSRecordResponse, error)
	// 批量创建记录
	CreateNSRecords(ctx context.Context, in *CreateNSRecordsRequest, opts ...grpc.CallOption) (*CreateNSRecordsResponse, error)
	// 为一组域名批量创建记录
	CreateNSRecordsWithDomainNames(ctx context.Context, in *CreateNSRecordsWithDomainNamesRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 批量修改一组域名的一组记录
	UpdateNSRecordsWithDomainNames(ctx context.Context, in *UpdateNSRecordsWithDomainNamesRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 批量删除一组域名的一组记录
	DeleteNSRecordsWithDomainNames(ctx context.Context, in *DeleteNSRecordsWithDomainNamesRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 批量一组域名的一组记录启用状态
	UpdateNSRecordsIsOnWithDomainNames(ctx context.Context, in *UpdateNSRecordsIsOnWithDomainNamesRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 导入域名解析
	ImportNSRecords(ctx context.Context, in *ImportNSRecordsRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改记录
	UpdateNSRecord(ctx context.Context, in *UpdateNSRecordRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除记录
	DeleteNSRecord(ctx context.Context, in *DeleteNSRecordRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 计算记录数量
	CountAllNSRecords(ctx context.Context, in *CountAllNSRecordsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 读取单页记录
	ListNSRecords(ctx context.Context, in *ListNSRecordsRequest, opts ...grpc.CallOption) (*ListNSRecordsResponse, error)
	// 查询单个记录信息
	FindNSRecord(ctx context.Context, in *FindNSRecordRequest, opts ...grpc.CallOption) (*FindNSRecordResponse, error)
	// 根据版本列出一组记录
	ListNSRecordsAfterVersion(ctx context.Context, in *ListNSRecordsAfterVersionRequest, opts ...grpc.CallOption) (*ListNSRecordsAfterVersionResponse, error)
}

type nSRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNSRecordServiceClient(cc grpc.ClientConnInterface) NSRecordServiceClient {
	return &nSRecordServiceClient{cc}
}

func (c *nSRecordServiceClient) CreateNSRecord(ctx context.Context, in *CreateNSRecordRequest, opts ...grpc.CallOption) (*CreateNSRecordResponse, error) {
	out := new(CreateNSRecordResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/createNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) CreateNSRecords(ctx context.Context, in *CreateNSRecordsRequest, opts ...grpc.CallOption) (*CreateNSRecordsResponse, error) {
	out := new(CreateNSRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/createNSRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) CreateNSRecordsWithDomainNames(ctx context.Context, in *CreateNSRecordsWithDomainNamesRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/createNSRecordsWithDomainNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) UpdateNSRecordsWithDomainNames(ctx context.Context, in *UpdateNSRecordsWithDomainNamesRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/updateNSRecordsWithDomainNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) DeleteNSRecordsWithDomainNames(ctx context.Context, in *DeleteNSRecordsWithDomainNamesRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/deleteNSRecordsWithDomainNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) UpdateNSRecordsIsOnWithDomainNames(ctx context.Context, in *UpdateNSRecordsIsOnWithDomainNamesRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/updateNSRecordsIsOnWithDomainNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) ImportNSRecords(ctx context.Context, in *ImportNSRecordsRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/importNSRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) UpdateNSRecord(ctx context.Context, in *UpdateNSRecordRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/updateNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) DeleteNSRecord(ctx context.Context, in *DeleteNSRecordRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/deleteNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) CountAllNSRecords(ctx context.Context, in *CountAllNSRecordsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/countAllNSRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) ListNSRecords(ctx context.Context, in *ListNSRecordsRequest, opts ...grpc.CallOption) (*ListNSRecordsResponse, error) {
	out := new(ListNSRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/listNSRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) FindNSRecord(ctx context.Context, in *FindNSRecordRequest, opts ...grpc.CallOption) (*FindNSRecordResponse, error) {
	out := new(FindNSRecordResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/findNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) ListNSRecordsAfterVersion(ctx context.Context, in *ListNSRecordsAfterVersionRequest, opts ...grpc.CallOption) (*ListNSRecordsAfterVersionResponse, error) {
	out := new(ListNSRecordsAfterVersionResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/listNSRecordsAfterVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSRecordServiceServer is the server API for NSRecordService service.
type NSRecordServiceServer interface {
	// 创建记录
	CreateNSRecord(context.Context, *CreateNSRecordRequest) (*CreateNSRecordResponse, error)
	// 批量创建记录
	CreateNSRecords(context.Context, *CreateNSRecordsRequest) (*CreateNSRecordsResponse, error)
	// 为一组域名批量创建记录
	CreateNSRecordsWithDomainNames(context.Context, *CreateNSRecordsWithDomainNamesRequest) (*RPCSuccess, error)
	// 批量修改一组域名的一组记录
	UpdateNSRecordsWithDomainNames(context.Context, *UpdateNSRecordsWithDomainNamesRequest) (*RPCSuccess, error)
	// 批量删除一组域名的一组记录
	DeleteNSRecordsWithDomainNames(context.Context, *DeleteNSRecordsWithDomainNamesRequest) (*RPCSuccess, error)
	// 批量一组域名的一组记录启用状态
	UpdateNSRecordsIsOnWithDomainNames(context.Context, *UpdateNSRecordsIsOnWithDomainNamesRequest) (*RPCSuccess, error)
	// 导入域名解析
	ImportNSRecords(context.Context, *ImportNSRecordsRequest) (*RPCSuccess, error)
	// 修改记录
	UpdateNSRecord(context.Context, *UpdateNSRecordRequest) (*RPCSuccess, error)
	// 删除记录
	DeleteNSRecord(context.Context, *DeleteNSRecordRequest) (*RPCSuccess, error)
	// 计算记录数量
	CountAllNSRecords(context.Context, *CountAllNSRecordsRequest) (*RPCCountResponse, error)
	// 读取单页记录
	ListNSRecords(context.Context, *ListNSRecordsRequest) (*ListNSRecordsResponse, error)
	// 查询单个记录信息
	FindNSRecord(context.Context, *FindNSRecordRequest) (*FindNSRecordResponse, error)
	// 根据版本列出一组记录
	ListNSRecordsAfterVersion(context.Context, *ListNSRecordsAfterVersionRequest) (*ListNSRecordsAfterVersionResponse, error)
}

// UnimplementedNSRecordServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNSRecordServiceServer struct {
}

func (*UnimplementedNSRecordServiceServer) CreateNSRecord(context.Context, *CreateNSRecordRequest) (*CreateNSRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNSRecord not implemented")
}
func (*UnimplementedNSRecordServiceServer) CreateNSRecords(context.Context, *CreateNSRecordsRequest) (*CreateNSRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNSRecords not implemented")
}
func (*UnimplementedNSRecordServiceServer) CreateNSRecordsWithDomainNames(context.Context, *CreateNSRecordsWithDomainNamesRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNSRecordsWithDomainNames not implemented")
}
func (*UnimplementedNSRecordServiceServer) UpdateNSRecordsWithDomainNames(context.Context, *UpdateNSRecordsWithDomainNamesRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNSRecordsWithDomainNames not implemented")
}
func (*UnimplementedNSRecordServiceServer) DeleteNSRecordsWithDomainNames(context.Context, *DeleteNSRecordsWithDomainNamesRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNSRecordsWithDomainNames not implemented")
}
func (*UnimplementedNSRecordServiceServer) UpdateNSRecordsIsOnWithDomainNames(context.Context, *UpdateNSRecordsIsOnWithDomainNamesRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNSRecordsIsOnWithDomainNames not implemented")
}
func (*UnimplementedNSRecordServiceServer) ImportNSRecords(context.Context, *ImportNSRecordsRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportNSRecords not implemented")
}
func (*UnimplementedNSRecordServiceServer) UpdateNSRecord(context.Context, *UpdateNSRecordRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNSRecord not implemented")
}
func (*UnimplementedNSRecordServiceServer) DeleteNSRecord(context.Context, *DeleteNSRecordRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNSRecord not implemented")
}
func (*UnimplementedNSRecordServiceServer) CountAllNSRecords(context.Context, *CountAllNSRecordsRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllNSRecords not implemented")
}
func (*UnimplementedNSRecordServiceServer) ListNSRecords(context.Context, *ListNSRecordsRequest) (*ListNSRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNSRecords not implemented")
}
func (*UnimplementedNSRecordServiceServer) FindNSRecord(context.Context, *FindNSRecordRequest) (*FindNSRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNSRecord not implemented")
}
func (*UnimplementedNSRecordServiceServer) ListNSRecordsAfterVersion(context.Context, *ListNSRecordsAfterVersionRequest) (*ListNSRecordsAfterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNSRecordsAfterVersion not implemented")
}

func RegisterNSRecordServiceServer(s *grpc.Server, srv NSRecordServiceServer) {
	s.RegisterService(&_NSRecordService_serviceDesc, srv)
}

func _NSRecordService_CreateNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).CreateNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/CreateNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).CreateNSRecord(ctx, req.(*CreateNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_CreateNSRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNSRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).CreateNSRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/CreateNSRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).CreateNSRecords(ctx, req.(*CreateNSRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_CreateNSRecordsWithDomainNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNSRecordsWithDomainNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).CreateNSRecordsWithDomainNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/CreateNSRecordsWithDomainNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).CreateNSRecordsWithDomainNames(ctx, req.(*CreateNSRecordsWithDomainNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_UpdateNSRecordsWithDomainNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNSRecordsWithDomainNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).UpdateNSRecordsWithDomainNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/UpdateNSRecordsWithDomainNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).UpdateNSRecordsWithDomainNames(ctx, req.(*UpdateNSRecordsWithDomainNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_DeleteNSRecordsWithDomainNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNSRecordsWithDomainNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).DeleteNSRecordsWithDomainNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/DeleteNSRecordsWithDomainNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).DeleteNSRecordsWithDomainNames(ctx, req.(*DeleteNSRecordsWithDomainNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_UpdateNSRecordsIsOnWithDomainNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNSRecordsIsOnWithDomainNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).UpdateNSRecordsIsOnWithDomainNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/UpdateNSRecordsIsOnWithDomainNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).UpdateNSRecordsIsOnWithDomainNames(ctx, req.(*UpdateNSRecordsIsOnWithDomainNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_ImportNSRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportNSRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).ImportNSRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/ImportNSRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).ImportNSRecords(ctx, req.(*ImportNSRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_UpdateNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).UpdateNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/UpdateNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).UpdateNSRecord(ctx, req.(*UpdateNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_DeleteNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).DeleteNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/DeleteNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).DeleteNSRecord(ctx, req.(*DeleteNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_CountAllNSRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllNSRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).CountAllNSRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/CountAllNSRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).CountAllNSRecords(ctx, req.(*CountAllNSRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_ListNSRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNSRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).ListNSRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/ListNSRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).ListNSRecords(ctx, req.(*ListNSRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_FindNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).FindNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/FindNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).FindNSRecord(ctx, req.(*FindNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_ListNSRecordsAfterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNSRecordsAfterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).ListNSRecordsAfterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/ListNSRecordsAfterVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).ListNSRecordsAfterVersion(ctx, req.(*ListNSRecordsAfterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NSRecordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NSRecordService",
	HandlerType: (*NSRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNSRecord",
			Handler:    _NSRecordService_CreateNSRecord_Handler,
		},
		{
			MethodName: "createNSRecords",
			Handler:    _NSRecordService_CreateNSRecords_Handler,
		},
		{
			MethodName: "createNSRecordsWithDomainNames",
			Handler:    _NSRecordService_CreateNSRecordsWithDomainNames_Handler,
		},
		{
			MethodName: "updateNSRecordsWithDomainNames",
			Handler:    _NSRecordService_UpdateNSRecordsWithDomainNames_Handler,
		},
		{
			MethodName: "deleteNSRecordsWithDomainNames",
			Handler:    _NSRecordService_DeleteNSRecordsWithDomainNames_Handler,
		},
		{
			MethodName: "updateNSRecordsIsOnWithDomainNames",
			Handler:    _NSRecordService_UpdateNSRecordsIsOnWithDomainNames_Handler,
		},
		{
			MethodName: "importNSRecords",
			Handler:    _NSRecordService_ImportNSRecords_Handler,
		},
		{
			MethodName: "updateNSRecord",
			Handler:    _NSRecordService_UpdateNSRecord_Handler,
		},
		{
			MethodName: "deleteNSRecord",
			Handler:    _NSRecordService_DeleteNSRecord_Handler,
		},
		{
			MethodName: "countAllNSRecords",
			Handler:    _NSRecordService_CountAllNSRecords_Handler,
		},
		{
			MethodName: "listNSRecords",
			Handler:    _NSRecordService_ListNSRecords_Handler,
		},
		{
			MethodName: "findNSRecord",
			Handler:    _NSRecordService_FindNSRecord_Handler,
		},
		{
			MethodName: "listNSRecordsAfterVersion",
			Handler:    _NSRecordService_ListNSRecordsAfterVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ns_record.proto",
}
