// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_ns_record.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建记录
type CreateNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId  int64   `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type        string  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value       string  `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Ttl         int32   `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	NsRouteIds  []int64 `protobuf:"varint,7,rep,packed,name=nsRouteIds,proto3" json:"nsRouteIds,omitempty"`
}

func (x *CreateNSRecordRequest) Reset() {
	*x = CreateNSRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSRecordRequest) ProtoMessage() {}

func (x *CreateNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNSRecordRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *CreateNSRecordRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateNSRecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNSRecordRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateNSRecordRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateNSRecordRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CreateNSRecordRequest) GetNsRouteIds() []int64 {
	if x != nil {
		return x.NsRouteIds
	}
	return nil
}

type CreateNSRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecordId int64 `protobuf:"varint,1,opt,name=nsRecordId,proto3" json:"nsRecordId,omitempty"`
}

func (x *CreateNSRecordResponse) Reset() {
	*x = CreateNSRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSRecordResponse) ProtoMessage() {}

func (x *CreateNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSRecordResponse.ProtoReflect.Descriptor instead.
func (*CreateNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNSRecordResponse) GetNsRecordId() int64 {
	if x != nil {
		return x.NsRecordId
	}
	return 0
}

// 修改记录
type UpdateNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecordId  int64   `protobuf:"varint,1,opt,name=nsRecordId,proto3" json:"nsRecordId,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type        string  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value       string  `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Ttl         int32   `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	NsRouteIds  []int64 `protobuf:"varint,7,rep,packed,name=nsRouteIds,proto3" json:"nsRouteIds,omitempty"`
}

func (x *UpdateNSRecordRequest) Reset() {
	*x = UpdateNSRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSRecordRequest) ProtoMessage() {}

func (x *UpdateNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSRecordRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNSRecordRequest) GetNsRecordId() int64 {
	if x != nil {
		return x.NsRecordId
	}
	return 0
}

func (x *UpdateNSRecordRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateNSRecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNSRecordRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateNSRecordRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateNSRecordRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *UpdateNSRecordRequest) GetNsRouteIds() []int64 {
	if x != nil {
		return x.NsRouteIds
	}
	return nil
}

// 删除记录
type DeleteNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecordId int64 `protobuf:"varint,1,opt,name=nsRecordId,proto3" json:"nsRecordId,omitempty"`
}

func (x *DeleteNSRecordRequest) Reset() {
	*x = DeleteNSRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNSRecordRequest) ProtoMessage() {}

func (x *DeleteNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNSRecordRequest.ProtoReflect.Descriptor instead.
func (*DeleteNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteNSRecordRequest) GetNsRecordId() int64 {
	if x != nil {
		return x.NsRecordId
	}
	return 0
}

// 计算记录数量
type CountAllEnabledNSRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64  `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	NsRouteId  int64  `protobuf:"varint,3,opt,name=nsRouteId,proto3" json:"nsRouteId,omitempty"`
	Keyword    string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *CountAllEnabledNSRecordsRequest) Reset() {
	*x = CountAllEnabledNSRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledNSRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledNSRecordsRequest) ProtoMessage() {}

func (x *CountAllEnabledNSRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledNSRecordsRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledNSRecordsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{4}
}

func (x *CountAllEnabledNSRecordsRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *CountAllEnabledNSRecordsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CountAllEnabledNSRecordsRequest) GetNsRouteId() int64 {
	if x != nil {
		return x.NsRouteId
	}
	return 0
}

func (x *CountAllEnabledNSRecordsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

// 读取单页记录
type ListEnabledNSRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64  `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	NsRouteId  int64  `protobuf:"varint,3,opt,name=nsRouteId,proto3" json:"nsRouteId,omitempty"`
	Keyword    string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Offset     int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Size       int64  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledNSRecordsRequest) Reset() {
	*x = ListEnabledNSRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledNSRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledNSRecordsRequest) ProtoMessage() {}

func (x *ListEnabledNSRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledNSRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledNSRecordsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{5}
}

func (x *ListEnabledNSRecordsRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *ListEnabledNSRecordsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListEnabledNSRecordsRequest) GetNsRouteId() int64 {
	if x != nil {
		return x.NsRouteId
	}
	return 0
}

func (x *ListEnabledNSRecordsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListEnabledNSRecordsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledNSRecordsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledNSRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecords []*NSRecord `protobuf:"bytes,1,rep,name=nsRecords,proto3" json:"nsRecords,omitempty"`
}

func (x *ListEnabledNSRecordsResponse) Reset() {
	*x = ListEnabledNSRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledNSRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledNSRecordsResponse) ProtoMessage() {}

func (x *ListEnabledNSRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledNSRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledNSRecordsResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{6}
}

func (x *ListEnabledNSRecordsResponse) GetNsRecords() []*NSRecord {
	if x != nil {
		return x.NsRecords
	}
	return nil
}

// 查询单个记录信息
type FindEnabledNSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecordId int64 `protobuf:"varint,1,opt,name=nsRecordId,proto3" json:"nsRecordId,omitempty"`
}

func (x *FindEnabledNSRecordRequest) Reset() {
	*x = FindEnabledNSRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNSRecordRequest) ProtoMessage() {}

func (x *FindEnabledNSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNSRecordRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledNSRecordRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{7}
}

func (x *FindEnabledNSRecordRequest) GetNsRecordId() int64 {
	if x != nil {
		return x.NsRecordId
	}
	return 0
}

type FindEnabledNSRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecord *NSRecord `protobuf:"bytes,1,opt,name=nsRecord,proto3" json:"nsRecord,omitempty"`
}

func (x *FindEnabledNSRecordResponse) Reset() {
	*x = FindEnabledNSRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNSRecordResponse) ProtoMessage() {}

func (x *FindEnabledNSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNSRecordResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledNSRecordResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{8}
}

func (x *FindEnabledNSRecordResponse) GetNsRecord() *NSRecord {
	if x != nil {
		return x.NsRecord
	}
	return nil
}

// 根据版本列出一组记录
type ListNSRecordsAfterVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Size    int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListNSRecordsAfterVersionRequest) Reset() {
	*x = ListNSRecordsAfterVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSRecordsAfterVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSRecordsAfterVersionRequest) ProtoMessage() {}

func (x *ListNSRecordsAfterVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSRecordsAfterVersionRequest.ProtoReflect.Descriptor instead.
func (*ListNSRecordsAfterVersionRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{9}
}

func (x *ListNSRecordsAfterVersionRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListNSRecordsAfterVersionRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListNSRecordsAfterVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRecords []*NSRecord `protobuf:"bytes,1,rep,name=nsRecords,proto3" json:"nsRecords,omitempty"`
}

func (x *ListNSRecordsAfterVersionResponse) Reset() {
	*x = ListNSRecordsAfterVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSRecordsAfterVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSRecordsAfterVersionResponse) ProtoMessage() {}

func (x *ListNSRecordsAfterVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSRecordsAfterVersionResponse.ProtoReflect.Descriptor instead.
func (*ListNSRecordsAfterVersionResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_record_proto_rawDescGZIP(), []int{10}
}

func (x *ListNSRecordsAfterVersionResponse) GetNsRecords() []*NSRecord {
	if x != nil {
		return x.NsRecords
	}
	return nil
}

var File_service_ns_record_proto protoreflect.FileDescriptor

var file_service_ns_record_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x73, 0x22, 0x38, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x73, 0x22, 0x37, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x22, 0x8d, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x73, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0xb5, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x3c, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x08, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x50, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x4f,
	0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32,
	0xc8, 0x04, 0x0a, 0x0f, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x14, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_ns_record_proto_rawDescOnce sync.Once
	file_service_ns_record_proto_rawDescData = file_service_ns_record_proto_rawDesc
)

func file_service_ns_record_proto_rawDescGZIP() []byte {
	file_service_ns_record_proto_rawDescOnce.Do(func() {
		file_service_ns_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ns_record_proto_rawDescData)
	})
	return file_service_ns_record_proto_rawDescData
}

var file_service_ns_record_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_service_ns_record_proto_goTypes = []interface{}{
	(*CreateNSRecordRequest)(nil),             // 0: pb.CreateNSRecordRequest
	(*CreateNSRecordResponse)(nil),            // 1: pb.CreateNSRecordResponse
	(*UpdateNSRecordRequest)(nil),             // 2: pb.UpdateNSRecordRequest
	(*DeleteNSRecordRequest)(nil),             // 3: pb.DeleteNSRecordRequest
	(*CountAllEnabledNSRecordsRequest)(nil),   // 4: pb.CountAllEnabledNSRecordsRequest
	(*ListEnabledNSRecordsRequest)(nil),       // 5: pb.ListEnabledNSRecordsRequest
	(*ListEnabledNSRecordsResponse)(nil),      // 6: pb.ListEnabledNSRecordsResponse
	(*FindEnabledNSRecordRequest)(nil),        // 7: pb.FindEnabledNSRecordRequest
	(*FindEnabledNSRecordResponse)(nil),       // 8: pb.FindEnabledNSRecordResponse
	(*ListNSRecordsAfterVersionRequest)(nil),  // 9: pb.ListNSRecordsAfterVersionRequest
	(*ListNSRecordsAfterVersionResponse)(nil), // 10: pb.ListNSRecordsAfterVersionResponse
	(*NSRecord)(nil),                          // 11: pb.NSRecord
	(*RPCSuccess)(nil),                        // 12: pb.RPCSuccess
	(*RPCCountResponse)(nil),                  // 13: pb.RPCCountResponse
}
var file_service_ns_record_proto_depIdxs = []int32{
	11, // 0: pb.ListEnabledNSRecordsResponse.nsRecords:type_name -> pb.NSRecord
	11, // 1: pb.FindEnabledNSRecordResponse.nsRecord:type_name -> pb.NSRecord
	11, // 2: pb.ListNSRecordsAfterVersionResponse.nsRecords:type_name -> pb.NSRecord
	0,  // 3: pb.NSRecordService.createNSRecord:input_type -> pb.CreateNSRecordRequest
	2,  // 4: pb.NSRecordService.updateNSRecord:input_type -> pb.UpdateNSRecordRequest
	3,  // 5: pb.NSRecordService.deleteNSRecord:input_type -> pb.DeleteNSRecordRequest
	4,  // 6: pb.NSRecordService.countAllEnabledNSRecords:input_type -> pb.CountAllEnabledNSRecordsRequest
	5,  // 7: pb.NSRecordService.listEnabledNSRecords:input_type -> pb.ListEnabledNSRecordsRequest
	7,  // 8: pb.NSRecordService.findEnabledNSRecord:input_type -> pb.FindEnabledNSRecordRequest
	9,  // 9: pb.NSRecordService.listNSRecordsAfterVersion:input_type -> pb.ListNSRecordsAfterVersionRequest
	1,  // 10: pb.NSRecordService.createNSRecord:output_type -> pb.CreateNSRecordResponse
	12, // 11: pb.NSRecordService.updateNSRecord:output_type -> pb.RPCSuccess
	12, // 12: pb.NSRecordService.deleteNSRecord:output_type -> pb.RPCSuccess
	13, // 13: pb.NSRecordService.countAllEnabledNSRecords:output_type -> pb.RPCCountResponse
	6,  // 14: pb.NSRecordService.listEnabledNSRecords:output_type -> pb.ListEnabledNSRecordsResponse
	8,  // 15: pb.NSRecordService.findEnabledNSRecord:output_type -> pb.FindEnabledNSRecordResponse
	10, // 16: pb.NSRecordService.listNSRecordsAfterVersion:output_type -> pb.ListNSRecordsAfterVersionResponse
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_ns_record_proto_init() }
func file_service_ns_record_proto_init() {
	if File_service_ns_record_proto != nil {
		return
	}
	file_models_model_ns_record_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ns_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNSRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledNSRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledNSRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledNSRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNSRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNSRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSRecordsAfterVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSRecordsAfterVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ns_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ns_record_proto_goTypes,
		DependencyIndexes: file_service_ns_record_proto_depIdxs,
		MessageInfos:      file_service_ns_record_proto_msgTypes,
	}.Build()
	File_service_ns_record_proto = out.File
	file_service_ns_record_proto_rawDesc = nil
	file_service_ns_record_proto_goTypes = nil
	file_service_ns_record_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NSRecordServiceClient is the client API for NSRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NSRecordServiceClient interface {
	// 创建记录
	CreateNSRecord(ctx context.Context, in *CreateNSRecordRequest, opts ...grpc.CallOption) (*CreateNSRecordResponse, error)
	// 修改记录
	UpdateNSRecord(ctx context.Context, in *UpdateNSRecordRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除记录
	DeleteNSRecord(ctx context.Context, in *DeleteNSRecordRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 计算记录数量
	CountAllEnabledNSRecords(ctx context.Context, in *CountAllEnabledNSRecordsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 读取单页记录
	ListEnabledNSRecords(ctx context.Context, in *ListEnabledNSRecordsRequest, opts ...grpc.CallOption) (*ListEnabledNSRecordsResponse, error)
	// 查询单个记录信息
	FindEnabledNSRecord(ctx context.Context, in *FindEnabledNSRecordRequest, opts ...grpc.CallOption) (*FindEnabledNSRecordResponse, error)
	// 根据版本列出一组记录
	ListNSRecordsAfterVersion(ctx context.Context, in *ListNSRecordsAfterVersionRequest, opts ...grpc.CallOption) (*ListNSRecordsAfterVersionResponse, error)
}

type nSRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNSRecordServiceClient(cc grpc.ClientConnInterface) NSRecordServiceClient {
	return &nSRecordServiceClient{cc}
}

func (c *nSRecordServiceClient) CreateNSRecord(ctx context.Context, in *CreateNSRecordRequest, opts ...grpc.CallOption) (*CreateNSRecordResponse, error) {
	out := new(CreateNSRecordResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/createNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) UpdateNSRecord(ctx context.Context, in *UpdateNSRecordRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/updateNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) DeleteNSRecord(ctx context.Context, in *DeleteNSRecordRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/deleteNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) CountAllEnabledNSRecords(ctx context.Context, in *CountAllEnabledNSRecordsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/countAllEnabledNSRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) ListEnabledNSRecords(ctx context.Context, in *ListEnabledNSRecordsRequest, opts ...grpc.CallOption) (*ListEnabledNSRecordsResponse, error) {
	out := new(ListEnabledNSRecordsResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/listEnabledNSRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) FindEnabledNSRecord(ctx context.Context, in *FindEnabledNSRecordRequest, opts ...grpc.CallOption) (*FindEnabledNSRecordResponse, error) {
	out := new(FindEnabledNSRecordResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/findEnabledNSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRecordServiceClient) ListNSRecordsAfterVersion(ctx context.Context, in *ListNSRecordsAfterVersionRequest, opts ...grpc.CallOption) (*ListNSRecordsAfterVersionResponse, error) {
	out := new(ListNSRecordsAfterVersionResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRecordService/listNSRecordsAfterVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSRecordServiceServer is the server API for NSRecordService service.
type NSRecordServiceServer interface {
	// 创建记录
	CreateNSRecord(context.Context, *CreateNSRecordRequest) (*CreateNSRecordResponse, error)
	// 修改记录
	UpdateNSRecord(context.Context, *UpdateNSRecordRequest) (*RPCSuccess, error)
	// 删除记录
	DeleteNSRecord(context.Context, *DeleteNSRecordRequest) (*RPCSuccess, error)
	// 计算记录数量
	CountAllEnabledNSRecords(context.Context, *CountAllEnabledNSRecordsRequest) (*RPCCountResponse, error)
	// 读取单页记录
	ListEnabledNSRecords(context.Context, *ListEnabledNSRecordsRequest) (*ListEnabledNSRecordsResponse, error)
	// 查询单个记录信息
	FindEnabledNSRecord(context.Context, *FindEnabledNSRecordRequest) (*FindEnabledNSRecordResponse, error)
	// 根据版本列出一组记录
	ListNSRecordsAfterVersion(context.Context, *ListNSRecordsAfterVersionRequest) (*ListNSRecordsAfterVersionResponse, error)
}

// UnimplementedNSRecordServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNSRecordServiceServer struct {
}

func (*UnimplementedNSRecordServiceServer) CreateNSRecord(context.Context, *CreateNSRecordRequest) (*CreateNSRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNSRecord not implemented")
}
func (*UnimplementedNSRecordServiceServer) UpdateNSRecord(context.Context, *UpdateNSRecordRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNSRecord not implemented")
}
func (*UnimplementedNSRecordServiceServer) DeleteNSRecord(context.Context, *DeleteNSRecordRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNSRecord not implemented")
}
func (*UnimplementedNSRecordServiceServer) CountAllEnabledNSRecords(context.Context, *CountAllEnabledNSRecordsRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledNSRecords not implemented")
}
func (*UnimplementedNSRecordServiceServer) ListEnabledNSRecords(context.Context, *ListEnabledNSRecordsRequest) (*ListEnabledNSRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledNSRecords not implemented")
}
func (*UnimplementedNSRecordServiceServer) FindEnabledNSRecord(context.Context, *FindEnabledNSRecordRequest) (*FindEnabledNSRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledNSRecord not implemented")
}
func (*UnimplementedNSRecordServiceServer) ListNSRecordsAfterVersion(context.Context, *ListNSRecordsAfterVersionRequest) (*ListNSRecordsAfterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNSRecordsAfterVersion not implemented")
}

func RegisterNSRecordServiceServer(s *grpc.Server, srv NSRecordServiceServer) {
	s.RegisterService(&_NSRecordService_serviceDesc, srv)
}

func _NSRecordService_CreateNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).CreateNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/CreateNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).CreateNSRecord(ctx, req.(*CreateNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_UpdateNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).UpdateNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/UpdateNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).UpdateNSRecord(ctx, req.(*UpdateNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_DeleteNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).DeleteNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/DeleteNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).DeleteNSRecord(ctx, req.(*DeleteNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_CountAllEnabledNSRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledNSRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).CountAllEnabledNSRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/CountAllEnabledNSRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).CountAllEnabledNSRecords(ctx, req.(*CountAllEnabledNSRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_ListEnabledNSRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledNSRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).ListEnabledNSRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/ListEnabledNSRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).ListEnabledNSRecords(ctx, req.(*ListEnabledNSRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_FindEnabledNSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledNSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).FindEnabledNSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/FindEnabledNSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).FindEnabledNSRecord(ctx, req.(*FindEnabledNSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRecordService_ListNSRecordsAfterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNSRecordsAfterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRecordServiceServer).ListNSRecordsAfterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRecordService/ListNSRecordsAfterVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRecordServiceServer).ListNSRecordsAfterVersion(ctx, req.(*ListNSRecordsAfterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NSRecordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NSRecordService",
	HandlerType: (*NSRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNSRecord",
			Handler:    _NSRecordService_CreateNSRecord_Handler,
		},
		{
			MethodName: "updateNSRecord",
			Handler:    _NSRecordService_UpdateNSRecord_Handler,
		},
		{
			MethodName: "deleteNSRecord",
			Handler:    _NSRecordService_DeleteNSRecord_Handler,
		},
		{
			MethodName: "countAllEnabledNSRecords",
			Handler:    _NSRecordService_CountAllEnabledNSRecords_Handler,
		},
		{
			MethodName: "listEnabledNSRecords",
			Handler:    _NSRecordService_ListEnabledNSRecords_Handler,
		},
		{
			MethodName: "findEnabledNSRecord",
			Handler:    _NSRecordService_FindEnabledNSRecord_Handler,
		},
		{
			MethodName: "listNSRecordsAfterVersion",
			Handler:    _NSRecordService_ListNSRecordsAfterVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ns_record.proto",
}
