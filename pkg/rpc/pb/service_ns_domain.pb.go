// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_ns_domain.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建域名
type CreateNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsClusterId int64  `protobuf:"varint,1,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	UserId      int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateNSDomainRequest) Reset() {
	*x = CreateNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSDomainRequest) ProtoMessage() {}

func (x *CreateNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSDomainRequest.ProtoReflect.Descriptor instead.
func (*CreateNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNSDomainRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *CreateNSDomainRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateNSDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
}

func (x *CreateNSDomainResponse) Reset() {
	*x = CreateNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSDomainResponse) ProtoMessage() {}

func (x *CreateNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSDomainResponse.ProtoReflect.Descriptor instead.
func (*CreateNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNSDomainResponse) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

// 修改域名
type UpdateNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId  int64  `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	NsClusterId int64  `protobuf:"varint,2,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	UserId      int64  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	IsOn        bool   `protobuf:"varint,5,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateNSDomainRequest) Reset() {
	*x = UpdateNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSDomainRequest) ProtoMessage() {}

func (x *UpdateNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSDomainRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNSDomainRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *UpdateNSDomainRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *UpdateNSDomainRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateNSDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNSDomainRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除域名
type DeleteNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
}

func (x *DeleteNSDomainRequest) Reset() {
	*x = DeleteNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNSDomainRequest) ProtoMessage() {}

func (x *DeleteNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNSDomainRequest.ProtoReflect.Descriptor instead.
func (*DeleteNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteNSDomainRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

// 查找单个域名
type FindEnabledNSDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
}

func (x *FindEnabledNSDomainRequest) Reset() {
	*x = FindEnabledNSDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNSDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNSDomainRequest) ProtoMessage() {}

func (x *FindEnabledNSDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNSDomainRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledNSDomainRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{4}
}

func (x *FindEnabledNSDomainRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

type FindEnabledNSDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomain *NSDomain `protobuf:"bytes,1,opt,name=nsDomain,proto3" json:"nsDomain,omitempty"`
}

func (x *FindEnabledNSDomainResponse) Reset() {
	*x = FindEnabledNSDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNSDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNSDomainResponse) ProtoMessage() {}

func (x *FindEnabledNSDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNSDomainResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledNSDomainResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{5}
}

func (x *FindEnabledNSDomainResponse) GetNsDomain() *NSDomain {
	if x != nil {
		return x.NsDomain
	}
	return nil
}

// 计算域名数量
type CountAllEnabledNSDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NsClusterId int64  `protobuf:"varint,2,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	Keyword     string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *CountAllEnabledNSDomainsRequest) Reset() {
	*x = CountAllEnabledNSDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledNSDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledNSDomainsRequest) ProtoMessage() {}

func (x *CountAllEnabledNSDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledNSDomainsRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledNSDomainsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{6}
}

func (x *CountAllEnabledNSDomainsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CountAllEnabledNSDomainsRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *CountAllEnabledNSDomainsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

// 列出单页域名
type ListEnabledNSDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NsClusterId int64  `protobuf:"varint,2,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	Keyword     string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Offset      int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Size        int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledNSDomainsRequest) Reset() {
	*x = ListEnabledNSDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledNSDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledNSDomainsRequest) ProtoMessage() {}

func (x *ListEnabledNSDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledNSDomainsRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledNSDomainsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{7}
}

func (x *ListEnabledNSDomainsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListEnabledNSDomainsRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *ListEnabledNSDomainsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListEnabledNSDomainsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledNSDomainsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledNSDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomains []*NSDomain `protobuf:"bytes,1,rep,name=nsDomains,proto3" json:"nsDomains,omitempty"`
}

func (x *ListEnabledNSDomainsResponse) Reset() {
	*x = ListEnabledNSDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledNSDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledNSDomainsResponse) ProtoMessage() {}

func (x *ListEnabledNSDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledNSDomainsResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledNSDomainsResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_proto_rawDescGZIP(), []int{8}
}

func (x *ListEnabledNSDomainsResponse) GetNsDomains() []*NSDomain {
	if x != nil {
		return x.NsDomains
	}
	return nil
}

var File_service_ns_domain_proto protoreflect.FileDescriptor

var file_service_ns_domain_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x73, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69,
	0x73, 0x4f, 0x6e, 0x22, 0x37, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x1a,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x1b, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x08, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x22, 0x75, 0x0a, 0x1f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x32, 0xde, 0x03, 0x0a, 0x0f, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a,
	0x13, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14,
	0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_ns_domain_proto_rawDescOnce sync.Once
	file_service_ns_domain_proto_rawDescData = file_service_ns_domain_proto_rawDesc
)

func file_service_ns_domain_proto_rawDescGZIP() []byte {
	file_service_ns_domain_proto_rawDescOnce.Do(func() {
		file_service_ns_domain_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ns_domain_proto_rawDescData)
	})
	return file_service_ns_domain_proto_rawDescData
}

var file_service_ns_domain_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_ns_domain_proto_goTypes = []interface{}{
	(*CreateNSDomainRequest)(nil),           // 0: pb.CreateNSDomainRequest
	(*CreateNSDomainResponse)(nil),          // 1: pb.CreateNSDomainResponse
	(*UpdateNSDomainRequest)(nil),           // 2: pb.UpdateNSDomainRequest
	(*DeleteNSDomainRequest)(nil),           // 3: pb.DeleteNSDomainRequest
	(*FindEnabledNSDomainRequest)(nil),      // 4: pb.FindEnabledNSDomainRequest
	(*FindEnabledNSDomainResponse)(nil),     // 5: pb.FindEnabledNSDomainResponse
	(*CountAllEnabledNSDomainsRequest)(nil), // 6: pb.CountAllEnabledNSDomainsRequest
	(*ListEnabledNSDomainsRequest)(nil),     // 7: pb.ListEnabledNSDomainsRequest
	(*ListEnabledNSDomainsResponse)(nil),    // 8: pb.ListEnabledNSDomainsResponse
	(*NSDomain)(nil),                        // 9: pb.NSDomain
	(*RPCSuccess)(nil),                      // 10: pb.RPCSuccess
	(*RPCCountResponse)(nil),                // 11: pb.RPCCountResponse
}
var file_service_ns_domain_proto_depIdxs = []int32{
	9,  // 0: pb.FindEnabledNSDomainResponse.nsDomain:type_name -> pb.NSDomain
	9,  // 1: pb.ListEnabledNSDomainsResponse.nsDomains:type_name -> pb.NSDomain
	0,  // 2: pb.NSDomainService.createNSDomain:input_type -> pb.CreateNSDomainRequest
	2,  // 3: pb.NSDomainService.updateNSDomain:input_type -> pb.UpdateNSDomainRequest
	3,  // 4: pb.NSDomainService.deleteNSDomain:input_type -> pb.DeleteNSDomainRequest
	4,  // 5: pb.NSDomainService.findEnabledNSDomain:input_type -> pb.FindEnabledNSDomainRequest
	6,  // 6: pb.NSDomainService.countAllEnabledNSDomains:input_type -> pb.CountAllEnabledNSDomainsRequest
	7,  // 7: pb.NSDomainService.listEnabledNSDomains:input_type -> pb.ListEnabledNSDomainsRequest
	1,  // 8: pb.NSDomainService.createNSDomain:output_type -> pb.CreateNSDomainResponse
	10, // 9: pb.NSDomainService.updateNSDomain:output_type -> pb.RPCSuccess
	10, // 10: pb.NSDomainService.deleteNSDomain:output_type -> pb.RPCSuccess
	5,  // 11: pb.NSDomainService.findEnabledNSDomain:output_type -> pb.FindEnabledNSDomainResponse
	11, // 12: pb.NSDomainService.countAllEnabledNSDomains:output_type -> pb.RPCCountResponse
	8,  // 13: pb.NSDomainService.listEnabledNSDomains:output_type -> pb.ListEnabledNSDomainsResponse
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_ns_domain_proto_init() }
func file_service_ns_domain_proto_init() {
	if File_service_ns_domain_proto != nil {
		return
	}
	file_models_model_ns_domain_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ns_domain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNSDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNSDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledNSDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledNSDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledNSDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ns_domain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ns_domain_proto_goTypes,
		DependencyIndexes: file_service_ns_domain_proto_depIdxs,
		MessageInfos:      file_service_ns_domain_proto_msgTypes,
	}.Build()
	File_service_ns_domain_proto = out.File
	file_service_ns_domain_proto_rawDesc = nil
	file_service_ns_domain_proto_goTypes = nil
	file_service_ns_domain_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NSDomainServiceClient is the client API for NSDomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NSDomainServiceClient interface {
	// 创建域名
	CreateNSDomain(ctx context.Context, in *CreateNSDomainRequest, opts ...grpc.CallOption) (*CreateNSDomainResponse, error)
	// 修改域名
	UpdateNSDomain(ctx context.Context, in *UpdateNSDomainRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除域名
	DeleteNSDomain(ctx context.Context, in *DeleteNSDomainRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找单个域名
	FindEnabledNSDomain(ctx context.Context, in *FindEnabledNSDomainRequest, opts ...grpc.CallOption) (*FindEnabledNSDomainResponse, error)
	// 计算域名数量
	CountAllEnabledNSDomains(ctx context.Context, in *CountAllEnabledNSDomainsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页域名
	ListEnabledNSDomains(ctx context.Context, in *ListEnabledNSDomainsRequest, opts ...grpc.CallOption) (*ListEnabledNSDomainsResponse, error)
}

type nSDomainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNSDomainServiceClient(cc grpc.ClientConnInterface) NSDomainServiceClient {
	return &nSDomainServiceClient{cc}
}

func (c *nSDomainServiceClient) CreateNSDomain(ctx context.Context, in *CreateNSDomainRequest, opts ...grpc.CallOption) (*CreateNSDomainResponse, error) {
	out := new(CreateNSDomainResponse)
	err := c.cc.Invoke(ctx, "/pb.NSDomainService/createNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSDomainServiceClient) UpdateNSDomain(ctx context.Context, in *UpdateNSDomainRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSDomainService/updateNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSDomainServiceClient) DeleteNSDomain(ctx context.Context, in *DeleteNSDomainRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSDomainService/deleteNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSDomainServiceClient) FindEnabledNSDomain(ctx context.Context, in *FindEnabledNSDomainRequest, opts ...grpc.CallOption) (*FindEnabledNSDomainResponse, error) {
	out := new(FindEnabledNSDomainResponse)
	err := c.cc.Invoke(ctx, "/pb.NSDomainService/findEnabledNSDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSDomainServiceClient) CountAllEnabledNSDomains(ctx context.Context, in *CountAllEnabledNSDomainsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NSDomainService/countAllEnabledNSDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSDomainServiceClient) ListEnabledNSDomains(ctx context.Context, in *ListEnabledNSDomainsRequest, opts ...grpc.CallOption) (*ListEnabledNSDomainsResponse, error) {
	out := new(ListEnabledNSDomainsResponse)
	err := c.cc.Invoke(ctx, "/pb.NSDomainService/listEnabledNSDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSDomainServiceServer is the server API for NSDomainService service.
type NSDomainServiceServer interface {
	// 创建域名
	CreateNSDomain(context.Context, *CreateNSDomainRequest) (*CreateNSDomainResponse, error)
	// 修改域名
	UpdateNSDomain(context.Context, *UpdateNSDomainRequest) (*RPCSuccess, error)
	// 删除域名
	DeleteNSDomain(context.Context, *DeleteNSDomainRequest) (*RPCSuccess, error)
	// 查找单个域名
	FindEnabledNSDomain(context.Context, *FindEnabledNSDomainRequest) (*FindEnabledNSDomainResponse, error)
	// 计算域名数量
	CountAllEnabledNSDomains(context.Context, *CountAllEnabledNSDomainsRequest) (*RPCCountResponse, error)
	// 列出单页域名
	ListEnabledNSDomains(context.Context, *ListEnabledNSDomainsRequest) (*ListEnabledNSDomainsResponse, error)
}

// UnimplementedNSDomainServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNSDomainServiceServer struct {
}

func (*UnimplementedNSDomainServiceServer) CreateNSDomain(context.Context, *CreateNSDomainRequest) (*CreateNSDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNSDomain not implemented")
}
func (*UnimplementedNSDomainServiceServer) UpdateNSDomain(context.Context, *UpdateNSDomainRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNSDomain not implemented")
}
func (*UnimplementedNSDomainServiceServer) DeleteNSDomain(context.Context, *DeleteNSDomainRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNSDomain not implemented")
}
func (*UnimplementedNSDomainServiceServer) FindEnabledNSDomain(context.Context, *FindEnabledNSDomainRequest) (*FindEnabledNSDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledNSDomain not implemented")
}
func (*UnimplementedNSDomainServiceServer) CountAllEnabledNSDomains(context.Context, *CountAllEnabledNSDomainsRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledNSDomains not implemented")
}
func (*UnimplementedNSDomainServiceServer) ListEnabledNSDomains(context.Context, *ListEnabledNSDomainsRequest) (*ListEnabledNSDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledNSDomains not implemented")
}

func RegisterNSDomainServiceServer(s *grpc.Server, srv NSDomainServiceServer) {
	s.RegisterService(&_NSDomainService_serviceDesc, srv)
}

func _NSDomainService_CreateNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDomainServiceServer).CreateNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSDomainService/CreateNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDomainServiceServer).CreateNSDomain(ctx, req.(*CreateNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSDomainService_UpdateNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDomainServiceServer).UpdateNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSDomainService/UpdateNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDomainServiceServer).UpdateNSDomain(ctx, req.(*UpdateNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSDomainService_DeleteNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDomainServiceServer).DeleteNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSDomainService/DeleteNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDomainServiceServer).DeleteNSDomain(ctx, req.(*DeleteNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSDomainService_FindEnabledNSDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledNSDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDomainServiceServer).FindEnabledNSDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSDomainService/FindEnabledNSDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDomainServiceServer).FindEnabledNSDomain(ctx, req.(*FindEnabledNSDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSDomainService_CountAllEnabledNSDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledNSDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDomainServiceServer).CountAllEnabledNSDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSDomainService/CountAllEnabledNSDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDomainServiceServer).CountAllEnabledNSDomains(ctx, req.(*CountAllEnabledNSDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSDomainService_ListEnabledNSDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledNSDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSDomainServiceServer).ListEnabledNSDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSDomainService/ListEnabledNSDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSDomainServiceServer).ListEnabledNSDomains(ctx, req.(*ListEnabledNSDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NSDomainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NSDomainService",
	HandlerType: (*NSDomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNSDomain",
			Handler:    _NSDomainService_CreateNSDomain_Handler,
		},
		{
			MethodName: "updateNSDomain",
			Handler:    _NSDomainService_UpdateNSDomain_Handler,
		},
		{
			MethodName: "deleteNSDomain",
			Handler:    _NSDomainService_DeleteNSDomain_Handler,
		},
		{
			MethodName: "findEnabledNSDomain",
			Handler:    _NSDomainService_FindEnabledNSDomain_Handler,
		},
		{
			MethodName: "countAllEnabledNSDomains",
			Handler:    _NSDomainService_CountAllEnabledNSDomains_Handler,
		},
		{
			MethodName: "listEnabledNSDomains",
			Handler:    _NSDomainService_ListEnabledNSDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ns_domain.proto",
}
