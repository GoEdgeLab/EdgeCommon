// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_user_plan.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 添加已购套餐
type CreateUserPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PlanId int64  `protobuf:"varint,2,opt,name=planId,proto3" json:"planId,omitempty"`
	DayTo  string `protobuf:"bytes,3,opt,name=dayTo,proto3" json:"dayTo,omitempty"`
}

func (x *CreateUserPlanRequest) Reset() {
	*x = CreateUserPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPlanRequest) ProtoMessage() {}

func (x *CreateUserPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPlanRequest.ProtoReflect.Descriptor instead.
func (*CreateUserPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_user_plan_proto_rawDescGZIP(), []int{0}
}

func (x *CreateUserPlanRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateUserPlanRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *CreateUserPlanRequest) GetDayTo() string {
	if x != nil {
		return x.DayTo
	}
	return ""
}

type CreateUserPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPlanId int64 `protobuf:"varint,1,opt,name=userPlanId,proto3" json:"userPlanId,omitempty"`
}

func (x *CreateUserPlanResponse) Reset() {
	*x = CreateUserPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPlanResponse) ProtoMessage() {}

func (x *CreateUserPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPlanResponse.ProtoReflect.Descriptor instead.
func (*CreateUserPlanResponse) Descriptor() ([]byte, []int) {
	return file_service_user_plan_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserPlanResponse) GetUserPlanId() int64 {
	if x != nil {
		return x.UserPlanId
	}
	return 0
}

// 查找单个已购套餐信息
type FindEnabledUserPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPlanId int64 `protobuf:"varint,1,opt,name=userPlanId,proto3" json:"userPlanId,omitempty"`
}

func (x *FindEnabledUserPlanRequest) Reset() {
	*x = FindEnabledUserPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledUserPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledUserPlanRequest) ProtoMessage() {}

func (x *FindEnabledUserPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledUserPlanRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledUserPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_user_plan_proto_rawDescGZIP(), []int{2}
}

func (x *FindEnabledUserPlanRequest) GetUserPlanId() int64 {
	if x != nil {
		return x.UserPlanId
	}
	return 0
}

type FindEnabledUserPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPlan *UserPlan `protobuf:"bytes,1,opt,name=userPlan,proto3" json:"userPlan,omitempty"`
}

func (x *FindEnabledUserPlanResponse) Reset() {
	*x = FindEnabledUserPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledUserPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledUserPlanResponse) ProtoMessage() {}

func (x *FindEnabledUserPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledUserPlanResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledUserPlanResponse) Descriptor() ([]byte, []int) {
	return file_service_user_plan_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledUserPlanResponse) GetUserPlan() *UserPlan {
	if x != nil {
		return x.UserPlan
	}
	return nil
}

// 修改已购套餐
type UpdateUserPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPlanId int64  `protobuf:"varint,1,opt,name=userPlanId,proto3" json:"userPlanId,omitempty"`
	PlanId     int64  `protobuf:"varint,2,opt,name=planId,proto3" json:"planId,omitempty"`
	DayTo      string `protobuf:"bytes,3,opt,name=dayTo,proto3" json:"dayTo,omitempty"`
	IsOn       bool   `protobuf:"varint,4,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateUserPlanRequest) Reset() {
	*x = UpdateUserPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPlanRequest) ProtoMessage() {}

func (x *UpdateUserPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_user_plan_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateUserPlanRequest) GetUserPlanId() int64 {
	if x != nil {
		return x.UserPlanId
	}
	return 0
}

func (x *UpdateUserPlanRequest) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpdateUserPlanRequest) GetDayTo() string {
	if x != nil {
		return x.DayTo
	}
	return ""
}

func (x *UpdateUserPlanRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除已购套餐
type DeleteUserPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPlanId int64 `protobuf:"varint,1,opt,name=userPlanId,proto3" json:"userPlanId,omitempty"`
}

func (x *DeleteUserPlanRequest) Reset() {
	*x = DeleteUserPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserPlanRequest) ProtoMessage() {}

func (x *DeleteUserPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserPlanRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_user_plan_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteUserPlanRequest) GetUserPlanId() int64 {
	if x != nil {
		return x.UserPlanId
	}
	return 0
}

// 计算已购套餐数
type CountAllEnabledUserPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAvailable  bool  `protobuf:"varint,1,opt,name=isAvailable,proto3" json:"isAvailable,omitempty"`
	IsExpired    bool  `protobuf:"varint,2,opt,name=isExpired,proto3" json:"isExpired,omitempty"`
	ExpiringDays int32 `protobuf:"varint,3,opt,name=expiringDays,proto3" json:"expiringDays,omitempty"`
	UserId       int64 `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CountAllEnabledUserPlansRequest) Reset() {
	*x = CountAllEnabledUserPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledUserPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledUserPlansRequest) ProtoMessage() {}

func (x *CountAllEnabledUserPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledUserPlansRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledUserPlansRequest) Descriptor() ([]byte, []int) {
	return file_service_user_plan_proto_rawDescGZIP(), []int{6}
}

func (x *CountAllEnabledUserPlansRequest) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *CountAllEnabledUserPlansRequest) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *CountAllEnabledUserPlansRequest) GetExpiringDays() int32 {
	if x != nil {
		return x.ExpiringDays
	}
	return 0
}

func (x *CountAllEnabledUserPlansRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 列出单页已购套餐
type ListEnabledUserPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAvailable  bool  `protobuf:"varint,1,opt,name=isAvailable,proto3" json:"isAvailable,omitempty"`
	IsExpired    bool  `protobuf:"varint,2,opt,name=isExpired,proto3" json:"isExpired,omitempty"`
	ExpiringDays int32 `protobuf:"varint,3,opt,name=expiringDays,proto3" json:"expiringDays,omitempty"`
	UserId       int64 `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Offset       int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Size         int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledUserPlansRequest) Reset() {
	*x = ListEnabledUserPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledUserPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledUserPlansRequest) ProtoMessage() {}

func (x *ListEnabledUserPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledUserPlansRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledUserPlansRequest) Descriptor() ([]byte, []int) {
	return file_service_user_plan_proto_rawDescGZIP(), []int{7}
}

func (x *ListEnabledUserPlansRequest) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *ListEnabledUserPlansRequest) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *ListEnabledUserPlansRequest) GetExpiringDays() int32 {
	if x != nil {
		return x.ExpiringDays
	}
	return 0
}

func (x *ListEnabledUserPlansRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListEnabledUserPlansRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledUserPlansRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledUserPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPlans []*UserPlan `protobuf:"bytes,1,rep,name=userPlans,proto3" json:"userPlans,omitempty"`
}

func (x *ListEnabledUserPlansResponse) Reset() {
	*x = ListEnabledUserPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledUserPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledUserPlansResponse) ProtoMessage() {}

func (x *ListEnabledUserPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledUserPlansResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledUserPlansResponse) Descriptor() ([]byte, []int) {
	return file_service_user_plan_proto_rawDescGZIP(), []int{8}
}

func (x *ListEnabledUserPlansResponse) GetUserPlans() []*UserPlan {
	if x != nil {
		return x.UserPlans
	}
	return nil
}

var File_service_user_plan_proto protoreflect.FileDescriptor

var file_service_user_plan_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x61, 0x79, 0x54, 0x6f, 0x22, 0x38, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22,
	0x3c, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x79, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f,
	0x6e, 0x22, 0x37, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x32, 0xde,
	0x03, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x66,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a,
	0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_user_plan_proto_rawDescOnce sync.Once
	file_service_user_plan_proto_rawDescData = file_service_user_plan_proto_rawDesc
)

func file_service_user_plan_proto_rawDescGZIP() []byte {
	file_service_user_plan_proto_rawDescOnce.Do(func() {
		file_service_user_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_user_plan_proto_rawDescData)
	})
	return file_service_user_plan_proto_rawDescData
}

var file_service_user_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_user_plan_proto_goTypes = []interface{}{
	(*CreateUserPlanRequest)(nil),           // 0: pb.CreateUserPlanRequest
	(*CreateUserPlanResponse)(nil),          // 1: pb.CreateUserPlanResponse
	(*FindEnabledUserPlanRequest)(nil),      // 2: pb.FindEnabledUserPlanRequest
	(*FindEnabledUserPlanResponse)(nil),     // 3: pb.FindEnabledUserPlanResponse
	(*UpdateUserPlanRequest)(nil),           // 4: pb.UpdateUserPlanRequest
	(*DeleteUserPlanRequest)(nil),           // 5: pb.DeleteUserPlanRequest
	(*CountAllEnabledUserPlansRequest)(nil), // 6: pb.CountAllEnabledUserPlansRequest
	(*ListEnabledUserPlansRequest)(nil),     // 7: pb.ListEnabledUserPlansRequest
	(*ListEnabledUserPlansResponse)(nil),    // 8: pb.ListEnabledUserPlansResponse
	(*UserPlan)(nil),                        // 9: pb.UserPlan
	(*RPCSuccess)(nil),                      // 10: pb.RPCSuccess
	(*RPCCountResponse)(nil),                // 11: pb.RPCCountResponse
}
var file_service_user_plan_proto_depIdxs = []int32{
	9,  // 0: pb.FindEnabledUserPlanResponse.userPlan:type_name -> pb.UserPlan
	9,  // 1: pb.ListEnabledUserPlansResponse.userPlans:type_name -> pb.UserPlan
	0,  // 2: pb.UserPlanService.createUserPlan:input_type -> pb.CreateUserPlanRequest
	2,  // 3: pb.UserPlanService.findEnabledUserPlan:input_type -> pb.FindEnabledUserPlanRequest
	4,  // 4: pb.UserPlanService.updateUserPlan:input_type -> pb.UpdateUserPlanRequest
	5,  // 5: pb.UserPlanService.deleteUserPlan:input_type -> pb.DeleteUserPlanRequest
	6,  // 6: pb.UserPlanService.countAllEnabledUserPlans:input_type -> pb.CountAllEnabledUserPlansRequest
	7,  // 7: pb.UserPlanService.listEnabledUserPlans:input_type -> pb.ListEnabledUserPlansRequest
	1,  // 8: pb.UserPlanService.createUserPlan:output_type -> pb.CreateUserPlanResponse
	3,  // 9: pb.UserPlanService.findEnabledUserPlan:output_type -> pb.FindEnabledUserPlanResponse
	10, // 10: pb.UserPlanService.updateUserPlan:output_type -> pb.RPCSuccess
	10, // 11: pb.UserPlanService.deleteUserPlan:output_type -> pb.RPCSuccess
	11, // 12: pb.UserPlanService.countAllEnabledUserPlans:output_type -> pb.RPCCountResponse
	8,  // 13: pb.UserPlanService.listEnabledUserPlans:output_type -> pb.ListEnabledUserPlansResponse
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_user_plan_proto_init() }
func file_service_user_plan_proto_init() {
	if File_service_user_plan_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_user_plan_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_user_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledUserPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledUserPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledUserPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledUserPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_plan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledUserPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_user_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_user_plan_proto_goTypes,
		DependencyIndexes: file_service_user_plan_proto_depIdxs,
		MessageInfos:      file_service_user_plan_proto_msgTypes,
	}.Build()
	File_service_user_plan_proto = out.File
	file_service_user_plan_proto_rawDesc = nil
	file_service_user_plan_proto_goTypes = nil
	file_service_user_plan_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserPlanServiceClient is the client API for UserPlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserPlanServiceClient interface {
	// 添加已购套餐
	CreateUserPlan(ctx context.Context, in *CreateUserPlanRequest, opts ...grpc.CallOption) (*CreateUserPlanResponse, error)
	// 查找单个已购套餐信息
	FindEnabledUserPlan(ctx context.Context, in *FindEnabledUserPlanRequest, opts ...grpc.CallOption) (*FindEnabledUserPlanResponse, error)
	// 修改已购套餐
	UpdateUserPlan(ctx context.Context, in *UpdateUserPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除已购套餐
	DeleteUserPlan(ctx context.Context, in *DeleteUserPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 计算已购套餐数
	CountAllEnabledUserPlans(ctx context.Context, in *CountAllEnabledUserPlansRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页已购套餐
	ListEnabledUserPlans(ctx context.Context, in *ListEnabledUserPlansRequest, opts ...grpc.CallOption) (*ListEnabledUserPlansResponse, error)
}

type userPlanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPlanServiceClient(cc grpc.ClientConnInterface) UserPlanServiceClient {
	return &userPlanServiceClient{cc}
}

func (c *userPlanServiceClient) CreateUserPlan(ctx context.Context, in *CreateUserPlanRequest, opts ...grpc.CallOption) (*CreateUserPlanResponse, error) {
	out := new(CreateUserPlanResponse)
	err := c.cc.Invoke(ctx, "/pb.UserPlanService/createUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlanServiceClient) FindEnabledUserPlan(ctx context.Context, in *FindEnabledUserPlanRequest, opts ...grpc.CallOption) (*FindEnabledUserPlanResponse, error) {
	out := new(FindEnabledUserPlanResponse)
	err := c.cc.Invoke(ctx, "/pb.UserPlanService/findEnabledUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlanServiceClient) UpdateUserPlan(ctx context.Context, in *UpdateUserPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.UserPlanService/updateUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlanServiceClient) DeleteUserPlan(ctx context.Context, in *DeleteUserPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.UserPlanService/deleteUserPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlanServiceClient) CountAllEnabledUserPlans(ctx context.Context, in *CountAllEnabledUserPlansRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.UserPlanService/countAllEnabledUserPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPlanServiceClient) ListEnabledUserPlans(ctx context.Context, in *ListEnabledUserPlansRequest, opts ...grpc.CallOption) (*ListEnabledUserPlansResponse, error) {
	out := new(ListEnabledUserPlansResponse)
	err := c.cc.Invoke(ctx, "/pb.UserPlanService/listEnabledUserPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPlanServiceServer is the server API for UserPlanService service.
type UserPlanServiceServer interface {
	// 添加已购套餐
	CreateUserPlan(context.Context, *CreateUserPlanRequest) (*CreateUserPlanResponse, error)
	// 查找单个已购套餐信息
	FindEnabledUserPlan(context.Context, *FindEnabledUserPlanRequest) (*FindEnabledUserPlanResponse, error)
	// 修改已购套餐
	UpdateUserPlan(context.Context, *UpdateUserPlanRequest) (*RPCSuccess, error)
	// 删除已购套餐
	DeleteUserPlan(context.Context, *DeleteUserPlanRequest) (*RPCSuccess, error)
	// 计算已购套餐数
	CountAllEnabledUserPlans(context.Context, *CountAllEnabledUserPlansRequest) (*RPCCountResponse, error)
	// 列出单页已购套餐
	ListEnabledUserPlans(context.Context, *ListEnabledUserPlansRequest) (*ListEnabledUserPlansResponse, error)
}

// UnimplementedUserPlanServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserPlanServiceServer struct {
}

func (*UnimplementedUserPlanServiceServer) CreateUserPlan(context.Context, *CreateUserPlanRequest) (*CreateUserPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPlan not implemented")
}
func (*UnimplementedUserPlanServiceServer) FindEnabledUserPlan(context.Context, *FindEnabledUserPlanRequest) (*FindEnabledUserPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledUserPlan not implemented")
}
func (*UnimplementedUserPlanServiceServer) UpdateUserPlan(context.Context, *UpdateUserPlanRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPlan not implemented")
}
func (*UnimplementedUserPlanServiceServer) DeleteUserPlan(context.Context, *DeleteUserPlanRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPlan not implemented")
}
func (*UnimplementedUserPlanServiceServer) CountAllEnabledUserPlans(context.Context, *CountAllEnabledUserPlansRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledUserPlans not implemented")
}
func (*UnimplementedUserPlanServiceServer) ListEnabledUserPlans(context.Context, *ListEnabledUserPlansRequest) (*ListEnabledUserPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledUserPlans not implemented")
}

func RegisterUserPlanServiceServer(s *grpc.Server, srv UserPlanServiceServer) {
	s.RegisterService(&_UserPlanService_serviceDesc, srv)
}

func _UserPlanService_CreateUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlanServiceServer).CreateUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserPlanService/CreateUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlanServiceServer).CreateUserPlan(ctx, req.(*CreateUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlanService_FindEnabledUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlanServiceServer).FindEnabledUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserPlanService/FindEnabledUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlanServiceServer).FindEnabledUserPlan(ctx, req.(*FindEnabledUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlanService_UpdateUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlanServiceServer).UpdateUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserPlanService/UpdateUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlanServiceServer).UpdateUserPlan(ctx, req.(*UpdateUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlanService_DeleteUserPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlanServiceServer).DeleteUserPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserPlanService/DeleteUserPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlanServiceServer).DeleteUserPlan(ctx, req.(*DeleteUserPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlanService_CountAllEnabledUserPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledUserPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlanServiceServer).CountAllEnabledUserPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserPlanService/CountAllEnabledUserPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlanServiceServer).CountAllEnabledUserPlans(ctx, req.(*CountAllEnabledUserPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPlanService_ListEnabledUserPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledUserPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlanServiceServer).ListEnabledUserPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserPlanService/ListEnabledUserPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlanServiceServer).ListEnabledUserPlans(ctx, req.(*ListEnabledUserPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserPlanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserPlanService",
	HandlerType: (*UserPlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createUserPlan",
			Handler:    _UserPlanService_CreateUserPlan_Handler,
		},
		{
			MethodName: "findEnabledUserPlan",
			Handler:    _UserPlanService_FindEnabledUserPlan_Handler,
		},
		{
			MethodName: "updateUserPlan",
			Handler:    _UserPlanService_UpdateUserPlan_Handler,
		},
		{
			MethodName: "deleteUserPlan",
			Handler:    _UserPlanService_DeleteUserPlan_Handler,
		},
		{
			MethodName: "countAllEnabledUserPlans",
			Handler:    _UserPlanService_CountAllEnabledUserPlans_Handler,
		},
		{
			MethodName: "listEnabledUserPlans",
			Handler:    _UserPlanService_ListEnabledUserPlans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_user_plan.proto",
}
