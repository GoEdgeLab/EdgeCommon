// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_report_node_group.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建分组
type CreateReportNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateReportNodeGroupRequest) Reset() {
	*x = CreateReportNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReportNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReportNodeGroupRequest) ProtoMessage() {}

func (x *CreateReportNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReportNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateReportNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_group_proto_rawDescGZIP(), []int{0}
}

func (x *CreateReportNodeGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateReportNodeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeGroupId int64 `protobuf:"varint,1,opt,name=reportNodeGroupId,proto3" json:"reportNodeGroupId,omitempty"`
}

func (x *CreateReportNodeGroupResponse) Reset() {
	*x = CreateReportNodeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReportNodeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReportNodeGroupResponse) ProtoMessage() {}

func (x *CreateReportNodeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReportNodeGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateReportNodeGroupResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_group_proto_rawDescGZIP(), []int{1}
}

func (x *CreateReportNodeGroupResponse) GetReportNodeGroupId() int64 {
	if x != nil {
		return x.ReportNodeGroupId
	}
	return 0
}

// 修改分组
type UpdateReportNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeGroupId int64  `protobuf:"varint,1,opt,name=reportNodeGroupId,proto3" json:"reportNodeGroupId,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateReportNodeGroupRequest) Reset() {
	*x = UpdateReportNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReportNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReportNodeGroupRequest) ProtoMessage() {}

func (x *UpdateReportNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReportNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateReportNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_group_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateReportNodeGroupRequest) GetReportNodeGroupId() int64 {
	if x != nil {
		return x.ReportNodeGroupId
	}
	return 0
}

func (x *UpdateReportNodeGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 删除分组
type DeleteReportNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeGroupId int64 `protobuf:"varint,1,opt,name=reportNodeGroupId,proto3" json:"reportNodeGroupId,omitempty"`
}

func (x *DeleteReportNodeGroupRequest) Reset() {
	*x = DeleteReportNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReportNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReportNodeGroupRequest) ProtoMessage() {}

func (x *DeleteReportNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReportNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteReportNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_group_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteReportNodeGroupRequest) GetReportNodeGroupId() int64 {
	if x != nil {
		return x.ReportNodeGroupId
	}
	return 0
}

// 查找所有分组
type FindAllEnabledReportNodeGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledReportNodeGroupsRequest) Reset() {
	*x = FindAllEnabledReportNodeGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledReportNodeGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledReportNodeGroupsRequest) ProtoMessage() {}

func (x *FindAllEnabledReportNodeGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledReportNodeGroupsRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledReportNodeGroupsRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_group_proto_rawDescGZIP(), []int{4}
}

type FindAllEnabledReportNodeGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeGroups []*ReportNodeGroup `protobuf:"bytes,1,rep,name=reportNodeGroups,proto3" json:"reportNodeGroups,omitempty"`
}

func (x *FindAllEnabledReportNodeGroupsResponse) Reset() {
	*x = FindAllEnabledReportNodeGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledReportNodeGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledReportNodeGroupsResponse) ProtoMessage() {}

func (x *FindAllEnabledReportNodeGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledReportNodeGroupsResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledReportNodeGroupsResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_group_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllEnabledReportNodeGroupsResponse) GetReportNodeGroups() []*ReportNodeGroup {
	if x != nil {
		return x.ReportNodeGroups
	}
	return nil
}

// 查找单个分组
type FindEnabledReportNodeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeGroupId int64 `protobuf:"varint,1,opt,name=reportNodeGroupId,proto3" json:"reportNodeGroupId,omitempty"`
}

func (x *FindEnabledReportNodeGroupRequest) Reset() {
	*x = FindEnabledReportNodeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledReportNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledReportNodeGroupRequest) ProtoMessage() {}

func (x *FindEnabledReportNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledReportNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledReportNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_group_proto_rawDescGZIP(), []int{6}
}

func (x *FindEnabledReportNodeGroupRequest) GetReportNodeGroupId() int64 {
	if x != nil {
		return x.ReportNodeGroupId
	}
	return 0
}

type FindEnabledReportNodeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeGroup *ReportNodeGroup `protobuf:"bytes,1,opt,name=reportNodeGroup,proto3" json:"reportNodeGroup,omitempty"`
}

func (x *FindEnabledReportNodeGroupResponse) Reset() {
	*x = FindEnabledReportNodeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledReportNodeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledReportNodeGroupResponse) ProtoMessage() {}

func (x *FindEnabledReportNodeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledReportNodeGroupResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledReportNodeGroupResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_group_proto_rawDescGZIP(), []int{7}
}

func (x *FindEnabledReportNodeGroupResponse) GetReportNodeGroup() *ReportNodeGroup {
	if x != nil {
		return x.ReportNodeGroup
	}
	return nil
}

// 计算所有分组数量
type CountAllEnabledReportNodeGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllEnabledReportNodeGroupsRequest) Reset() {
	*x = CountAllEnabledReportNodeGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledReportNodeGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledReportNodeGroupsRequest) ProtoMessage() {}

func (x *CountAllEnabledReportNodeGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledReportNodeGroupsRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledReportNodeGroupsRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_group_proto_rawDescGZIP(), []int{8}
}

var File_service_report_node_group_proto protoreflect.FileDescriptor

var file_service_report_node_group_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x1c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x69, 0x0a, 0x26, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x51, 0x0a,
	0x21, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x63, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0xd7, 0x04, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x77,
	0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x1f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_report_node_group_proto_rawDescOnce sync.Once
	file_service_report_node_group_proto_rawDescData = file_service_report_node_group_proto_rawDesc
)

func file_service_report_node_group_proto_rawDescGZIP() []byte {
	file_service_report_node_group_proto_rawDescOnce.Do(func() {
		file_service_report_node_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_report_node_group_proto_rawDescData)
	})
	return file_service_report_node_group_proto_rawDescData
}

var file_service_report_node_group_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_report_node_group_proto_goTypes = []interface{}{
	(*CreateReportNodeGroupRequest)(nil),           // 0: pb.CreateReportNodeGroupRequest
	(*CreateReportNodeGroupResponse)(nil),          // 1: pb.CreateReportNodeGroupResponse
	(*UpdateReportNodeGroupRequest)(nil),           // 2: pb.UpdateReportNodeGroupRequest
	(*DeleteReportNodeGroupRequest)(nil),           // 3: pb.DeleteReportNodeGroupRequest
	(*FindAllEnabledReportNodeGroupsRequest)(nil),  // 4: pb.FindAllEnabledReportNodeGroupsRequest
	(*FindAllEnabledReportNodeGroupsResponse)(nil), // 5: pb.FindAllEnabledReportNodeGroupsResponse
	(*FindEnabledReportNodeGroupRequest)(nil),      // 6: pb.FindEnabledReportNodeGroupRequest
	(*FindEnabledReportNodeGroupResponse)(nil),     // 7: pb.FindEnabledReportNodeGroupResponse
	(*CountAllEnabledReportNodeGroupsRequest)(nil), // 8: pb.CountAllEnabledReportNodeGroupsRequest
	(*ReportNodeGroup)(nil),                        // 9: pb.ReportNodeGroup
	(*RPCSuccess)(nil),                             // 10: pb.RPCSuccess
	(*RPCCountResponse)(nil),                       // 11: pb.RPCCountResponse
}
var file_service_report_node_group_proto_depIdxs = []int32{
	9,  // 0: pb.FindAllEnabledReportNodeGroupsResponse.reportNodeGroups:type_name -> pb.ReportNodeGroup
	9,  // 1: pb.FindEnabledReportNodeGroupResponse.reportNodeGroup:type_name -> pb.ReportNodeGroup
	0,  // 2: pb.ReportNodeGroupService.createReportNodeGroup:input_type -> pb.CreateReportNodeGroupRequest
	2,  // 3: pb.ReportNodeGroupService.updateReportNodeGroup:input_type -> pb.UpdateReportNodeGroupRequest
	3,  // 4: pb.ReportNodeGroupService.deleteReportNodeGroup:input_type -> pb.DeleteReportNodeGroupRequest
	4,  // 5: pb.ReportNodeGroupService.findAllEnabledReportNodeGroups:input_type -> pb.FindAllEnabledReportNodeGroupsRequest
	6,  // 6: pb.ReportNodeGroupService.findEnabledReportNodeGroup:input_type -> pb.FindEnabledReportNodeGroupRequest
	8,  // 7: pb.ReportNodeGroupService.countAllEnabledReportNodeGroups:input_type -> pb.CountAllEnabledReportNodeGroupsRequest
	1,  // 8: pb.ReportNodeGroupService.createReportNodeGroup:output_type -> pb.CreateReportNodeGroupResponse
	10, // 9: pb.ReportNodeGroupService.updateReportNodeGroup:output_type -> pb.RPCSuccess
	10, // 10: pb.ReportNodeGroupService.deleteReportNodeGroup:output_type -> pb.RPCSuccess
	5,  // 11: pb.ReportNodeGroupService.findAllEnabledReportNodeGroups:output_type -> pb.FindAllEnabledReportNodeGroupsResponse
	7,  // 12: pb.ReportNodeGroupService.findEnabledReportNodeGroup:output_type -> pb.FindEnabledReportNodeGroupResponse
	11, // 13: pb.ReportNodeGroupService.countAllEnabledReportNodeGroups:output_type -> pb.RPCCountResponse
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_report_node_group_proto_init() }
func file_service_report_node_group_proto_init() {
	if File_service_report_node_group_proto != nil {
		return
	}
	file_models_model_report_node_group_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_report_node_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReportNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReportNodeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReportNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReportNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledReportNodeGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledReportNodeGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledReportNodeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledReportNodeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledReportNodeGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_report_node_group_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_report_node_group_proto_goTypes,
		DependencyIndexes: file_service_report_node_group_proto_depIdxs,
		MessageInfos:      file_service_report_node_group_proto_msgTypes,
	}.Build()
	File_service_report_node_group_proto = out.File
	file_service_report_node_group_proto_rawDesc = nil
	file_service_report_node_group_proto_goTypes = nil
	file_service_report_node_group_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportNodeGroupServiceClient is the client API for ReportNodeGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportNodeGroupServiceClient interface {
	// 创建分组
	CreateReportNodeGroup(ctx context.Context, in *CreateReportNodeGroupRequest, opts ...grpc.CallOption) (*CreateReportNodeGroupResponse, error)
	// 修改分组
	UpdateReportNodeGroup(ctx context.Context, in *UpdateReportNodeGroupRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除分组
	DeleteReportNodeGroup(ctx context.Context, in *DeleteReportNodeGroupRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找所有分组
	FindAllEnabledReportNodeGroups(ctx context.Context, in *FindAllEnabledReportNodeGroupsRequest, opts ...grpc.CallOption) (*FindAllEnabledReportNodeGroupsResponse, error)
	// 查找单个分组
	FindEnabledReportNodeGroup(ctx context.Context, in *FindEnabledReportNodeGroupRequest, opts ...grpc.CallOption) (*FindEnabledReportNodeGroupResponse, error)
	// 计算所有分组数量
	CountAllEnabledReportNodeGroups(ctx context.Context, in *CountAllEnabledReportNodeGroupsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
}

type reportNodeGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportNodeGroupServiceClient(cc grpc.ClientConnInterface) ReportNodeGroupServiceClient {
	return &reportNodeGroupServiceClient{cc}
}

func (c *reportNodeGroupServiceClient) CreateReportNodeGroup(ctx context.Context, in *CreateReportNodeGroupRequest, opts ...grpc.CallOption) (*CreateReportNodeGroupResponse, error) {
	out := new(CreateReportNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeGroupService/createReportNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeGroupServiceClient) UpdateReportNodeGroup(ctx context.Context, in *UpdateReportNodeGroupRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeGroupService/updateReportNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeGroupServiceClient) DeleteReportNodeGroup(ctx context.Context, in *DeleteReportNodeGroupRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeGroupService/deleteReportNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeGroupServiceClient) FindAllEnabledReportNodeGroups(ctx context.Context, in *FindAllEnabledReportNodeGroupsRequest, opts ...grpc.CallOption) (*FindAllEnabledReportNodeGroupsResponse, error) {
	out := new(FindAllEnabledReportNodeGroupsResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeGroupService/findAllEnabledReportNodeGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeGroupServiceClient) FindEnabledReportNodeGroup(ctx context.Context, in *FindEnabledReportNodeGroupRequest, opts ...grpc.CallOption) (*FindEnabledReportNodeGroupResponse, error) {
	out := new(FindEnabledReportNodeGroupResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeGroupService/findEnabledReportNodeGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeGroupServiceClient) CountAllEnabledReportNodeGroups(ctx context.Context, in *CountAllEnabledReportNodeGroupsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeGroupService/countAllEnabledReportNodeGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportNodeGroupServiceServer is the server API for ReportNodeGroupService service.
type ReportNodeGroupServiceServer interface {
	// 创建分组
	CreateReportNodeGroup(context.Context, *CreateReportNodeGroupRequest) (*CreateReportNodeGroupResponse, error)
	// 修改分组
	UpdateReportNodeGroup(context.Context, *UpdateReportNodeGroupRequest) (*RPCSuccess, error)
	// 删除分组
	DeleteReportNodeGroup(context.Context, *DeleteReportNodeGroupRequest) (*RPCSuccess, error)
	// 查找所有分组
	FindAllEnabledReportNodeGroups(context.Context, *FindAllEnabledReportNodeGroupsRequest) (*FindAllEnabledReportNodeGroupsResponse, error)
	// 查找单个分组
	FindEnabledReportNodeGroup(context.Context, *FindEnabledReportNodeGroupRequest) (*FindEnabledReportNodeGroupResponse, error)
	// 计算所有分组数量
	CountAllEnabledReportNodeGroups(context.Context, *CountAllEnabledReportNodeGroupsRequest) (*RPCCountResponse, error)
}

// UnimplementedReportNodeGroupServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportNodeGroupServiceServer struct {
}

func (*UnimplementedReportNodeGroupServiceServer) CreateReportNodeGroup(context.Context, *CreateReportNodeGroupRequest) (*CreateReportNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReportNodeGroup not implemented")
}
func (*UnimplementedReportNodeGroupServiceServer) UpdateReportNodeGroup(context.Context, *UpdateReportNodeGroupRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportNodeGroup not implemented")
}
func (*UnimplementedReportNodeGroupServiceServer) DeleteReportNodeGroup(context.Context, *DeleteReportNodeGroupRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReportNodeGroup not implemented")
}
func (*UnimplementedReportNodeGroupServiceServer) FindAllEnabledReportNodeGroups(context.Context, *FindAllEnabledReportNodeGroupsRequest) (*FindAllEnabledReportNodeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledReportNodeGroups not implemented")
}
func (*UnimplementedReportNodeGroupServiceServer) FindEnabledReportNodeGroup(context.Context, *FindEnabledReportNodeGroupRequest) (*FindEnabledReportNodeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledReportNodeGroup not implemented")
}
func (*UnimplementedReportNodeGroupServiceServer) CountAllEnabledReportNodeGroups(context.Context, *CountAllEnabledReportNodeGroupsRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledReportNodeGroups not implemented")
}

func RegisterReportNodeGroupServiceServer(s *grpc.Server, srv ReportNodeGroupServiceServer) {
	s.RegisterService(&_ReportNodeGroupService_serviceDesc, srv)
}

func _ReportNodeGroupService_CreateReportNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeGroupServiceServer).CreateReportNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeGroupService/CreateReportNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeGroupServiceServer).CreateReportNodeGroup(ctx, req.(*CreateReportNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeGroupService_UpdateReportNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeGroupServiceServer).UpdateReportNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeGroupService/UpdateReportNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeGroupServiceServer).UpdateReportNodeGroup(ctx, req.(*UpdateReportNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeGroupService_DeleteReportNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeGroupServiceServer).DeleteReportNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeGroupService/DeleteReportNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeGroupServiceServer).DeleteReportNodeGroup(ctx, req.(*DeleteReportNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeGroupService_FindAllEnabledReportNodeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledReportNodeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeGroupServiceServer).FindAllEnabledReportNodeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeGroupService/FindAllEnabledReportNodeGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeGroupServiceServer).FindAllEnabledReportNodeGroups(ctx, req.(*FindAllEnabledReportNodeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeGroupService_FindEnabledReportNodeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledReportNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeGroupServiceServer).FindEnabledReportNodeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeGroupService/FindEnabledReportNodeGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeGroupServiceServer).FindEnabledReportNodeGroup(ctx, req.(*FindEnabledReportNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeGroupService_CountAllEnabledReportNodeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledReportNodeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeGroupServiceServer).CountAllEnabledReportNodeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeGroupService/CountAllEnabledReportNodeGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeGroupServiceServer).CountAllEnabledReportNodeGroups(ctx, req.(*CountAllEnabledReportNodeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportNodeGroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ReportNodeGroupService",
	HandlerType: (*ReportNodeGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createReportNodeGroup",
			Handler:    _ReportNodeGroupService_CreateReportNodeGroup_Handler,
		},
		{
			MethodName: "updateReportNodeGroup",
			Handler:    _ReportNodeGroupService_UpdateReportNodeGroup_Handler,
		},
		{
			MethodName: "deleteReportNodeGroup",
			Handler:    _ReportNodeGroupService_DeleteReportNodeGroup_Handler,
		},
		{
			MethodName: "findAllEnabledReportNodeGroups",
			Handler:    _ReportNodeGroupService_FindAllEnabledReportNodeGroups_Handler,
		},
		{
			MethodName: "findEnabledReportNodeGroup",
			Handler:    _ReportNodeGroupService_FindEnabledReportNodeGroup_Handler,
		},
		{
			MethodName: "countAllEnabledReportNodeGroups",
			Handler:    _ReportNodeGroupService_CountAllEnabledReportNodeGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_report_node_group.proto",
}
