// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_region_city.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 查找所有城市
type FindAllEnabledRegionCitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeRegionProvince bool `protobuf:"varint,1,opt,name=includeRegionProvince,proto3" json:"includeRegionProvince,omitempty"`
}

func (x *FindAllEnabledRegionCitiesRequest) Reset() {
	*x = FindAllEnabledRegionCitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_city_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledRegionCitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledRegionCitiesRequest) ProtoMessage() {}

func (x *FindAllEnabledRegionCitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_city_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledRegionCitiesRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledRegionCitiesRequest) Descriptor() ([]byte, []int) {
	return file_service_region_city_proto_rawDescGZIP(), []int{0}
}

func (x *FindAllEnabledRegionCitiesRequest) GetIncludeRegionProvince() bool {
	if x != nil {
		return x.IncludeRegionProvince
	}
	return false
}

type FindAllEnabledRegionCitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCities []*RegionCity `protobuf:"bytes,1,rep,name=regionCities,proto3" json:"regionCities,omitempty"`
}

func (x *FindAllEnabledRegionCitiesResponse) Reset() {
	*x = FindAllEnabledRegionCitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_city_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledRegionCitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledRegionCitiesResponse) ProtoMessage() {}

func (x *FindAllEnabledRegionCitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_city_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledRegionCitiesResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledRegionCitiesResponse) Descriptor() ([]byte, []int) {
	return file_service_region_city_proto_rawDescGZIP(), []int{1}
}

func (x *FindAllEnabledRegionCitiesResponse) GetRegionCities() []*RegionCity {
	if x != nil {
		return x.RegionCities
	}
	return nil
}

// 查找单个城市信息
type FindEnabledRegionCityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCityId int64 `protobuf:"varint,1,opt,name=regionCityId,proto3" json:"regionCityId,omitempty"`
}

func (x *FindEnabledRegionCityRequest) Reset() {
	*x = FindEnabledRegionCityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_city_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledRegionCityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledRegionCityRequest) ProtoMessage() {}

func (x *FindEnabledRegionCityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_city_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledRegionCityRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledRegionCityRequest) Descriptor() ([]byte, []int) {
	return file_service_region_city_proto_rawDescGZIP(), []int{2}
}

func (x *FindEnabledRegionCityRequest) GetRegionCityId() int64 {
	if x != nil {
		return x.RegionCityId
	}
	return 0
}

type FindEnabledRegionCityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCity *RegionCity `protobuf:"bytes,1,opt,name=regionCity,proto3" json:"regionCity,omitempty"`
}

func (x *FindEnabledRegionCityResponse) Reset() {
	*x = FindEnabledRegionCityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_city_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledRegionCityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledRegionCityResponse) ProtoMessage() {}

func (x *FindEnabledRegionCityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_city_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledRegionCityResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledRegionCityResponse) Descriptor() ([]byte, []int) {
	return file_service_region_city_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledRegionCityResponse) GetRegionCity() *RegionCity {
	if x != nil {
		return x.RegionCity
	}
	return nil
}

var File_service_region_city_proto protoreflect.FileDescriptor

var file_service_region_city_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a,
	0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x59, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x58, 0x0a, 0x22, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x32, 0xde, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15,
	0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_region_city_proto_rawDescOnce sync.Once
	file_service_region_city_proto_rawDescData = file_service_region_city_proto_rawDesc
)

func file_service_region_city_proto_rawDescGZIP() []byte {
	file_service_region_city_proto_rawDescOnce.Do(func() {
		file_service_region_city_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_region_city_proto_rawDescData)
	})
	return file_service_region_city_proto_rawDescData
}

var file_service_region_city_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_service_region_city_proto_goTypes = []interface{}{
	(*FindAllEnabledRegionCitiesRequest)(nil),  // 0: pb.FindAllEnabledRegionCitiesRequest
	(*FindAllEnabledRegionCitiesResponse)(nil), // 1: pb.FindAllEnabledRegionCitiesResponse
	(*FindEnabledRegionCityRequest)(nil),       // 2: pb.FindEnabledRegionCityRequest
	(*FindEnabledRegionCityResponse)(nil),      // 3: pb.FindEnabledRegionCityResponse
	(*RegionCity)(nil),                         // 4: pb.RegionCity
}
var file_service_region_city_proto_depIdxs = []int32{
	4, // 0: pb.FindAllEnabledRegionCitiesResponse.regionCities:type_name -> pb.RegionCity
	4, // 1: pb.FindEnabledRegionCityResponse.regionCity:type_name -> pb.RegionCity
	0, // 2: pb.RegionCityService.findAllEnabledRegionCities:input_type -> pb.FindAllEnabledRegionCitiesRequest
	2, // 3: pb.RegionCityService.findEnabledRegionCity:input_type -> pb.FindEnabledRegionCityRequest
	1, // 4: pb.RegionCityService.findAllEnabledRegionCities:output_type -> pb.FindAllEnabledRegionCitiesResponse
	3, // 5: pb.RegionCityService.findEnabledRegionCity:output_type -> pb.FindEnabledRegionCityResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_service_region_city_proto_init() }
func file_service_region_city_proto_init() {
	if File_service_region_city_proto != nil {
		return
	}
	file_models_model_region_city_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_region_city_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledRegionCitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_city_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledRegionCitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_city_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledRegionCityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_city_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledRegionCityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_region_city_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_region_city_proto_goTypes,
		DependencyIndexes: file_service_region_city_proto_depIdxs,
		MessageInfos:      file_service_region_city_proto_msgTypes,
	}.Build()
	File_service_region_city_proto = out.File
	file_service_region_city_proto_rawDesc = nil
	file_service_region_city_proto_goTypes = nil
	file_service_region_city_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegionCityServiceClient is the client API for RegionCityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegionCityServiceClient interface {
	// 查找所有城市
	FindAllEnabledRegionCities(ctx context.Context, in *FindAllEnabledRegionCitiesRequest, opts ...grpc.CallOption) (*FindAllEnabledRegionCitiesResponse, error)
	// 查找单个城市信息
	FindEnabledRegionCity(ctx context.Context, in *FindEnabledRegionCityRequest, opts ...grpc.CallOption) (*FindEnabledRegionCityResponse, error)
}

type regionCityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionCityServiceClient(cc grpc.ClientConnInterface) RegionCityServiceClient {
	return &regionCityServiceClient{cc}
}

func (c *regionCityServiceClient) FindAllEnabledRegionCities(ctx context.Context, in *FindAllEnabledRegionCitiesRequest, opts ...grpc.CallOption) (*FindAllEnabledRegionCitiesResponse, error) {
	out := new(FindAllEnabledRegionCitiesResponse)
	err := c.cc.Invoke(ctx, "/pb.RegionCityService/findAllEnabledRegionCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionCityServiceClient) FindEnabledRegionCity(ctx context.Context, in *FindEnabledRegionCityRequest, opts ...grpc.CallOption) (*FindEnabledRegionCityResponse, error) {
	out := new(FindEnabledRegionCityResponse)
	err := c.cc.Invoke(ctx, "/pb.RegionCityService/findEnabledRegionCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionCityServiceServer is the server API for RegionCityService service.
type RegionCityServiceServer interface {
	// 查找所有城市
	FindAllEnabledRegionCities(context.Context, *FindAllEnabledRegionCitiesRequest) (*FindAllEnabledRegionCitiesResponse, error)
	// 查找单个城市信息
	FindEnabledRegionCity(context.Context, *FindEnabledRegionCityRequest) (*FindEnabledRegionCityResponse, error)
}

// UnimplementedRegionCityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegionCityServiceServer struct {
}

func (*UnimplementedRegionCityServiceServer) FindAllEnabledRegionCities(context.Context, *FindAllEnabledRegionCitiesRequest) (*FindAllEnabledRegionCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledRegionCities not implemented")
}
func (*UnimplementedRegionCityServiceServer) FindEnabledRegionCity(context.Context, *FindEnabledRegionCityRequest) (*FindEnabledRegionCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledRegionCity not implemented")
}

func RegisterRegionCityServiceServer(s *grpc.Server, srv RegionCityServiceServer) {
	s.RegisterService(&_RegionCityService_serviceDesc, srv)
}

func _RegionCityService_FindAllEnabledRegionCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledRegionCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionCityServiceServer).FindAllEnabledRegionCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionCityService/FindAllEnabledRegionCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionCityServiceServer).FindAllEnabledRegionCities(ctx, req.(*FindAllEnabledRegionCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionCityService_FindEnabledRegionCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledRegionCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionCityServiceServer).FindEnabledRegionCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionCityService/FindEnabledRegionCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionCityServiceServer).FindEnabledRegionCity(ctx, req.(*FindEnabledRegionCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegionCityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RegionCityService",
	HandlerType: (*RegionCityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findAllEnabledRegionCities",
			Handler:    _RegionCityService_FindAllEnabledRegionCities_Handler,
		},
		{
			MethodName: "findEnabledRegionCity",
			Handler:    _RegionCityService_FindEnabledRegionCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_region_city.proto",
}
