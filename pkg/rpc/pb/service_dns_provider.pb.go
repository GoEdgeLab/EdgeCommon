// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_dns_provider.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建服务商
type CreateDNSProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ApiParamsJSON []byte `protobuf:"bytes,3,opt,name=apiParamsJSON,proto3" json:"apiParamsJSON,omitempty"`
}

func (x *CreateDNSProviderRequest) Reset() {
	*x = CreateDNSProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDNSProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSProviderRequest) ProtoMessage() {}

func (x *CreateDNSProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSProviderRequest.ProtoReflect.Descriptor instead.
func (*CreateDNSProviderRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDNSProviderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDNSProviderRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateDNSProviderRequest) GetApiParamsJSON() []byte {
	if x != nil {
		return x.ApiParamsJSON
	}
	return nil
}

type CreateDNSProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *CreateDNSProviderResponse) Reset() {
	*x = CreateDNSProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDNSProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDNSProviderResponse) ProtoMessage() {}

func (x *CreateDNSProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDNSProviderResponse.ProtoReflect.Descriptor instead.
func (*CreateDNSProviderResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDNSProviderResponse) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

// 修改服务商
type UpdateDNSProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64  `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ApiParamsJSON []byte `protobuf:"bytes,3,opt,name=apiParamsJSON,proto3" json:"apiParamsJSON,omitempty"`
}

func (x *UpdateDNSProviderRequest) Reset() {
	*x = UpdateDNSProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDNSProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDNSProviderRequest) ProtoMessage() {}

func (x *UpdateDNSProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDNSProviderRequest.ProtoReflect.Descriptor instead.
func (*UpdateDNSProviderRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDNSProviderRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

func (x *UpdateDNSProviderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDNSProviderRequest) GetApiParamsJSON() []byte {
	if x != nil {
		return x.ApiParamsJSON
	}
	return nil
}

// 计算服务商数量
type CountAllEnabledDNSProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId int64  `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`
	UserId  int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Keyword string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Domain  string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Type    string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CountAllEnabledDNSProvidersRequest) Reset() {
	*x = CountAllEnabledDNSProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledDNSProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledDNSProvidersRequest) ProtoMessage() {}

func (x *CountAllEnabledDNSProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledDNSProvidersRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledDNSProvidersRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{3}
}

func (x *CountAllEnabledDNSProvidersRequest) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *CountAllEnabledDNSProvidersRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CountAllEnabledDNSProvidersRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CountAllEnabledDNSProvidersRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CountAllEnabledDNSProvidersRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 列出单页的服务商信息
type ListEnabledDNSProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId int64  `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`
	UserId  int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Keyword string `protobuf:"bytes,5,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Domain  string `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	Type    string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Offset  int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Size    int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledDNSProvidersRequest) Reset() {
	*x = ListEnabledDNSProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledDNSProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledDNSProvidersRequest) ProtoMessage() {}

func (x *ListEnabledDNSProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledDNSProvidersRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledDNSProvidersRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{4}
}

func (x *ListEnabledDNSProvidersRequest) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *ListEnabledDNSProvidersRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListEnabledDNSProvidersRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListEnabledDNSProvidersRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ListEnabledDNSProvidersRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListEnabledDNSProvidersRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledDNSProvidersRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledDNSProvidersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviders []*DNSProvider `protobuf:"bytes,1,rep,name=dnsProviders,proto3" json:"dnsProviders,omitempty"`
}

func (x *ListEnabledDNSProvidersResponse) Reset() {
	*x = ListEnabledDNSProvidersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledDNSProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledDNSProvidersResponse) ProtoMessage() {}

func (x *ListEnabledDNSProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledDNSProvidersResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledDNSProvidersResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{5}
}

func (x *ListEnabledDNSProvidersResponse) GetDnsProviders() []*DNSProvider {
	if x != nil {
		return x.DnsProviders
	}
	return nil
}

// 查找所有的DNS服务商
type FindAllEnabledDNSProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId int64 `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`
	UserId  int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindAllEnabledDNSProvidersRequest) Reset() {
	*x = FindAllEnabledDNSProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledDNSProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledDNSProvidersRequest) ProtoMessage() {}

func (x *FindAllEnabledDNSProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledDNSProvidersRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledDNSProvidersRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{6}
}

func (x *FindAllEnabledDNSProvidersRequest) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *FindAllEnabledDNSProvidersRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FindAllEnabledDNSProvidersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviders []*DNSProvider `protobuf:"bytes,1,rep,name=dnsProviders,proto3" json:"dnsProviders,omitempty"`
}

func (x *FindAllEnabledDNSProvidersResponse) Reset() {
	*x = FindAllEnabledDNSProvidersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledDNSProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledDNSProvidersResponse) ProtoMessage() {}

func (x *FindAllEnabledDNSProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledDNSProvidersResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledDNSProvidersResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{7}
}

func (x *FindAllEnabledDNSProvidersResponse) GetDnsProviders() []*DNSProvider {
	if x != nil {
		return x.DnsProviders
	}
	return nil
}

// 删除服务商
type DeleteDNSProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *DeleteDNSProviderRequest) Reset() {
	*x = DeleteDNSProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDNSProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDNSProviderRequest) ProtoMessage() {}

func (x *DeleteDNSProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDNSProviderRequest.ProtoReflect.Descriptor instead.
func (*DeleteDNSProviderRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDNSProviderRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

// 查找单个服务商
type FindEnabledDNSProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *FindEnabledDNSProviderRequest) Reset() {
	*x = FindEnabledDNSProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledDNSProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledDNSProviderRequest) ProtoMessage() {}

func (x *FindEnabledDNSProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledDNSProviderRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledDNSProviderRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{9}
}

func (x *FindEnabledDNSProviderRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

type FindEnabledDNSProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProvider *DNSProvider `protobuf:"bytes,1,opt,name=dnsProvider,proto3" json:"dnsProvider,omitempty"`
}

func (x *FindEnabledDNSProviderResponse) Reset() {
	*x = FindEnabledDNSProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledDNSProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledDNSProviderResponse) ProtoMessage() {}

func (x *FindEnabledDNSProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledDNSProviderResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledDNSProviderResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{10}
}

func (x *FindEnabledDNSProviderResponse) GetDnsProvider() *DNSProvider {
	if x != nil {
		return x.DnsProvider
	}
	return nil
}

// 取得所有服务商类型
type FindAllDNSProviderTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllDNSProviderTypesRequest) Reset() {
	*x = FindAllDNSProviderTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDNSProviderTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDNSProviderTypesRequest) ProtoMessage() {}

func (x *FindAllDNSProviderTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDNSProviderTypesRequest.ProtoReflect.Descriptor instead.
func (*FindAllDNSProviderTypesRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{11}
}

type FindAllDNSProviderTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderTypes []*DNSProviderType `protobuf:"bytes,1,rep,name=providerTypes,proto3" json:"providerTypes,omitempty"`
}

func (x *FindAllDNSProviderTypesResponse) Reset() {
	*x = FindAllDNSProviderTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDNSProviderTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDNSProviderTypesResponse) ProtoMessage() {}

func (x *FindAllDNSProviderTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDNSProviderTypesResponse.ProtoReflect.Descriptor instead.
func (*FindAllDNSProviderTypesResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{12}
}

func (x *FindAllDNSProviderTypesResponse) GetProviderTypes() []*DNSProviderType {
	if x != nil {
		return x.ProviderTypes
	}
	return nil
}

type DNSProviderType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *DNSProviderType) Reset() {
	*x = DNSProviderType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSProviderType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSProviderType) ProtoMessage() {}

func (x *DNSProviderType) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSProviderType.ProtoReflect.Descriptor instead.
func (*DNSProviderType) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{13}
}

func (x *DNSProviderType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DNSProviderType) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DNSProviderType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 取得某个类型的所有服务商
type FindAllEnabledDNSProvidersWithTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderTypeCode string `protobuf:"bytes,1,opt,name=providerTypeCode,proto3" json:"providerTypeCode,omitempty"`
}

func (x *FindAllEnabledDNSProvidersWithTypeRequest) Reset() {
	*x = FindAllEnabledDNSProvidersWithTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledDNSProvidersWithTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledDNSProvidersWithTypeRequest) ProtoMessage() {}

func (x *FindAllEnabledDNSProvidersWithTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledDNSProvidersWithTypeRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledDNSProvidersWithTypeRequest) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{14}
}

func (x *FindAllEnabledDNSProvidersWithTypeRequest) GetProviderTypeCode() string {
	if x != nil {
		return x.ProviderTypeCode
	}
	return ""
}

type FindAllEnabledDNSProvidersWithTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviders []*DNSProvider `protobuf:"bytes,1,rep,name=dnsProviders,proto3" json:"dnsProviders,omitempty"`
}

func (x *FindAllEnabledDNSProvidersWithTypeResponse) Reset() {
	*x = FindAllEnabledDNSProvidersWithTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_dns_provider_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledDNSProvidersWithTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledDNSProvidersWithTypeResponse) ProtoMessage() {}

func (x *FindAllEnabledDNSProvidersWithTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_dns_provider_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledDNSProvidersWithTypeResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledDNSProvidersWithTypeResponse) Descriptor() ([]byte, []int) {
	return file_service_dns_provider_proto_rawDescGZIP(), []int{15}
}

func (x *FindAllEnabledDNSProvidersWithTypeResponse) GetDnsProviders() []*DNSProvider {
	if x != nil {
		return x.DnsProviders
	}
	return nil
}

var File_service_dns_provider_proto protoreflect.FileDescriptor

var file_service_dns_provider_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x68, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x41, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x53, 0x4f, 0x4e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x9c, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x56, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x0c, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x22, 0x55, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x22, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x0c, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x40, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53,
	0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e,
	0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x0f, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x57, 0x0a, 0x29, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x2a, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x64, 0x6e, 0x73, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0c,
	0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x32, 0xe5, 0x06, 0x0a,
	0x12, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x1b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x66, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x22, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_dns_provider_proto_rawDescOnce sync.Once
	file_service_dns_provider_proto_rawDescData = file_service_dns_provider_proto_rawDesc
)

func file_service_dns_provider_proto_rawDescGZIP() []byte {
	file_service_dns_provider_proto_rawDescOnce.Do(func() {
		file_service_dns_provider_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_dns_provider_proto_rawDescData)
	})
	return file_service_dns_provider_proto_rawDescData
}

var file_service_dns_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_service_dns_provider_proto_goTypes = []interface{}{
	(*CreateDNSProviderRequest)(nil),                   // 0: pb.CreateDNSProviderRequest
	(*CreateDNSProviderResponse)(nil),                  // 1: pb.CreateDNSProviderResponse
	(*UpdateDNSProviderRequest)(nil),                   // 2: pb.UpdateDNSProviderRequest
	(*CountAllEnabledDNSProvidersRequest)(nil),         // 3: pb.CountAllEnabledDNSProvidersRequest
	(*ListEnabledDNSProvidersRequest)(nil),             // 4: pb.ListEnabledDNSProvidersRequest
	(*ListEnabledDNSProvidersResponse)(nil),            // 5: pb.ListEnabledDNSProvidersResponse
	(*FindAllEnabledDNSProvidersRequest)(nil),          // 6: pb.FindAllEnabledDNSProvidersRequest
	(*FindAllEnabledDNSProvidersResponse)(nil),         // 7: pb.FindAllEnabledDNSProvidersResponse
	(*DeleteDNSProviderRequest)(nil),                   // 8: pb.DeleteDNSProviderRequest
	(*FindEnabledDNSProviderRequest)(nil),              // 9: pb.FindEnabledDNSProviderRequest
	(*FindEnabledDNSProviderResponse)(nil),             // 10: pb.FindEnabledDNSProviderResponse
	(*FindAllDNSProviderTypesRequest)(nil),             // 11: pb.FindAllDNSProviderTypesRequest
	(*FindAllDNSProviderTypesResponse)(nil),            // 12: pb.FindAllDNSProviderTypesResponse
	(*DNSProviderType)(nil),                            // 13: pb.DNSProviderType
	(*FindAllEnabledDNSProvidersWithTypeRequest)(nil),  // 14: pb.FindAllEnabledDNSProvidersWithTypeRequest
	(*FindAllEnabledDNSProvidersWithTypeResponse)(nil), // 15: pb.FindAllEnabledDNSProvidersWithTypeResponse
	(*DNSProvider)(nil),                                // 16: pb.DNSProvider
	(*RPCSuccess)(nil),                                 // 17: pb.RPCSuccess
	(*RPCCountResponse)(nil),                           // 18: pb.RPCCountResponse
}
var file_service_dns_provider_proto_depIdxs = []int32{
	16, // 0: pb.ListEnabledDNSProvidersResponse.dnsProviders:type_name -> pb.DNSProvider
	16, // 1: pb.FindAllEnabledDNSProvidersResponse.dnsProviders:type_name -> pb.DNSProvider
	16, // 2: pb.FindEnabledDNSProviderResponse.dnsProvider:type_name -> pb.DNSProvider
	13, // 3: pb.FindAllDNSProviderTypesResponse.providerTypes:type_name -> pb.DNSProviderType
	16, // 4: pb.FindAllEnabledDNSProvidersWithTypeResponse.dnsProviders:type_name -> pb.DNSProvider
	0,  // 5: pb.DNSProviderService.createDNSProvider:input_type -> pb.CreateDNSProviderRequest
	2,  // 6: pb.DNSProviderService.updateDNSProvider:input_type -> pb.UpdateDNSProviderRequest
	3,  // 7: pb.DNSProviderService.countAllEnabledDNSProviders:input_type -> pb.CountAllEnabledDNSProvidersRequest
	4,  // 8: pb.DNSProviderService.listEnabledDNSProviders:input_type -> pb.ListEnabledDNSProvidersRequest
	6,  // 9: pb.DNSProviderService.findAllEnabledDNSProviders:input_type -> pb.FindAllEnabledDNSProvidersRequest
	8,  // 10: pb.DNSProviderService.deleteDNSProvider:input_type -> pb.DeleteDNSProviderRequest
	9,  // 11: pb.DNSProviderService.findEnabledDNSProvider:input_type -> pb.FindEnabledDNSProviderRequest
	11, // 12: pb.DNSProviderService.findAllDNSProviderTypes:input_type -> pb.FindAllDNSProviderTypesRequest
	14, // 13: pb.DNSProviderService.findAllEnabledDNSProvidersWithType:input_type -> pb.FindAllEnabledDNSProvidersWithTypeRequest
	1,  // 14: pb.DNSProviderService.createDNSProvider:output_type -> pb.CreateDNSProviderResponse
	17, // 15: pb.DNSProviderService.updateDNSProvider:output_type -> pb.RPCSuccess
	18, // 16: pb.DNSProviderService.countAllEnabledDNSProviders:output_type -> pb.RPCCountResponse
	5,  // 17: pb.DNSProviderService.listEnabledDNSProviders:output_type -> pb.ListEnabledDNSProvidersResponse
	7,  // 18: pb.DNSProviderService.findAllEnabledDNSProviders:output_type -> pb.FindAllEnabledDNSProvidersResponse
	17, // 19: pb.DNSProviderService.deleteDNSProvider:output_type -> pb.RPCSuccess
	10, // 20: pb.DNSProviderService.findEnabledDNSProvider:output_type -> pb.FindEnabledDNSProviderResponse
	12, // 21: pb.DNSProviderService.findAllDNSProviderTypes:output_type -> pb.FindAllDNSProviderTypesResponse
	15, // 22: pb.DNSProviderService.findAllEnabledDNSProvidersWithType:output_type -> pb.FindAllEnabledDNSProvidersWithTypeResponse
	14, // [14:23] is the sub-list for method output_type
	5,  // [5:14] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_service_dns_provider_proto_init() }
func file_service_dns_provider_proto_init() {
	if File_service_dns_provider_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_dns_provider_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_dns_provider_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDNSProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDNSProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDNSProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledDNSProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledDNSProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledDNSProvidersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledDNSProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledDNSProvidersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDNSProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledDNSProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledDNSProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDNSProviderTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDNSProviderTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSProviderType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledDNSProvidersWithTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_dns_provider_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledDNSProvidersWithTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_dns_provider_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_dns_provider_proto_goTypes,
		DependencyIndexes: file_service_dns_provider_proto_depIdxs,
		MessageInfos:      file_service_dns_provider_proto_msgTypes,
	}.Build()
	File_service_dns_provider_proto = out.File
	file_service_dns_provider_proto_rawDesc = nil
	file_service_dns_provider_proto_goTypes = nil
	file_service_dns_provider_proto_depIdxs = nil
}
