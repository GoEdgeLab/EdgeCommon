// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_ns_node.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 根据集群查找所有节点
type FindAllEnabledNSNodesWithNSClusterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsClusterId int64 `protobuf:"varint,1,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
}

func (x *FindAllEnabledNSNodesWithNSClusterIdRequest) Reset() {
	*x = FindAllEnabledNSNodesWithNSClusterIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNSNodesWithNSClusterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNSNodesWithNSClusterIdRequest) ProtoMessage() {}

func (x *FindAllEnabledNSNodesWithNSClusterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNSNodesWithNSClusterIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNSNodesWithNSClusterIdRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_node_proto_rawDescGZIP(), []int{0}
}

func (x *FindAllEnabledNSNodesWithNSClusterIdRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

type FindAllEnabledNSNodesWithNSClusterIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsNodes []*NSNode `protobuf:"bytes,1,rep,name=nsNodes,proto3" json:"nsNodes,omitempty"`
}

func (x *FindAllEnabledNSNodesWithNSClusterIdResponse) Reset() {
	*x = FindAllEnabledNSNodesWithNSClusterIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNSNodesWithNSClusterIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNSNodesWithNSClusterIdResponse) ProtoMessage() {}

func (x *FindAllEnabledNSNodesWithNSClusterIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNSNodesWithNSClusterIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNSNodesWithNSClusterIdResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_node_proto_rawDescGZIP(), []int{1}
}

func (x *FindAllEnabledNSNodesWithNSClusterIdResponse) GetNsNodes() []*NSNode {
	if x != nil {
		return x.NsNodes
	}
	return nil
}

// 节点数量
type CountAllEnabledNSNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllEnabledNSNodesRequest) Reset() {
	*x = CountAllEnabledNSNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledNSNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledNSNodesRequest) ProtoMessage() {}

func (x *CountAllEnabledNSNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledNSNodesRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledNSNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_node_proto_rawDescGZIP(), []int{2}
}

// 计算匹配的节点数量
type CountAllEnabledNSNodesMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsClusterId int64 `protobuf:"varint,1,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	//int32 installState = 2;
	//int32 activeState = 3;
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *CountAllEnabledNSNodesMatchRequest) Reset() {
	*x = CountAllEnabledNSNodesMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledNSNodesMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledNSNodesMatchRequest) ProtoMessage() {}

func (x *CountAllEnabledNSNodesMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledNSNodesMatchRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledNSNodesMatchRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_node_proto_rawDescGZIP(), []int{3}
}

func (x *CountAllEnabledNSNodesMatchRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *CountAllEnabledNSNodesMatchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

// 列出单页节点
type ListEnabledNSNodesMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset      int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size        int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	NsClusterId int64  `protobuf:"varint,3,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	Keyword     string `protobuf:"bytes,6,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *ListEnabledNSNodesMatchRequest) Reset() {
	*x = ListEnabledNSNodesMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledNSNodesMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledNSNodesMatchRequest) ProtoMessage() {}

func (x *ListEnabledNSNodesMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledNSNodesMatchRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledNSNodesMatchRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_node_proto_rawDescGZIP(), []int{4}
}

func (x *ListEnabledNSNodesMatchRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledNSNodesMatchRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListEnabledNSNodesMatchRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *ListEnabledNSNodesMatchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type ListEnabledNSNodesMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsNodes []*NSNode `protobuf:"bytes,1,rep,name=nsNodes,proto3" json:"nsNodes,omitempty"`
}

func (x *ListEnabledNSNodesMatchResponse) Reset() {
	*x = ListEnabledNSNodesMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledNSNodesMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledNSNodesMatchResponse) ProtoMessage() {}

func (x *ListEnabledNSNodesMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledNSNodesMatchResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledNSNodesMatchResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_node_proto_rawDescGZIP(), []int{5}
}

func (x *ListEnabledNSNodesMatchResponse) GetNsNodes() []*NSNode {
	if x != nil {
		return x.NsNodes
	}
	return nil
}

var File_service_ns_node_proto protoreflect.FileDescriptor

var file_service_ns_node_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x2b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x2c, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x22, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x88, 0x01, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x47, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x6e, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6e, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x32, 0xaf, 0x03, 0x0a, 0x0d, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x24, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e,
	0x53, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x53, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x1b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_service_ns_node_proto_rawDescOnce sync.Once
	file_service_ns_node_proto_rawDescData = file_service_ns_node_proto_rawDesc
)

func file_service_ns_node_proto_rawDescGZIP() []byte {
	file_service_ns_node_proto_rawDescOnce.Do(func() {
		file_service_ns_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ns_node_proto_rawDescData)
	})
	return file_service_ns_node_proto_rawDescData
}

var file_service_ns_node_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_service_ns_node_proto_goTypes = []interface{}{
	(*FindAllEnabledNSNodesWithNSClusterIdRequest)(nil),  // 0: pb.FindAllEnabledNSNodesWithNSClusterIdRequest
	(*FindAllEnabledNSNodesWithNSClusterIdResponse)(nil), // 1: pb.FindAllEnabledNSNodesWithNSClusterIdResponse
	(*CountAllEnabledNSNodesRequest)(nil),                // 2: pb.CountAllEnabledNSNodesRequest
	(*CountAllEnabledNSNodesMatchRequest)(nil),           // 3: pb.CountAllEnabledNSNodesMatchRequest
	(*ListEnabledNSNodesMatchRequest)(nil),               // 4: pb.ListEnabledNSNodesMatchRequest
	(*ListEnabledNSNodesMatchResponse)(nil),              // 5: pb.ListEnabledNSNodesMatchResponse
	(*NSNode)(nil),                                       // 6: pb.NSNode
	(*RPCCountResponse)(nil),                             // 7: pb.RPCCountResponse
}
var file_service_ns_node_proto_depIdxs = []int32{
	6, // 0: pb.FindAllEnabledNSNodesWithNSClusterIdResponse.nsNodes:type_name -> pb.NSNode
	6, // 1: pb.ListEnabledNSNodesMatchResponse.nsNodes:type_name -> pb.NSNode
	0, // 2: pb.NSNodeService.findAllEnabledNSNodesWithNSClusterId:input_type -> pb.FindAllEnabledNSNodesWithNSClusterIdRequest
	2, // 3: pb.NSNodeService.countAllEnabledNSNodes:input_type -> pb.CountAllEnabledNSNodesRequest
	3, // 4: pb.NSNodeService.countAllEnabledNSNodesMatch:input_type -> pb.CountAllEnabledNSNodesMatchRequest
	4, // 5: pb.NSNodeService.listEnabledNSNodesMatch:input_type -> pb.ListEnabledNSNodesMatchRequest
	1, // 6: pb.NSNodeService.findAllEnabledNSNodesWithNSClusterId:output_type -> pb.FindAllEnabledNSNodesWithNSClusterIdResponse
	7, // 7: pb.NSNodeService.countAllEnabledNSNodes:output_type -> pb.RPCCountResponse
	7, // 8: pb.NSNodeService.countAllEnabledNSNodesMatch:output_type -> pb.RPCCountResponse
	5, // 9: pb.NSNodeService.listEnabledNSNodesMatch:output_type -> pb.ListEnabledNSNodesMatchResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_service_ns_node_proto_init() }
func file_service_ns_node_proto_init() {
	if File_service_ns_node_proto != nil {
		return
	}
	file_models_model_ns_node_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ns_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNSNodesWithNSClusterIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNSNodesWithNSClusterIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledNSNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledNSNodesMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledNSNodesMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledNSNodesMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ns_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ns_node_proto_goTypes,
		DependencyIndexes: file_service_ns_node_proto_depIdxs,
		MessageInfos:      file_service_ns_node_proto_msgTypes,
	}.Build()
	File_service_ns_node_proto = out.File
	file_service_ns_node_proto_rawDesc = nil
	file_service_ns_node_proto_goTypes = nil
	file_service_ns_node_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NSNodeServiceClient is the client API for NSNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NSNodeServiceClient interface {
	// 根据集群查找所有节点
	FindAllEnabledNSNodesWithNSClusterId(ctx context.Context, in *FindAllEnabledNSNodesWithNSClusterIdRequest, opts ...grpc.CallOption) (*FindAllEnabledNSNodesWithNSClusterIdResponse, error)
	// 节点数量
	CountAllEnabledNSNodes(ctx context.Context, in *CountAllEnabledNSNodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 计算匹配的节点数量
	CountAllEnabledNSNodesMatch(ctx context.Context, in *CountAllEnabledNSNodesMatchRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页节点
	ListEnabledNSNodesMatch(ctx context.Context, in *ListEnabledNSNodesMatchRequest, opts ...grpc.CallOption) (*ListEnabledNSNodesMatchResponse, error)
}

type nSNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNSNodeServiceClient(cc grpc.ClientConnInterface) NSNodeServiceClient {
	return &nSNodeServiceClient{cc}
}

func (c *nSNodeServiceClient) FindAllEnabledNSNodesWithNSClusterId(ctx context.Context, in *FindAllEnabledNSNodesWithNSClusterIdRequest, opts ...grpc.CallOption) (*FindAllEnabledNSNodesWithNSClusterIdResponse, error) {
	out := new(FindAllEnabledNSNodesWithNSClusterIdResponse)
	err := c.cc.Invoke(ctx, "/pb.NSNodeService/findAllEnabledNSNodesWithNSClusterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSNodeServiceClient) CountAllEnabledNSNodes(ctx context.Context, in *CountAllEnabledNSNodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NSNodeService/countAllEnabledNSNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSNodeServiceClient) CountAllEnabledNSNodesMatch(ctx context.Context, in *CountAllEnabledNSNodesMatchRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NSNodeService/countAllEnabledNSNodesMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSNodeServiceClient) ListEnabledNSNodesMatch(ctx context.Context, in *ListEnabledNSNodesMatchRequest, opts ...grpc.CallOption) (*ListEnabledNSNodesMatchResponse, error) {
	out := new(ListEnabledNSNodesMatchResponse)
	err := c.cc.Invoke(ctx, "/pb.NSNodeService/listEnabledNSNodesMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSNodeServiceServer is the server API for NSNodeService service.
type NSNodeServiceServer interface {
	// 根据集群查找所有节点
	FindAllEnabledNSNodesWithNSClusterId(context.Context, *FindAllEnabledNSNodesWithNSClusterIdRequest) (*FindAllEnabledNSNodesWithNSClusterIdResponse, error)
	// 节点数量
	CountAllEnabledNSNodes(context.Context, *CountAllEnabledNSNodesRequest) (*RPCCountResponse, error)
	// 计算匹配的节点数量
	CountAllEnabledNSNodesMatch(context.Context, *CountAllEnabledNSNodesMatchRequest) (*RPCCountResponse, error)
	// 列出单页节点
	ListEnabledNSNodesMatch(context.Context, *ListEnabledNSNodesMatchRequest) (*ListEnabledNSNodesMatchResponse, error)
}

// UnimplementedNSNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNSNodeServiceServer struct {
}

func (*UnimplementedNSNodeServiceServer) FindAllEnabledNSNodesWithNSClusterId(context.Context, *FindAllEnabledNSNodesWithNSClusterIdRequest) (*FindAllEnabledNSNodesWithNSClusterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledNSNodesWithNSClusterId not implemented")
}
func (*UnimplementedNSNodeServiceServer) CountAllEnabledNSNodes(context.Context, *CountAllEnabledNSNodesRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledNSNodes not implemented")
}
func (*UnimplementedNSNodeServiceServer) CountAllEnabledNSNodesMatch(context.Context, *CountAllEnabledNSNodesMatchRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledNSNodesMatch not implemented")
}
func (*UnimplementedNSNodeServiceServer) ListEnabledNSNodesMatch(context.Context, *ListEnabledNSNodesMatchRequest) (*ListEnabledNSNodesMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledNSNodesMatch not implemented")
}

func RegisterNSNodeServiceServer(s *grpc.Server, srv NSNodeServiceServer) {
	s.RegisterService(&_NSNodeService_serviceDesc, srv)
}

func _NSNodeService_FindAllEnabledNSNodesWithNSClusterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledNSNodesWithNSClusterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSNodeServiceServer).FindAllEnabledNSNodesWithNSClusterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSNodeService/FindAllEnabledNSNodesWithNSClusterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSNodeServiceServer).FindAllEnabledNSNodesWithNSClusterId(ctx, req.(*FindAllEnabledNSNodesWithNSClusterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSNodeService_CountAllEnabledNSNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledNSNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSNodeServiceServer).CountAllEnabledNSNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSNodeService/CountAllEnabledNSNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSNodeServiceServer).CountAllEnabledNSNodes(ctx, req.(*CountAllEnabledNSNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSNodeService_CountAllEnabledNSNodesMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledNSNodesMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSNodeServiceServer).CountAllEnabledNSNodesMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSNodeService/CountAllEnabledNSNodesMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSNodeServiceServer).CountAllEnabledNSNodesMatch(ctx, req.(*CountAllEnabledNSNodesMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSNodeService_ListEnabledNSNodesMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledNSNodesMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSNodeServiceServer).ListEnabledNSNodesMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSNodeService/ListEnabledNSNodesMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSNodeServiceServer).ListEnabledNSNodesMatch(ctx, req.(*ListEnabledNSNodesMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NSNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NSNodeService",
	HandlerType: (*NSNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findAllEnabledNSNodesWithNSClusterId",
			Handler:    _NSNodeService_FindAllEnabledNSNodesWithNSClusterId_Handler,
		},
		{
			MethodName: "countAllEnabledNSNodes",
			Handler:    _NSNodeService_CountAllEnabledNSNodes_Handler,
		},
		{
			MethodName: "countAllEnabledNSNodesMatch",
			Handler:    _NSNodeService_CountAllEnabledNSNodesMatch_Handler,
		},
		{
			MethodName: "listEnabledNSNodesMatch",
			Handler:    _NSNodeService_ListEnabledNSNodesMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ns_node.proto",
}
