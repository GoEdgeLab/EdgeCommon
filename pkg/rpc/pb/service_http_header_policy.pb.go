// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_http_header_policy.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 查找策略
type FindEnabledHTTPHeaderPolicyConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeaderPolicyId int64 `protobuf:"varint,1,opt,name=httpHeaderPolicyId,proto3" json:"httpHeaderPolicyId,omitempty"`
}

func (x *FindEnabledHTTPHeaderPolicyConfigRequest) Reset() {
	*x = FindEnabledHTTPHeaderPolicyConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPHeaderPolicyConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPHeaderPolicyConfigRequest) ProtoMessage() {}

func (x *FindEnabledHTTPHeaderPolicyConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPHeaderPolicyConfigRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPHeaderPolicyConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{0}
}

func (x *FindEnabledHTTPHeaderPolicyConfigRequest) GetHttpHeaderPolicyId() int64 {
	if x != nil {
		return x.HttpHeaderPolicyId
	}
	return 0
}

type FindEnabledHTTPHeaderPolicyConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeaderPolicyJSON []byte `protobuf:"bytes,1,opt,name=httpHeaderPolicyJSON,proto3" json:"httpHeaderPolicyJSON,omitempty"`
}

func (x *FindEnabledHTTPHeaderPolicyConfigResponse) Reset() {
	*x = FindEnabledHTTPHeaderPolicyConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPHeaderPolicyConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPHeaderPolicyConfigResponse) ProtoMessage() {}

func (x *FindEnabledHTTPHeaderPolicyConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPHeaderPolicyConfigResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPHeaderPolicyConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{1}
}

func (x *FindEnabledHTTPHeaderPolicyConfigResponse) GetHttpHeaderPolicyJSON() []byte {
	if x != nil {
		return x.HttpHeaderPolicyJSON
	}
	return nil
}

// 创建策略
type CreateHTTPHeaderPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateHTTPHeaderPolicyRequest) Reset() {
	*x = CreateHTTPHeaderPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPHeaderPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPHeaderPolicyRequest) ProtoMessage() {}

func (x *CreateHTTPHeaderPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPHeaderPolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateHTTPHeaderPolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{2}
}

type CreateHTTPHeaderPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeaderPolicyId int64 `protobuf:"varint,1,opt,name=httpHeaderPolicyId,proto3" json:"httpHeaderPolicyId,omitempty"`
}

func (x *CreateHTTPHeaderPolicyResponse) Reset() {
	*x = CreateHTTPHeaderPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPHeaderPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPHeaderPolicyResponse) ProtoMessage() {}

func (x *CreateHTTPHeaderPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPHeaderPolicyResponse.ProtoReflect.Descriptor instead.
func (*CreateHTTPHeaderPolicyResponse) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{3}
}

func (x *CreateHTTPHeaderPolicyResponse) GetHttpHeaderPolicyId() int64 {
	if x != nil {
		return x.HttpHeaderPolicyId
	}
	return 0
}

// 修改AddHeaders
type UpdateHTTPHeaderPolicyAddingHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeaderPolicyId int64  `protobuf:"varint,1,opt,name=httpHeaderPolicyId,proto3" json:"httpHeaderPolicyId,omitempty"`
	HeadersJSON        []byte `protobuf:"bytes,2,opt,name=headersJSON,proto3" json:"headersJSON,omitempty"`
}

func (x *UpdateHTTPHeaderPolicyAddingHeadersRequest) Reset() {
	*x = UpdateHTTPHeaderPolicyAddingHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPHeaderPolicyAddingHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPHeaderPolicyAddingHeadersRequest) ProtoMessage() {}

func (x *UpdateHTTPHeaderPolicyAddingHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPHeaderPolicyAddingHeadersRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPHeaderPolicyAddingHeadersRequest) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateHTTPHeaderPolicyAddingHeadersRequest) GetHttpHeaderPolicyId() int64 {
	if x != nil {
		return x.HttpHeaderPolicyId
	}
	return 0
}

func (x *UpdateHTTPHeaderPolicyAddingHeadersRequest) GetHeadersJSON() []byte {
	if x != nil {
		return x.HeadersJSON
	}
	return nil
}

// 修改SetHeaders
type UpdateHTTPHeaderPolicySettingHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeaderPolicyId int64  `protobuf:"varint,1,opt,name=httpHeaderPolicyId,proto3" json:"httpHeaderPolicyId,omitempty"`
	HeadersJSON        []byte `protobuf:"bytes,2,opt,name=headersJSON,proto3" json:"headersJSON,omitempty"`
}

func (x *UpdateHTTPHeaderPolicySettingHeadersRequest) Reset() {
	*x = UpdateHTTPHeaderPolicySettingHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPHeaderPolicySettingHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPHeaderPolicySettingHeadersRequest) ProtoMessage() {}

func (x *UpdateHTTPHeaderPolicySettingHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPHeaderPolicySettingHeadersRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPHeaderPolicySettingHeadersRequest) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateHTTPHeaderPolicySettingHeadersRequest) GetHttpHeaderPolicyId() int64 {
	if x != nil {
		return x.HttpHeaderPolicyId
	}
	return 0
}

func (x *UpdateHTTPHeaderPolicySettingHeadersRequest) GetHeadersJSON() []byte {
	if x != nil {
		return x.HeadersJSON
	}
	return nil
}

// 修改AddTrailers
type UpdateHTTPHeaderPolicyAddingTrailersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeaderPolicyId int64  `protobuf:"varint,1,opt,name=httpHeaderPolicyId,proto3" json:"httpHeaderPolicyId,omitempty"`
	HeadersJSON        []byte `protobuf:"bytes,2,opt,name=headersJSON,proto3" json:"headersJSON,omitempty"`
}

func (x *UpdateHTTPHeaderPolicyAddingTrailersRequest) Reset() {
	*x = UpdateHTTPHeaderPolicyAddingTrailersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPHeaderPolicyAddingTrailersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPHeaderPolicyAddingTrailersRequest) ProtoMessage() {}

func (x *UpdateHTTPHeaderPolicyAddingTrailersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPHeaderPolicyAddingTrailersRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPHeaderPolicyAddingTrailersRequest) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateHTTPHeaderPolicyAddingTrailersRequest) GetHttpHeaderPolicyId() int64 {
	if x != nil {
		return x.HttpHeaderPolicyId
	}
	return 0
}

func (x *UpdateHTTPHeaderPolicyAddingTrailersRequest) GetHeadersJSON() []byte {
	if x != nil {
		return x.HeadersJSON
	}
	return nil
}

// 修改ReplaceHeaders
type UpdateHTTPHeaderPolicyReplacingHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeaderPolicyId int64  `protobuf:"varint,1,opt,name=httpHeaderPolicyId,proto3" json:"httpHeaderPolicyId,omitempty"`
	HeadersJSON        []byte `protobuf:"bytes,2,opt,name=headersJSON,proto3" json:"headersJSON,omitempty"`
}

func (x *UpdateHTTPHeaderPolicyReplacingHeadersRequest) Reset() {
	*x = UpdateHTTPHeaderPolicyReplacingHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPHeaderPolicyReplacingHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPHeaderPolicyReplacingHeadersRequest) ProtoMessage() {}

func (x *UpdateHTTPHeaderPolicyReplacingHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPHeaderPolicyReplacingHeadersRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPHeaderPolicyReplacingHeadersRequest) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateHTTPHeaderPolicyReplacingHeadersRequest) GetHttpHeaderPolicyId() int64 {
	if x != nil {
		return x.HttpHeaderPolicyId
	}
	return 0
}

func (x *UpdateHTTPHeaderPolicyReplacingHeadersRequest) GetHeadersJSON() []byte {
	if x != nil {
		return x.HeadersJSON
	}
	return nil
}

// 修改删除的Headers
type UpdateHTTPHeaderPolicyDeletingHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeaderPolicyId int64    `protobuf:"varint,1,opt,name=httpHeaderPolicyId,proto3" json:"httpHeaderPolicyId,omitempty"`
	HeaderNames        []string `protobuf:"bytes,2,rep,name=headerNames,proto3" json:"headerNames,omitempty"`
}

func (x *UpdateHTTPHeaderPolicyDeletingHeadersRequest) Reset() {
	*x = UpdateHTTPHeaderPolicyDeletingHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPHeaderPolicyDeletingHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPHeaderPolicyDeletingHeadersRequest) ProtoMessage() {}

func (x *UpdateHTTPHeaderPolicyDeletingHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPHeaderPolicyDeletingHeadersRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPHeaderPolicyDeletingHeadersRequest) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateHTTPHeaderPolicyDeletingHeadersRequest) GetHttpHeaderPolicyId() int64 {
	if x != nil {
		return x.HttpHeaderPolicyId
	}
	return 0
}

func (x *UpdateHTTPHeaderPolicyDeletingHeadersRequest) GetHeaderNames() []string {
	if x != nil {
		return x.HeaderNames
	}
	return nil
}

// 修改策略CORS设置
type UpdateHTTPHeaderPolicyCORSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeaderPolicyId int64  `protobuf:"varint,1,opt,name=httpHeaderPolicyId,proto3" json:"httpHeaderPolicyId,omitempty"`
	CorsJSON           []byte `protobuf:"bytes,2,opt,name=corsJSON,proto3" json:"corsJSON,omitempty"`
}

func (x *UpdateHTTPHeaderPolicyCORSRequest) Reset() {
	*x = UpdateHTTPHeaderPolicyCORSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPHeaderPolicyCORSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPHeaderPolicyCORSRequest) ProtoMessage() {}

func (x *UpdateHTTPHeaderPolicyCORSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPHeaderPolicyCORSRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPHeaderPolicyCORSRequest) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateHTTPHeaderPolicyCORSRequest) GetHttpHeaderPolicyId() int64 {
	if x != nil {
		return x.HttpHeaderPolicyId
	}
	return 0
}

func (x *UpdateHTTPHeaderPolicyCORSRequest) GetCorsJSON() []byte {
	if x != nil {
		return x.CorsJSON
	}
	return nil
}

// 修改非标的Headers
type UpdateHTTPHeaderPolicyNonStandardHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeaderPolicyId int64    `protobuf:"varint,1,opt,name=httpHeaderPolicyId,proto3" json:"httpHeaderPolicyId,omitempty"` // Header策略ID
	HeaderNames        []string `protobuf:"bytes,2,rep,name=headerNames,proto3" json:"headerNames,omitempty"`                // 非标Header名称列表
}

func (x *UpdateHTTPHeaderPolicyNonStandardHeadersRequest) Reset() {
	*x = UpdateHTTPHeaderPolicyNonStandardHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_header_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPHeaderPolicyNonStandardHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPHeaderPolicyNonStandardHeadersRequest) ProtoMessage() {}

func (x *UpdateHTTPHeaderPolicyNonStandardHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_header_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPHeaderPolicyNonStandardHeadersRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPHeaderPolicyNonStandardHeadersRequest) Descriptor() ([]byte, []int) {
	return file_service_http_header_policy_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateHTTPHeaderPolicyNonStandardHeadersRequest) GetHttpHeaderPolicyId() int64 {
	if x != nil {
		return x.HttpHeaderPolicyId
	}
	return 0
}

func (x *UpdateHTTPHeaderPolicyNonStandardHeadersRequest) GetHeaderNames() []string {
	if x != nil {
		return x.HeaderNames
	}
	return nil
}

var File_service_http_header_policy_proto protoreflect.FileDescriptor

var file_service_http_header_policy_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72,
	0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5a, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0x5f, 0x0a,
	0x29, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x74,
	0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x1f,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x50, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x22, 0x7e, 0x0a, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68, 0x74, 0x74,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x7f, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68, 0x74,
	0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x53,
	0x4f, 0x4e, 0x22, 0x7f, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4a,
	0x53, 0x4f, 0x4e, 0x22, 0x81, 0x01, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x80, 0x01, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x21, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x4f, 0x52, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68, 0x74, 0x74,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x83, 0x01, 0x0a, 0x2f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68, 0x74, 0x74,
	0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x32, 0xd4, 0x07, 0x0a, 0x17, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01,
	0x0a, 0x21, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x23, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x41, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x67, 0x0a, 0x24, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x67, 0x0a, 0x24, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6b, 0x0a, 0x26, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x69, 0x0a, 0x25, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x30, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x6f, 0x0a, 0x28, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x33,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x1a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x4f, 0x52,
	0x53, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x4f, 0x52,
	0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_http_header_policy_proto_rawDescOnce sync.Once
	file_service_http_header_policy_proto_rawDescData = file_service_http_header_policy_proto_rawDesc
)

func file_service_http_header_policy_proto_rawDescGZIP() []byte {
	file_service_http_header_policy_proto_rawDescOnce.Do(func() {
		file_service_http_header_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_http_header_policy_proto_rawDescData)
	})
	return file_service_http_header_policy_proto_rawDescData
}

var file_service_http_header_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_service_http_header_policy_proto_goTypes = []interface{}{
	(*FindEnabledHTTPHeaderPolicyConfigRequest)(nil),        // 0: pb.FindEnabledHTTPHeaderPolicyConfigRequest
	(*FindEnabledHTTPHeaderPolicyConfigResponse)(nil),       // 1: pb.FindEnabledHTTPHeaderPolicyConfigResponse
	(*CreateHTTPHeaderPolicyRequest)(nil),                   // 2: pb.CreateHTTPHeaderPolicyRequest
	(*CreateHTTPHeaderPolicyResponse)(nil),                  // 3: pb.CreateHTTPHeaderPolicyResponse
	(*UpdateHTTPHeaderPolicyAddingHeadersRequest)(nil),      // 4: pb.UpdateHTTPHeaderPolicyAddingHeadersRequest
	(*UpdateHTTPHeaderPolicySettingHeadersRequest)(nil),     // 5: pb.UpdateHTTPHeaderPolicySettingHeadersRequest
	(*UpdateHTTPHeaderPolicyAddingTrailersRequest)(nil),     // 6: pb.UpdateHTTPHeaderPolicyAddingTrailersRequest
	(*UpdateHTTPHeaderPolicyReplacingHeadersRequest)(nil),   // 7: pb.UpdateHTTPHeaderPolicyReplacingHeadersRequest
	(*UpdateHTTPHeaderPolicyDeletingHeadersRequest)(nil),    // 8: pb.UpdateHTTPHeaderPolicyDeletingHeadersRequest
	(*UpdateHTTPHeaderPolicyCORSRequest)(nil),               // 9: pb.UpdateHTTPHeaderPolicyCORSRequest
	(*UpdateHTTPHeaderPolicyNonStandardHeadersRequest)(nil), // 10: pb.UpdateHTTPHeaderPolicyNonStandardHeadersRequest
	(*RPCSuccess)(nil), // 11: pb.RPCSuccess
}
var file_service_http_header_policy_proto_depIdxs = []int32{
	0,  // 0: pb.HTTPHeaderPolicyService.findEnabledHTTPHeaderPolicyConfig:input_type -> pb.FindEnabledHTTPHeaderPolicyConfigRequest
	2,  // 1: pb.HTTPHeaderPolicyService.createHTTPHeaderPolicy:input_type -> pb.CreateHTTPHeaderPolicyRequest
	4,  // 2: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyAddingHeaders:input_type -> pb.UpdateHTTPHeaderPolicyAddingHeadersRequest
	5,  // 3: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicySettingHeaders:input_type -> pb.UpdateHTTPHeaderPolicySettingHeadersRequest
	6,  // 4: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyAddingTrailers:input_type -> pb.UpdateHTTPHeaderPolicyAddingTrailersRequest
	7,  // 5: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyReplacingHeaders:input_type -> pb.UpdateHTTPHeaderPolicyReplacingHeadersRequest
	8,  // 6: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyDeletingHeaders:input_type -> pb.UpdateHTTPHeaderPolicyDeletingHeadersRequest
	10, // 7: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyNonStandardHeaders:input_type -> pb.UpdateHTTPHeaderPolicyNonStandardHeadersRequest
	9,  // 8: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyCORS:input_type -> pb.UpdateHTTPHeaderPolicyCORSRequest
	1,  // 9: pb.HTTPHeaderPolicyService.findEnabledHTTPHeaderPolicyConfig:output_type -> pb.FindEnabledHTTPHeaderPolicyConfigResponse
	3,  // 10: pb.HTTPHeaderPolicyService.createHTTPHeaderPolicy:output_type -> pb.CreateHTTPHeaderPolicyResponse
	11, // 11: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyAddingHeaders:output_type -> pb.RPCSuccess
	11, // 12: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicySettingHeaders:output_type -> pb.RPCSuccess
	11, // 13: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyAddingTrailers:output_type -> pb.RPCSuccess
	11, // 14: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyReplacingHeaders:output_type -> pb.RPCSuccess
	11, // 15: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyDeletingHeaders:output_type -> pb.RPCSuccess
	11, // 16: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyNonStandardHeaders:output_type -> pb.RPCSuccess
	11, // 17: pb.HTTPHeaderPolicyService.updateHTTPHeaderPolicyCORS:output_type -> pb.RPCSuccess
	9,  // [9:18] is the sub-list for method output_type
	0,  // [0:9] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_service_http_header_policy_proto_init() }
func file_service_http_header_policy_proto_init() {
	if File_service_http_header_policy_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_http_header_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPHeaderPolicyConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_header_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPHeaderPolicyConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_header_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPHeaderPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_header_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPHeaderPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_header_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPHeaderPolicyAddingHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_header_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPHeaderPolicySettingHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_header_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPHeaderPolicyAddingTrailersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_header_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPHeaderPolicyReplacingHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_header_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPHeaderPolicyDeletingHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_header_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPHeaderPolicyCORSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_header_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPHeaderPolicyNonStandardHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_http_header_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_http_header_policy_proto_goTypes,
		DependencyIndexes: file_service_http_header_policy_proto_depIdxs,
		MessageInfos:      file_service_http_header_policy_proto_msgTypes,
	}.Build()
	File_service_http_header_policy_proto = out.File
	file_service_http_header_policy_proto_rawDesc = nil
	file_service_http_header_policy_proto_goTypes = nil
	file_service_http_header_policy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HTTPHeaderPolicyServiceClient is the client API for HTTPHeaderPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HTTPHeaderPolicyServiceClient interface {
	// 查找策略配置
	FindEnabledHTTPHeaderPolicyConfig(ctx context.Context, in *FindEnabledHTTPHeaderPolicyConfigRequest, opts ...grpc.CallOption) (*FindEnabledHTTPHeaderPolicyConfigResponse, error)
	// 创建策略
	CreateHTTPHeaderPolicy(ctx context.Context, in *CreateHTTPHeaderPolicyRequest, opts ...grpc.CallOption) (*CreateHTTPHeaderPolicyResponse, error)
	// 修改AddHeaders
	UpdateHTTPHeaderPolicyAddingHeaders(ctx context.Context, in *UpdateHTTPHeaderPolicyAddingHeadersRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改SetHeaders
	UpdateHTTPHeaderPolicySettingHeaders(ctx context.Context, in *UpdateHTTPHeaderPolicySettingHeadersRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改AddTrailers
	UpdateHTTPHeaderPolicyAddingTrailers(ctx context.Context, in *UpdateHTTPHeaderPolicyAddingTrailersRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改ReplaceHeaders
	UpdateHTTPHeaderPolicyReplacingHeaders(ctx context.Context, in *UpdateHTTPHeaderPolicyReplacingHeadersRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改删除的Headers
	UpdateHTTPHeaderPolicyDeletingHeaders(ctx context.Context, in *UpdateHTTPHeaderPolicyDeletingHeadersRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改非标的Headers
	UpdateHTTPHeaderPolicyNonStandardHeaders(ctx context.Context, in *UpdateHTTPHeaderPolicyNonStandardHeadersRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改策略CORS设置
	UpdateHTTPHeaderPolicyCORS(ctx context.Context, in *UpdateHTTPHeaderPolicyCORSRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
}

type hTTPHeaderPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPHeaderPolicyServiceClient(cc grpc.ClientConnInterface) HTTPHeaderPolicyServiceClient {
	return &hTTPHeaderPolicyServiceClient{cc}
}

func (c *hTTPHeaderPolicyServiceClient) FindEnabledHTTPHeaderPolicyConfig(ctx context.Context, in *FindEnabledHTTPHeaderPolicyConfigRequest, opts ...grpc.CallOption) (*FindEnabledHTTPHeaderPolicyConfigResponse, error) {
	out := new(FindEnabledHTTPHeaderPolicyConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPHeaderPolicyService/findEnabledHTTPHeaderPolicyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPHeaderPolicyServiceClient) CreateHTTPHeaderPolicy(ctx context.Context, in *CreateHTTPHeaderPolicyRequest, opts ...grpc.CallOption) (*CreateHTTPHeaderPolicyResponse, error) {
	out := new(CreateHTTPHeaderPolicyResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPHeaderPolicyService/createHTTPHeaderPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPHeaderPolicyServiceClient) UpdateHTTPHeaderPolicyAddingHeaders(ctx context.Context, in *UpdateHTTPHeaderPolicyAddingHeadersRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPHeaderPolicyService/updateHTTPHeaderPolicyAddingHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPHeaderPolicyServiceClient) UpdateHTTPHeaderPolicySettingHeaders(ctx context.Context, in *UpdateHTTPHeaderPolicySettingHeadersRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPHeaderPolicyService/updateHTTPHeaderPolicySettingHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPHeaderPolicyServiceClient) UpdateHTTPHeaderPolicyAddingTrailers(ctx context.Context, in *UpdateHTTPHeaderPolicyAddingTrailersRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPHeaderPolicyService/updateHTTPHeaderPolicyAddingTrailers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPHeaderPolicyServiceClient) UpdateHTTPHeaderPolicyReplacingHeaders(ctx context.Context, in *UpdateHTTPHeaderPolicyReplacingHeadersRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPHeaderPolicyService/updateHTTPHeaderPolicyReplacingHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPHeaderPolicyServiceClient) UpdateHTTPHeaderPolicyDeletingHeaders(ctx context.Context, in *UpdateHTTPHeaderPolicyDeletingHeadersRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPHeaderPolicyService/updateHTTPHeaderPolicyDeletingHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPHeaderPolicyServiceClient) UpdateHTTPHeaderPolicyNonStandardHeaders(ctx context.Context, in *UpdateHTTPHeaderPolicyNonStandardHeadersRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPHeaderPolicyService/updateHTTPHeaderPolicyNonStandardHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPHeaderPolicyServiceClient) UpdateHTTPHeaderPolicyCORS(ctx context.Context, in *UpdateHTTPHeaderPolicyCORSRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPHeaderPolicyService/updateHTTPHeaderPolicyCORS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPHeaderPolicyServiceServer is the server API for HTTPHeaderPolicyService service.
type HTTPHeaderPolicyServiceServer interface {
	// 查找策略配置
	FindEnabledHTTPHeaderPolicyConfig(context.Context, *FindEnabledHTTPHeaderPolicyConfigRequest) (*FindEnabledHTTPHeaderPolicyConfigResponse, error)
	// 创建策略
	CreateHTTPHeaderPolicy(context.Context, *CreateHTTPHeaderPolicyRequest) (*CreateHTTPHeaderPolicyResponse, error)
	// 修改AddHeaders
	UpdateHTTPHeaderPolicyAddingHeaders(context.Context, *UpdateHTTPHeaderPolicyAddingHeadersRequest) (*RPCSuccess, error)
	// 修改SetHeaders
	UpdateHTTPHeaderPolicySettingHeaders(context.Context, *UpdateHTTPHeaderPolicySettingHeadersRequest) (*RPCSuccess, error)
	// 修改AddTrailers
	UpdateHTTPHeaderPolicyAddingTrailers(context.Context, *UpdateHTTPHeaderPolicyAddingTrailersRequest) (*RPCSuccess, error)
	// 修改ReplaceHeaders
	UpdateHTTPHeaderPolicyReplacingHeaders(context.Context, *UpdateHTTPHeaderPolicyReplacingHeadersRequest) (*RPCSuccess, error)
	// 修改删除的Headers
	UpdateHTTPHeaderPolicyDeletingHeaders(context.Context, *UpdateHTTPHeaderPolicyDeletingHeadersRequest) (*RPCSuccess, error)
	// 修改非标的Headers
	UpdateHTTPHeaderPolicyNonStandardHeaders(context.Context, *UpdateHTTPHeaderPolicyNonStandardHeadersRequest) (*RPCSuccess, error)
	// 修改策略CORS设置
	UpdateHTTPHeaderPolicyCORS(context.Context, *UpdateHTTPHeaderPolicyCORSRequest) (*RPCSuccess, error)
}

// UnimplementedHTTPHeaderPolicyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHTTPHeaderPolicyServiceServer struct {
}

func (*UnimplementedHTTPHeaderPolicyServiceServer) FindEnabledHTTPHeaderPolicyConfig(context.Context, *FindEnabledHTTPHeaderPolicyConfigRequest) (*FindEnabledHTTPHeaderPolicyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledHTTPHeaderPolicyConfig not implemented")
}
func (*UnimplementedHTTPHeaderPolicyServiceServer) CreateHTTPHeaderPolicy(context.Context, *CreateHTTPHeaderPolicyRequest) (*CreateHTTPHeaderPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHTTPHeaderPolicy not implemented")
}
func (*UnimplementedHTTPHeaderPolicyServiceServer) UpdateHTTPHeaderPolicyAddingHeaders(context.Context, *UpdateHTTPHeaderPolicyAddingHeadersRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPHeaderPolicyAddingHeaders not implemented")
}
func (*UnimplementedHTTPHeaderPolicyServiceServer) UpdateHTTPHeaderPolicySettingHeaders(context.Context, *UpdateHTTPHeaderPolicySettingHeadersRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPHeaderPolicySettingHeaders not implemented")
}
func (*UnimplementedHTTPHeaderPolicyServiceServer) UpdateHTTPHeaderPolicyAddingTrailers(context.Context, *UpdateHTTPHeaderPolicyAddingTrailersRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPHeaderPolicyAddingTrailers not implemented")
}
func (*UnimplementedHTTPHeaderPolicyServiceServer) UpdateHTTPHeaderPolicyReplacingHeaders(context.Context, *UpdateHTTPHeaderPolicyReplacingHeadersRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPHeaderPolicyReplacingHeaders not implemented")
}
func (*UnimplementedHTTPHeaderPolicyServiceServer) UpdateHTTPHeaderPolicyDeletingHeaders(context.Context, *UpdateHTTPHeaderPolicyDeletingHeadersRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPHeaderPolicyDeletingHeaders not implemented")
}
func (*UnimplementedHTTPHeaderPolicyServiceServer) UpdateHTTPHeaderPolicyNonStandardHeaders(context.Context, *UpdateHTTPHeaderPolicyNonStandardHeadersRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPHeaderPolicyNonStandardHeaders not implemented")
}
func (*UnimplementedHTTPHeaderPolicyServiceServer) UpdateHTTPHeaderPolicyCORS(context.Context, *UpdateHTTPHeaderPolicyCORSRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPHeaderPolicyCORS not implemented")
}

func RegisterHTTPHeaderPolicyServiceServer(s *grpc.Server, srv HTTPHeaderPolicyServiceServer) {
	s.RegisterService(&_HTTPHeaderPolicyService_serviceDesc, srv)
}

func _HTTPHeaderPolicyService_FindEnabledHTTPHeaderPolicyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledHTTPHeaderPolicyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPHeaderPolicyServiceServer).FindEnabledHTTPHeaderPolicyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPHeaderPolicyService/FindEnabledHTTPHeaderPolicyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPHeaderPolicyServiceServer).FindEnabledHTTPHeaderPolicyConfig(ctx, req.(*FindEnabledHTTPHeaderPolicyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPHeaderPolicyService_CreateHTTPHeaderPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHTTPHeaderPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPHeaderPolicyServiceServer).CreateHTTPHeaderPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPHeaderPolicyService/CreateHTTPHeaderPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPHeaderPolicyServiceServer).CreateHTTPHeaderPolicy(ctx, req.(*CreateHTTPHeaderPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyAddingHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPHeaderPolicyAddingHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyAddingHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPHeaderPolicyService/UpdateHTTPHeaderPolicyAddingHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyAddingHeaders(ctx, req.(*UpdateHTTPHeaderPolicyAddingHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicySettingHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPHeaderPolicySettingHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicySettingHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPHeaderPolicyService/UpdateHTTPHeaderPolicySettingHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicySettingHeaders(ctx, req.(*UpdateHTTPHeaderPolicySettingHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyAddingTrailers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPHeaderPolicyAddingTrailersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyAddingTrailers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPHeaderPolicyService/UpdateHTTPHeaderPolicyAddingTrailers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyAddingTrailers(ctx, req.(*UpdateHTTPHeaderPolicyAddingTrailersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyReplacingHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPHeaderPolicyReplacingHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyReplacingHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPHeaderPolicyService/UpdateHTTPHeaderPolicyReplacingHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyReplacingHeaders(ctx, req.(*UpdateHTTPHeaderPolicyReplacingHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyDeletingHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPHeaderPolicyDeletingHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyDeletingHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPHeaderPolicyService/UpdateHTTPHeaderPolicyDeletingHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyDeletingHeaders(ctx, req.(*UpdateHTTPHeaderPolicyDeletingHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyNonStandardHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPHeaderPolicyNonStandardHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyNonStandardHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPHeaderPolicyService/UpdateHTTPHeaderPolicyNonStandardHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyNonStandardHeaders(ctx, req.(*UpdateHTTPHeaderPolicyNonStandardHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyCORS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPHeaderPolicyCORSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyCORS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPHeaderPolicyService/UpdateHTTPHeaderPolicyCORS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPHeaderPolicyServiceServer).UpdateHTTPHeaderPolicyCORS(ctx, req.(*UpdateHTTPHeaderPolicyCORSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTPHeaderPolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HTTPHeaderPolicyService",
	HandlerType: (*HTTPHeaderPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findEnabledHTTPHeaderPolicyConfig",
			Handler:    _HTTPHeaderPolicyService_FindEnabledHTTPHeaderPolicyConfig_Handler,
		},
		{
			MethodName: "createHTTPHeaderPolicy",
			Handler:    _HTTPHeaderPolicyService_CreateHTTPHeaderPolicy_Handler,
		},
		{
			MethodName: "updateHTTPHeaderPolicyAddingHeaders",
			Handler:    _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyAddingHeaders_Handler,
		},
		{
			MethodName: "updateHTTPHeaderPolicySettingHeaders",
			Handler:    _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicySettingHeaders_Handler,
		},
		{
			MethodName: "updateHTTPHeaderPolicyAddingTrailers",
			Handler:    _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyAddingTrailers_Handler,
		},
		{
			MethodName: "updateHTTPHeaderPolicyReplacingHeaders",
			Handler:    _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyReplacingHeaders_Handler,
		},
		{
			MethodName: "updateHTTPHeaderPolicyDeletingHeaders",
			Handler:    _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyDeletingHeaders_Handler,
		},
		{
			MethodName: "updateHTTPHeaderPolicyNonStandardHeaders",
			Handler:    _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyNonStandardHeaders_Handler,
		},
		{
			MethodName: "updateHTTPHeaderPolicyCORS",
			Handler:    _HTTPHeaderPolicyService_UpdateHTTPHeaderPolicyCORS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_http_header_policy.proto",
}
