// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_node_threshold.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建阈值
type CreateNodeThresholdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role           string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	NodeClusterId  int64  `protobuf:"varint,2,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	NodeId         int64  `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Item           string `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	Param          string `protobuf:"bytes,5,opt,name=param,proto3" json:"param,omitempty"`
	Operator       string `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	ValueJSON      []byte `protobuf:"bytes,7,opt,name=valueJSON,proto3" json:"valueJSON,omitempty"`
	Message        string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	Duration       int32  `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	DurationUnit   string `protobuf:"bytes,10,opt,name=durationUnit,proto3" json:"durationUnit,omitempty"`
	SumMethod      string `protobuf:"bytes,11,opt,name=sumMethod,proto3" json:"sumMethod,omitempty"`
	NotifyDuration int32  `protobuf:"varint,12,opt,name=notifyDuration,proto3" json:"notifyDuration,omitempty"`
}

func (x *CreateNodeThresholdRequest) Reset() {
	*x = CreateNodeThresholdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_threshold_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeThresholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeThresholdRequest) ProtoMessage() {}

func (x *CreateNodeThresholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_threshold_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeThresholdRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeThresholdRequest) Descriptor() ([]byte, []int) {
	return file_service_node_threshold_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNodeThresholdRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CreateNodeThresholdRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CreateNodeThresholdRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *CreateNodeThresholdRequest) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *CreateNodeThresholdRequest) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *CreateNodeThresholdRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CreateNodeThresholdRequest) GetValueJSON() []byte {
	if x != nil {
		return x.ValueJSON
	}
	return nil
}

func (x *CreateNodeThresholdRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateNodeThresholdRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateNodeThresholdRequest) GetDurationUnit() string {
	if x != nil {
		return x.DurationUnit
	}
	return ""
}

func (x *CreateNodeThresholdRequest) GetSumMethod() string {
	if x != nil {
		return x.SumMethod
	}
	return ""
}

func (x *CreateNodeThresholdRequest) GetNotifyDuration() int32 {
	if x != nil {
		return x.NotifyDuration
	}
	return 0
}

type CreateNodeThresholdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeThresholdId int64 `protobuf:"varint,1,opt,name=nodeThresholdId,proto3" json:"nodeThresholdId,omitempty"`
}

func (x *CreateNodeThresholdResponse) Reset() {
	*x = CreateNodeThresholdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_threshold_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeThresholdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeThresholdResponse) ProtoMessage() {}

func (x *CreateNodeThresholdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_threshold_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeThresholdResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeThresholdResponse) Descriptor() ([]byte, []int) {
	return file_service_node_threshold_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNodeThresholdResponse) GetNodeThresholdId() int64 {
	if x != nil {
		return x.NodeThresholdId
	}
	return 0
}

// 修改阈值
type UpdateNodeThresholdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeThresholdId int64  `protobuf:"varint,1,opt,name=nodeThresholdId,proto3" json:"nodeThresholdId,omitempty"`
	Item            string `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	Param           string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	Operator        string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	ValueJSON       []byte `protobuf:"bytes,5,opt,name=valueJSON,proto3" json:"valueJSON,omitempty"`
	Message         string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Duration        int32  `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	DurationUnit    string `protobuf:"bytes,8,opt,name=durationUnit,proto3" json:"durationUnit,omitempty"`
	SumMethod       string `protobuf:"bytes,9,opt,name=sumMethod,proto3" json:"sumMethod,omitempty"`
	IsOn            bool   `protobuf:"varint,10,opt,name=isOn,proto3" json:"isOn,omitempty"`
	NotifyDuration  int32  `protobuf:"varint,11,opt,name=notifyDuration,proto3" json:"notifyDuration,omitempty"`
}

func (x *UpdateNodeThresholdRequest) Reset() {
	*x = UpdateNodeThresholdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_threshold_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeThresholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeThresholdRequest) ProtoMessage() {}

func (x *UpdateNodeThresholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_threshold_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeThresholdRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeThresholdRequest) Descriptor() ([]byte, []int) {
	return file_service_node_threshold_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNodeThresholdRequest) GetNodeThresholdId() int64 {
	if x != nil {
		return x.NodeThresholdId
	}
	return 0
}

func (x *UpdateNodeThresholdRequest) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *UpdateNodeThresholdRequest) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *UpdateNodeThresholdRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *UpdateNodeThresholdRequest) GetValueJSON() []byte {
	if x != nil {
		return x.ValueJSON
	}
	return nil
}

func (x *UpdateNodeThresholdRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateNodeThresholdRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UpdateNodeThresholdRequest) GetDurationUnit() string {
	if x != nil {
		return x.DurationUnit
	}
	return ""
}

func (x *UpdateNodeThresholdRequest) GetSumMethod() string {
	if x != nil {
		return x.SumMethod
	}
	return ""
}

func (x *UpdateNodeThresholdRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateNodeThresholdRequest) GetNotifyDuration() int32 {
	if x != nil {
		return x.NotifyDuration
	}
	return 0
}

// 删除阈值
type DeleteNodeThresholdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeThresholdId int64 `protobuf:"varint,1,opt,name=nodeThresholdId,proto3" json:"nodeThresholdId,omitempty"`
}

func (x *DeleteNodeThresholdRequest) Reset() {
	*x = DeleteNodeThresholdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_threshold_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeThresholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeThresholdRequest) ProtoMessage() {}

func (x *DeleteNodeThresholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_threshold_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeThresholdRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeThresholdRequest) Descriptor() ([]byte, []int) {
	return file_service_node_threshold_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteNodeThresholdRequest) GetNodeThresholdId() int64 {
	if x != nil {
		return x.NodeThresholdId
	}
	return 0
}

// 查询阈值
type FindAllEnabledNodeThresholdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role          string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	NodeClusterId int64  `protobuf:"varint,2,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	NodeId        int64  `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *FindAllEnabledNodeThresholdsRequest) Reset() {
	*x = FindAllEnabledNodeThresholdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_threshold_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNodeThresholdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNodeThresholdsRequest) ProtoMessage() {}

func (x *FindAllEnabledNodeThresholdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_threshold_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNodeThresholdsRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNodeThresholdsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_threshold_proto_rawDescGZIP(), []int{4}
}

func (x *FindAllEnabledNodeThresholdsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *FindAllEnabledNodeThresholdsRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *FindAllEnabledNodeThresholdsRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type FindAllEnabledNodeThresholdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeThresholds []*NodeThreshold `protobuf:"bytes,1,rep,name=nodeThresholds,proto3" json:"nodeThresholds,omitempty"`
}

func (x *FindAllEnabledNodeThresholdsResponse) Reset() {
	*x = FindAllEnabledNodeThresholdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_threshold_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNodeThresholdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNodeThresholdsResponse) ProtoMessage() {}

func (x *FindAllEnabledNodeThresholdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_threshold_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNodeThresholdsResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNodeThresholdsResponse) Descriptor() ([]byte, []int) {
	return file_service_node_threshold_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllEnabledNodeThresholdsResponse) GetNodeThresholds() []*NodeThreshold {
	if x != nil {
		return x.NodeThresholds
	}
	return nil
}

// 计算阈值数量
type CountAllEnabledNodeThresholdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role          string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	NodeClusterId int64  `protobuf:"varint,2,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	NodeId        int64  `protobuf:"varint,3,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *CountAllEnabledNodeThresholdsRequest) Reset() {
	*x = CountAllEnabledNodeThresholdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_threshold_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledNodeThresholdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledNodeThresholdsRequest) ProtoMessage() {}

func (x *CountAllEnabledNodeThresholdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_threshold_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledNodeThresholdsRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledNodeThresholdsRequest) Descriptor() ([]byte, []int) {
	return file_service_node_threshold_proto_rawDescGZIP(), []int{6}
}

func (x *CountAllEnabledNodeThresholdsRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CountAllEnabledNodeThresholdsRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CountAllEnabledNodeThresholdsRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// 查询单个阈值详情
type FindEnabledNodeThresholdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeThresholdId int64 `protobuf:"varint,1,opt,name=nodeThresholdId,proto3" json:"nodeThresholdId,omitempty"`
}

func (x *FindEnabledNodeThresholdRequest) Reset() {
	*x = FindEnabledNodeThresholdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_threshold_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNodeThresholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNodeThresholdRequest) ProtoMessage() {}

func (x *FindEnabledNodeThresholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_threshold_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNodeThresholdRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledNodeThresholdRequest) Descriptor() ([]byte, []int) {
	return file_service_node_threshold_proto_rawDescGZIP(), []int{7}
}

func (x *FindEnabledNodeThresholdRequest) GetNodeThresholdId() int64 {
	if x != nil {
		return x.NodeThresholdId
	}
	return 0
}

type FindEnabledNodeThresholdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeThreshold *NodeThreshold `protobuf:"bytes,1,opt,name=nodeThreshold,proto3" json:"nodeThreshold,omitempty"`
}

func (x *FindEnabledNodeThresholdResponse) Reset() {
	*x = FindEnabledNodeThresholdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_threshold_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNodeThresholdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNodeThresholdResponse) ProtoMessage() {}

func (x *FindEnabledNodeThresholdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_threshold_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNodeThresholdResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledNodeThresholdResponse) Descriptor() ([]byte, []int) {
	return file_service_node_threshold_proto_rawDescGZIP(), []int{8}
}

func (x *FindEnabledNodeThresholdResponse) GetNodeThreshold() *NodeThreshold {
	if x != nil {
		return x.NodeThreshold
	}
	return nil
}

var File_service_node_threshold_proto protoreflect.FileDescriptor

var file_service_node_threshold_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf2, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e,
	0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xde,
	0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x46, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0x61, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x22, 0x78, 0x0a, 0x24, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x4b, 0x0a,
	0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x20, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0xb7, 0x04, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x56, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x45, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x71, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_service_node_threshold_proto_rawDescOnce sync.Once
	file_service_node_threshold_proto_rawDescData = file_service_node_threshold_proto_rawDesc
)

func file_service_node_threshold_proto_rawDescGZIP() []byte {
	file_service_node_threshold_proto_rawDescOnce.Do(func() {
		file_service_node_threshold_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_node_threshold_proto_rawDescData)
	})
	return file_service_node_threshold_proto_rawDescData
}

var file_service_node_threshold_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_node_threshold_proto_goTypes = []interface{}{
	(*CreateNodeThresholdRequest)(nil),           // 0: pb.CreateNodeThresholdRequest
	(*CreateNodeThresholdResponse)(nil),          // 1: pb.CreateNodeThresholdResponse
	(*UpdateNodeThresholdRequest)(nil),           // 2: pb.UpdateNodeThresholdRequest
	(*DeleteNodeThresholdRequest)(nil),           // 3: pb.DeleteNodeThresholdRequest
	(*FindAllEnabledNodeThresholdsRequest)(nil),  // 4: pb.FindAllEnabledNodeThresholdsRequest
	(*FindAllEnabledNodeThresholdsResponse)(nil), // 5: pb.FindAllEnabledNodeThresholdsResponse
	(*CountAllEnabledNodeThresholdsRequest)(nil), // 6: pb.CountAllEnabledNodeThresholdsRequest
	(*FindEnabledNodeThresholdRequest)(nil),      // 7: pb.FindEnabledNodeThresholdRequest
	(*FindEnabledNodeThresholdResponse)(nil),     // 8: pb.FindEnabledNodeThresholdResponse
	(*NodeThreshold)(nil),                        // 9: pb.NodeThreshold
	(*RPCSuccess)(nil),                           // 10: pb.RPCSuccess
	(*RPCCountResponse)(nil),                     // 11: pb.RPCCountResponse
}
var file_service_node_threshold_proto_depIdxs = []int32{
	9,  // 0: pb.FindAllEnabledNodeThresholdsResponse.nodeThresholds:type_name -> pb.NodeThreshold
	9,  // 1: pb.FindEnabledNodeThresholdResponse.nodeThreshold:type_name -> pb.NodeThreshold
	0,  // 2: pb.NodeThresholdService.createNodeThreshold:input_type -> pb.CreateNodeThresholdRequest
	2,  // 3: pb.NodeThresholdService.updateNodeThreshold:input_type -> pb.UpdateNodeThresholdRequest
	3,  // 4: pb.NodeThresholdService.deleteNodeThreshold:input_type -> pb.DeleteNodeThresholdRequest
	4,  // 5: pb.NodeThresholdService.findAllEnabledNodeThresholds:input_type -> pb.FindAllEnabledNodeThresholdsRequest
	6,  // 6: pb.NodeThresholdService.countAllEnabledNodeThresholds:input_type -> pb.CountAllEnabledNodeThresholdsRequest
	7,  // 7: pb.NodeThresholdService.findEnabledNodeThreshold:input_type -> pb.FindEnabledNodeThresholdRequest
	1,  // 8: pb.NodeThresholdService.createNodeThreshold:output_type -> pb.CreateNodeThresholdResponse
	10, // 9: pb.NodeThresholdService.updateNodeThreshold:output_type -> pb.RPCSuccess
	10, // 10: pb.NodeThresholdService.deleteNodeThreshold:output_type -> pb.RPCSuccess
	5,  // 11: pb.NodeThresholdService.findAllEnabledNodeThresholds:output_type -> pb.FindAllEnabledNodeThresholdsResponse
	11, // 12: pb.NodeThresholdService.countAllEnabledNodeThresholds:output_type -> pb.RPCCountResponse
	8,  // 13: pb.NodeThresholdService.findEnabledNodeThreshold:output_type -> pb.FindEnabledNodeThresholdResponse
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_node_threshold_proto_init() }
func file_service_node_threshold_proto_init() {
	if File_service_node_threshold_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_node_threshold_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_node_threshold_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeThresholdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_threshold_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeThresholdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_threshold_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeThresholdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_threshold_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeThresholdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_threshold_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNodeThresholdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_threshold_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNodeThresholdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_threshold_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledNodeThresholdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_threshold_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNodeThresholdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_threshold_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNodeThresholdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_node_threshold_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_node_threshold_proto_goTypes,
		DependencyIndexes: file_service_node_threshold_proto_depIdxs,
		MessageInfos:      file_service_node_threshold_proto_msgTypes,
	}.Build()
	File_service_node_threshold_proto = out.File
	file_service_node_threshold_proto_rawDesc = nil
	file_service_node_threshold_proto_goTypes = nil
	file_service_node_threshold_proto_depIdxs = nil
}
