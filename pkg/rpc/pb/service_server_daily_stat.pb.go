// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_server_daily_stat.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 上传统计
type UploadServerDailyStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats       []*ServerDailyStat                          `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	DomainStats []*UploadServerDailyStatsRequest_DomainStat `protobuf:"bytes,2,rep,name=domainStats,proto3" json:"domainStats,omitempty"`
}

func (x *UploadServerDailyStatsRequest) Reset() {
	*x = UploadServerDailyStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerDailyStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerDailyStatsRequest) ProtoMessage() {}

func (x *UploadServerDailyStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerDailyStatsRequest.ProtoReflect.Descriptor instead.
func (*UploadServerDailyStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{0}
}

func (x *UploadServerDailyStatsRequest) GetStats() []*ServerDailyStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *UploadServerDailyStatsRequest) GetDomainStats() []*UploadServerDailyStatsRequest_DomainStat {
	if x != nil {
		return x.DomainStats
	}
	return nil
}

// 按小时读取统计数据
type FindLatestServerHourlyStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Hours    int32 `protobuf:"varint,2,opt,name=hours,proto3" json:"hours,omitempty"` // 小时数
}

func (x *FindLatestServerHourlyStatsRequest) Reset() {
	*x = FindLatestServerHourlyStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServerHourlyStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServerHourlyStatsRequest) ProtoMessage() {}

func (x *FindLatestServerHourlyStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServerHourlyStatsRequest.ProtoReflect.Descriptor instead.
func (*FindLatestServerHourlyStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{1}
}

func (x *FindLatestServerHourlyStatsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FindLatestServerHourlyStatsRequest) GetHours() int32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

type FindLatestServerHourlyStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*FindLatestServerHourlyStatsResponse_HourlyStat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *FindLatestServerHourlyStatsResponse) Reset() {
	*x = FindLatestServerHourlyStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServerHourlyStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServerHourlyStatsResponse) ProtoMessage() {}

func (x *FindLatestServerHourlyStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServerHourlyStatsResponse.ProtoReflect.Descriptor instead.
func (*FindLatestServerHourlyStatsResponse) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{2}
}

func (x *FindLatestServerHourlyStatsResponse) GetStats() []*FindLatestServerHourlyStatsResponse_HourlyStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

// 按分钟读取统计数据
type FindLatestServerMinutelyStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Minutes  int32 `protobuf:"varint,2,opt,name=minutes,proto3" json:"minutes,omitempty"` // 分钟数
}

func (x *FindLatestServerMinutelyStatsRequest) Reset() {
	*x = FindLatestServerMinutelyStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServerMinutelyStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServerMinutelyStatsRequest) ProtoMessage() {}

func (x *FindLatestServerMinutelyStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServerMinutelyStatsRequest.ProtoReflect.Descriptor instead.
func (*FindLatestServerMinutelyStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{3}
}

func (x *FindLatestServerMinutelyStatsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FindLatestServerMinutelyStatsRequest) GetMinutes() int32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

type FindLatestServerMinutelyStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*FindLatestServerMinutelyStatsResponse_MinutelyStat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *FindLatestServerMinutelyStatsResponse) Reset() {
	*x = FindLatestServerMinutelyStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServerMinutelyStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServerMinutelyStatsResponse) ProtoMessage() {}

func (x *FindLatestServerMinutelyStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServerMinutelyStatsResponse.ProtoReflect.Descriptor instead.
func (*FindLatestServerMinutelyStatsResponse) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{4}
}

func (x *FindLatestServerMinutelyStatsResponse) GetStats() []*FindLatestServerMinutelyStatsResponse_MinutelyStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

// 读取某天的5分钟间隔流量
type FindServer5MinutelyStatsWithDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Day      string `protobuf:"bytes,2,opt,name=day,proto3" json:"day,omitempty"`           // 必需，格式：YYYYMMDD
	TimeFrom string `protobuf:"bytes,3,opt,name=timeFrom,proto3" json:"timeFrom,omitempty"` // 可选，开始时间，格式：HHIISS，比如 130000
	TimeTo   string `protobuf:"bytes,4,opt,name=timeTo,proto3" json:"timeTo,omitempty"`     // 可选，结束时间，格式：HHIISS，比如 130459
}

func (x *FindServer5MinutelyStatsWithDayRequest) Reset() {
	*x = FindServer5MinutelyStatsWithDayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServer5MinutelyStatsWithDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServer5MinutelyStatsWithDayRequest) ProtoMessage() {}

func (x *FindServer5MinutelyStatsWithDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServer5MinutelyStatsWithDayRequest.ProtoReflect.Descriptor instead.
func (*FindServer5MinutelyStatsWithDayRequest) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{5}
}

func (x *FindServer5MinutelyStatsWithDayRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FindServer5MinutelyStatsWithDayRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *FindServer5MinutelyStatsWithDayRequest) GetTimeFrom() string {
	if x != nil {
		return x.TimeFrom
	}
	return ""
}

func (x *FindServer5MinutelyStatsWithDayRequest) GetTimeTo() string {
	if x != nil {
		return x.TimeTo
	}
	return ""
}

type FindServer5MinutelyStatsWithDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*FindServer5MinutelyStatsWithDayResponse_Stat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *FindServer5MinutelyStatsWithDayResponse) Reset() {
	*x = FindServer5MinutelyStatsWithDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServer5MinutelyStatsWithDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServer5MinutelyStatsWithDayResponse) ProtoMessage() {}

func (x *FindServer5MinutelyStatsWithDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServer5MinutelyStatsWithDayResponse.ProtoReflect.Descriptor instead.
func (*FindServer5MinutelyStatsWithDayResponse) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{6}
}

func (x *FindServer5MinutelyStatsWithDayResponse) GetStats() []*FindServer5MinutelyStatsWithDayResponse_Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

// 读取最近N日的统计数据
type FindLatestServerDailyStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId     int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	NodeRegionId int64 `protobuf:"varint,3,opt,name=nodeRegionId,proto3" json:"nodeRegionId,omitempty"` // 区域ID，可选
	Days         int32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`                 // 天数
}

func (x *FindLatestServerDailyStatsRequest) Reset() {
	*x = FindLatestServerDailyStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServerDailyStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServerDailyStatsRequest) ProtoMessage() {}

func (x *FindLatestServerDailyStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServerDailyStatsRequest.ProtoReflect.Descriptor instead.
func (*FindLatestServerDailyStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{7}
}

func (x *FindLatestServerDailyStatsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FindLatestServerDailyStatsRequest) GetNodeRegionId() int64 {
	if x != nil {
		return x.NodeRegionId
	}
	return 0
}

func (x *FindLatestServerDailyStatsRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type FindLatestServerDailyStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*FindLatestServerDailyStatsResponse_DailyStat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *FindLatestServerDailyStatsResponse) Reset() {
	*x = FindLatestServerDailyStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServerDailyStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServerDailyStatsResponse) ProtoMessage() {}

func (x *FindLatestServerDailyStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServerDailyStatsResponse.ProtoReflect.Descriptor instead.
func (*FindLatestServerDailyStatsResponse) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{8}
}

func (x *FindLatestServerDailyStatsResponse) GetStats() []*FindLatestServerDailyStatsResponse_DailyStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

// 读取日期段内的流量数据
type FindServerDailyStatsBetweenDaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`             // 用户ID，和服务ID二选一
	ServerId     int64  `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`         // 服务ID，和用户ID二选一
	DayFrom      string `protobuf:"bytes,3,opt,name=dayFrom,proto3" json:"dayFrom,omitempty"`            // 开始日期 YYYYMMDD
	DayTo        string `protobuf:"bytes,4,opt,name=dayTo,proto3" json:"dayTo,omitempty"`                // 结束日期 YYYYMMDD
	NodeRegionId int64  `protobuf:"varint,5,opt,name=nodeRegionId,proto3" json:"nodeRegionId,omitempty"` // 区域ID
}

func (x *FindServerDailyStatsBetweenDaysRequest) Reset() {
	*x = FindServerDailyStatsBetweenDaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerDailyStatsBetweenDaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerDailyStatsBetweenDaysRequest) ProtoMessage() {}

func (x *FindServerDailyStatsBetweenDaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerDailyStatsBetweenDaysRequest.ProtoReflect.Descriptor instead.
func (*FindServerDailyStatsBetweenDaysRequest) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{9}
}

func (x *FindServerDailyStatsBetweenDaysRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FindServerDailyStatsBetweenDaysRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FindServerDailyStatsBetweenDaysRequest) GetDayFrom() string {
	if x != nil {
		return x.DayFrom
	}
	return ""
}

func (x *FindServerDailyStatsBetweenDaysRequest) GetDayTo() string {
	if x != nil {
		return x.DayTo
	}
	return ""
}

func (x *FindServerDailyStatsBetweenDaysRequest) GetNodeRegionId() int64 {
	if x != nil {
		return x.NodeRegionId
	}
	return 0
}

type FindServerDailyStatsBetweenDaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*FindServerDailyStatsBetweenDaysResponse_Stat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *FindServerDailyStatsBetweenDaysResponse) Reset() {
	*x = FindServerDailyStatsBetweenDaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerDailyStatsBetweenDaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerDailyStatsBetweenDaysResponse) ProtoMessage() {}

func (x *FindServerDailyStatsBetweenDaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerDailyStatsBetweenDaysResponse.ProtoReflect.Descriptor instead.
func (*FindServerDailyStatsBetweenDaysResponse) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{10}
}

func (x *FindServerDailyStatsBetweenDaysResponse) GetStats() []*FindServerDailyStatsBetweenDaysResponse_Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

// 查找单个服务当前时刻（N分钟内）统计数据
type SumCurrentServerDailyStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *SumCurrentServerDailyStatsRequest) Reset() {
	*x = SumCurrentServerDailyStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumCurrentServerDailyStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumCurrentServerDailyStatsRequest) ProtoMessage() {}

func (x *SumCurrentServerDailyStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumCurrentServerDailyStatsRequest.ProtoReflect.Descriptor instead.
func (*SumCurrentServerDailyStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{11}
}

func (x *SumCurrentServerDailyStatsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type SumCurrentServerDailyStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerDailyStat *ServerDailyStat `protobuf:"bytes,1,opt,name=serverDailyStat,proto3" json:"serverDailyStat,omitempty"`
}

func (x *SumCurrentServerDailyStatsResponse) Reset() {
	*x = SumCurrentServerDailyStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumCurrentServerDailyStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumCurrentServerDailyStatsResponse) ProtoMessage() {}

func (x *SumCurrentServerDailyStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumCurrentServerDailyStatsResponse.ProtoReflect.Descriptor instead.
func (*SumCurrentServerDailyStatsResponse) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{12}
}

func (x *SumCurrentServerDailyStatsResponse) GetServerDailyStat() *ServerDailyStat {
	if x != nil {
		return x.ServerDailyStat
	}
	return nil
}

// 计算单个服务的日统计
type SumServerDailyStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	ServerId     int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	NodeRegionId int64  `protobuf:"varint,6,opt,name=nodeRegionId,proto3" json:"nodeRegionId,omitempty"`
	Day          string `protobuf:"bytes,2,opt,name=day,proto3" json:"day,omitempty"`         // YYYYMMDD
	DayFrom      string `protobuf:"bytes,4,opt,name=dayFrom,proto3" json:"dayFrom,omitempty"` // day 和 dayFrom+dayTo 二选一， YYYYMMDD
	DayTo        string `protobuf:"bytes,5,opt,name=dayTo,proto3" json:"dayTo,omitempty"`     // day 和 dayFrom+dayTo 二选一，YYYYMMDD
}

func (x *SumServerDailyStatsRequest) Reset() {
	*x = SumServerDailyStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumServerDailyStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumServerDailyStatsRequest) ProtoMessage() {}

func (x *SumServerDailyStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumServerDailyStatsRequest.ProtoReflect.Descriptor instead.
func (*SumServerDailyStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{13}
}

func (x *SumServerDailyStatsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SumServerDailyStatsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *SumServerDailyStatsRequest) GetNodeRegionId() int64 {
	if x != nil {
		return x.NodeRegionId
	}
	return 0
}

func (x *SumServerDailyStatsRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *SumServerDailyStatsRequest) GetDayFrom() string {
	if x != nil {
		return x.DayFrom
	}
	return ""
}

func (x *SumServerDailyStatsRequest) GetDayTo() string {
	if x != nil {
		return x.DayTo
	}
	return ""
}

type SumServerDailyStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerDailyStat *ServerDailyStat `protobuf:"bytes,1,opt,name=serverDailyStat,proto3" json:"serverDailyStat,omitempty"`
}

func (x *SumServerDailyStatsResponse) Reset() {
	*x = SumServerDailyStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumServerDailyStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumServerDailyStatsResponse) ProtoMessage() {}

func (x *SumServerDailyStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumServerDailyStatsResponse.ProtoReflect.Descriptor instead.
func (*SumServerDailyStatsResponse) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{14}
}

func (x *SumServerDailyStatsResponse) GetServerDailyStat() *ServerDailyStat {
	if x != nil {
		return x.ServerDailyStat
	}
	return nil
}

// 计算单个服务的月统计
type SumServerMonthlyStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Month    string `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"` // YYYYMM
}

func (x *SumServerMonthlyStatsRequest) Reset() {
	*x = SumServerMonthlyStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumServerMonthlyStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumServerMonthlyStatsRequest) ProtoMessage() {}

func (x *SumServerMonthlyStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumServerMonthlyStatsRequest.ProtoReflect.Descriptor instead.
func (*SumServerMonthlyStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{15}
}

func (x *SumServerMonthlyStatsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *SumServerMonthlyStatsRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

type SumServerMonthlyStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerMonthlyStat *ServerDailyStat `protobuf:"bytes,1,opt,name=serverMonthlyStat,proto3" json:"serverMonthlyStat,omitempty"`
}

func (x *SumServerMonthlyStatsResponse) Reset() {
	*x = SumServerMonthlyStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumServerMonthlyStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumServerMonthlyStatsResponse) ProtoMessage() {}

func (x *SumServerMonthlyStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumServerMonthlyStatsResponse.ProtoReflect.Descriptor instead.
func (*SumServerMonthlyStatsResponse) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{16}
}

func (x *SumServerMonthlyStatsResponse) GetServerMonthlyStat() *ServerDailyStat {
	if x != nil {
		return x.ServerMonthlyStat
	}
	return nil
}

type UploadServerDailyStatsRequest_DomainStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId            int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Domain              string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Bytes               int64  `protobuf:"varint,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CachedBytes         int64  `protobuf:"varint,4,opt,name=cachedBytes,proto3" json:"cachedBytes,omitempty"`
	CountRequests       int64  `protobuf:"varint,5,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	CountCachedRequests int64  `protobuf:"varint,6,opt,name=countCachedRequests,proto3" json:"countCachedRequests,omitempty"`
	CountAttackRequests int64  `protobuf:"varint,8,opt,name=countAttackRequests,proto3" json:"countAttackRequests,omitempty"`
	AttackBytes         int64  `protobuf:"varint,9,opt,name=attackBytes,proto3" json:"attackBytes,omitempty"`
	CreatedAt           int64  `protobuf:"varint,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *UploadServerDailyStatsRequest_DomainStat) Reset() {
	*x = UploadServerDailyStatsRequest_DomainStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerDailyStatsRequest_DomainStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerDailyStatsRequest_DomainStat) ProtoMessage() {}

func (x *UploadServerDailyStatsRequest_DomainStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerDailyStatsRequest_DomainStat.ProtoReflect.Descriptor instead.
func (*UploadServerDailyStatsRequest_DomainStat) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{0, 0}
}

func (x *UploadServerDailyStatsRequest_DomainStat) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerDailyStatsRequest_DomainStat) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UploadServerDailyStatsRequest_DomainStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *UploadServerDailyStatsRequest_DomainStat) GetCachedBytes() int64 {
	if x != nil {
		return x.CachedBytes
	}
	return 0
}

func (x *UploadServerDailyStatsRequest_DomainStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *UploadServerDailyStatsRequest_DomainStat) GetCountCachedRequests() int64 {
	if x != nil {
		return x.CountCachedRequests
	}
	return 0
}

func (x *UploadServerDailyStatsRequest_DomainStat) GetCountAttackRequests() int64 {
	if x != nil {
		return x.CountAttackRequests
	}
	return 0
}

func (x *UploadServerDailyStatsRequest_DomainStat) GetAttackBytes() int64 {
	if x != nil {
		return x.AttackBytes
	}
	return 0
}

func (x *UploadServerDailyStatsRequest_DomainStat) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type FindLatestServerHourlyStatsResponse_HourlyStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour                string `protobuf:"bytes,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Bytes               int64  `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CachedBytes         int64  `protobuf:"varint,3,opt,name=cachedBytes,proto3" json:"cachedBytes,omitempty"`
	CountRequests       int64  `protobuf:"varint,4,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	CountCachedRequests int64  `protobuf:"varint,5,opt,name=countCachedRequests,proto3" json:"countCachedRequests,omitempty"`
}

func (x *FindLatestServerHourlyStatsResponse_HourlyStat) Reset() {
	*x = FindLatestServerHourlyStatsResponse_HourlyStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServerHourlyStatsResponse_HourlyStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServerHourlyStatsResponse_HourlyStat) ProtoMessage() {}

func (x *FindLatestServerHourlyStatsResponse_HourlyStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServerHourlyStatsResponse_HourlyStat.ProtoReflect.Descriptor instead.
func (*FindLatestServerHourlyStatsResponse_HourlyStat) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FindLatestServerHourlyStatsResponse_HourlyStat) GetHour() string {
	if x != nil {
		return x.Hour
	}
	return ""
}

func (x *FindLatestServerHourlyStatsResponse_HourlyStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *FindLatestServerHourlyStatsResponse_HourlyStat) GetCachedBytes() int64 {
	if x != nil {
		return x.CachedBytes
	}
	return 0
}

func (x *FindLatestServerHourlyStatsResponse_HourlyStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *FindLatestServerHourlyStatsResponse_HourlyStat) GetCountCachedRequests() int64 {
	if x != nil {
		return x.CountCachedRequests
	}
	return 0
}

type FindLatestServerMinutelyStatsResponse_MinutelyStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minute              string `protobuf:"bytes,1,opt,name=minute,proto3" json:"minute,omitempty"`
	Bytes               int64  `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CachedBytes         int64  `protobuf:"varint,3,opt,name=cachedBytes,proto3" json:"cachedBytes,omitempty"`
	CountRequests       int64  `protobuf:"varint,4,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	CountCachedRequests int64  `protobuf:"varint,5,opt,name=countCachedRequests,proto3" json:"countCachedRequests,omitempty"`
}

func (x *FindLatestServerMinutelyStatsResponse_MinutelyStat) Reset() {
	*x = FindLatestServerMinutelyStatsResponse_MinutelyStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServerMinutelyStatsResponse_MinutelyStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServerMinutelyStatsResponse_MinutelyStat) ProtoMessage() {}

func (x *FindLatestServerMinutelyStatsResponse_MinutelyStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServerMinutelyStatsResponse_MinutelyStat.ProtoReflect.Descriptor instead.
func (*FindLatestServerMinutelyStatsResponse_MinutelyStat) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{4, 0}
}

func (x *FindLatestServerMinutelyStatsResponse_MinutelyStat) GetMinute() string {
	if x != nil {
		return x.Minute
	}
	return ""
}

func (x *FindLatestServerMinutelyStatsResponse_MinutelyStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *FindLatestServerMinutelyStatsResponse_MinutelyStat) GetCachedBytes() int64 {
	if x != nil {
		return x.CachedBytes
	}
	return 0
}

func (x *FindLatestServerMinutelyStatsResponse_MinutelyStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *FindLatestServerMinutelyStatsResponse_MinutelyStat) GetCountCachedRequests() int64 {
	if x != nil {
		return x.CountCachedRequests
	}
	return 0
}

type FindServer5MinutelyStatsWithDayResponse_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day                 string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	TimeFrom            string `protobuf:"bytes,2,opt,name=timeFrom,proto3" json:"timeFrom,omitempty"`
	TimeTo              string `protobuf:"bytes,3,opt,name=timeTo,proto3" json:"timeTo,omitempty"`
	Bytes               int64  `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CachedBytes         int64  `protobuf:"varint,5,opt,name=cachedBytes,proto3" json:"cachedBytes,omitempty"`
	CountRequests       int64  `protobuf:"varint,6,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	CountCachedRequests int64  `protobuf:"varint,7,opt,name=countCachedRequests,proto3" json:"countCachedRequests,omitempty"`
}

func (x *FindServer5MinutelyStatsWithDayResponse_Stat) Reset() {
	*x = FindServer5MinutelyStatsWithDayResponse_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServer5MinutelyStatsWithDayResponse_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServer5MinutelyStatsWithDayResponse_Stat) ProtoMessage() {}

func (x *FindServer5MinutelyStatsWithDayResponse_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServer5MinutelyStatsWithDayResponse_Stat.ProtoReflect.Descriptor instead.
func (*FindServer5MinutelyStatsWithDayResponse_Stat) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{6, 0}
}

func (x *FindServer5MinutelyStatsWithDayResponse_Stat) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *FindServer5MinutelyStatsWithDayResponse_Stat) GetTimeFrom() string {
	if x != nil {
		return x.TimeFrom
	}
	return ""
}

func (x *FindServer5MinutelyStatsWithDayResponse_Stat) GetTimeTo() string {
	if x != nil {
		return x.TimeTo
	}
	return ""
}

func (x *FindServer5MinutelyStatsWithDayResponse_Stat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *FindServer5MinutelyStatsWithDayResponse_Stat) GetCachedBytes() int64 {
	if x != nil {
		return x.CachedBytes
	}
	return 0
}

func (x *FindServer5MinutelyStatsWithDayResponse_Stat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *FindServer5MinutelyStatsWithDayResponse_Stat) GetCountCachedRequests() int64 {
	if x != nil {
		return x.CountCachedRequests
	}
	return 0
}

type FindLatestServerDailyStatsResponse_DailyStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day                 string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Bytes               int64  `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CachedBytes         int64  `protobuf:"varint,3,opt,name=cachedBytes,proto3" json:"cachedBytes,omitempty"`
	CountRequests       int64  `protobuf:"varint,4,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	CountCachedRequests int64  `protobuf:"varint,5,opt,name=countCachedRequests,proto3" json:"countCachedRequests,omitempty"`
}

func (x *FindLatestServerDailyStatsResponse_DailyStat) Reset() {
	*x = FindLatestServerDailyStatsResponse_DailyStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServerDailyStatsResponse_DailyStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServerDailyStatsResponse_DailyStat) ProtoMessage() {}

func (x *FindLatestServerDailyStatsResponse_DailyStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServerDailyStatsResponse_DailyStat.ProtoReflect.Descriptor instead.
func (*FindLatestServerDailyStatsResponse_DailyStat) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{8, 0}
}

func (x *FindLatestServerDailyStatsResponse_DailyStat) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *FindLatestServerDailyStatsResponse_DailyStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *FindLatestServerDailyStatsResponse_DailyStat) GetCachedBytes() int64 {
	if x != nil {
		return x.CachedBytes
	}
	return 0
}

func (x *FindLatestServerDailyStatsResponse_DailyStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *FindLatestServerDailyStatsResponse_DailyStat) GetCountCachedRequests() int64 {
	if x != nil {
		return x.CountCachedRequests
	}
	return 0
}

type FindServerDailyStatsBetweenDaysResponse_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day                 string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	TimeFrom            string `protobuf:"bytes,2,opt,name=timeFrom,proto3" json:"timeFrom,omitempty"`
	TimeTo              string `protobuf:"bytes,3,opt,name=timeTo,proto3" json:"timeTo,omitempty"`
	TimeAt              string `protobuf:"bytes,4,opt,name=timeAt,proto3" json:"timeAt,omitempty"`
	Bytes               int64  `protobuf:"varint,5,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CachedBytes         int64  `protobuf:"varint,6,opt,name=cachedBytes,proto3" json:"cachedBytes,omitempty"`
	CountRequests       int64  `protobuf:"varint,7,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	CountCachedRequests int64  `protobuf:"varint,8,opt,name=countCachedRequests,proto3" json:"countCachedRequests,omitempty"`
}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) Reset() {
	*x = FindServerDailyStatsBetweenDaysResponse_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_daily_stat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerDailyStatsBetweenDaysResponse_Stat) ProtoMessage() {}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_daily_stat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerDailyStatsBetweenDaysResponse_Stat.ProtoReflect.Descriptor instead.
func (*FindServerDailyStatsBetweenDaysResponse_Stat) Descriptor() ([]byte, []int) {
	return file_service_server_daily_stat_proto_rawDescGZIP(), []int{10, 0}
}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) GetTimeFrom() string {
	if x != nil {
		return x.TimeFrom
	}
	return ""
}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) GetTimeTo() string {
	if x != nil {
		return x.TimeTo
	}
	return ""
}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) GetTimeAt() string {
	if x != nil {
		return x.TimeAt
	}
	return ""
}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) GetCachedBytes() int64 {
	if x != nil {
		return x.CachedBytes
	}
	return 0
}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *FindServerDailyStatsBetweenDaysResponse_Stat) GetCountCachedRequests() int64 {
	if x != nil {
		return x.CountCachedRequests
	}
	return 0
}

var File_service_server_daily_stat_proto protoreflect.FileDescriptor

var file_service_server_daily_stat_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x1a, 0xc2, 0x02, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x56, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x22, 0xa2, 0x02, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x75,
	0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x1a, 0xb0, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xb6, 0x01, 0x0a, 0x0c,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x26, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x35, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x6f, 0x22, 0xd0, 0x02, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x35, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x35, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0x9c, 0x02,
	0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xad, 0x01, 0x0a,
	0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xb0, 0x01, 0x0a,
	0x26, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xe8, 0x02, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x3f, 0x0a, 0x21, 0x53, 0x75,
	0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x22, 0x53,
	0x75, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x22, 0xb6, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x79,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x79, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x79, 0x54, 0x6f, 0x22, 0x5c, 0x0a, 0x1b, 0x53, 0x75, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x22, 0x50, 0x0a, 0x1c, 0x53, 0x75, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x62, 0x0a, 0x1d, 0x53, 0x75, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x32, 0xd3, 0x07,
	0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6e, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1f, 0x66,
	0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x35, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x79, 0x12, 0x2a,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x35, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x35, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1f, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x1a, 0x73, 0x75, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x6d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x13, 0x73, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_service_server_daily_stat_proto_rawDescOnce sync.Once
	file_service_server_daily_stat_proto_rawDescData = file_service_server_daily_stat_proto_rawDesc
)

func file_service_server_daily_stat_proto_rawDescGZIP() []byte {
	file_service_server_daily_stat_proto_rawDescOnce.Do(func() {
		file_service_server_daily_stat_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_server_daily_stat_proto_rawDescData)
	})
	return file_service_server_daily_stat_proto_rawDescData
}

var file_service_server_daily_stat_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_service_server_daily_stat_proto_goTypes = []interface{}{
	(*UploadServerDailyStatsRequest)(nil),                      // 0: pb.UploadServerDailyStatsRequest
	(*FindLatestServerHourlyStatsRequest)(nil),                 // 1: pb.FindLatestServerHourlyStatsRequest
	(*FindLatestServerHourlyStatsResponse)(nil),                // 2: pb.FindLatestServerHourlyStatsResponse
	(*FindLatestServerMinutelyStatsRequest)(nil),               // 3: pb.FindLatestServerMinutelyStatsRequest
	(*FindLatestServerMinutelyStatsResponse)(nil),              // 4: pb.FindLatestServerMinutelyStatsResponse
	(*FindServer5MinutelyStatsWithDayRequest)(nil),             // 5: pb.FindServer5MinutelyStatsWithDayRequest
	(*FindServer5MinutelyStatsWithDayResponse)(nil),            // 6: pb.FindServer5MinutelyStatsWithDayResponse
	(*FindLatestServerDailyStatsRequest)(nil),                  // 7: pb.FindLatestServerDailyStatsRequest
	(*FindLatestServerDailyStatsResponse)(nil),                 // 8: pb.FindLatestServerDailyStatsResponse
	(*FindServerDailyStatsBetweenDaysRequest)(nil),             // 9: pb.FindServerDailyStatsBetweenDaysRequest
	(*FindServerDailyStatsBetweenDaysResponse)(nil),            // 10: pb.FindServerDailyStatsBetweenDaysResponse
	(*SumCurrentServerDailyStatsRequest)(nil),                  // 11: pb.SumCurrentServerDailyStatsRequest
	(*SumCurrentServerDailyStatsResponse)(nil),                 // 12: pb.SumCurrentServerDailyStatsResponse
	(*SumServerDailyStatsRequest)(nil),                         // 13: pb.SumServerDailyStatsRequest
	(*SumServerDailyStatsResponse)(nil),                        // 14: pb.SumServerDailyStatsResponse
	(*SumServerMonthlyStatsRequest)(nil),                       // 15: pb.SumServerMonthlyStatsRequest
	(*SumServerMonthlyStatsResponse)(nil),                      // 16: pb.SumServerMonthlyStatsResponse
	(*UploadServerDailyStatsRequest_DomainStat)(nil),           // 17: pb.UploadServerDailyStatsRequest.DomainStat
	(*FindLatestServerHourlyStatsResponse_HourlyStat)(nil),     // 18: pb.FindLatestServerHourlyStatsResponse.HourlyStat
	(*FindLatestServerMinutelyStatsResponse_MinutelyStat)(nil), // 19: pb.FindLatestServerMinutelyStatsResponse.MinutelyStat
	(*FindServer5MinutelyStatsWithDayResponse_Stat)(nil),       // 20: pb.FindServer5MinutelyStatsWithDayResponse.Stat
	(*FindLatestServerDailyStatsResponse_DailyStat)(nil),       // 21: pb.FindLatestServerDailyStatsResponse.DailyStat
	(*FindServerDailyStatsBetweenDaysResponse_Stat)(nil),       // 22: pb.FindServerDailyStatsBetweenDaysResponse.Stat
	(*ServerDailyStat)(nil),                                    // 23: pb.ServerDailyStat
	(*RPCSuccess)(nil),                                         // 24: pb.RPCSuccess
}
var file_service_server_daily_stat_proto_depIdxs = []int32{
	23, // 0: pb.UploadServerDailyStatsRequest.stats:type_name -> pb.ServerDailyStat
	17, // 1: pb.UploadServerDailyStatsRequest.domainStats:type_name -> pb.UploadServerDailyStatsRequest.DomainStat
	18, // 2: pb.FindLatestServerHourlyStatsResponse.stats:type_name -> pb.FindLatestServerHourlyStatsResponse.HourlyStat
	19, // 3: pb.FindLatestServerMinutelyStatsResponse.stats:type_name -> pb.FindLatestServerMinutelyStatsResponse.MinutelyStat
	20, // 4: pb.FindServer5MinutelyStatsWithDayResponse.stats:type_name -> pb.FindServer5MinutelyStatsWithDayResponse.Stat
	21, // 5: pb.FindLatestServerDailyStatsResponse.stats:type_name -> pb.FindLatestServerDailyStatsResponse.DailyStat
	22, // 6: pb.FindServerDailyStatsBetweenDaysResponse.stats:type_name -> pb.FindServerDailyStatsBetweenDaysResponse.Stat
	23, // 7: pb.SumCurrentServerDailyStatsResponse.serverDailyStat:type_name -> pb.ServerDailyStat
	23, // 8: pb.SumServerDailyStatsResponse.serverDailyStat:type_name -> pb.ServerDailyStat
	23, // 9: pb.SumServerMonthlyStatsResponse.serverMonthlyStat:type_name -> pb.ServerDailyStat
	0,  // 10: pb.ServerDailyStatService.uploadServerDailyStats:input_type -> pb.UploadServerDailyStatsRequest
	1,  // 11: pb.ServerDailyStatService.findLatestServerHourlyStats:input_type -> pb.FindLatestServerHourlyStatsRequest
	3,  // 12: pb.ServerDailyStatService.findLatestServerMinutelyStats:input_type -> pb.FindLatestServerMinutelyStatsRequest
	5,  // 13: pb.ServerDailyStatService.findServer5MinutelyStatsWithDay:input_type -> pb.FindServer5MinutelyStatsWithDayRequest
	7,  // 14: pb.ServerDailyStatService.findLatestServerDailyStats:input_type -> pb.FindLatestServerDailyStatsRequest
	9,  // 15: pb.ServerDailyStatService.findServerDailyStatsBetweenDays:input_type -> pb.FindServerDailyStatsBetweenDaysRequest
	11, // 16: pb.ServerDailyStatService.sumCurrentServerDailyStats:input_type -> pb.SumCurrentServerDailyStatsRequest
	13, // 17: pb.ServerDailyStatService.sumServerDailyStats:input_type -> pb.SumServerDailyStatsRequest
	15, // 18: pb.ServerDailyStatService.sumServerMonthlyStats:input_type -> pb.SumServerMonthlyStatsRequest
	24, // 19: pb.ServerDailyStatService.uploadServerDailyStats:output_type -> pb.RPCSuccess
	2,  // 20: pb.ServerDailyStatService.findLatestServerHourlyStats:output_type -> pb.FindLatestServerHourlyStatsResponse
	4,  // 21: pb.ServerDailyStatService.findLatestServerMinutelyStats:output_type -> pb.FindLatestServerMinutelyStatsResponse
	6,  // 22: pb.ServerDailyStatService.findServer5MinutelyStatsWithDay:output_type -> pb.FindServer5MinutelyStatsWithDayResponse
	8,  // 23: pb.ServerDailyStatService.findLatestServerDailyStats:output_type -> pb.FindLatestServerDailyStatsResponse
	10, // 24: pb.ServerDailyStatService.findServerDailyStatsBetweenDays:output_type -> pb.FindServerDailyStatsBetweenDaysResponse
	12, // 25: pb.ServerDailyStatService.sumCurrentServerDailyStats:output_type -> pb.SumCurrentServerDailyStatsResponse
	14, // 26: pb.ServerDailyStatService.sumServerDailyStats:output_type -> pb.SumServerDailyStatsResponse
	16, // 27: pb.ServerDailyStatService.sumServerMonthlyStats:output_type -> pb.SumServerMonthlyStatsResponse
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_service_server_daily_stat_proto_init() }
func file_service_server_daily_stat_proto_init() {
	if File_service_server_daily_stat_proto != nil {
		return
	}
	file_models_model_server_daily_stat_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_server_daily_stat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerDailyStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServerHourlyStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServerHourlyStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServerMinutelyStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServerMinutelyStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServer5MinutelyStatsWithDayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServer5MinutelyStatsWithDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServerDailyStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServerDailyStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerDailyStatsBetweenDaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerDailyStatsBetweenDaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumCurrentServerDailyStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumCurrentServerDailyStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumServerDailyStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumServerDailyStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumServerMonthlyStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumServerMonthlyStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerDailyStatsRequest_DomainStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServerHourlyStatsResponse_HourlyStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServerMinutelyStatsResponse_MinutelyStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServer5MinutelyStatsWithDayResponse_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServerDailyStatsResponse_DailyStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_daily_stat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerDailyStatsBetweenDaysResponse_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_server_daily_stat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_server_daily_stat_proto_goTypes,
		DependencyIndexes: file_service_server_daily_stat_proto_depIdxs,
		MessageInfos:      file_service_server_daily_stat_proto_msgTypes,
	}.Build()
	File_service_server_daily_stat_proto = out.File
	file_service_server_daily_stat_proto_rawDesc = nil
	file_service_server_daily_stat_proto_goTypes = nil
	file_service_server_daily_stat_proto_depIdxs = nil
}
