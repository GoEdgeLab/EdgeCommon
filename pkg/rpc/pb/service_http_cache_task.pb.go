// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_http_cache_task.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建任务
type CreateHTTPCacheTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`       // 任务类型，值为 purge 或者 fetch；purge：删除缓存，fetch：预热缓存
	KeyType string   `protobuf:"bytes,2,opt,name=keyType,proto3" json:"keyType,omitempty"` // Key类型，值为 key 或者 prefix；如果是 key 表示处理的是URL，如果是 prefix 表示处理的是目录；预热的时候只能为 key
	Keys    []string `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`       // 要清理的Key，根据Key类型（keyType）来输入不同的内容
}

func (x *CreateHTTPCacheTaskRequest) Reset() {
	*x = CreateHTTPCacheTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPCacheTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPCacheTaskRequest) ProtoMessage() {}

func (x *CreateHTTPCacheTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPCacheTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateHTTPCacheTaskRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_task_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHTTPCacheTaskRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateHTTPCacheTaskRequest) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *CreateHTTPCacheTaskRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type CreateHTTPCacheTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCacheTaskId int64 `protobuf:"varint,1,opt,name=httpCacheTaskId,proto3" json:"httpCacheTaskId,omitempty"` // 生成的任务ID
	CountKeys       int64 `protobuf:"varint,2,opt,name=countKeys,proto3" json:"countKeys,omitempty"`             // 任务中包含的Key
}

func (x *CreateHTTPCacheTaskResponse) Reset() {
	*x = CreateHTTPCacheTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPCacheTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPCacheTaskResponse) ProtoMessage() {}

func (x *CreateHTTPCacheTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPCacheTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateHTTPCacheTaskResponse) Descriptor() ([]byte, []int) {
	return file_service_http_cache_task_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHTTPCacheTaskResponse) GetHttpCacheTaskId() int64 {
	if x != nil {
		return x.HttpCacheTaskId
	}
	return 0
}

func (x *CreateHTTPCacheTaskResponse) GetCountKeys() int64 {
	if x != nil {
		return x.CountKeys
	}
	return 0
}

// 计算任务总数量
type CountHTTPCacheTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountHTTPCacheTasksRequest) Reset() {
	*x = CountHTTPCacheTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountHTTPCacheTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountHTTPCacheTasksRequest) ProtoMessage() {}

func (x *CountHTTPCacheTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountHTTPCacheTasksRequest.ProtoReflect.Descriptor instead.
func (*CountHTTPCacheTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_task_proto_rawDescGZIP(), []int{2}
}

// 计算正在执行的任务数量
type CountDoingHTTPCacheTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountDoingHTTPCacheTasksRequest) Reset() {
	*x = CountDoingHTTPCacheTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDoingHTTPCacheTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDoingHTTPCacheTasksRequest) ProtoMessage() {}

func (x *CountDoingHTTPCacheTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDoingHTTPCacheTasksRequest.ProtoReflect.Descriptor instead.
func (*CountDoingHTTPCacheTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_task_proto_rawDescGZIP(), []int{3}
}

// 查找单个任务
type FindEnabledHTTPCacheTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCacheTaskId int64 `protobuf:"varint,1,opt,name=httpCacheTaskId,proto3" json:"httpCacheTaskId,omitempty"` // 任务ID
}

func (x *FindEnabledHTTPCacheTaskRequest) Reset() {
	*x = FindEnabledHTTPCacheTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPCacheTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPCacheTaskRequest) ProtoMessage() {}

func (x *FindEnabledHTTPCacheTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPCacheTaskRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPCacheTaskRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_task_proto_rawDescGZIP(), []int{4}
}

func (x *FindEnabledHTTPCacheTaskRequest) GetHttpCacheTaskId() int64 {
	if x != nil {
		return x.HttpCacheTaskId
	}
	return 0
}

type FindEnabledHTTPCacheTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCacheTask *HTTPCacheTask `protobuf:"bytes,1,opt,name=httpCacheTask,proto3" json:"httpCacheTask,omitempty"` // 任务信息
}

func (x *FindEnabledHTTPCacheTaskResponse) Reset() {
	*x = FindEnabledHTTPCacheTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPCacheTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPCacheTaskResponse) ProtoMessage() {}

func (x *FindEnabledHTTPCacheTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPCacheTaskResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPCacheTaskResponse) Descriptor() ([]byte, []int) {
	return file_service_http_cache_task_proto_rawDescGZIP(), []int{5}
}

func (x *FindEnabledHTTPCacheTaskResponse) GetHttpCacheTask() *HTTPCacheTask {
	if x != nil {
		return x.HttpCacheTask
	}
	return nil
}

// 列出单页任务
type ListHTTPCacheTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"` // 查询起始位置
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`     // 查询条数
}

func (x *ListHTTPCacheTasksRequest) Reset() {
	*x = ListHTTPCacheTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHTTPCacheTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHTTPCacheTasksRequest) ProtoMessage() {}

func (x *ListHTTPCacheTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHTTPCacheTasksRequest.ProtoReflect.Descriptor instead.
func (*ListHTTPCacheTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_task_proto_rawDescGZIP(), []int{6}
}

func (x *ListHTTPCacheTasksRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListHTTPCacheTasksRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListHTTPCacheTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCacheTasks []*HTTPCacheTask `protobuf:"bytes,1,rep,name=httpCacheTasks,proto3" json:"httpCacheTasks,omitempty"` // 一组任务信息
}

func (x *ListHTTPCacheTasksResponse) Reset() {
	*x = ListHTTPCacheTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHTTPCacheTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHTTPCacheTasksResponse) ProtoMessage() {}

func (x *ListHTTPCacheTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHTTPCacheTasksResponse.ProtoReflect.Descriptor instead.
func (*ListHTTPCacheTasksResponse) Descriptor() ([]byte, []int) {
	return file_service_http_cache_task_proto_rawDescGZIP(), []int{7}
}

func (x *ListHTTPCacheTasksResponse) GetHttpCacheTasks() []*HTTPCacheTask {
	if x != nil {
		return x.HttpCacheTasks
	}
	return nil
}

// 删除任务
type DeleteHTTPCacheTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCacheTaskId int64 `protobuf:"varint,1,opt,name=httpCacheTaskId,proto3" json:"httpCacheTaskId,omitempty"` // 任务ID
}

func (x *DeleteHTTPCacheTaskRequest) Reset() {
	*x = DeleteHTTPCacheTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHTTPCacheTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHTTPCacheTaskRequest) ProtoMessage() {}

func (x *DeleteHTTPCacheTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHTTPCacheTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteHTTPCacheTaskRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_task_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteHTTPCacheTaskRequest) GetHttpCacheTaskId() int64 {
	if x != nil {
		return x.HttpCacheTaskId
	}
	return 0
}

// 重置任务状态
type ResetHTTPCacheTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCacheTaskId int64 `protobuf:"varint,1,opt,name=httpCacheTaskId,proto3" json:"httpCacheTaskId,omitempty"` // 任务ID
}

func (x *ResetHTTPCacheTaskRequest) Reset() {
	*x = ResetHTTPCacheTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetHTTPCacheTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetHTTPCacheTaskRequest) ProtoMessage() {}

func (x *ResetHTTPCacheTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetHTTPCacheTaskRequest.ProtoReflect.Descriptor instead.
func (*ResetHTTPCacheTaskRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_task_proto_rawDescGZIP(), []int{9}
}

func (x *ResetHTTPCacheTaskRequest) GetHttpCacheTaskId() int64 {
	if x != nil {
		return x.HttpCacheTaskId
	}
	return 0
}

var File_service_http_cache_task_proto protoreflect.FileDescriptor

var file_service_http_cache_task_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x22, 0x65, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x6f, 0x69, 0x6e, 0x67, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x1f, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x68,
	0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x22, 0x47, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x57, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x68,
	0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x46, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68,
	0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x45,
	0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x68,
	0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x32, 0xda, 0x04, 0x0a, 0x14, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56,
	0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x69, 0x6e,
	0x67, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x23, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x6c, 0x69,
	0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a,
	0x12, 0x72, 0x65, 0x73, 0x65, 0x74, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x48, 0x54,
	0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_service_http_cache_task_proto_rawDescOnce sync.Once
	file_service_http_cache_task_proto_rawDescData = file_service_http_cache_task_proto_rawDesc
)

func file_service_http_cache_task_proto_rawDescGZIP() []byte {
	file_service_http_cache_task_proto_rawDescOnce.Do(func() {
		file_service_http_cache_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_http_cache_task_proto_rawDescData)
	})
	return file_service_http_cache_task_proto_rawDescData
}

var file_service_http_cache_task_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_service_http_cache_task_proto_goTypes = []interface{}{
	(*CreateHTTPCacheTaskRequest)(nil),       // 0: pb.CreateHTTPCacheTaskRequest
	(*CreateHTTPCacheTaskResponse)(nil),      // 1: pb.CreateHTTPCacheTaskResponse
	(*CountHTTPCacheTasksRequest)(nil),       // 2: pb.CountHTTPCacheTasksRequest
	(*CountDoingHTTPCacheTasksRequest)(nil),  // 3: pb.CountDoingHTTPCacheTasksRequest
	(*FindEnabledHTTPCacheTaskRequest)(nil),  // 4: pb.FindEnabledHTTPCacheTaskRequest
	(*FindEnabledHTTPCacheTaskResponse)(nil), // 5: pb.FindEnabledHTTPCacheTaskResponse
	(*ListHTTPCacheTasksRequest)(nil),        // 6: pb.ListHTTPCacheTasksRequest
	(*ListHTTPCacheTasksResponse)(nil),       // 7: pb.ListHTTPCacheTasksResponse
	(*DeleteHTTPCacheTaskRequest)(nil),       // 8: pb.DeleteHTTPCacheTaskRequest
	(*ResetHTTPCacheTaskRequest)(nil),        // 9: pb.ResetHTTPCacheTaskRequest
	(*HTTPCacheTask)(nil),                    // 10: pb.HTTPCacheTask
	(*RPCCountResponse)(nil),                 // 11: pb.RPCCountResponse
	(*RPCSuccess)(nil),                       // 12: pb.RPCSuccess
}
var file_service_http_cache_task_proto_depIdxs = []int32{
	10, // 0: pb.FindEnabledHTTPCacheTaskResponse.httpCacheTask:type_name -> pb.HTTPCacheTask
	10, // 1: pb.ListHTTPCacheTasksResponse.httpCacheTasks:type_name -> pb.HTTPCacheTask
	0,  // 2: pb.HTTPCacheTaskService.createHTTPCacheTask:input_type -> pb.CreateHTTPCacheTaskRequest
	2,  // 3: pb.HTTPCacheTaskService.countHTTPCacheTasks:input_type -> pb.CountHTTPCacheTasksRequest
	3,  // 4: pb.HTTPCacheTaskService.countDoingHTTPCacheTasks:input_type -> pb.CountDoingHTTPCacheTasksRequest
	6,  // 5: pb.HTTPCacheTaskService.listHTTPCacheTasks:input_type -> pb.ListHTTPCacheTasksRequest
	4,  // 6: pb.HTTPCacheTaskService.findEnabledHTTPCacheTask:input_type -> pb.FindEnabledHTTPCacheTaskRequest
	8,  // 7: pb.HTTPCacheTaskService.deleteHTTPCacheTask:input_type -> pb.DeleteHTTPCacheTaskRequest
	9,  // 8: pb.HTTPCacheTaskService.resetHTTPCacheTask:input_type -> pb.ResetHTTPCacheTaskRequest
	1,  // 9: pb.HTTPCacheTaskService.createHTTPCacheTask:output_type -> pb.CreateHTTPCacheTaskResponse
	11, // 10: pb.HTTPCacheTaskService.countHTTPCacheTasks:output_type -> pb.RPCCountResponse
	11, // 11: pb.HTTPCacheTaskService.countDoingHTTPCacheTasks:output_type -> pb.RPCCountResponse
	7,  // 12: pb.HTTPCacheTaskService.listHTTPCacheTasks:output_type -> pb.ListHTTPCacheTasksResponse
	5,  // 13: pb.HTTPCacheTaskService.findEnabledHTTPCacheTask:output_type -> pb.FindEnabledHTTPCacheTaskResponse
	12, // 14: pb.HTTPCacheTaskService.deleteHTTPCacheTask:output_type -> pb.RPCSuccess
	12, // 15: pb.HTTPCacheTaskService.resetHTTPCacheTask:output_type -> pb.RPCSuccess
	9,  // [9:16] is the sub-list for method output_type
	2,  // [2:9] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_http_cache_task_proto_init() }
func file_service_http_cache_task_proto_init() {
	if File_service_http_cache_task_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_http_cache_task_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_http_cache_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPCacheTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPCacheTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountHTTPCacheTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDoingHTTPCacheTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPCacheTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPCacheTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHTTPCacheTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHTTPCacheTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHTTPCacheTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetHTTPCacheTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_http_cache_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_http_cache_task_proto_goTypes,
		DependencyIndexes: file_service_http_cache_task_proto_depIdxs,
		MessageInfos:      file_service_http_cache_task_proto_msgTypes,
	}.Build()
	File_service_http_cache_task_proto = out.File
	file_service_http_cache_task_proto_rawDesc = nil
	file_service_http_cache_task_proto_goTypes = nil
	file_service_http_cache_task_proto_depIdxs = nil
}
