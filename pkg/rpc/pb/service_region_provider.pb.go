// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_region_provider.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 查找所有ISP
type FindAllEnabledRegionProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledRegionProvidersRequest) Reset() {
	*x = FindAllEnabledRegionProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_provider_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledRegionProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledRegionProvidersRequest) ProtoMessage() {}

func (x *FindAllEnabledRegionProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_provider_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledRegionProvidersRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledRegionProvidersRequest) Descriptor() ([]byte, []int) {
	return file_service_region_provider_proto_rawDescGZIP(), []int{0}
}

type FindAllEnabledRegionProvidersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionProviders []*RegionProvider `protobuf:"bytes,1,rep,name=regionProviders,proto3" json:"regionProviders,omitempty"`
}

func (x *FindAllEnabledRegionProvidersResponse) Reset() {
	*x = FindAllEnabledRegionProvidersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_provider_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledRegionProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledRegionProvidersResponse) ProtoMessage() {}

func (x *FindAllEnabledRegionProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_provider_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledRegionProvidersResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledRegionProvidersResponse) Descriptor() ([]byte, []int) {
	return file_service_region_provider_proto_rawDescGZIP(), []int{1}
}

func (x *FindAllEnabledRegionProvidersResponse) GetRegionProviders() []*RegionProvider {
	if x != nil {
		return x.RegionProviders
	}
	return nil
}

// 查找单个ISP信息
type FindEnabledRegionProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionProviderId int64 `protobuf:"varint,1,opt,name=regionProviderId,proto3" json:"regionProviderId,omitempty"`
}

func (x *FindEnabledRegionProviderRequest) Reset() {
	*x = FindEnabledRegionProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_provider_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledRegionProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledRegionProviderRequest) ProtoMessage() {}

func (x *FindEnabledRegionProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_provider_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledRegionProviderRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledRegionProviderRequest) Descriptor() ([]byte, []int) {
	return file_service_region_provider_proto_rawDescGZIP(), []int{2}
}

func (x *FindEnabledRegionProviderRequest) GetRegionProviderId() int64 {
	if x != nil {
		return x.RegionProviderId
	}
	return 0
}

type FindEnabledRegionProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionProvider *RegionProvider `protobuf:"bytes,1,opt,name=regionProvider,proto3" json:"regionProvider,omitempty"`
}

func (x *FindEnabledRegionProviderResponse) Reset() {
	*x = FindEnabledRegionProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_provider_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledRegionProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledRegionProviderResponse) ProtoMessage() {}

func (x *FindEnabledRegionProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_provider_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledRegionProviderResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledRegionProviderResponse) Descriptor() ([]byte, []int) {
	return file_service_region_provider_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledRegionProviderResponse) GetRegionProvider() *RegionProvider {
	if x != nil {
		return x.RegionProvider
	}
	return nil
}

var File_service_region_provider_proto protoreflect.FileDescriptor

var file_service_region_provider_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x65, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x4e, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0xf7, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x74, 0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x66, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_service_region_provider_proto_rawDescOnce sync.Once
	file_service_region_provider_proto_rawDescData = file_service_region_provider_proto_rawDesc
)

func file_service_region_provider_proto_rawDescGZIP() []byte {
	file_service_region_provider_proto_rawDescOnce.Do(func() {
		file_service_region_provider_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_region_provider_proto_rawDescData)
	})
	return file_service_region_provider_proto_rawDescData
}

var file_service_region_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_service_region_provider_proto_goTypes = []interface{}{
	(*FindAllEnabledRegionProvidersRequest)(nil),  // 0: pb.FindAllEnabledRegionProvidersRequest
	(*FindAllEnabledRegionProvidersResponse)(nil), // 1: pb.FindAllEnabledRegionProvidersResponse
	(*FindEnabledRegionProviderRequest)(nil),      // 2: pb.FindEnabledRegionProviderRequest
	(*FindEnabledRegionProviderResponse)(nil),     // 3: pb.FindEnabledRegionProviderResponse
	(*RegionProvider)(nil),                        // 4: pb.RegionProvider
}
var file_service_region_provider_proto_depIdxs = []int32{
	4, // 0: pb.FindAllEnabledRegionProvidersResponse.regionProviders:type_name -> pb.RegionProvider
	4, // 1: pb.FindEnabledRegionProviderResponse.regionProvider:type_name -> pb.RegionProvider
	0, // 2: pb.RegionProviderService.findAllEnabledRegionProviders:input_type -> pb.FindAllEnabledRegionProvidersRequest
	2, // 3: pb.RegionProviderService.findEnabledRegionProvider:input_type -> pb.FindEnabledRegionProviderRequest
	1, // 4: pb.RegionProviderService.findAllEnabledRegionProviders:output_type -> pb.FindAllEnabledRegionProvidersResponse
	3, // 5: pb.RegionProviderService.findEnabledRegionProvider:output_type -> pb.FindEnabledRegionProviderResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_service_region_provider_proto_init() }
func file_service_region_provider_proto_init() {
	if File_service_region_provider_proto != nil {
		return
	}
	file_models_model_region_provider_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_region_provider_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledRegionProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_provider_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledRegionProvidersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_provider_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledRegionProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_provider_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledRegionProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_region_provider_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_region_provider_proto_goTypes,
		DependencyIndexes: file_service_region_provider_proto_depIdxs,
		MessageInfos:      file_service_region_provider_proto_msgTypes,
	}.Build()
	File_service_region_provider_proto = out.File
	file_service_region_provider_proto_rawDesc = nil
	file_service_region_provider_proto_goTypes = nil
	file_service_region_provider_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegionProviderServiceClient is the client API for RegionProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegionProviderServiceClient interface {
	// 查找所有ISP
	FindAllEnabledRegionProviders(ctx context.Context, in *FindAllEnabledRegionProvidersRequest, opts ...grpc.CallOption) (*FindAllEnabledRegionProvidersResponse, error)
	// 查找单个ISP信息
	FindEnabledRegionProvider(ctx context.Context, in *FindEnabledRegionProviderRequest, opts ...grpc.CallOption) (*FindEnabledRegionProviderResponse, error)
}

type regionProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionProviderServiceClient(cc grpc.ClientConnInterface) RegionProviderServiceClient {
	return &regionProviderServiceClient{cc}
}

func (c *regionProviderServiceClient) FindAllEnabledRegionProviders(ctx context.Context, in *FindAllEnabledRegionProvidersRequest, opts ...grpc.CallOption) (*FindAllEnabledRegionProvidersResponse, error) {
	out := new(FindAllEnabledRegionProvidersResponse)
	err := c.cc.Invoke(ctx, "/pb.RegionProviderService/findAllEnabledRegionProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionProviderServiceClient) FindEnabledRegionProvider(ctx context.Context, in *FindEnabledRegionProviderRequest, opts ...grpc.CallOption) (*FindEnabledRegionProviderResponse, error) {
	out := new(FindEnabledRegionProviderResponse)
	err := c.cc.Invoke(ctx, "/pb.RegionProviderService/findEnabledRegionProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionProviderServiceServer is the server API for RegionProviderService service.
type RegionProviderServiceServer interface {
	// 查找所有ISP
	FindAllEnabledRegionProviders(context.Context, *FindAllEnabledRegionProvidersRequest) (*FindAllEnabledRegionProvidersResponse, error)
	// 查找单个ISP信息
	FindEnabledRegionProvider(context.Context, *FindEnabledRegionProviderRequest) (*FindEnabledRegionProviderResponse, error)
}

// UnimplementedRegionProviderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegionProviderServiceServer struct {
}

func (*UnimplementedRegionProviderServiceServer) FindAllEnabledRegionProviders(context.Context, *FindAllEnabledRegionProvidersRequest) (*FindAllEnabledRegionProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledRegionProviders not implemented")
}
func (*UnimplementedRegionProviderServiceServer) FindEnabledRegionProvider(context.Context, *FindEnabledRegionProviderRequest) (*FindEnabledRegionProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledRegionProvider not implemented")
}

func RegisterRegionProviderServiceServer(s *grpc.Server, srv RegionProviderServiceServer) {
	s.RegisterService(&_RegionProviderService_serviceDesc, srv)
}

func _RegionProviderService_FindAllEnabledRegionProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledRegionProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionProviderServiceServer).FindAllEnabledRegionProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionProviderService/FindAllEnabledRegionProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionProviderServiceServer).FindAllEnabledRegionProviders(ctx, req.(*FindAllEnabledRegionProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionProviderService_FindEnabledRegionProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledRegionProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionProviderServiceServer).FindEnabledRegionProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionProviderService/FindEnabledRegionProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionProviderServiceServer).FindEnabledRegionProvider(ctx, req.(*FindEnabledRegionProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegionProviderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RegionProviderService",
	HandlerType: (*RegionProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findAllEnabledRegionProviders",
			Handler:    _RegionProviderService_FindAllEnabledRegionProviders_Handler,
		},
		{
			MethodName: "findEnabledRegionProvider",
			Handler:    _RegionProviderService_FindEnabledRegionProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_region_provider.proto",
}
