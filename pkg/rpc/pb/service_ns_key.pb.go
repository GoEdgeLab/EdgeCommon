// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_ns_key.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建密钥
type CreateNSKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64  `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	NsZoneId   int64  `protobuf:"varint,2,opt,name=nsZoneId,proto3" json:"nsZoneId,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Algo       string `protobuf:"bytes,4,opt,name=algo,proto3" json:"algo,omitempty"`
	Secret     string `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	SecretType string `protobuf:"bytes,6,opt,name=secretType,proto3" json:"secretType,omitempty"`
}

func (x *CreateNSKeyRequest) Reset() {
	*x = CreateNSKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSKeyRequest) ProtoMessage() {}

func (x *CreateNSKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateNSKeyRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNSKeyRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *CreateNSKeyRequest) GetNsZoneId() int64 {
	if x != nil {
		return x.NsZoneId
	}
	return 0
}

func (x *CreateNSKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNSKeyRequest) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *CreateNSKeyRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CreateNSKeyRequest) GetSecretType() string {
	if x != nil {
		return x.SecretType
	}
	return ""
}

type CreateNSKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsKeyId int64 `protobuf:"varint,1,opt,name=nsKeyId,proto3" json:"nsKeyId,omitempty"`
}

func (x *CreateNSKeyResponse) Reset() {
	*x = CreateNSKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSKeyResponse) ProtoMessage() {}

func (x *CreateNSKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateNSKeyResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNSKeyResponse) GetNsKeyId() int64 {
	if x != nil {
		return x.NsKeyId
	}
	return 0
}

// 修改密钥
type UpdateNSKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsKeyId    int64  `protobuf:"varint,1,opt,name=nsKeyId,proto3" json:"nsKeyId,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Algo       string `protobuf:"bytes,3,opt,name=algo,proto3" json:"algo,omitempty"`
	Secret     string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	SecretType string `protobuf:"bytes,5,opt,name=secretType,proto3" json:"secretType,omitempty"`
	IsOn       bool   `protobuf:"varint,6,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateNSKeyRequest) Reset() {
	*x = UpdateNSKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSKeyRequest) ProtoMessage() {}

func (x *UpdateNSKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSKeyRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNSKeyRequest) GetNsKeyId() int64 {
	if x != nil {
		return x.NsKeyId
	}
	return 0
}

func (x *UpdateNSKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNSKeyRequest) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *UpdateNSKeyRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *UpdateNSKeyRequest) GetSecretType() string {
	if x != nil {
		return x.SecretType
	}
	return ""
}

func (x *UpdateNSKeyRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除密钥
type DeleteNSKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsKeyId int64 `protobuf:"varint,1,opt,name=nsKeyId,proto3" json:"nsKeyId,omitempty"`
}

func (x *DeleteNSKeyRequest) Reset() {
	*x = DeleteNSKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNSKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNSKeyRequest) ProtoMessage() {}

func (x *DeleteNSKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNSKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteNSKeyRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteNSKeyRequest) GetNsKeyId() int64 {
	if x != nil {
		return x.NsKeyId
	}
	return 0
}

// 查找单个密钥
type FindNSKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsKeyId int64 `protobuf:"varint,1,opt,name=nsKeyId,proto3" json:"nsKeyId,omitempty"`
}

func (x *FindNSKeyRequest) Reset() {
	*x = FindNSKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSKeyRequest) ProtoMessage() {}

func (x *FindNSKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSKeyRequest.ProtoReflect.Descriptor instead.
func (*FindNSKeyRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{4}
}

func (x *FindNSKeyRequest) GetNsKeyId() int64 {
	if x != nil {
		return x.NsKeyId
	}
	return 0
}

type FindNSKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsKey *NSKey `protobuf:"bytes,1,opt,name=nsKey,proto3" json:"nsKey,omitempty"`
}

func (x *FindNSKeyResponse) Reset() {
	*x = FindNSKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSKeyResponse) ProtoMessage() {}

func (x *FindNSKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSKeyResponse.ProtoReflect.Descriptor instead.
func (*FindNSKeyResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{5}
}

func (x *FindNSKeyResponse) GetNsKey() *NSKey {
	if x != nil {
		return x.NsKey
	}
	return nil
}

// 计算密钥数量
type CountAllNSKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	NsZoneId   int64 `protobuf:"varint,2,opt,name=nsZoneId,proto3" json:"nsZoneId,omitempty"`
}

func (x *CountAllNSKeysRequest) Reset() {
	*x = CountAllNSKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllNSKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllNSKeysRequest) ProtoMessage() {}

func (x *CountAllNSKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllNSKeysRequest.ProtoReflect.Descriptor instead.
func (*CountAllNSKeysRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{6}
}

func (x *CountAllNSKeysRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *CountAllNSKeysRequest) GetNsZoneId() int64 {
	if x != nil {
		return x.NsZoneId
	}
	return 0
}

// 列出单页密钥
type ListNSKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainId int64 `protobuf:"varint,1,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	NsZoneId   int64 `protobuf:"varint,2,opt,name=nsZoneId,proto3" json:"nsZoneId,omitempty"`
	Offset     int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Size       int64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListNSKeysRequest) Reset() {
	*x = ListNSKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSKeysRequest) ProtoMessage() {}

func (x *ListNSKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSKeysRequest.ProtoReflect.Descriptor instead.
func (*ListNSKeysRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{7}
}

func (x *ListNSKeysRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *ListNSKeysRequest) GetNsZoneId() int64 {
	if x != nil {
		return x.NsZoneId
	}
	return 0
}

func (x *ListNSKeysRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListNSKeysRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListNSKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsKeys []*NSKey `protobuf:"bytes,1,rep,name=nsKeys,proto3" json:"nsKeys,omitempty"`
}

func (x *ListNSKeysResponse) Reset() {
	*x = ListNSKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSKeysResponse) ProtoMessage() {}

func (x *ListNSKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSKeysResponse.ProtoReflect.Descriptor instead.
func (*ListNSKeysResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{8}
}

func (x *ListNSKeysResponse) GetNsKeys() []*NSKey {
	if x != nil {
		return x.NsKeys
	}
	return nil
}

// 根据版本列出一组密钥
type ListNSKeysAfterVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Size    int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListNSKeysAfterVersionRequest) Reset() {
	*x = ListNSKeysAfterVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSKeysAfterVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSKeysAfterVersionRequest) ProtoMessage() {}

func (x *ListNSKeysAfterVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSKeysAfterVersionRequest.ProtoReflect.Descriptor instead.
func (*ListNSKeysAfterVersionRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{9}
}

func (x *ListNSKeysAfterVersionRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListNSKeysAfterVersionRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListNSKeysAfterVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsKeys []*NSKey `protobuf:"bytes,1,rep,name=nsKeys,proto3" json:"nsKeys,omitempty"`
}

func (x *ListNSKeysAfterVersionResponse) Reset() {
	*x = ListNSKeysAfterVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_key_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSKeysAfterVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSKeysAfterVersionResponse) ProtoMessage() {}

func (x *ListNSKeysAfterVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_key_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSKeysAfterVersionResponse.ProtoReflect.Descriptor instead.
func (*ListNSKeysAfterVersionResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_key_proto_rawDescGZIP(), []int{10}
}

func (x *ListNSKeysAfterVersionResponse) GetNsKeys() []*NSKey {
	if x != nil {
		return x.NsKeys
	}
	return nil
}

var File_service_ns_key_proto protoreflect.FileDescriptor

var file_service_ns_key_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb0, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x73, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x73, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x73, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x10, 0x46, 0x69, 0x6e,
	0x64, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6e, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x4e,
	0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05,
	0x6e, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x52, 0x05, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x22, 0x53, 0x0a,
	0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x22, 0x7b, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x73, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x73, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0x37, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x4b, 0x65, 0x79,
	0x52, 0x06, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x4d, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x53, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x43, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x53, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x6e, 0x73, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x53, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x32, 0xd7, 0x03, 0x0a,
	0x0c, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x66,
	0x69, 0x6e, 0x64, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74,
	0x4e, 0x53, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x53, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x4b,
	0x65, 0x79, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x4b, 0x65, 0x79, 0x73, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x4b, 0x65,
	0x79, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_ns_key_proto_rawDescOnce sync.Once
	file_service_ns_key_proto_rawDescData = file_service_ns_key_proto_rawDesc
)

func file_service_ns_key_proto_rawDescGZIP() []byte {
	file_service_ns_key_proto_rawDescOnce.Do(func() {
		file_service_ns_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ns_key_proto_rawDescData)
	})
	return file_service_ns_key_proto_rawDescData
}

var file_service_ns_key_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_service_ns_key_proto_goTypes = []interface{}{
	(*CreateNSKeyRequest)(nil),             // 0: pb.CreateNSKeyRequest
	(*CreateNSKeyResponse)(nil),            // 1: pb.CreateNSKeyResponse
	(*UpdateNSKeyRequest)(nil),             // 2: pb.UpdateNSKeyRequest
	(*DeleteNSKeyRequest)(nil),             // 3: pb.DeleteNSKeyRequest
	(*FindNSKeyRequest)(nil),               // 4: pb.FindNSKeyRequest
	(*FindNSKeyResponse)(nil),              // 5: pb.FindNSKeyResponse
	(*CountAllNSKeysRequest)(nil),          // 6: pb.CountAllNSKeysRequest
	(*ListNSKeysRequest)(nil),              // 7: pb.ListNSKeysRequest
	(*ListNSKeysResponse)(nil),             // 8: pb.ListNSKeysResponse
	(*ListNSKeysAfterVersionRequest)(nil),  // 9: pb.ListNSKeysAfterVersionRequest
	(*ListNSKeysAfterVersionResponse)(nil), // 10: pb.ListNSKeysAfterVersionResponse
	(*NSKey)(nil),                          // 11: pb.NSKey
	(*RPCSuccess)(nil),                     // 12: pb.RPCSuccess
	(*RPCCountResponse)(nil),               // 13: pb.RPCCountResponse
}
var file_service_ns_key_proto_depIdxs = []int32{
	11, // 0: pb.FindNSKeyResponse.nsKey:type_name -> pb.NSKey
	11, // 1: pb.ListNSKeysResponse.nsKeys:type_name -> pb.NSKey
	11, // 2: pb.ListNSKeysAfterVersionResponse.nsKeys:type_name -> pb.NSKey
	0,  // 3: pb.NSKeyService.createNSKey:input_type -> pb.CreateNSKeyRequest
	2,  // 4: pb.NSKeyService.updateNSKey:input_type -> pb.UpdateNSKeyRequest
	3,  // 5: pb.NSKeyService.deleteNSKey:input_type -> pb.DeleteNSKeyRequest
	4,  // 6: pb.NSKeyService.findNSKey:input_type -> pb.FindNSKeyRequest
	6,  // 7: pb.NSKeyService.countAllNSKeys:input_type -> pb.CountAllNSKeysRequest
	7,  // 8: pb.NSKeyService.listNSKeys:input_type -> pb.ListNSKeysRequest
	9,  // 9: pb.NSKeyService.listNSKeysAfterVersion:input_type -> pb.ListNSKeysAfterVersionRequest
	1,  // 10: pb.NSKeyService.createNSKey:output_type -> pb.CreateNSKeyResponse
	12, // 11: pb.NSKeyService.updateNSKey:output_type -> pb.RPCSuccess
	12, // 12: pb.NSKeyService.deleteNSKey:output_type -> pb.RPCSuccess
	5,  // 13: pb.NSKeyService.findNSKey:output_type -> pb.FindNSKeyResponse
	13, // 14: pb.NSKeyService.countAllNSKeys:output_type -> pb.RPCCountResponse
	8,  // 15: pb.NSKeyService.listNSKeys:output_type -> pb.ListNSKeysResponse
	10, // 16: pb.NSKeyService.listNSKeysAfterVersion:output_type -> pb.ListNSKeysAfterVersionResponse
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_ns_key_proto_init() }
func file_service_ns_key_proto_init() {
	if File_service_ns_key_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_ns_key_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ns_key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_key_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_key_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_key_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNSKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_key_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_key_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_key_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllNSKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_key_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_key_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_key_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSKeysAfterVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_key_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSKeysAfterVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ns_key_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ns_key_proto_goTypes,
		DependencyIndexes: file_service_ns_key_proto_depIdxs,
		MessageInfos:      file_service_ns_key_proto_msgTypes,
	}.Build()
	File_service_ns_key_proto = out.File
	file_service_ns_key_proto_rawDesc = nil
	file_service_ns_key_proto_goTypes = nil
	file_service_ns_key_proto_depIdxs = nil
}
