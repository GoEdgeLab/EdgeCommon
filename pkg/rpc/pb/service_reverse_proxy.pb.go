// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_reverse_proxy.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建反向代理
type CreateReverseProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulingJSON     []byte `protobuf:"bytes,1,opt,name=schedulingJSON,proto3" json:"schedulingJSON,omitempty"`         // 可选项，调度设置 @link json:scheduling
	PrimaryOriginsJSON []byte `protobuf:"bytes,2,opt,name=primaryOriginsJSON,proto3" json:"primaryOriginsJSON,omitempty"` // 可选项，主要源站 @link json:origin_refs
	BackupOriginsJSON  []byte `protobuf:"bytes,3,opt,name=backupOriginsJSON,proto3" json:"backupOriginsJSON,omitempty"`   // 可选项，备用源站 @link json:origin_refs
}

func (x *CreateReverseProxyRequest) Reset() {
	*x = CreateReverseProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reverse_proxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReverseProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReverseProxyRequest) ProtoMessage() {}

func (x *CreateReverseProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_reverse_proxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReverseProxyRequest.ProtoReflect.Descriptor instead.
func (*CreateReverseProxyRequest) Descriptor() ([]byte, []int) {
	return file_service_reverse_proxy_proto_rawDescGZIP(), []int{0}
}

func (x *CreateReverseProxyRequest) GetSchedulingJSON() []byte {
	if x != nil {
		return x.SchedulingJSON
	}
	return nil
}

func (x *CreateReverseProxyRequest) GetPrimaryOriginsJSON() []byte {
	if x != nil {
		return x.PrimaryOriginsJSON
	}
	return nil
}

func (x *CreateReverseProxyRequest) GetBackupOriginsJSON() []byte {
	if x != nil {
		return x.BackupOriginsJSON
	}
	return nil
}

type CreateReverseProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxyId int64 `protobuf:"varint,1,opt,name=reverseProxyId,proto3" json:"reverseProxyId,omitempty"`
}

func (x *CreateReverseProxyResponse) Reset() {
	*x = CreateReverseProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reverse_proxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReverseProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReverseProxyResponse) ProtoMessage() {}

func (x *CreateReverseProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_reverse_proxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReverseProxyResponse.ProtoReflect.Descriptor instead.
func (*CreateReverseProxyResponse) Descriptor() ([]byte, []int) {
	return file_service_reverse_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *CreateReverseProxyResponse) GetReverseProxyId() int64 {
	if x != nil {
		return x.ReverseProxyId
	}
	return 0
}

// 查找反向代理
type FindEnabledReverseProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxyId int64 `protobuf:"varint,1,opt,name=reverseProxyId,proto3" json:"reverseProxyId,omitempty"`
}

func (x *FindEnabledReverseProxyRequest) Reset() {
	*x = FindEnabledReverseProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reverse_proxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledReverseProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledReverseProxyRequest) ProtoMessage() {}

func (x *FindEnabledReverseProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_reverse_proxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledReverseProxyRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledReverseProxyRequest) Descriptor() ([]byte, []int) {
	return file_service_reverse_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *FindEnabledReverseProxyRequest) GetReverseProxyId() int64 {
	if x != nil {
		return x.ReverseProxyId
	}
	return 0
}

type FindEnabledReverseProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxy *ReverseProxy `protobuf:"bytes,1,opt,name=reverseProxy,proto3" json:"reverseProxy,omitempty"`
}

func (x *FindEnabledReverseProxyResponse) Reset() {
	*x = FindEnabledReverseProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reverse_proxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledReverseProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledReverseProxyResponse) ProtoMessage() {}

func (x *FindEnabledReverseProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_reverse_proxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledReverseProxyResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledReverseProxyResponse) Descriptor() ([]byte, []int) {
	return file_service_reverse_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledReverseProxyResponse) GetReverseProxy() *ReverseProxy {
	if x != nil {
		return x.ReverseProxy
	}
	return nil
}

// 查找反向代理配置
type FindEnabledReverseProxyConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxyId int64 `protobuf:"varint,1,opt,name=reverseProxyId,proto3" json:"reverseProxyId,omitempty"`
}

func (x *FindEnabledReverseProxyConfigRequest) Reset() {
	*x = FindEnabledReverseProxyConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reverse_proxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledReverseProxyConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledReverseProxyConfigRequest) ProtoMessage() {}

func (x *FindEnabledReverseProxyConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_reverse_proxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledReverseProxyConfigRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledReverseProxyConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_reverse_proxy_proto_rawDescGZIP(), []int{4}
}

func (x *FindEnabledReverseProxyConfigRequest) GetReverseProxyId() int64 {
	if x != nil {
		return x.ReverseProxyId
	}
	return 0
}

type FindEnabledReverseProxyConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxyJSON []byte `protobuf:"bytes,1,opt,name=reverseProxyJSON,proto3" json:"reverseProxyJSON,omitempty"`
}

func (x *FindEnabledReverseProxyConfigResponse) Reset() {
	*x = FindEnabledReverseProxyConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reverse_proxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledReverseProxyConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledReverseProxyConfigResponse) ProtoMessage() {}

func (x *FindEnabledReverseProxyConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_reverse_proxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledReverseProxyConfigResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledReverseProxyConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_reverse_proxy_proto_rawDescGZIP(), []int{5}
}

func (x *FindEnabledReverseProxyConfigResponse) GetReverseProxyJSON() []byte {
	if x != nil {
		return x.ReverseProxyJSON
	}
	return nil
}

// 修改反向代理调度算法
type UpdateReverseProxySchedulingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxyId int64  `protobuf:"varint,1,opt,name=reverseProxyId,proto3" json:"reverseProxyId,omitempty"`
	SchedulingJSON []byte `protobuf:"bytes,2,opt,name=schedulingJSON,proto3" json:"schedulingJSON,omitempty"`
}

func (x *UpdateReverseProxySchedulingRequest) Reset() {
	*x = UpdateReverseProxySchedulingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reverse_proxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReverseProxySchedulingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReverseProxySchedulingRequest) ProtoMessage() {}

func (x *UpdateReverseProxySchedulingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_reverse_proxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReverseProxySchedulingRequest.ProtoReflect.Descriptor instead.
func (*UpdateReverseProxySchedulingRequest) Descriptor() ([]byte, []int) {
	return file_service_reverse_proxy_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateReverseProxySchedulingRequest) GetReverseProxyId() int64 {
	if x != nil {
		return x.ReverseProxyId
	}
	return 0
}

func (x *UpdateReverseProxySchedulingRequest) GetSchedulingJSON() []byte {
	if x != nil {
		return x.SchedulingJSON
	}
	return nil
}

// 修改主要源站信息
type UpdateReverseProxyPrimaryOriginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxyId int64  `protobuf:"varint,1,opt,name=reverseProxyId,proto3" json:"reverseProxyId,omitempty"`
	OriginsJSON    []byte `protobuf:"bytes,2,opt,name=originsJSON,proto3" json:"originsJSON,omitempty"`
}

func (x *UpdateReverseProxyPrimaryOriginsRequest) Reset() {
	*x = UpdateReverseProxyPrimaryOriginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reverse_proxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReverseProxyPrimaryOriginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReverseProxyPrimaryOriginsRequest) ProtoMessage() {}

func (x *UpdateReverseProxyPrimaryOriginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_reverse_proxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReverseProxyPrimaryOriginsRequest.ProtoReflect.Descriptor instead.
func (*UpdateReverseProxyPrimaryOriginsRequest) Descriptor() ([]byte, []int) {
	return file_service_reverse_proxy_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateReverseProxyPrimaryOriginsRequest) GetReverseProxyId() int64 {
	if x != nil {
		return x.ReverseProxyId
	}
	return 0
}

func (x *UpdateReverseProxyPrimaryOriginsRequest) GetOriginsJSON() []byte {
	if x != nil {
		return x.OriginsJSON
	}
	return nil
}

// 修改备用源站信息
type UpdateReverseProxyBackupOriginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxyId int64  `protobuf:"varint,1,opt,name=reverseProxyId,proto3" json:"reverseProxyId,omitempty"`
	OriginsJSON    []byte `protobuf:"bytes,2,opt,name=originsJSON,proto3" json:"originsJSON,omitempty"`
}

func (x *UpdateReverseProxyBackupOriginsRequest) Reset() {
	*x = UpdateReverseProxyBackupOriginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reverse_proxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReverseProxyBackupOriginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReverseProxyBackupOriginsRequest) ProtoMessage() {}

func (x *UpdateReverseProxyBackupOriginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_reverse_proxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReverseProxyBackupOriginsRequest.ProtoReflect.Descriptor instead.
func (*UpdateReverseProxyBackupOriginsRequest) Descriptor() ([]byte, []int) {
	return file_service_reverse_proxy_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateReverseProxyBackupOriginsRequest) GetReverseProxyId() int64 {
	if x != nil {
		return x.ReverseProxyId
	}
	return 0
}

func (x *UpdateReverseProxyBackupOriginsRequest) GetOriginsJSON() []byte {
	if x != nil {
		return x.OriginsJSON
	}
	return nil
}

// 修改反向代理设置
type UpdateReverseProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxyId           int64    `protobuf:"varint,1,opt,name=reverseProxyId,proto3" json:"reverseProxyId,omitempty"`                      // 反向代理ID
	RequestHostType          int32    `protobuf:"varint,6,opt,name=requestHostType,proto3" json:"requestHostType,omitempty"`                    // 可选参数，回源主机名类型：0 跟随CDN域名，1跟随源站，2自定义
	RequestHost              string   `protobuf:"bytes,2,opt,name=requestHost,proto3" json:"requestHost,omitempty"`                             // 可选参数，自定义回源主机名
	RequestHostExcludingPort bool     `protobuf:"varint,15,opt,name=requestHostExcludingPort,proto3" json:"requestHostExcludingPort,omitempty"` // 可选参数，回源主机名中去除端口
	RequestURI               string   `protobuf:"bytes,3,opt,name=requestURI,proto3" json:"requestURI,omitempty"`                               // 可选参数，请求URI
	StripPrefix              string   `protobuf:"bytes,4,opt,name=stripPrefix,proto3" json:"stripPrefix,omitempty"`                             // 可选参数，去除URI前缀
	AutoFlush                bool     `protobuf:"varint,5,opt,name=autoFlush,proto3" json:"autoFlush,omitempty"`                                // 可选参数，自动刷新
	AddHeaders               []string `protobuf:"bytes,7,rep,name=addHeaders,proto3" json:"addHeaders,omitempty"`                               // 可选参数，可以添加的请求报头
	ConnTimeoutJSON          []byte   `protobuf:"bytes,8,opt,name=connTimeoutJSON,proto3" json:"connTimeoutJSON,omitempty"`                     // 可选参数，连接超时时间
	ReadTimeoutJSON          []byte   `protobuf:"bytes,9,opt,name=readTimeoutJSON,proto3" json:"readTimeoutJSON,omitempty"`                     // 可选参数，读取超时时间
	IdleTimeoutJSON          []byte   `protobuf:"bytes,10,opt,name=idleTimeoutJSON,proto3" json:"idleTimeoutJSON,omitempty"`                    // 可选参数，空闲连接超时时间
	MaxConns                 int32    `protobuf:"varint,11,opt,name=maxConns,proto3" json:"maxConns,omitempty"`                                 // 可选参数，最大连接数
	MaxIdleConns             int32    `protobuf:"varint,12,opt,name=maxIdleConns,proto3" json:"maxIdleConns,omitempty"`                         // 可选参数，最大空闲连接数
	ProxyProtocolJSON        []byte   `protobuf:"bytes,13,opt,name=proxyProtocolJSON,proto3" json:"proxyProtocolJSON,omitempty"`                // 可选参数，PROXY Protocol设置
	FollowRedirects          bool     `protobuf:"varint,14,opt,name=followRedirects,proto3" json:"followRedirects,omitempty"`                   // 可选参数，跳转跟随
	Retry50X                 bool     `protobuf:"varint,16,opt,name=retry50X,proto3" json:"retry50X,omitempty"`                                 // 可选参数，启用50X重试
}

func (x *UpdateReverseProxyRequest) Reset() {
	*x = UpdateReverseProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_reverse_proxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReverseProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReverseProxyRequest) ProtoMessage() {}

func (x *UpdateReverseProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_reverse_proxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReverseProxyRequest.ProtoReflect.Descriptor instead.
func (*UpdateReverseProxyRequest) Descriptor() ([]byte, []int) {
	return file_service_reverse_proxy_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateReverseProxyRequest) GetReverseProxyId() int64 {
	if x != nil {
		return x.ReverseProxyId
	}
	return 0
}

func (x *UpdateReverseProxyRequest) GetRequestHostType() int32 {
	if x != nil {
		return x.RequestHostType
	}
	return 0
}

func (x *UpdateReverseProxyRequest) GetRequestHost() string {
	if x != nil {
		return x.RequestHost
	}
	return ""
}

func (x *UpdateReverseProxyRequest) GetRequestHostExcludingPort() bool {
	if x != nil {
		return x.RequestHostExcludingPort
	}
	return false
}

func (x *UpdateReverseProxyRequest) GetRequestURI() string {
	if x != nil {
		return x.RequestURI
	}
	return ""
}

func (x *UpdateReverseProxyRequest) GetStripPrefix() string {
	if x != nil {
		return x.StripPrefix
	}
	return ""
}

func (x *UpdateReverseProxyRequest) GetAutoFlush() bool {
	if x != nil {
		return x.AutoFlush
	}
	return false
}

func (x *UpdateReverseProxyRequest) GetAddHeaders() []string {
	if x != nil {
		return x.AddHeaders
	}
	return nil
}

func (x *UpdateReverseProxyRequest) GetConnTimeoutJSON() []byte {
	if x != nil {
		return x.ConnTimeoutJSON
	}
	return nil
}

func (x *UpdateReverseProxyRequest) GetReadTimeoutJSON() []byte {
	if x != nil {
		return x.ReadTimeoutJSON
	}
	return nil
}

func (x *UpdateReverseProxyRequest) GetIdleTimeoutJSON() []byte {
	if x != nil {
		return x.IdleTimeoutJSON
	}
	return nil
}

func (x *UpdateReverseProxyRequest) GetMaxConns() int32 {
	if x != nil {
		return x.MaxConns
	}
	return 0
}

func (x *UpdateReverseProxyRequest) GetMaxIdleConns() int32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *UpdateReverseProxyRequest) GetProxyProtocolJSON() []byte {
	if x != nil {
		return x.ProxyProtocolJSON
	}
	return nil
}

func (x *UpdateReverseProxyRequest) GetFollowRedirects() bool {
	if x != nil {
		return x.FollowRedirects
	}
	return false
}

func (x *UpdateReverseProxyRequest) GetRetry50X() bool {
	if x != nil {
		return x.Retry50X
	}
	return false
}

var File_service_reverse_proxy_proto protoreflect.FileDescriptor

var file_service_reverse_proxy_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x1a, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x4a, 0x53,
	0x4f, 0x4e, 0x22, 0x44, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x49, 0x64, 0x22, 0x57, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x0c, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x4e, 0x0a, 0x24, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x25, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a, 0x53, 0x4f, 0x4e,
	0x22, 0x75, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x73, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x72, 0x0a, 0x26,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e,
	0x22, 0xfd, 0x04, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x52, 0x49, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x52, 0x49, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53,
	0x4f, 0x4e, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x69, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49,
	0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x35, 0x30, 0x58,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x35, 0x30, 0x58,
	0x32, 0xa2, 0x05, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1d,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x17, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x74, 0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x5f, 0x0a, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x5d, 0x0a, 0x1f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x43, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_reverse_proxy_proto_rawDescOnce sync.Once
	file_service_reverse_proxy_proto_rawDescData = file_service_reverse_proxy_proto_rawDesc
)

func file_service_reverse_proxy_proto_rawDescGZIP() []byte {
	file_service_reverse_proxy_proto_rawDescOnce.Do(func() {
		file_service_reverse_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_reverse_proxy_proto_rawDescData)
	})
	return file_service_reverse_proxy_proto_rawDescData
}

var file_service_reverse_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_service_reverse_proxy_proto_goTypes = []interface{}{
	(*CreateReverseProxyRequest)(nil),               // 0: pb.CreateReverseProxyRequest
	(*CreateReverseProxyResponse)(nil),              // 1: pb.CreateReverseProxyResponse
	(*FindEnabledReverseProxyRequest)(nil),          // 2: pb.FindEnabledReverseProxyRequest
	(*FindEnabledReverseProxyResponse)(nil),         // 3: pb.FindEnabledReverseProxyResponse
	(*FindEnabledReverseProxyConfigRequest)(nil),    // 4: pb.FindEnabledReverseProxyConfigRequest
	(*FindEnabledReverseProxyConfigResponse)(nil),   // 5: pb.FindEnabledReverseProxyConfigResponse
	(*UpdateReverseProxySchedulingRequest)(nil),     // 6: pb.UpdateReverseProxySchedulingRequest
	(*UpdateReverseProxyPrimaryOriginsRequest)(nil), // 7: pb.UpdateReverseProxyPrimaryOriginsRequest
	(*UpdateReverseProxyBackupOriginsRequest)(nil),  // 8: pb.UpdateReverseProxyBackupOriginsRequest
	(*UpdateReverseProxyRequest)(nil),               // 9: pb.UpdateReverseProxyRequest
	(*ReverseProxy)(nil),                            // 10: pb.ReverseProxy
	(*RPCSuccess)(nil),                              // 11: pb.RPCSuccess
}
var file_service_reverse_proxy_proto_depIdxs = []int32{
	10, // 0: pb.FindEnabledReverseProxyResponse.reverseProxy:type_name -> pb.ReverseProxy
	0,  // 1: pb.ReverseProxyService.createReverseProxy:input_type -> pb.CreateReverseProxyRequest
	2,  // 2: pb.ReverseProxyService.findEnabledReverseProxy:input_type -> pb.FindEnabledReverseProxyRequest
	4,  // 3: pb.ReverseProxyService.findEnabledReverseProxyConfig:input_type -> pb.FindEnabledReverseProxyConfigRequest
	6,  // 4: pb.ReverseProxyService.updateReverseProxyScheduling:input_type -> pb.UpdateReverseProxySchedulingRequest
	7,  // 5: pb.ReverseProxyService.updateReverseProxyPrimaryOrigins:input_type -> pb.UpdateReverseProxyPrimaryOriginsRequest
	8,  // 6: pb.ReverseProxyService.updateReverseProxyBackupOrigins:input_type -> pb.UpdateReverseProxyBackupOriginsRequest
	9,  // 7: pb.ReverseProxyService.updateReverseProxy:input_type -> pb.UpdateReverseProxyRequest
	1,  // 8: pb.ReverseProxyService.createReverseProxy:output_type -> pb.CreateReverseProxyResponse
	3,  // 9: pb.ReverseProxyService.findEnabledReverseProxy:output_type -> pb.FindEnabledReverseProxyResponse
	5,  // 10: pb.ReverseProxyService.findEnabledReverseProxyConfig:output_type -> pb.FindEnabledReverseProxyConfigResponse
	11, // 11: pb.ReverseProxyService.updateReverseProxyScheduling:output_type -> pb.RPCSuccess
	11, // 12: pb.ReverseProxyService.updateReverseProxyPrimaryOrigins:output_type -> pb.RPCSuccess
	11, // 13: pb.ReverseProxyService.updateReverseProxyBackupOrigins:output_type -> pb.RPCSuccess
	11, // 14: pb.ReverseProxyService.updateReverseProxy:output_type -> pb.RPCSuccess
	8,  // [8:15] is the sub-list for method output_type
	1,  // [1:8] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_service_reverse_proxy_proto_init() }
func file_service_reverse_proxy_proto_init() {
	if File_service_reverse_proxy_proto != nil {
		return
	}
	file_models_model_reverse_proxy_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_reverse_proxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReverseProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reverse_proxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReverseProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reverse_proxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledReverseProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reverse_proxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledReverseProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reverse_proxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledReverseProxyConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reverse_proxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledReverseProxyConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reverse_proxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReverseProxySchedulingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reverse_proxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReverseProxyPrimaryOriginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reverse_proxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReverseProxyBackupOriginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_reverse_proxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReverseProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_reverse_proxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_reverse_proxy_proto_goTypes,
		DependencyIndexes: file_service_reverse_proxy_proto_depIdxs,
		MessageInfos:      file_service_reverse_proxy_proto_msgTypes,
	}.Build()
	File_service_reverse_proxy_proto = out.File
	file_service_reverse_proxy_proto_rawDesc = nil
	file_service_reverse_proxy_proto_goTypes = nil
	file_service_reverse_proxy_proto_depIdxs = nil
}
