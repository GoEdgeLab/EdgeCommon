// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_http_web.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建Web配置
type CreateHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootJSON []byte `protobuf:"bytes,1,opt,name=rootJSON,proto3" json:"rootJSON,omitempty"`
}

func (x *CreateHTTPWebRequest) Reset() {
	*x = CreateHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPWebRequest) ProtoMessage() {}

func (x *CreateHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*CreateHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHTTPWebRequest) GetRootJSON() []byte {
	if x != nil {
		return x.RootJSON
	}
	return nil
}

type CreateHTTPWebResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId int64 `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
}

func (x *CreateHTTPWebResponse) Reset() {
	*x = CreateHTTPWebResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPWebResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPWebResponse) ProtoMessage() {}

func (x *CreateHTTPWebResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPWebResponse.ProtoReflect.Descriptor instead.
func (*CreateHTTPWebResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHTTPWebResponse) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

// 查找Web信息
type FindEnabledHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId int64 `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
}

func (x *FindEnabledHTTPWebRequest) Reset() {
	*x = FindEnabledHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebRequest) ProtoMessage() {}

func (x *FindEnabledHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{2}
}

func (x *FindEnabledHTTPWebRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

type FindEnabledHTTPWebResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Web *HTTPWeb `protobuf:"bytes,1,opt,name=web,proto3" json:"web,omitempty"`
}

func (x *FindEnabledHTTPWebResponse) Reset() {
	*x = FindEnabledHTTPWebResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebResponse) ProtoMessage() {}

func (x *FindEnabledHTTPWebResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledHTTPWebResponse) GetWeb() *HTTPWeb {
	if x != nil {
		return x.Web
	}
	return nil
}

// 查找Web配置
type FindEnabledHTTPWebConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId int64 `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
}

func (x *FindEnabledHTTPWebConfigRequest) Reset() {
	*x = FindEnabledHTTPWebConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebConfigRequest) ProtoMessage() {}

func (x *FindEnabledHTTPWebConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebConfigRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{4}
}

func (x *FindEnabledHTTPWebConfigRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

type FindEnabledHTTPWebConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebJSON []byte `protobuf:"bytes,1,opt,name=webJSON,proto3" json:"webJSON,omitempty"`
}

func (x *FindEnabledHTTPWebConfigResponse) Reset() {
	*x = FindEnabledHTTPWebConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebConfigResponse) ProtoMessage() {}

func (x *FindEnabledHTTPWebConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebConfigResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{5}
}

func (x *FindEnabledHTTPWebConfigResponse) GetWebJSON() []byte {
	if x != nil {
		return x.WebJSON
	}
	return nil
}

// 更改Web配置
type UpdateHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId    int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	RootJSON []byte `protobuf:"bytes,2,opt,name=rootJSON,proto3" json:"rootJSON,omitempty"`
}

func (x *UpdateHTTPWebRequest) Reset() {
	*x = UpdateHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateHTTPWebRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebRequest) GetRootJSON() []byte {
	if x != nil {
		return x.RootJSON
	}
	return nil
}

// 更改Gzip配置
type UpdateHTTPWebGzipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId    int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	GzipJSON []byte `protobuf:"bytes,2,opt,name=gzipJSON,proto3" json:"gzipJSON,omitempty"`
}

func (x *UpdateHTTPWebGzipRequest) Reset() {
	*x = UpdateHTTPWebGzipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebGzipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebGzipRequest) ProtoMessage() {}

func (x *UpdateHTTPWebGzipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebGzipRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebGzipRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateHTTPWebGzipRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebGzipRequest) GetGzipJSON() []byte {
	if x != nil {
		return x.GzipJSON
	}
	return nil
}

// 更改字符集配置
type UpdateHTTPWebCharsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId       int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	CharsetJSON []byte `protobuf:"bytes,2,opt,name=charsetJSON,proto3" json:"charsetJSON,omitempty"`
}

func (x *UpdateHTTPWebCharsetRequest) Reset() {
	*x = UpdateHTTPWebCharsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCharsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCharsetRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCharsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCharsetRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCharsetRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateHTTPWebCharsetRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebCharsetRequest) GetCharsetJSON() []byte {
	if x != nil {
		return x.CharsetJSON
	}
	return nil
}

// 更改请求Header策略
type UpdateHTTPWebRequestHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId      int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	HeaderJSON []byte `protobuf:"bytes,2,opt,name=headerJSON,proto3" json:"headerJSON,omitempty"`
}

func (x *UpdateHTTPWebRequestHeaderRequest) Reset() {
	*x = UpdateHTTPWebRequestHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequestHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequestHeaderRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequestHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequestHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequestHeaderRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateHTTPWebRequestHeaderRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebRequestHeaderRequest) GetHeaderJSON() []byte {
	if x != nil {
		return x.HeaderJSON
	}
	return nil
}

// 更改响应Header策略
type UpdateHTTPWebResponseHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId      int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	HeaderJSON []byte `protobuf:"bytes,2,opt,name=headerJSON,proto3" json:"headerJSON,omitempty"`
}

func (x *UpdateHTTPWebResponseHeaderRequest) Reset() {
	*x = UpdateHTTPWebResponseHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebResponseHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebResponseHeaderRequest) ProtoMessage() {}

func (x *UpdateHTTPWebResponseHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebResponseHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebResponseHeaderRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateHTTPWebResponseHeaderRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebResponseHeaderRequest) GetHeaderJSON() []byte {
	if x != nil {
		return x.HeaderJSON
	}
	return nil
}

// 更改Shutdown
type UpdateHTTPWebShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId        int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	ShutdownJSON []byte `protobuf:"bytes,2,opt,name=shutdownJSON,proto3" json:"shutdownJSON,omitempty"`
}

func (x *UpdateHTTPWebShutdownRequest) Reset() {
	*x = UpdateHTTPWebShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebShutdownRequest) ProtoMessage() {}

func (x *UpdateHTTPWebShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebShutdownRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebShutdownRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateHTTPWebShutdownRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebShutdownRequest) GetShutdownJSON() []byte {
	if x != nil {
		return x.ShutdownJSON
	}
	return nil
}

// 更改Pages
type UpdateHTTPWebPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId     int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	PagesJSON []byte `protobuf:"bytes,2,opt,name=pagesJSON,proto3" json:"pagesJSON,omitempty"`
}

func (x *UpdateHTTPWebPagesRequest) Reset() {
	*x = UpdateHTTPWebPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebPagesRequest) ProtoMessage() {}

func (x *UpdateHTTPWebPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebPagesRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebPagesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateHTTPWebPagesRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebPagesRequest) GetPagesJSON() []byte {
	if x != nil {
		return x.PagesJSON
	}
	return nil
}

// 更改访问日志配置
type UpdateHTTPWebAccessLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId         int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	AccessLogJSON []byte `protobuf:"bytes,2,opt,name=accessLogJSON,proto3" json:"accessLogJSON,omitempty"`
}

func (x *UpdateHTTPWebAccessLogRequest) Reset() {
	*x = UpdateHTTPWebAccessLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebAccessLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebAccessLogRequest) ProtoMessage() {}

func (x *UpdateHTTPWebAccessLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebAccessLogRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebAccessLogRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateHTTPWebAccessLogRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebAccessLogRequest) GetAccessLogJSON() []byte {
	if x != nil {
		return x.AccessLogJSON
	}
	return nil
}

// 更改统计配置
type UpdateHTTPWebStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId    int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	StatJSON []byte `protobuf:"bytes,2,opt,name=statJSON,proto3" json:"statJSON,omitempty"`
}

func (x *UpdateHTTPWebStatRequest) Reset() {
	*x = UpdateHTTPWebStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebStatRequest) ProtoMessage() {}

func (x *UpdateHTTPWebStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebStatRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebStatRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateHTTPWebStatRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebStatRequest) GetStatJSON() []byte {
	if x != nil {
		return x.StatJSON
	}
	return nil
}

// 更改缓存配置
type UpdateHTTPWebCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId     int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	CacheJSON []byte `protobuf:"bytes,2,opt,name=cacheJSON,proto3" json:"cacheJSON,omitempty"`
}

func (x *UpdateHTTPWebCacheRequest) Reset() {
	*x = UpdateHTTPWebCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCacheRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCacheRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCacheRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateHTTPWebCacheRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebCacheRequest) GetCacheJSON() []byte {
	if x != nil {
		return x.CacheJSON
	}
	return nil
}

// 更改防火墙设置
type UpdateHTTPWebFirewallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId        int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	FirewallJSON []byte `protobuf:"bytes,2,opt,name=firewallJSON,proto3" json:"firewallJSON,omitempty"`
}

func (x *UpdateHTTPWebFirewallRequest) Reset() {
	*x = UpdateHTTPWebFirewallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebFirewallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebFirewallRequest) ProtoMessage() {}

func (x *UpdateHTTPWebFirewallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebFirewallRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebFirewallRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateHTTPWebFirewallRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebFirewallRequest) GetFirewallJSON() []byte {
	if x != nil {
		return x.FirewallJSON
	}
	return nil
}

// 更改路径规则配置
type UpdateHTTPWebLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId         int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	LocationsJSON []byte `protobuf:"bytes,3,opt,name=locationsJSON,proto3" json:"locationsJSON,omitempty"`
}

func (x *UpdateHTTPWebLocationsRequest) Reset() {
	*x = UpdateHTTPWebLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebLocationsRequest) ProtoMessage() {}

func (x *UpdateHTTPWebLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebLocationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebLocationsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateHTTPWebLocationsRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebLocationsRequest) GetLocationsJSON() []byte {
	if x != nil {
		return x.LocationsJSON
	}
	return nil
}

// 更改跳转到HTTPS设置
type UpdateHTTPWebRedirectToHTTPSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId               int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	RedirectToHTTPSJSON []byte `protobuf:"bytes,2,opt,name=redirectToHTTPSJSON,proto3" json:"redirectToHTTPSJSON,omitempty"`
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) Reset() {
	*x = UpdateHTTPWebRedirectToHTTPSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRedirectToHTTPSRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRedirectToHTTPSRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRedirectToHTTPSRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) GetRedirectToHTTPSJSON() []byte {
	if x != nil {
		return x.RedirectToHTTPSJSON
	}
	return nil
}

// 更改Websocket设置
type UpdateHTTPWebWebsocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId         int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	WebsocketJSON []byte `protobuf:"bytes,2,opt,name=websocketJSON,proto3" json:"websocketJSON,omitempty"`
}

func (x *UpdateHTTPWebWebsocketRequest) Reset() {
	*x = UpdateHTTPWebWebsocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebWebsocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebWebsocketRequest) ProtoMessage() {}

func (x *UpdateHTTPWebWebsocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebWebsocketRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebWebsocketRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateHTTPWebWebsocketRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebWebsocketRequest) GetWebsocketJSON() []byte {
	if x != nil {
		return x.WebsocketJSON
	}
	return nil
}

// 更改Fastcgi设置
type UpdateHTTPWebFastcgiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId       int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	FastcgiJSON []byte `protobuf:"bytes,2,opt,name=fastcgiJSON,proto3" json:"fastcgiJSON,omitempty"`
}

func (x *UpdateHTTPWebFastcgiRequest) Reset() {
	*x = UpdateHTTPWebFastcgiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebFastcgiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebFastcgiRequest) ProtoMessage() {}

func (x *UpdateHTTPWebFastcgiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebFastcgiRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebFastcgiRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateHTTPWebFastcgiRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebFastcgiRequest) GetFastcgiJSON() []byte {
	if x != nil {
		return x.FastcgiJSON
	}
	return nil
}

// 更改重写规则设置
type UpdateHTTPWebRewriteRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId            int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	RewriteRulesJSON []byte `protobuf:"bytes,2,opt,name=rewriteRulesJSON,proto3" json:"rewriteRulesJSON,omitempty"`
}

func (x *UpdateHTTPWebRewriteRulesRequest) Reset() {
	*x = UpdateHTTPWebRewriteRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRewriteRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRewriteRulesRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRewriteRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRewriteRulesRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRewriteRulesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateHTTPWebRewriteRulesRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebRewriteRulesRequest) GetRewriteRulesJSON() []byte {
	if x != nil {
		return x.RewriteRulesJSON
	}
	return nil
}

// 更改主机跳转设置
type UpdateHTTPWebHostRedirectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId             int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	HostRedirectsJSON []byte `protobuf:"bytes,2,opt,name=hostRedirectsJSON,proto3" json:"hostRedirectsJSON,omitempty"`
}

func (x *UpdateHTTPWebHostRedirectsRequest) Reset() {
	*x = UpdateHTTPWebHostRedirectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebHostRedirectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebHostRedirectsRequest) ProtoMessage() {}

func (x *UpdateHTTPWebHostRedirectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebHostRedirectsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebHostRedirectsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateHTTPWebHostRedirectsRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebHostRedirectsRequest) GetHostRedirectsJSON() []byte {
	if x != nil {
		return x.HostRedirectsJSON
	}
	return nil
}

// 查找主机跳转设置
type FindHTTPWebHostRedirectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId int64 `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
}

func (x *FindHTTPWebHostRedirectsRequest) Reset() {
	*x = FindHTTPWebHostRedirectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebHostRedirectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebHostRedirectsRequest) ProtoMessage() {}

func (x *FindHTTPWebHostRedirectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebHostRedirectsRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebHostRedirectsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{23}
}

func (x *FindHTTPWebHostRedirectsRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

type FindHTTPWebHostRedirectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostRedirectsJSON []byte `protobuf:"bytes,1,opt,name=hostRedirectsJSON,proto3" json:"hostRedirectsJSON,omitempty"`
}

func (x *FindHTTPWebHostRedirectsResponse) Reset() {
	*x = FindHTTPWebHostRedirectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebHostRedirectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebHostRedirectsResponse) ProtoMessage() {}

func (x *FindHTTPWebHostRedirectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebHostRedirectsResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebHostRedirectsResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{24}
}

func (x *FindHTTPWebHostRedirectsResponse) GetHostRedirectsJSON() []byte {
	if x != nil {
		return x.HostRedirectsJSON
	}
	return nil
}

var File_service_http_web_proto protoreflect.FileDescriptor

var file_service_http_web_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x77,
	0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x77, 0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x2d, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x52, 0x03, 0x77, 0x65, 0x62, 0x22, 0x37, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65,
	0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64,
	0x22, 0x3c, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x77, 0x65, 0x62, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x48,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x47, 0x7a, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x7a,
	0x69, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x7a,
	0x69, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x55, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x59, 0x0a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x5a, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77,
	0x65, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x58, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4f,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22,
	0x5b, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4c, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4f, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x58, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x5b, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53,
	0x4f, 0x4e, 0x22, 0x6d, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x5b, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x55,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46,
	0x61, 0x73, 0x74, 0x63, 0x67, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65,
	0x62, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x63, 0x67, 0x69, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x63, 0x67,
	0x69, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x64, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x67, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x37, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x22, 0x50, 0x0a,
	0x20, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x68, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x32,
	0x80, 0x0d, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x12, 0x1d,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x18, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x41, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x47, 0x7a, 0x69, 0x70, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x47, 0x7a, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x68, 0x61,
	0x72, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x1a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x55, 0x0a, 0x1b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x26, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1d, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x15,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48,
	0x54, 0x54, 0x50, 0x53, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a,
	0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x61, 0x73, 0x74, 0x63,
	0x67, 0x69, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x61, 0x73, 0x74, 0x63, 0x67, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x1a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x66,
	0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_service_http_web_proto_rawDescOnce sync.Once
	file_service_http_web_proto_rawDescData = file_service_http_web_proto_rawDesc
)

func file_service_http_web_proto_rawDescGZIP() []byte {
	file_service_http_web_proto_rawDescOnce.Do(func() {
		file_service_http_web_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_http_web_proto_rawDescData)
	})
	return file_service_http_web_proto_rawDescData
}

var file_service_http_web_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_service_http_web_proto_goTypes = []interface{}{
	(*CreateHTTPWebRequest)(nil),                // 0: pb.CreateHTTPWebRequest
	(*CreateHTTPWebResponse)(nil),               // 1: pb.CreateHTTPWebResponse
	(*FindEnabledHTTPWebRequest)(nil),           // 2: pb.FindEnabledHTTPWebRequest
	(*FindEnabledHTTPWebResponse)(nil),          // 3: pb.FindEnabledHTTPWebResponse
	(*FindEnabledHTTPWebConfigRequest)(nil),     // 4: pb.FindEnabledHTTPWebConfigRequest
	(*FindEnabledHTTPWebConfigResponse)(nil),    // 5: pb.FindEnabledHTTPWebConfigResponse
	(*UpdateHTTPWebRequest)(nil),                // 6: pb.UpdateHTTPWebRequest
	(*UpdateHTTPWebGzipRequest)(nil),            // 7: pb.UpdateHTTPWebGzipRequest
	(*UpdateHTTPWebCharsetRequest)(nil),         // 8: pb.UpdateHTTPWebCharsetRequest
	(*UpdateHTTPWebRequestHeaderRequest)(nil),   // 9: pb.UpdateHTTPWebRequestHeaderRequest
	(*UpdateHTTPWebResponseHeaderRequest)(nil),  // 10: pb.UpdateHTTPWebResponseHeaderRequest
	(*UpdateHTTPWebShutdownRequest)(nil),        // 11: pb.UpdateHTTPWebShutdownRequest
	(*UpdateHTTPWebPagesRequest)(nil),           // 12: pb.UpdateHTTPWebPagesRequest
	(*UpdateHTTPWebAccessLogRequest)(nil),       // 13: pb.UpdateHTTPWebAccessLogRequest
	(*UpdateHTTPWebStatRequest)(nil),            // 14: pb.UpdateHTTPWebStatRequest
	(*UpdateHTTPWebCacheRequest)(nil),           // 15: pb.UpdateHTTPWebCacheRequest
	(*UpdateHTTPWebFirewallRequest)(nil),        // 16: pb.UpdateHTTPWebFirewallRequest
	(*UpdateHTTPWebLocationsRequest)(nil),       // 17: pb.UpdateHTTPWebLocationsRequest
	(*UpdateHTTPWebRedirectToHTTPSRequest)(nil), // 18: pb.UpdateHTTPWebRedirectToHTTPSRequest
	(*UpdateHTTPWebWebsocketRequest)(nil),       // 19: pb.UpdateHTTPWebWebsocketRequest
	(*UpdateHTTPWebFastcgiRequest)(nil),         // 20: pb.UpdateHTTPWebFastcgiRequest
	(*UpdateHTTPWebRewriteRulesRequest)(nil),    // 21: pb.UpdateHTTPWebRewriteRulesRequest
	(*UpdateHTTPWebHostRedirectsRequest)(nil),   // 22: pb.UpdateHTTPWebHostRedirectsRequest
	(*FindHTTPWebHostRedirectsRequest)(nil),     // 23: pb.FindHTTPWebHostRedirectsRequest
	(*FindHTTPWebHostRedirectsResponse)(nil),    // 24: pb.FindHTTPWebHostRedirectsResponse
	(*HTTPWeb)(nil),                             // 25: pb.HTTPWeb
	(*RPCSuccess)(nil),                          // 26: pb.RPCSuccess
}
var file_service_http_web_proto_depIdxs = []int32{
	25, // 0: pb.FindEnabledHTTPWebResponse.web:type_name -> pb.HTTPWeb
	0,  // 1: pb.HTTPWebService.createHTTPWeb:input_type -> pb.CreateHTTPWebRequest
	2,  // 2: pb.HTTPWebService.findEnabledHTTPWeb:input_type -> pb.FindEnabledHTTPWebRequest
	4,  // 3: pb.HTTPWebService.findEnabledHTTPWebConfig:input_type -> pb.FindEnabledHTTPWebConfigRequest
	6,  // 4: pb.HTTPWebService.updateHTTPWeb:input_type -> pb.UpdateHTTPWebRequest
	7,  // 5: pb.HTTPWebService.updateHTTPWebGzip:input_type -> pb.UpdateHTTPWebGzipRequest
	8,  // 6: pb.HTTPWebService.updateHTTPWebCharset:input_type -> pb.UpdateHTTPWebCharsetRequest
	9,  // 7: pb.HTTPWebService.updateHTTPWebRequestHeader:input_type -> pb.UpdateHTTPWebRequestHeaderRequest
	10, // 8: pb.HTTPWebService.updateHTTPWebResponseHeader:input_type -> pb.UpdateHTTPWebResponseHeaderRequest
	11, // 9: pb.HTTPWebService.updateHTTPWebShutdown:input_type -> pb.UpdateHTTPWebShutdownRequest
	12, // 10: pb.HTTPWebService.updateHTTPWebPages:input_type -> pb.UpdateHTTPWebPagesRequest
	13, // 11: pb.HTTPWebService.updateHTTPWebAccessLog:input_type -> pb.UpdateHTTPWebAccessLogRequest
	14, // 12: pb.HTTPWebService.updateHTTPWebStat:input_type -> pb.UpdateHTTPWebStatRequest
	15, // 13: pb.HTTPWebService.updateHTTPWebCache:input_type -> pb.UpdateHTTPWebCacheRequest
	16, // 14: pb.HTTPWebService.updateHTTPWebFirewall:input_type -> pb.UpdateHTTPWebFirewallRequest
	17, // 15: pb.HTTPWebService.updateHTTPWebLocations:input_type -> pb.UpdateHTTPWebLocationsRequest
	18, // 16: pb.HTTPWebService.updateHTTPWebRedirectToHTTPS:input_type -> pb.UpdateHTTPWebRedirectToHTTPSRequest
	19, // 17: pb.HTTPWebService.updateHTTPWebWebsocket:input_type -> pb.UpdateHTTPWebWebsocketRequest
	20, // 18: pb.HTTPWebService.updateHTTPWebFastcgi:input_type -> pb.UpdateHTTPWebFastcgiRequest
	21, // 19: pb.HTTPWebService.updateHTTPWebRewriteRules:input_type -> pb.UpdateHTTPWebRewriteRulesRequest
	22, // 20: pb.HTTPWebService.updateHTTPWebHostRedirects:input_type -> pb.UpdateHTTPWebHostRedirectsRequest
	23, // 21: pb.HTTPWebService.findHTTPWebHostRedirects:input_type -> pb.FindHTTPWebHostRedirectsRequest
	1,  // 22: pb.HTTPWebService.createHTTPWeb:output_type -> pb.CreateHTTPWebResponse
	3,  // 23: pb.HTTPWebService.findEnabledHTTPWeb:output_type -> pb.FindEnabledHTTPWebResponse
	5,  // 24: pb.HTTPWebService.findEnabledHTTPWebConfig:output_type -> pb.FindEnabledHTTPWebConfigResponse
	26, // 25: pb.HTTPWebService.updateHTTPWeb:output_type -> pb.RPCSuccess
	26, // 26: pb.HTTPWebService.updateHTTPWebGzip:output_type -> pb.RPCSuccess
	26, // 27: pb.HTTPWebService.updateHTTPWebCharset:output_type -> pb.RPCSuccess
	26, // 28: pb.HTTPWebService.updateHTTPWebRequestHeader:output_type -> pb.RPCSuccess
	26, // 29: pb.HTTPWebService.updateHTTPWebResponseHeader:output_type -> pb.RPCSuccess
	26, // 30: pb.HTTPWebService.updateHTTPWebShutdown:output_type -> pb.RPCSuccess
	26, // 31: pb.HTTPWebService.updateHTTPWebPages:output_type -> pb.RPCSuccess
	26, // 32: pb.HTTPWebService.updateHTTPWebAccessLog:output_type -> pb.RPCSuccess
	26, // 33: pb.HTTPWebService.updateHTTPWebStat:output_type -> pb.RPCSuccess
	26, // 34: pb.HTTPWebService.updateHTTPWebCache:output_type -> pb.RPCSuccess
	26, // 35: pb.HTTPWebService.updateHTTPWebFirewall:output_type -> pb.RPCSuccess
	26, // 36: pb.HTTPWebService.updateHTTPWebLocations:output_type -> pb.RPCSuccess
	26, // 37: pb.HTTPWebService.updateHTTPWebRedirectToHTTPS:output_type -> pb.RPCSuccess
	26, // 38: pb.HTTPWebService.updateHTTPWebWebsocket:output_type -> pb.RPCSuccess
	26, // 39: pb.HTTPWebService.updateHTTPWebFastcgi:output_type -> pb.RPCSuccess
	26, // 40: pb.HTTPWebService.updateHTTPWebRewriteRules:output_type -> pb.RPCSuccess
	26, // 41: pb.HTTPWebService.updateHTTPWebHostRedirects:output_type -> pb.RPCSuccess
	24, // 42: pb.HTTPWebService.findHTTPWebHostRedirects:output_type -> pb.FindHTTPWebHostRedirectsResponse
	22, // [22:43] is the sub-list for method output_type
	1,  // [1:22] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_service_http_web_proto_init() }
func file_service_http_web_proto_init() {
	if File_service_http_web_proto != nil {
		return
	}
	file_models_model_http_web_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_http_web_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPWebResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebGzipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCharsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequestHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebResponseHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebAccessLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebFirewallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRedirectToHTTPSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebWebsocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebFastcgiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRewriteRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebHostRedirectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebHostRedirectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebHostRedirectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_http_web_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_http_web_proto_goTypes,
		DependencyIndexes: file_service_http_web_proto_depIdxs,
		MessageInfos:      file_service_http_web_proto_msgTypes,
	}.Build()
	File_service_http_web_proto = out.File
	file_service_http_web_proto_rawDesc = nil
	file_service_http_web_proto_goTypes = nil
	file_service_http_web_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HTTPWebServiceClient is the client API for HTTPWebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HTTPWebServiceClient interface {
	// 创建Web配置
	CreateHTTPWeb(ctx context.Context, in *CreateHTTPWebRequest, opts ...grpc.CallOption) (*CreateHTTPWebResponse, error)
	// 查找Web信息
	FindEnabledHTTPWeb(ctx context.Context, in *FindEnabledHTTPWebRequest, opts ...grpc.CallOption) (*FindEnabledHTTPWebResponse, error)
	// 查找Web配置
	FindEnabledHTTPWebConfig(ctx context.Context, in *FindEnabledHTTPWebConfigRequest, opts ...grpc.CallOption) (*FindEnabledHTTPWebConfigResponse, error)
	// 更改Web配置
	UpdateHTTPWeb(ctx context.Context, in *UpdateHTTPWebRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改Gzip配置
	UpdateHTTPWebGzip(ctx context.Context, in *UpdateHTTPWebGzipRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改字符集配置
	UpdateHTTPWebCharset(ctx context.Context, in *UpdateHTTPWebCharsetRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改请求Header策略
	UpdateHTTPWebRequestHeader(ctx context.Context, in *UpdateHTTPWebRequestHeaderRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改响应Header策略
	UpdateHTTPWebResponseHeader(ctx context.Context, in *UpdateHTTPWebResponseHeaderRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改Shutdown
	UpdateHTTPWebShutdown(ctx context.Context, in *UpdateHTTPWebShutdownRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改Pages
	UpdateHTTPWebPages(ctx context.Context, in *UpdateHTTPWebPagesRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改访问日志配置
	UpdateHTTPWebAccessLog(ctx context.Context, in *UpdateHTTPWebAccessLogRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改统计配置
	UpdateHTTPWebStat(ctx context.Context, in *UpdateHTTPWebStatRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改缓存配置
	UpdateHTTPWebCache(ctx context.Context, in *UpdateHTTPWebCacheRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改防火墙设置
	UpdateHTTPWebFirewall(ctx context.Context, in *UpdateHTTPWebFirewallRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改路径规则配置
	UpdateHTTPWebLocations(ctx context.Context, in *UpdateHTTPWebLocationsRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改跳转到HTTPS设置
	UpdateHTTPWebRedirectToHTTPS(ctx context.Context, in *UpdateHTTPWebRedirectToHTTPSRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改Websocket设置
	UpdateHTTPWebWebsocket(ctx context.Context, in *UpdateHTTPWebWebsocketRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改Fastcgi设置
	UpdateHTTPWebFastcgi(ctx context.Context, in *UpdateHTTPWebFastcgiRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改重写规则设置
	UpdateHTTPWebRewriteRules(ctx context.Context, in *UpdateHTTPWebRewriteRulesRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改主机跳转设置
	UpdateHTTPWebHostRedirects(ctx context.Context, in *UpdateHTTPWebHostRedirectsRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找主机跳转设置
	FindHTTPWebHostRedirects(ctx context.Context, in *FindHTTPWebHostRedirectsRequest, opts ...grpc.CallOption) (*FindHTTPWebHostRedirectsResponse, error)
}

type hTTPWebServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPWebServiceClient(cc grpc.ClientConnInterface) HTTPWebServiceClient {
	return &hTTPWebServiceClient{cc}
}

func (c *hTTPWebServiceClient) CreateHTTPWeb(ctx context.Context, in *CreateHTTPWebRequest, opts ...grpc.CallOption) (*CreateHTTPWebResponse, error) {
	out := new(CreateHTTPWebResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/createHTTPWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindEnabledHTTPWeb(ctx context.Context, in *FindEnabledHTTPWebRequest, opts ...grpc.CallOption) (*FindEnabledHTTPWebResponse, error) {
	out := new(FindEnabledHTTPWebResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findEnabledHTTPWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindEnabledHTTPWebConfig(ctx context.Context, in *FindEnabledHTTPWebConfigRequest, opts ...grpc.CallOption) (*FindEnabledHTTPWebConfigResponse, error) {
	out := new(FindEnabledHTTPWebConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findEnabledHTTPWebConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWeb(ctx context.Context, in *UpdateHTTPWebRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebGzip(ctx context.Context, in *UpdateHTTPWebGzipRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebGzip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebCharset(ctx context.Context, in *UpdateHTTPWebCharsetRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebCharset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebRequestHeader(ctx context.Context, in *UpdateHTTPWebRequestHeaderRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebRequestHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebResponseHeader(ctx context.Context, in *UpdateHTTPWebResponseHeaderRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebResponseHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebShutdown(ctx context.Context, in *UpdateHTTPWebShutdownRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebPages(ctx context.Context, in *UpdateHTTPWebPagesRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebAccessLog(ctx context.Context, in *UpdateHTTPWebAccessLogRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebAccessLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebStat(ctx context.Context, in *UpdateHTTPWebStatRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebCache(ctx context.Context, in *UpdateHTTPWebCacheRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebFirewall(ctx context.Context, in *UpdateHTTPWebFirewallRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebLocations(ctx context.Context, in *UpdateHTTPWebLocationsRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebRedirectToHTTPS(ctx context.Context, in *UpdateHTTPWebRedirectToHTTPSRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebRedirectToHTTPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebWebsocket(ctx context.Context, in *UpdateHTTPWebWebsocketRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebWebsocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebFastcgi(ctx context.Context, in *UpdateHTTPWebFastcgiRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebFastcgi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebRewriteRules(ctx context.Context, in *UpdateHTTPWebRewriteRulesRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebRewriteRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebHostRedirects(ctx context.Context, in *UpdateHTTPWebHostRedirectsRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebHostRedirects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindHTTPWebHostRedirects(ctx context.Context, in *FindHTTPWebHostRedirectsRequest, opts ...grpc.CallOption) (*FindHTTPWebHostRedirectsResponse, error) {
	out := new(FindHTTPWebHostRedirectsResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findHTTPWebHostRedirects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPWebServiceServer is the server API for HTTPWebService service.
type HTTPWebServiceServer interface {
	// 创建Web配置
	CreateHTTPWeb(context.Context, *CreateHTTPWebRequest) (*CreateHTTPWebResponse, error)
	// 查找Web信息
	FindEnabledHTTPWeb(context.Context, *FindEnabledHTTPWebRequest) (*FindEnabledHTTPWebResponse, error)
	// 查找Web配置
	FindEnabledHTTPWebConfig(context.Context, *FindEnabledHTTPWebConfigRequest) (*FindEnabledHTTPWebConfigResponse, error)
	// 更改Web配置
	UpdateHTTPWeb(context.Context, *UpdateHTTPWebRequest) (*RPCSuccess, error)
	// 更改Gzip配置
	UpdateHTTPWebGzip(context.Context, *UpdateHTTPWebGzipRequest) (*RPCSuccess, error)
	// 更改字符集配置
	UpdateHTTPWebCharset(context.Context, *UpdateHTTPWebCharsetRequest) (*RPCSuccess, error)
	// 更改请求Header策略
	UpdateHTTPWebRequestHeader(context.Context, *UpdateHTTPWebRequestHeaderRequest) (*RPCSuccess, error)
	// 更改响应Header策略
	UpdateHTTPWebResponseHeader(context.Context, *UpdateHTTPWebResponseHeaderRequest) (*RPCSuccess, error)
	// 更改Shutdown
	UpdateHTTPWebShutdown(context.Context, *UpdateHTTPWebShutdownRequest) (*RPCSuccess, error)
	// 更改Pages
	UpdateHTTPWebPages(context.Context, *UpdateHTTPWebPagesRequest) (*RPCSuccess, error)
	// 更改访问日志配置
	UpdateHTTPWebAccessLog(context.Context, *UpdateHTTPWebAccessLogRequest) (*RPCSuccess, error)
	// 更改统计配置
	UpdateHTTPWebStat(context.Context, *UpdateHTTPWebStatRequest) (*RPCSuccess, error)
	// 更改缓存配置
	UpdateHTTPWebCache(context.Context, *UpdateHTTPWebCacheRequest) (*RPCSuccess, error)
	// 更改防火墙设置
	UpdateHTTPWebFirewall(context.Context, *UpdateHTTPWebFirewallRequest) (*RPCSuccess, error)
	// 更改路径规则配置
	UpdateHTTPWebLocations(context.Context, *UpdateHTTPWebLocationsRequest) (*RPCSuccess, error)
	// 更改跳转到HTTPS设置
	UpdateHTTPWebRedirectToHTTPS(context.Context, *UpdateHTTPWebRedirectToHTTPSRequest) (*RPCSuccess, error)
	// 更改Websocket设置
	UpdateHTTPWebWebsocket(context.Context, *UpdateHTTPWebWebsocketRequest) (*RPCSuccess, error)
	// 更改Fastcgi设置
	UpdateHTTPWebFastcgi(context.Context, *UpdateHTTPWebFastcgiRequest) (*RPCSuccess, error)
	// 更改重写规则设置
	UpdateHTTPWebRewriteRules(context.Context, *UpdateHTTPWebRewriteRulesRequest) (*RPCSuccess, error)
	// 更改主机跳转设置
	UpdateHTTPWebHostRedirects(context.Context, *UpdateHTTPWebHostRedirectsRequest) (*RPCSuccess, error)
	// 查找主机跳转设置
	FindHTTPWebHostRedirects(context.Context, *FindHTTPWebHostRedirectsRequest) (*FindHTTPWebHostRedirectsResponse, error)
}

// UnimplementedHTTPWebServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHTTPWebServiceServer struct {
}

func (*UnimplementedHTTPWebServiceServer) CreateHTTPWeb(context.Context, *CreateHTTPWebRequest) (*CreateHTTPWebResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHTTPWeb not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindEnabledHTTPWeb(context.Context, *FindEnabledHTTPWebRequest) (*FindEnabledHTTPWebResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledHTTPWeb not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindEnabledHTTPWebConfig(context.Context, *FindEnabledHTTPWebConfigRequest) (*FindEnabledHTTPWebConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledHTTPWebConfig not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWeb(context.Context, *UpdateHTTPWebRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWeb not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebGzip(context.Context, *UpdateHTTPWebGzipRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebGzip not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebCharset(context.Context, *UpdateHTTPWebCharsetRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebCharset not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebRequestHeader(context.Context, *UpdateHTTPWebRequestHeaderRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebRequestHeader not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebResponseHeader(context.Context, *UpdateHTTPWebResponseHeaderRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebResponseHeader not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebShutdown(context.Context, *UpdateHTTPWebShutdownRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebShutdown not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebPages(context.Context, *UpdateHTTPWebPagesRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebPages not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebAccessLog(context.Context, *UpdateHTTPWebAccessLogRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebAccessLog not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebStat(context.Context, *UpdateHTTPWebStatRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebStat not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebCache(context.Context, *UpdateHTTPWebCacheRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebCache not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebFirewall(context.Context, *UpdateHTTPWebFirewallRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebFirewall not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebLocations(context.Context, *UpdateHTTPWebLocationsRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebLocations not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebRedirectToHTTPS(context.Context, *UpdateHTTPWebRedirectToHTTPSRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebRedirectToHTTPS not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebWebsocket(context.Context, *UpdateHTTPWebWebsocketRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebWebsocket not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebFastcgi(context.Context, *UpdateHTTPWebFastcgiRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebFastcgi not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebRewriteRules(context.Context, *UpdateHTTPWebRewriteRulesRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebRewriteRules not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebHostRedirects(context.Context, *UpdateHTTPWebHostRedirectsRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebHostRedirects not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindHTTPWebHostRedirects(context.Context, *FindHTTPWebHostRedirectsRequest) (*FindHTTPWebHostRedirectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHTTPWebHostRedirects not implemented")
}

func RegisterHTTPWebServiceServer(s *grpc.Server, srv HTTPWebServiceServer) {
	s.RegisterService(&_HTTPWebService_serviceDesc, srv)
}

func _HTTPWebService_CreateHTTPWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHTTPWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).CreateHTTPWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/CreateHTTPWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).CreateHTTPWeb(ctx, req.(*CreateHTTPWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindEnabledHTTPWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledHTTPWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindEnabledHTTPWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindEnabledHTTPWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindEnabledHTTPWeb(ctx, req.(*FindEnabledHTTPWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindEnabledHTTPWebConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledHTTPWebConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindEnabledHTTPWebConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindEnabledHTTPWebConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindEnabledHTTPWebConfig(ctx, req.(*FindEnabledHTTPWebConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWeb(ctx, req.(*UpdateHTTPWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebGzip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebGzipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebGzip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebGzip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebGzip(ctx, req.(*UpdateHTTPWebGzipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebCharset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebCharsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCharset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebCharset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCharset(ctx, req.(*UpdateHTTPWebCharsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebRequestHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRequestHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRequestHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebRequestHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRequestHeader(ctx, req.(*UpdateHTTPWebRequestHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebResponseHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebResponseHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebResponseHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebResponseHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebResponseHeader(ctx, req.(*UpdateHTTPWebResponseHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebShutdown(ctx, req.(*UpdateHTTPWebShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebPages(ctx, req.(*UpdateHTTPWebPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebAccessLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebAccessLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebAccessLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebAccessLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebAccessLog(ctx, req.(*UpdateHTTPWebAccessLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebStat(ctx, req.(*UpdateHTTPWebStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCache(ctx, req.(*UpdateHTTPWebCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebFirewallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebFirewall(ctx, req.(*UpdateHTTPWebFirewallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebLocations(ctx, req.(*UpdateHTTPWebLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebRedirectToHTTPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRedirectToHTTPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRedirectToHTTPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebRedirectToHTTPS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRedirectToHTTPS(ctx, req.(*UpdateHTTPWebRedirectToHTTPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebWebsocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebWebsocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebWebsocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebWebsocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebWebsocket(ctx, req.(*UpdateHTTPWebWebsocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebFastcgi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebFastcgiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebFastcgi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebFastcgi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebFastcgi(ctx, req.(*UpdateHTTPWebFastcgiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebRewriteRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRewriteRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRewriteRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebRewriteRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRewriteRules(ctx, req.(*UpdateHTTPWebRewriteRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebHostRedirects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebHostRedirectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebHostRedirects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebHostRedirects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebHostRedirects(ctx, req.(*UpdateHTTPWebHostRedirectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindHTTPWebHostRedirects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHTTPWebHostRedirectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindHTTPWebHostRedirects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindHTTPWebHostRedirects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindHTTPWebHostRedirects(ctx, req.(*FindHTTPWebHostRedirectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTPWebService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HTTPWebService",
	HandlerType: (*HTTPWebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createHTTPWeb",
			Handler:    _HTTPWebService_CreateHTTPWeb_Handler,
		},
		{
			MethodName: "findEnabledHTTPWeb",
			Handler:    _HTTPWebService_FindEnabledHTTPWeb_Handler,
		},
		{
			MethodName: "findEnabledHTTPWebConfig",
			Handler:    _HTTPWebService_FindEnabledHTTPWebConfig_Handler,
		},
		{
			MethodName: "updateHTTPWeb",
			Handler:    _HTTPWebService_UpdateHTTPWeb_Handler,
		},
		{
			MethodName: "updateHTTPWebGzip",
			Handler:    _HTTPWebService_UpdateHTTPWebGzip_Handler,
		},
		{
			MethodName: "updateHTTPWebCharset",
			Handler:    _HTTPWebService_UpdateHTTPWebCharset_Handler,
		},
		{
			MethodName: "updateHTTPWebRequestHeader",
			Handler:    _HTTPWebService_UpdateHTTPWebRequestHeader_Handler,
		},
		{
			MethodName: "updateHTTPWebResponseHeader",
			Handler:    _HTTPWebService_UpdateHTTPWebResponseHeader_Handler,
		},
		{
			MethodName: "updateHTTPWebShutdown",
			Handler:    _HTTPWebService_UpdateHTTPWebShutdown_Handler,
		},
		{
			MethodName: "updateHTTPWebPages",
			Handler:    _HTTPWebService_UpdateHTTPWebPages_Handler,
		},
		{
			MethodName: "updateHTTPWebAccessLog",
			Handler:    _HTTPWebService_UpdateHTTPWebAccessLog_Handler,
		},
		{
			MethodName: "updateHTTPWebStat",
			Handler:    _HTTPWebService_UpdateHTTPWebStat_Handler,
		},
		{
			MethodName: "updateHTTPWebCache",
			Handler:    _HTTPWebService_UpdateHTTPWebCache_Handler,
		},
		{
			MethodName: "updateHTTPWebFirewall",
			Handler:    _HTTPWebService_UpdateHTTPWebFirewall_Handler,
		},
		{
			MethodName: "updateHTTPWebLocations",
			Handler:    _HTTPWebService_UpdateHTTPWebLocations_Handler,
		},
		{
			MethodName: "updateHTTPWebRedirectToHTTPS",
			Handler:    _HTTPWebService_UpdateHTTPWebRedirectToHTTPS_Handler,
		},
		{
			MethodName: "updateHTTPWebWebsocket",
			Handler:    _HTTPWebService_UpdateHTTPWebWebsocket_Handler,
		},
		{
			MethodName: "updateHTTPWebFastcgi",
			Handler:    _HTTPWebService_UpdateHTTPWebFastcgi_Handler,
		},
		{
			MethodName: "updateHTTPWebRewriteRules",
			Handler:    _HTTPWebService_UpdateHTTPWebRewriteRules_Handler,
		},
		{
			MethodName: "updateHTTPWebHostRedirects",
			Handler:    _HTTPWebService_UpdateHTTPWebHostRedirects_Handler,
		},
		{
			MethodName: "findHTTPWebHostRedirects",
			Handler:    _HTTPWebService_FindHTTPWebHostRedirects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_http_web.proto",
}
