// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_http_web.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建Web配置
type CreateHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *CreateHTTPWebRequest) Reset() {
	*x = CreateHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPWebRequest) ProtoMessage() {}

func (x *CreateHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*CreateHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHTTPWebRequest) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type CreateHTTPWebResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId int64 `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
}

func (x *CreateHTTPWebResponse) Reset() {
	*x = CreateHTTPWebResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPWebResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPWebResponse) ProtoMessage() {}

func (x *CreateHTTPWebResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPWebResponse.ProtoReflect.Descriptor instead.
func (*CreateHTTPWebResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHTTPWebResponse) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

// 查找Web配置
type FindEnabledHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId int64 `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
}

func (x *FindEnabledHTTPWebRequest) Reset() {
	*x = FindEnabledHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebRequest) ProtoMessage() {}

func (x *FindEnabledHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{2}
}

func (x *FindEnabledHTTPWebRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

type FindEnabledHTTPWebResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Web *HTTPWeb `protobuf:"bytes,1,opt,name=web,proto3" json:"web,omitempty"`
}

func (x *FindEnabledHTTPWebResponse) Reset() {
	*x = FindEnabledHTTPWebResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebResponse) ProtoMessage() {}

func (x *FindEnabledHTTPWebResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledHTTPWebResponse) GetWeb() *HTTPWeb {
	if x != nil {
		return x.Web
	}
	return nil
}

// 更改Web配置
type UpdateHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	Root  string `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *UpdateHTTPWebRequest) Reset() {
	*x = UpdateHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateHTTPWebRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebRequest) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

// 更改Gzip配置
type UpdateHTTPWebGzipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId  int64 `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	GzipId int64 `protobuf:"varint,2,opt,name=gzipId,proto3" json:"gzipId,omitempty"`
}

func (x *UpdateHTTPWebGzipRequest) Reset() {
	*x = UpdateHTTPWebGzipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebGzipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebGzipRequest) ProtoMessage() {}

func (x *UpdateHTTPWebGzipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebGzipRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebGzipRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateHTTPWebGzipRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebGzipRequest) GetGzipId() int64 {
	if x != nil {
		return x.GzipId
	}
	return 0
}

// 更改字符集配置
type UpdateHTTPWebCharsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId   int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	Charset string `protobuf:"bytes,2,opt,name=charset,proto3" json:"charset,omitempty"`
}

func (x *UpdateHTTPWebCharsetRequest) Reset() {
	*x = UpdateHTTPWebCharsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCharsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCharsetRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCharsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCharsetRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCharsetRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateHTTPWebCharsetRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebCharsetRequest) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

// 更改请求Header策略
type UpdateHTTPWebRequestHeaderPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId          int64 `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	HeaderPolicyId int64 `protobuf:"varint,2,opt,name=headerPolicyId,proto3" json:"headerPolicyId,omitempty"`
}

func (x *UpdateHTTPWebRequestHeaderPolicyRequest) Reset() {
	*x = UpdateHTTPWebRequestHeaderPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequestHeaderPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequestHeaderPolicyRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequestHeaderPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequestHeaderPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequestHeaderPolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateHTTPWebRequestHeaderPolicyRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebRequestHeaderPolicyRequest) GetHeaderPolicyId() int64 {
	if x != nil {
		return x.HeaderPolicyId
	}
	return 0
}

// 更改响应Header策略
type UpdateHTTPWebResponseHeaderPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId          int64 `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	HeaderPolicyId int64 `protobuf:"varint,2,opt,name=headerPolicyId,proto3" json:"headerPolicyId,omitempty"`
}

func (x *UpdateHTTPWebResponseHeaderPolicyRequest) Reset() {
	*x = UpdateHTTPWebResponseHeaderPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebResponseHeaderPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebResponseHeaderPolicyRequest) ProtoMessage() {}

func (x *UpdateHTTPWebResponseHeaderPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebResponseHeaderPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebResponseHeaderPolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateHTTPWebResponseHeaderPolicyRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebResponseHeaderPolicyRequest) GetHeaderPolicyId() int64 {
	if x != nil {
		return x.HeaderPolicyId
	}
	return 0
}

// 更改Shutdown
type UpdateHTTPWebShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId        int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	ShutdownJSON []byte `protobuf:"bytes,2,opt,name=shutdownJSON,proto3" json:"shutdownJSON,omitempty"`
}

func (x *UpdateHTTPWebShutdownRequest) Reset() {
	*x = UpdateHTTPWebShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebShutdownRequest) ProtoMessage() {}

func (x *UpdateHTTPWebShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebShutdownRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebShutdownRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateHTTPWebShutdownRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebShutdownRequest) GetShutdownJSON() []byte {
	if x != nil {
		return x.ShutdownJSON
	}
	return nil
}

// 更改Pages
type UpdateHTTPWebPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId     int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	PagesJSON []byte `protobuf:"bytes,2,opt,name=pagesJSON,proto3" json:"pagesJSON,omitempty"`
}

func (x *UpdateHTTPWebPagesRequest) Reset() {
	*x = UpdateHTTPWebPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebPagesRequest) ProtoMessage() {}

func (x *UpdateHTTPWebPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebPagesRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebPagesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateHTTPWebPagesRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPWebPagesRequest) GetPagesJSON() []byte {
	if x != nil {
		return x.PagesJSON
	}
	return nil
}

// 更改访问日志配置
type UpdateHTTPAccessLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebId         int64  `protobuf:"varint,1,opt,name=webId,proto3" json:"webId,omitempty"`
	AccessLogJSON []byte `protobuf:"bytes,2,opt,name=accessLogJSON,proto3" json:"accessLogJSON,omitempty"`
}

func (x *UpdateHTTPAccessLogRequest) Reset() {
	*x = UpdateHTTPAccessLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPAccessLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPAccessLogRequest) ProtoMessage() {}

func (x *UpdateHTTPAccessLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPAccessLogRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPAccessLogRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateHTTPAccessLogRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *UpdateHTTPAccessLogRequest) GetAccessLogJSON() []byte {
	if x != nil {
		return x.AccessLogJSON
	}
	return nil
}

var File_service_http_web_proto protoreflect.FileDescriptor

var file_service_http_web_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x77,
	0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x14, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x22, 0x2d, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49,
	0x64, 0x22, 0x31, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77,
	0x65, 0x62, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x03, 0x77, 0x65,
	0x62, 0x22, 0x40, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x22, 0x48, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x47, 0x7a, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x7a, 0x69, 0x70, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x7a, 0x69, 0x70, 0x49, 0x64, 0x22, 0x4d, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x68,
	0x61, 0x72, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x27,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4f, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x58, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x4a, 0x53, 0x4f, 0x4e, 0x32, 0xbd, 0x06, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x12, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x47, 0x7a, 0x69, 0x70, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x47, 0x7a, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x14,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x68, 0x61,
	0x72, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x67, 0x0a, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_http_web_proto_rawDescOnce sync.Once
	file_service_http_web_proto_rawDescData = file_service_http_web_proto_rawDesc
)

func file_service_http_web_proto_rawDescGZIP() []byte {
	file_service_http_web_proto_rawDescOnce.Do(func() {
		file_service_http_web_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_http_web_proto_rawDescData)
	})
	return file_service_http_web_proto_rawDescData
}

var file_service_http_web_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_service_http_web_proto_goTypes = []interface{}{
	(*CreateHTTPWebRequest)(nil),                     // 0: pb.CreateHTTPWebRequest
	(*CreateHTTPWebResponse)(nil),                    // 1: pb.CreateHTTPWebResponse
	(*FindEnabledHTTPWebRequest)(nil),                // 2: pb.FindEnabledHTTPWebRequest
	(*FindEnabledHTTPWebResponse)(nil),               // 3: pb.FindEnabledHTTPWebResponse
	(*UpdateHTTPWebRequest)(nil),                     // 4: pb.UpdateHTTPWebRequest
	(*UpdateHTTPWebGzipRequest)(nil),                 // 5: pb.UpdateHTTPWebGzipRequest
	(*UpdateHTTPWebCharsetRequest)(nil),              // 6: pb.UpdateHTTPWebCharsetRequest
	(*UpdateHTTPWebRequestHeaderPolicyRequest)(nil),  // 7: pb.UpdateHTTPWebRequestHeaderPolicyRequest
	(*UpdateHTTPWebResponseHeaderPolicyRequest)(nil), // 8: pb.UpdateHTTPWebResponseHeaderPolicyRequest
	(*UpdateHTTPWebShutdownRequest)(nil),             // 9: pb.UpdateHTTPWebShutdownRequest
	(*UpdateHTTPWebPagesRequest)(nil),                // 10: pb.UpdateHTTPWebPagesRequest
	(*UpdateHTTPAccessLogRequest)(nil),               // 11: pb.UpdateHTTPAccessLogRequest
	(*HTTPWeb)(nil),                                  // 12: pb.HTTPWeb
	(*RPCUpdateSuccess)(nil),                         // 13: pb.RPCUpdateSuccess
}
var file_service_http_web_proto_depIdxs = []int32{
	12, // 0: pb.FindEnabledHTTPWebResponse.web:type_name -> pb.HTTPWeb
	0,  // 1: pb.HTTPWebService.createHTTPWeb:input_type -> pb.CreateHTTPWebRequest
	2,  // 2: pb.HTTPWebService.findEnabledHTTPWeb:input_type -> pb.FindEnabledHTTPWebRequest
	4,  // 3: pb.HTTPWebService.updateHTTPWeb:input_type -> pb.UpdateHTTPWebRequest
	5,  // 4: pb.HTTPWebService.updateHTTPWebGzip:input_type -> pb.UpdateHTTPWebGzipRequest
	6,  // 5: pb.HTTPWebService.updateHTTPWebCharset:input_type -> pb.UpdateHTTPWebCharsetRequest
	7,  // 6: pb.HTTPWebService.updateHTTPWebRequestHeaderPolicy:input_type -> pb.UpdateHTTPWebRequestHeaderPolicyRequest
	8,  // 7: pb.HTTPWebService.updateHTTPWebResponseHeaderPolicy:input_type -> pb.UpdateHTTPWebResponseHeaderPolicyRequest
	9,  // 8: pb.HTTPWebService.updateHTTPWebShutdown:input_type -> pb.UpdateHTTPWebShutdownRequest
	10, // 9: pb.HTTPWebService.updateHTTPWebPages:input_type -> pb.UpdateHTTPWebPagesRequest
	11, // 10: pb.HTTPWebService.updateHTTPAccessLog:input_type -> pb.UpdateHTTPAccessLogRequest
	1,  // 11: pb.HTTPWebService.createHTTPWeb:output_type -> pb.CreateHTTPWebResponse
	3,  // 12: pb.HTTPWebService.findEnabledHTTPWeb:output_type -> pb.FindEnabledHTTPWebResponse
	13, // 13: pb.HTTPWebService.updateHTTPWeb:output_type -> pb.RPCUpdateSuccess
	13, // 14: pb.HTTPWebService.updateHTTPWebGzip:output_type -> pb.RPCUpdateSuccess
	13, // 15: pb.HTTPWebService.updateHTTPWebCharset:output_type -> pb.RPCUpdateSuccess
	13, // 16: pb.HTTPWebService.updateHTTPWebRequestHeaderPolicy:output_type -> pb.RPCUpdateSuccess
	13, // 17: pb.HTTPWebService.updateHTTPWebResponseHeaderPolicy:output_type -> pb.RPCUpdateSuccess
	13, // 18: pb.HTTPWebService.updateHTTPWebShutdown:output_type -> pb.RPCUpdateSuccess
	13, // 19: pb.HTTPWebService.updateHTTPWebPages:output_type -> pb.RPCUpdateSuccess
	13, // 20: pb.HTTPWebService.updateHTTPAccessLog:output_type -> pb.RPCUpdateSuccess
	11, // [11:21] is the sub-list for method output_type
	1,  // [1:11] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_service_http_web_proto_init() }
func file_service_http_web_proto_init() {
	if File_service_http_web_proto != nil {
		return
	}
	file_model_http_web_proto_init()
	file_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_http_web_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPWebResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebGzipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCharsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequestHeaderPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebResponseHeaderPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPAccessLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_http_web_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_http_web_proto_goTypes,
		DependencyIndexes: file_service_http_web_proto_depIdxs,
		MessageInfos:      file_service_http_web_proto_msgTypes,
	}.Build()
	File_service_http_web_proto = out.File
	file_service_http_web_proto_rawDesc = nil
	file_service_http_web_proto_goTypes = nil
	file_service_http_web_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HTTPWebServiceClient is the client API for HTTPWebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HTTPWebServiceClient interface {
	// 创建Web配置
	CreateHTTPWeb(ctx context.Context, in *CreateHTTPWebRequest, opts ...grpc.CallOption) (*CreateHTTPWebResponse, error)
	// 查找Web配置
	FindEnabledHTTPWeb(ctx context.Context, in *FindEnabledHTTPWebRequest, opts ...grpc.CallOption) (*FindEnabledHTTPWebResponse, error)
	// 更改Web配置
	UpdateHTTPWeb(ctx context.Context, in *UpdateHTTPWebRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 更改Gzip配置
	UpdateHTTPWebGzip(ctx context.Context, in *UpdateHTTPWebGzipRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 更改字符集配置
	UpdateHTTPWebCharset(ctx context.Context, in *UpdateHTTPWebCharsetRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 更改请求Header策略
	UpdateHTTPWebRequestHeaderPolicy(ctx context.Context, in *UpdateHTTPWebRequestHeaderPolicyRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 更改响应Header策略
	UpdateHTTPWebResponseHeaderPolicy(ctx context.Context, in *UpdateHTTPWebResponseHeaderPolicyRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 更改Shutdown
	UpdateHTTPWebShutdown(ctx context.Context, in *UpdateHTTPWebShutdownRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 更改Pages
	UpdateHTTPWebPages(ctx context.Context, in *UpdateHTTPWebPagesRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 更改访问日志配置
	UpdateHTTPAccessLog(ctx context.Context, in *UpdateHTTPAccessLogRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
}

type hTTPWebServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPWebServiceClient(cc grpc.ClientConnInterface) HTTPWebServiceClient {
	return &hTTPWebServiceClient{cc}
}

func (c *hTTPWebServiceClient) CreateHTTPWeb(ctx context.Context, in *CreateHTTPWebRequest, opts ...grpc.CallOption) (*CreateHTTPWebResponse, error) {
	out := new(CreateHTTPWebResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/createHTTPWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindEnabledHTTPWeb(ctx context.Context, in *FindEnabledHTTPWebRequest, opts ...grpc.CallOption) (*FindEnabledHTTPWebResponse, error) {
	out := new(FindEnabledHTTPWebResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findEnabledHTTPWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWeb(ctx context.Context, in *UpdateHTTPWebRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebGzip(ctx context.Context, in *UpdateHTTPWebGzipRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebGzip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebCharset(ctx context.Context, in *UpdateHTTPWebCharsetRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebCharset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebRequestHeaderPolicy(ctx context.Context, in *UpdateHTTPWebRequestHeaderPolicyRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebRequestHeaderPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebResponseHeaderPolicy(ctx context.Context, in *UpdateHTTPWebResponseHeaderPolicyRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebResponseHeaderPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebShutdown(ctx context.Context, in *UpdateHTTPWebShutdownRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebPages(ctx context.Context, in *UpdateHTTPWebPagesRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPAccessLog(ctx context.Context, in *UpdateHTTPAccessLogRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPAccessLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPWebServiceServer is the server API for HTTPWebService service.
type HTTPWebServiceServer interface {
	// 创建Web配置
	CreateHTTPWeb(context.Context, *CreateHTTPWebRequest) (*CreateHTTPWebResponse, error)
	// 查找Web配置
	FindEnabledHTTPWeb(context.Context, *FindEnabledHTTPWebRequest) (*FindEnabledHTTPWebResponse, error)
	// 更改Web配置
	UpdateHTTPWeb(context.Context, *UpdateHTTPWebRequest) (*RPCUpdateSuccess, error)
	// 更改Gzip配置
	UpdateHTTPWebGzip(context.Context, *UpdateHTTPWebGzipRequest) (*RPCUpdateSuccess, error)
	// 更改字符集配置
	UpdateHTTPWebCharset(context.Context, *UpdateHTTPWebCharsetRequest) (*RPCUpdateSuccess, error)
	// 更改请求Header策略
	UpdateHTTPWebRequestHeaderPolicy(context.Context, *UpdateHTTPWebRequestHeaderPolicyRequest) (*RPCUpdateSuccess, error)
	// 更改响应Header策略
	UpdateHTTPWebResponseHeaderPolicy(context.Context, *UpdateHTTPWebResponseHeaderPolicyRequest) (*RPCUpdateSuccess, error)
	// 更改Shutdown
	UpdateHTTPWebShutdown(context.Context, *UpdateHTTPWebShutdownRequest) (*RPCUpdateSuccess, error)
	// 更改Pages
	UpdateHTTPWebPages(context.Context, *UpdateHTTPWebPagesRequest) (*RPCUpdateSuccess, error)
	// 更改访问日志配置
	UpdateHTTPAccessLog(context.Context, *UpdateHTTPAccessLogRequest) (*RPCUpdateSuccess, error)
}

// UnimplementedHTTPWebServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHTTPWebServiceServer struct {
}

func (*UnimplementedHTTPWebServiceServer) CreateHTTPWeb(context.Context, *CreateHTTPWebRequest) (*CreateHTTPWebResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHTTPWeb not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindEnabledHTTPWeb(context.Context, *FindEnabledHTTPWebRequest) (*FindEnabledHTTPWebResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledHTTPWeb not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWeb(context.Context, *UpdateHTTPWebRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWeb not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebGzip(context.Context, *UpdateHTTPWebGzipRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebGzip not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebCharset(context.Context, *UpdateHTTPWebCharsetRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebCharset not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebRequestHeaderPolicy(context.Context, *UpdateHTTPWebRequestHeaderPolicyRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebRequestHeaderPolicy not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebResponseHeaderPolicy(context.Context, *UpdateHTTPWebResponseHeaderPolicyRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebResponseHeaderPolicy not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebShutdown(context.Context, *UpdateHTTPWebShutdownRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebShutdown not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebPages(context.Context, *UpdateHTTPWebPagesRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebPages not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPAccessLog(context.Context, *UpdateHTTPAccessLogRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPAccessLog not implemented")
}

func RegisterHTTPWebServiceServer(s *grpc.Server, srv HTTPWebServiceServer) {
	s.RegisterService(&_HTTPWebService_serviceDesc, srv)
}

func _HTTPWebService_CreateHTTPWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHTTPWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).CreateHTTPWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/CreateHTTPWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).CreateHTTPWeb(ctx, req.(*CreateHTTPWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindEnabledHTTPWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledHTTPWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindEnabledHTTPWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindEnabledHTTPWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindEnabledHTTPWeb(ctx, req.(*FindEnabledHTTPWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWeb(ctx, req.(*UpdateHTTPWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebGzip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebGzipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebGzip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebGzip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebGzip(ctx, req.(*UpdateHTTPWebGzipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebCharset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebCharsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCharset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebCharset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCharset(ctx, req.(*UpdateHTTPWebCharsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebRequestHeaderPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRequestHeaderPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRequestHeaderPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebRequestHeaderPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRequestHeaderPolicy(ctx, req.(*UpdateHTTPWebRequestHeaderPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebResponseHeaderPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebResponseHeaderPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebResponseHeaderPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebResponseHeaderPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebResponseHeaderPolicy(ctx, req.(*UpdateHTTPWebResponseHeaderPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebShutdown(ctx, req.(*UpdateHTTPWebShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebPages(ctx, req.(*UpdateHTTPWebPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPAccessLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPAccessLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPAccessLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPAccessLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPAccessLog(ctx, req.(*UpdateHTTPAccessLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTPWebService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HTTPWebService",
	HandlerType: (*HTTPWebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createHTTPWeb",
			Handler:    _HTTPWebService_CreateHTTPWeb_Handler,
		},
		{
			MethodName: "findEnabledHTTPWeb",
			Handler:    _HTTPWebService_FindEnabledHTTPWeb_Handler,
		},
		{
			MethodName: "updateHTTPWeb",
			Handler:    _HTTPWebService_UpdateHTTPWeb_Handler,
		},
		{
			MethodName: "updateHTTPWebGzip",
			Handler:    _HTTPWebService_UpdateHTTPWebGzip_Handler,
		},
		{
			MethodName: "updateHTTPWebCharset",
			Handler:    _HTTPWebService_UpdateHTTPWebCharset_Handler,
		},
		{
			MethodName: "updateHTTPWebRequestHeaderPolicy",
			Handler:    _HTTPWebService_UpdateHTTPWebRequestHeaderPolicy_Handler,
		},
		{
			MethodName: "updateHTTPWebResponseHeaderPolicy",
			Handler:    _HTTPWebService_UpdateHTTPWebResponseHeaderPolicy_Handler,
		},
		{
			MethodName: "updateHTTPWebShutdown",
			Handler:    _HTTPWebService_UpdateHTTPWebShutdown_Handler,
		},
		{
			MethodName: "updateHTTPWebPages",
			Handler:    _HTTPWebService_UpdateHTTPWebPages_Handler,
		},
		{
			MethodName: "updateHTTPAccessLog",
			Handler:    _HTTPWebService_UpdateHTTPAccessLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_http_web.proto",
}
