// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_http_web.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建Web配置
type CreateHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootJSON []byte `protobuf:"bytes,1,opt,name=rootJSON,proto3" json:"rootJSON,omitempty"` // 可选，静态分发配置
}

func (x *CreateHTTPWebRequest) Reset() {
	*x = CreateHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPWebRequest) ProtoMessage() {}

func (x *CreateHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*CreateHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHTTPWebRequest) GetRootJSON() []byte {
	if x != nil {
		return x.RootJSON
	}
	return nil
}

type CreateHTTPWebResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *CreateHTTPWebResponse) Reset() {
	*x = CreateHTTPWebResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPWebResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPWebResponse) ProtoMessage() {}

func (x *CreateHTTPWebResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPWebResponse.ProtoReflect.Descriptor instead.
func (*CreateHTTPWebResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHTTPWebResponse) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

// 查找Web信息
type FindEnabledHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindEnabledHTTPWebRequest) Reset() {
	*x = FindEnabledHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebRequest) ProtoMessage() {}

func (x *FindEnabledHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{2}
}

func (x *FindEnabledHTTPWebRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindEnabledHTTPWebResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWeb *HTTPWeb `protobuf:"bytes,1,opt,name=httpWeb,proto3" json:"httpWeb,omitempty"`
}

func (x *FindEnabledHTTPWebResponse) Reset() {
	*x = FindEnabledHTTPWebResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebResponse) ProtoMessage() {}

func (x *FindEnabledHTTPWebResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledHTTPWebResponse) GetHttpWeb() *HTTPWeb {
	if x != nil {
		return x.HttpWeb
	}
	return nil
}

// 查找Web配置
type FindEnabledHTTPWebConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindEnabledHTTPWebConfigRequest) Reset() {
	*x = FindEnabledHTTPWebConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebConfigRequest) ProtoMessage() {}

func (x *FindEnabledHTTPWebConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebConfigRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{4}
}

func (x *FindEnabledHTTPWebConfigRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindEnabledHTTPWebConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebJSON []byte `protobuf:"bytes,1,opt,name=httpWebJSON,proto3" json:"httpWebJSON,omitempty"`
}

func (x *FindEnabledHTTPWebConfigResponse) Reset() {
	*x = FindEnabledHTTPWebConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebConfigResponse) ProtoMessage() {}

func (x *FindEnabledHTTPWebConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebConfigResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{5}
}

func (x *FindEnabledHTTPWebConfigResponse) GetHttpWebJSON() []byte {
	if x != nil {
		return x.HttpWebJSON
	}
	return nil
}

// 更改Web配置
type UpdateHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RootJSON  []byte `protobuf:"bytes,2,opt,name=rootJSON,proto3" json:"rootJSON,omitempty"`
}

func (x *UpdateHTTPWebRequest) Reset() {
	*x = UpdateHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateHTTPWebRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRequest) GetRootJSON() []byte {
	if x != nil {
		return x.RootJSON
	}
	return nil
}

// 更改压缩配置
type UpdateHTTPWebCompressionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId       int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	CompressionJSON []byte `protobuf:"bytes,2,opt,name=compressionJSON,proto3" json:"compressionJSON,omitempty"`
}

func (x *UpdateHTTPWebCompressionRequest) Reset() {
	*x = UpdateHTTPWebCompressionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCompressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCompressionRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCompressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCompressionRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCompressionRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateHTTPWebCompressionRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebCompressionRequest) GetCompressionJSON() []byte {
	if x != nil {
		return x.CompressionJSON
	}
	return nil
}

// 更改WebP配置
type UpdateHTTPWebWebPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	WebpJSON  []byte `protobuf:"bytes,2,opt,name=webpJSON,proto3" json:"webpJSON,omitempty"`
}

func (x *UpdateHTTPWebWebPRequest) Reset() {
	*x = UpdateHTTPWebWebPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebWebPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebWebPRequest) ProtoMessage() {}

func (x *UpdateHTTPWebWebPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebWebPRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebWebPRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateHTTPWebWebPRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebWebPRequest) GetWebpJSON() []byte {
	if x != nil {
		return x.WebpJSON
	}
	return nil
}

// 更改RemoteAddr配置
type UpdateHTTPWebRemoteAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId      int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RemoteAddrJSON []byte `protobuf:"bytes,2,opt,name=remoteAddrJSON,proto3" json:"remoteAddrJSON,omitempty"` // @link json:http_remote_addr_config
}

func (x *UpdateHTTPWebRemoteAddrRequest) Reset() {
	*x = UpdateHTTPWebRemoteAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRemoteAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRemoteAddrRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRemoteAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRemoteAddrRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRemoteAddrRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateHTTPWebRemoteAddrRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRemoteAddrRequest) GetRemoteAddrJSON() []byte {
	if x != nil {
		return x.RemoteAddrJSON
	}
	return nil
}

// 更改字符集配置
type UpdateHTTPWebCharsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId   int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	CharsetJSON []byte `protobuf:"bytes,2,opt,name=charsetJSON,proto3" json:"charsetJSON,omitempty"`
}

func (x *UpdateHTTPWebCharsetRequest) Reset() {
	*x = UpdateHTTPWebCharsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCharsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCharsetRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCharsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCharsetRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCharsetRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateHTTPWebCharsetRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebCharsetRequest) GetCharsetJSON() []byte {
	if x != nil {
		return x.CharsetJSON
	}
	return nil
}

// 更改请求Header策略
type UpdateHTTPWebRequestHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId  int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	HeaderJSON []byte `protobuf:"bytes,2,opt,name=headerJSON,proto3" json:"headerJSON,omitempty"`
}

func (x *UpdateHTTPWebRequestHeaderRequest) Reset() {
	*x = UpdateHTTPWebRequestHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequestHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequestHeaderRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequestHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequestHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequestHeaderRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateHTTPWebRequestHeaderRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRequestHeaderRequest) GetHeaderJSON() []byte {
	if x != nil {
		return x.HeaderJSON
	}
	return nil
}

// 更改响应Header策略
type UpdateHTTPWebResponseHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId  int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	HeaderJSON []byte `protobuf:"bytes,2,opt,name=headerJSON,proto3" json:"headerJSON,omitempty"`
}

func (x *UpdateHTTPWebResponseHeaderRequest) Reset() {
	*x = UpdateHTTPWebResponseHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebResponseHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebResponseHeaderRequest) ProtoMessage() {}

func (x *UpdateHTTPWebResponseHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebResponseHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebResponseHeaderRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateHTTPWebResponseHeaderRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebResponseHeaderRequest) GetHeaderJSON() []byte {
	if x != nil {
		return x.HeaderJSON
	}
	return nil
}

// 更改Shutdown
type UpdateHTTPWebShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId    int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	ShutdownJSON []byte `protobuf:"bytes,2,opt,name=shutdownJSON,proto3" json:"shutdownJSON,omitempty"`
}

func (x *UpdateHTTPWebShutdownRequest) Reset() {
	*x = UpdateHTTPWebShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebShutdownRequest) ProtoMessage() {}

func (x *UpdateHTTPWebShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebShutdownRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebShutdownRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateHTTPWebShutdownRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebShutdownRequest) GetShutdownJSON() []byte {
	if x != nil {
		return x.ShutdownJSON
	}
	return nil
}

// 更改Pages
type UpdateHTTPWebPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	PagesJSON []byte `protobuf:"bytes,2,opt,name=pagesJSON,proto3" json:"pagesJSON,omitempty"`
}

func (x *UpdateHTTPWebPagesRequest) Reset() {
	*x = UpdateHTTPWebPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebPagesRequest) ProtoMessage() {}

func (x *UpdateHTTPWebPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebPagesRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebPagesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateHTTPWebPagesRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebPagesRequest) GetPagesJSON() []byte {
	if x != nil {
		return x.PagesJSON
	}
	return nil
}

// 更改访问日志配置
type UpdateHTTPWebAccessLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId     int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	AccessLogJSON []byte `protobuf:"bytes,2,opt,name=accessLogJSON,proto3" json:"accessLogJSON,omitempty"` // @link json:http_access_log_ref
}

func (x *UpdateHTTPWebAccessLogRequest) Reset() {
	*x = UpdateHTTPWebAccessLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebAccessLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebAccessLogRequest) ProtoMessage() {}

func (x *UpdateHTTPWebAccessLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebAccessLogRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebAccessLogRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateHTTPWebAccessLogRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebAccessLogRequest) GetAccessLogJSON() []byte {
	if x != nil {
		return x.AccessLogJSON
	}
	return nil
}

// 更改统计配置
type UpdateHTTPWebStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	StatJSON  []byte `protobuf:"bytes,2,opt,name=statJSON,proto3" json:"statJSON,omitempty"` // @link json:http_stat_stat_ref
}

func (x *UpdateHTTPWebStatRequest) Reset() {
	*x = UpdateHTTPWebStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebStatRequest) ProtoMessage() {}

func (x *UpdateHTTPWebStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebStatRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebStatRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateHTTPWebStatRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebStatRequest) GetStatJSON() []byte {
	if x != nil {
		return x.StatJSON
	}
	return nil
}

// 更改缓存配置
type UpdateHTTPWebCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	CacheJSON []byte `protobuf:"bytes,2,opt,name=cacheJSON,proto3" json:"cacheJSON,omitempty"` // @link json:http_cache_config
}

func (x *UpdateHTTPWebCacheRequest) Reset() {
	*x = UpdateHTTPWebCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCacheRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCacheRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCacheRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateHTTPWebCacheRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebCacheRequest) GetCacheJSON() []byte {
	if x != nil {
		return x.CacheJSON
	}
	return nil
}

// 更改防火墙设置
type UpdateHTTPWebFirewallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId    int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	FirewallJSON []byte `protobuf:"bytes,2,opt,name=firewallJSON,proto3" json:"firewallJSON,omitempty"` // @link json:http_firewall_ref
}

func (x *UpdateHTTPWebFirewallRequest) Reset() {
	*x = UpdateHTTPWebFirewallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebFirewallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebFirewallRequest) ProtoMessage() {}

func (x *UpdateHTTPWebFirewallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebFirewallRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebFirewallRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateHTTPWebFirewallRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebFirewallRequest) GetFirewallJSON() []byte {
	if x != nil {
		return x.FirewallJSON
	}
	return nil
}

// 更改路径规则配置
type UpdateHTTPWebLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId     int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	LocationsJSON []byte `protobuf:"bytes,3,opt,name=locationsJSON,proto3" json:"locationsJSON,omitempty"`
}

func (x *UpdateHTTPWebLocationsRequest) Reset() {
	*x = UpdateHTTPWebLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebLocationsRequest) ProtoMessage() {}

func (x *UpdateHTTPWebLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebLocationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebLocationsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateHTTPWebLocationsRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebLocationsRequest) GetLocationsJSON() []byte {
	if x != nil {
		return x.LocationsJSON
	}
	return nil
}

// 更改跳转到HTTPS设置
type UpdateHTTPWebRedirectToHTTPSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId           int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RedirectToHTTPSJSON []byte `protobuf:"bytes,2,opt,name=redirectToHTTPSJSON,proto3" json:"redirectToHTTPSJSON,omitempty"`
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) Reset() {
	*x = UpdateHTTPWebRedirectToHTTPSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRedirectToHTTPSRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRedirectToHTTPSRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRedirectToHTTPSRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) GetRedirectToHTTPSJSON() []byte {
	if x != nil {
		return x.RedirectToHTTPSJSON
	}
	return nil
}

// 更改Websocket设置
type UpdateHTTPWebWebsocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId     int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	WebsocketJSON []byte `protobuf:"bytes,2,opt,name=websocketJSON,proto3" json:"websocketJSON,omitempty"` // @link json:http_websocket_ref
}

func (x *UpdateHTTPWebWebsocketRequest) Reset() {
	*x = UpdateHTTPWebWebsocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebWebsocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebWebsocketRequest) ProtoMessage() {}

func (x *UpdateHTTPWebWebsocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebWebsocketRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebWebsocketRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateHTTPWebWebsocketRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebWebsocketRequest) GetWebsocketJSON() []byte {
	if x != nil {
		return x.WebsocketJSON
	}
	return nil
}

// 更改Fastcgi设置
type UpdateHTTPWebFastcgiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId   int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	FastcgiJSON []byte `protobuf:"bytes,2,opt,name=fastcgiJSON,proto3" json:"fastcgiJSON,omitempty"`
}

func (x *UpdateHTTPWebFastcgiRequest) Reset() {
	*x = UpdateHTTPWebFastcgiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebFastcgiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebFastcgiRequest) ProtoMessage() {}

func (x *UpdateHTTPWebFastcgiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebFastcgiRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebFastcgiRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateHTTPWebFastcgiRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebFastcgiRequest) GetFastcgiJSON() []byte {
	if x != nil {
		return x.FastcgiJSON
	}
	return nil
}

// 更改重写规则设置
type UpdateHTTPWebRewriteRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId        int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RewriteRulesJSON []byte `protobuf:"bytes,2,opt,name=rewriteRulesJSON,proto3" json:"rewriteRulesJSON,omitempty"`
}

func (x *UpdateHTTPWebRewriteRulesRequest) Reset() {
	*x = UpdateHTTPWebRewriteRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRewriteRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRewriteRulesRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRewriteRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRewriteRulesRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRewriteRulesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateHTTPWebRewriteRulesRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRewriteRulesRequest) GetRewriteRulesJSON() []byte {
	if x != nil {
		return x.RewriteRulesJSON
	}
	return nil
}

// 更改主机跳转设置
type UpdateHTTPWebHostRedirectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId         int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	HostRedirectsJSON []byte `protobuf:"bytes,2,opt,name=hostRedirectsJSON,proto3" json:"hostRedirectsJSON,omitempty"`
}

func (x *UpdateHTTPWebHostRedirectsRequest) Reset() {
	*x = UpdateHTTPWebHostRedirectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebHostRedirectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebHostRedirectsRequest) ProtoMessage() {}

func (x *UpdateHTTPWebHostRedirectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebHostRedirectsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebHostRedirectsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateHTTPWebHostRedirectsRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebHostRedirectsRequest) GetHostRedirectsJSON() []byte {
	if x != nil {
		return x.HostRedirectsJSON
	}
	return nil
}

// 查找主机跳转设置
type FindHTTPWebHostRedirectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebHostRedirectsRequest) Reset() {
	*x = FindHTTPWebHostRedirectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebHostRedirectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebHostRedirectsRequest) ProtoMessage() {}

func (x *FindHTTPWebHostRedirectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebHostRedirectsRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebHostRedirectsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{25}
}

func (x *FindHTTPWebHostRedirectsRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebHostRedirectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostRedirectsJSON []byte `protobuf:"bytes,1,opt,name=hostRedirectsJSON,proto3" json:"hostRedirectsJSON,omitempty"`
}

func (x *FindHTTPWebHostRedirectsResponse) Reset() {
	*x = FindHTTPWebHostRedirectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebHostRedirectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebHostRedirectsResponse) ProtoMessage() {}

func (x *FindHTTPWebHostRedirectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebHostRedirectsResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebHostRedirectsResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{26}
}

func (x *FindHTTPWebHostRedirectsResponse) GetHostRedirectsJSON() []byte {
	if x != nil {
		return x.HostRedirectsJSON
	}
	return nil
}

// 更改认证设置
type UpdateHTTPWebAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	AuthJSON  []byte `protobuf:"bytes,2,opt,name=authJSON,proto3" json:"authJSON,omitempty"`
}

func (x *UpdateHTTPWebAuthRequest) Reset() {
	*x = UpdateHTTPWebAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebAuthRequest) ProtoMessage() {}

func (x *UpdateHTTPWebAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebAuthRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebAuthRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateHTTPWebAuthRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebAuthRequest) GetAuthJSON() []byte {
	if x != nil {
		return x.AuthJSON
	}
	return nil
}

// 更改通用设置
type UpdateHTTPWebCommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId    int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	MergeSlashes bool  `protobuf:"varint,2,opt,name=mergeSlashes,proto3" json:"mergeSlashes,omitempty"`
}

func (x *UpdateHTTPWebCommonRequest) Reset() {
	*x = UpdateHTTPWebCommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCommonRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCommonRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCommonRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateHTTPWebCommonRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebCommonRequest) GetMergeSlashes() bool {
	if x != nil {
		return x.MergeSlashes
	}
	return false
}

// 修改请求限制
type UpdateHTTPWebRequestLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId        int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RequestLimitJSON []byte `protobuf:"bytes,2,opt,name=requestLimitJSON,proto3" json:"requestLimitJSON,omitempty"`
}

func (x *UpdateHTTPWebRequestLimitRequest) Reset() {
	*x = UpdateHTTPWebRequestLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequestLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequestLimitRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequestLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequestLimitRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequestLimitRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateHTTPWebRequestLimitRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRequestLimitRequest) GetRequestLimitJSON() []byte {
	if x != nil {
		return x.RequestLimitJSON
	}
	return nil
}

// 查找请求限制
type FindHTTPWebRequestLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebRequestLimitRequest) Reset() {
	*x = FindHTTPWebRequestLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebRequestLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebRequestLimitRequest) ProtoMessage() {}

func (x *FindHTTPWebRequestLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebRequestLimitRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebRequestLimitRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{30}
}

func (x *FindHTTPWebRequestLimitRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebRequestLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestLimitJSON []byte `protobuf:"bytes,1,opt,name=requestLimitJSON,proto3" json:"requestLimitJSON,omitempty"`
}

func (x *FindHTTPWebRequestLimitResponse) Reset() {
	*x = FindHTTPWebRequestLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebRequestLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebRequestLimitResponse) ProtoMessage() {}

func (x *FindHTTPWebRequestLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebRequestLimitResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebRequestLimitResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{31}
}

func (x *FindHTTPWebRequestLimitResponse) GetRequestLimitJSON() []byte {
	if x != nil {
		return x.RequestLimitJSON
	}
	return nil
}

// 修改请求脚本
type UpdateHTTPWebRequestScriptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId          int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RequestScriptsJSON []byte `protobuf:"bytes,2,opt,name=requestScriptsJSON,proto3" json:"requestScriptsJSON,omitempty"`
}

func (x *UpdateHTTPWebRequestScriptsRequest) Reset() {
	*x = UpdateHTTPWebRequestScriptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequestScriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequestScriptsRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequestScriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequestScriptsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequestScriptsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateHTTPWebRequestScriptsRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRequestScriptsRequest) GetRequestScriptsJSON() []byte {
	if x != nil {
		return x.RequestScriptsJSON
	}
	return nil
}

// 查找请求脚本
type FindHTTPWebRequestScriptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebRequestScriptsRequest) Reset() {
	*x = FindHTTPWebRequestScriptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebRequestScriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebRequestScriptsRequest) ProtoMessage() {}

func (x *FindHTTPWebRequestScriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebRequestScriptsRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebRequestScriptsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{33}
}

func (x *FindHTTPWebRequestScriptsRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebRequestScriptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestScriptsJSON []byte `protobuf:"bytes,1,opt,name=requestScriptsJSON,proto3" json:"requestScriptsJSON,omitempty"`
}

func (x *FindHTTPWebRequestScriptsResponse) Reset() {
	*x = FindHTTPWebRequestScriptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebRequestScriptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebRequestScriptsResponse) ProtoMessage() {}

func (x *FindHTTPWebRequestScriptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebRequestScriptsResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebRequestScriptsResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{34}
}

func (x *FindHTTPWebRequestScriptsResponse) GetRequestScriptsJSON() []byte {
	if x != nil {
		return x.RequestScriptsJSON
	}
	return nil
}

// 修改服务UAM设置
type UpdateHTTPWebUAMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	UamJSON   []byte `protobuf:"bytes,2,opt,name=uamJSON,proto3" json:"uamJSON,omitempty"`
}

func (x *UpdateHTTPWebUAMRequest) Reset() {
	*x = UpdateHTTPWebUAMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebUAMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebUAMRequest) ProtoMessage() {}

func (x *UpdateHTTPWebUAMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebUAMRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebUAMRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateHTTPWebUAMRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebUAMRequest) GetUamJSON() []byte {
	if x != nil {
		return x.UamJSON
	}
	return nil
}

// 查找服务UAM设置
type FindHTTPWebUAMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebUAMRequest) Reset() {
	*x = FindHTTPWebUAMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebUAMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebUAMRequest) ProtoMessage() {}

func (x *FindHTTPWebUAMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebUAMRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebUAMRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{36}
}

func (x *FindHTTPWebUAMRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebUAMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UamJSON []byte `protobuf:"bytes,1,opt,name=uamJSON,proto3" json:"uamJSON,omitempty"`
}

func (x *FindHTTPWebUAMResponse) Reset() {
	*x = FindHTTPWebUAMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebUAMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebUAMResponse) ProtoMessage() {}

func (x *FindHTTPWebUAMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebUAMResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebUAMResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{37}
}

func (x *FindHTTPWebUAMResponse) GetUamJSON() []byte {
	if x != nil {
		return x.UamJSON
	}
	return nil
}

// 修改服务CC设置
type UpdateHTTPWebCCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	CcJSON    []byte `protobuf:"bytes,2,opt,name=ccJSON,proto3" json:"ccJSON,omitempty"`
}

func (x *UpdateHTTPWebCCRequest) Reset() {
	*x = UpdateHTTPWebCCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCCRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCCRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCCRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateHTTPWebCCRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebCCRequest) GetCcJSON() []byte {
	if x != nil {
		return x.CcJSON
	}
	return nil
}

// 查找服务UAM设置
type FindHTTPWebCCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebCCRequest) Reset() {
	*x = FindHTTPWebCCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebCCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebCCRequest) ProtoMessage() {}

func (x *FindHTTPWebCCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebCCRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebCCRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{39}
}

func (x *FindHTTPWebCCRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebCCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CcJSON []byte `protobuf:"bytes,1,opt,name=ccJSON,proto3" json:"ccJSON,omitempty"`
}

func (x *FindHTTPWebCCResponse) Reset() {
	*x = FindHTTPWebCCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebCCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebCCResponse) ProtoMessage() {}

func (x *FindHTTPWebCCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebCCResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebCCResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{40}
}

func (x *FindHTTPWebCCResponse) GetCcJSON() []byte {
	if x != nil {
		return x.CcJSON
	}
	return nil
}

// 修改防盗链设置
type UpdateHTTPWebReferersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId    int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	ReferersJSON []byte `protobuf:"bytes,2,opt,name=referersJSON,proto3" json:"referersJSON,omitempty"`
}

func (x *UpdateHTTPWebReferersRequest) Reset() {
	*x = UpdateHTTPWebReferersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebReferersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebReferersRequest) ProtoMessage() {}

func (x *UpdateHTTPWebReferersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebReferersRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebReferersRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateHTTPWebReferersRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebReferersRequest) GetReferersJSON() []byte {
	if x != nil {
		return x.ReferersJSON
	}
	return nil
}

// 查找防盗链设置
type FindHTTPWebReferersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebReferersRequest) Reset() {
	*x = FindHTTPWebReferersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebReferersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebReferersRequest) ProtoMessage() {}

func (x *FindHTTPWebReferersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebReferersRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebReferersRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{42}
}

func (x *FindHTTPWebReferersRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebReferersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferersJSON []byte `protobuf:"bytes,1,opt,name=referersJSON,proto3" json:"referersJSON,omitempty"`
}

func (x *FindHTTPWebReferersResponse) Reset() {
	*x = FindHTTPWebReferersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebReferersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebReferersResponse) ProtoMessage() {}

func (x *FindHTTPWebReferersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebReferersResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebReferersResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{43}
}

func (x *FindHTTPWebReferersResponse) GetReferersJSON() []byte {
	if x != nil {
		return x.ReferersJSON
	}
	return nil
}

// 修改防盗链设置
type UpdateHTTPWebUserAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId     int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	UserAgentJSON []byte `protobuf:"bytes,2,opt,name=userAgentJSON,proto3" json:"userAgentJSON,omitempty"`
}

func (x *UpdateHTTPWebUserAgentRequest) Reset() {
	*x = UpdateHTTPWebUserAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebUserAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebUserAgentRequest) ProtoMessage() {}

func (x *UpdateHTTPWebUserAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebUserAgentRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebUserAgentRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateHTTPWebUserAgentRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebUserAgentRequest) GetUserAgentJSON() []byte {
	if x != nil {
		return x.UserAgentJSON
	}
	return nil
}

// 查找UserAgent设置
type FindHTTPWebUserAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebUserAgentRequest) Reset() {
	*x = FindHTTPWebUserAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebUserAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebUserAgentRequest) ProtoMessage() {}

func (x *FindHTTPWebUserAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebUserAgentRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebUserAgentRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{45}
}

func (x *FindHTTPWebUserAgentRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebUserAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAgentJSON []byte `protobuf:"bytes,1,opt,name=userAgentJSON,proto3" json:"userAgentJSON,omitempty"`
}

func (x *FindHTTPWebUserAgentResponse) Reset() {
	*x = FindHTTPWebUserAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebUserAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebUserAgentResponse) ProtoMessage() {}

func (x *FindHTTPWebUserAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebUserAgentResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebUserAgentResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{46}
}

func (x *FindHTTPWebUserAgentResponse) GetUserAgentJSON() []byte {
	if x != nil {
		return x.UserAgentJSON
	}
	return nil
}

var File_service_http_web_proto protoreflect.FileDescriptor

var file_service_http_web_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x77,
	0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x77, 0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22,
	0x39, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x1a, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x68, 0x74, 0x74, 0x70,
	0x57, 0x65, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x22,
	0x3f, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x22, 0x44, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x57,
	0x65, 0x62, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x50, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x69, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a,
	0x53, 0x4f, 0x4e, 0x22, 0x54, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x57, 0x65, 0x62, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x65, 0x62, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x77, 0x65, 0x62, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x66, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x5d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e,
	0x22, 0x61, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65,
	0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4a,
	0x53, 0x4f, 0x4e, 0x22, 0x62, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74,
	0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x60, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57,
	0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x57, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65,
	0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57,
	0x65, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4a, 0x53,
	0x4f, 0x4e, 0x22, 0x63, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x54, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x57, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x60, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65,
	0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57,
	0x65, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x63, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74,
	0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x75, 0x0a,
	0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f,
	0x48, 0x54, 0x54, 0x50, 0x53, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x53,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x63, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65,
	0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x5d, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x61, 0x73, 0x74, 0x63, 0x67,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74,
	0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x63, 0x67,
	0x69, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x61, 0x73,
	0x74, 0x63, 0x67, 0x69, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x6c, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x6f, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x3f, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x54, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65,
	0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57,
	0x65, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4a, 0x53, 0x4f, 0x4e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4a, 0x53, 0x4f, 0x4e,
	0x22, 0x5e, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x22, 0x6c, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x3e,
	0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x4d,
	0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x72, 0x0a,
	0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x40, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65,
	0x62, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x51, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x75, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x35, 0x0a, 0x15, 0x46,
	0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62,
	0x49, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x75,
	0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x63, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x63, 0x63, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x34, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15,
	0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x63, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x63, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x60, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22,
	0x3a, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x46,
	0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x63,
	0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4a,
	0x53, 0x4f, 0x4e, 0x22, 0x3b, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x22, 0x44, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x32, 0xfc, 0x16, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x12, 0x18, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x57, 0x65, 0x62, 0x50, 0x12, 0x1c, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x57,
	0x65, 0x62, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x17, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65,
	0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x53, 0x0a, 0x1a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x1b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x49,
	0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b,
	0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x43,
	0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b,
	0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x1c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x27, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x47, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x46, 0x61, 0x73, 0x74, 0x63, 0x67, 0x69, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x61, 0x73, 0x74,
	0x63, 0x67, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a,
	0x1a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1c,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x13,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x1b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x68, 0x0a, 0x19, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x24,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x41, 0x4d, 0x12,
	0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0e,
	0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x41, 0x4d, 0x12, 0x19,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55,
	0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x43, 0x43, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x43, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x69,
	0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_http_web_proto_rawDescOnce sync.Once
	file_service_http_web_proto_rawDescData = file_service_http_web_proto_rawDesc
)

func file_service_http_web_proto_rawDescGZIP() []byte {
	file_service_http_web_proto_rawDescOnce.Do(func() {
		file_service_http_web_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_http_web_proto_rawDescData)
	})
	return file_service_http_web_proto_rawDescData
}

var file_service_http_web_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_service_http_web_proto_goTypes = []interface{}{
	(*CreateHTTPWebRequest)(nil),                // 0: pb.CreateHTTPWebRequest
	(*CreateHTTPWebResponse)(nil),               // 1: pb.CreateHTTPWebResponse
	(*FindEnabledHTTPWebRequest)(nil),           // 2: pb.FindEnabledHTTPWebRequest
	(*FindEnabledHTTPWebResponse)(nil),          // 3: pb.FindEnabledHTTPWebResponse
	(*FindEnabledHTTPWebConfigRequest)(nil),     // 4: pb.FindEnabledHTTPWebConfigRequest
	(*FindEnabledHTTPWebConfigResponse)(nil),    // 5: pb.FindEnabledHTTPWebConfigResponse
	(*UpdateHTTPWebRequest)(nil),                // 6: pb.UpdateHTTPWebRequest
	(*UpdateHTTPWebCompressionRequest)(nil),     // 7: pb.UpdateHTTPWebCompressionRequest
	(*UpdateHTTPWebWebPRequest)(nil),            // 8: pb.UpdateHTTPWebWebPRequest
	(*UpdateHTTPWebRemoteAddrRequest)(nil),      // 9: pb.UpdateHTTPWebRemoteAddrRequest
	(*UpdateHTTPWebCharsetRequest)(nil),         // 10: pb.UpdateHTTPWebCharsetRequest
	(*UpdateHTTPWebRequestHeaderRequest)(nil),   // 11: pb.UpdateHTTPWebRequestHeaderRequest
	(*UpdateHTTPWebResponseHeaderRequest)(nil),  // 12: pb.UpdateHTTPWebResponseHeaderRequest
	(*UpdateHTTPWebShutdownRequest)(nil),        // 13: pb.UpdateHTTPWebShutdownRequest
	(*UpdateHTTPWebPagesRequest)(nil),           // 14: pb.UpdateHTTPWebPagesRequest
	(*UpdateHTTPWebAccessLogRequest)(nil),       // 15: pb.UpdateHTTPWebAccessLogRequest
	(*UpdateHTTPWebStatRequest)(nil),            // 16: pb.UpdateHTTPWebStatRequest
	(*UpdateHTTPWebCacheRequest)(nil),           // 17: pb.UpdateHTTPWebCacheRequest
	(*UpdateHTTPWebFirewallRequest)(nil),        // 18: pb.UpdateHTTPWebFirewallRequest
	(*UpdateHTTPWebLocationsRequest)(nil),       // 19: pb.UpdateHTTPWebLocationsRequest
	(*UpdateHTTPWebRedirectToHTTPSRequest)(nil), // 20: pb.UpdateHTTPWebRedirectToHTTPSRequest
	(*UpdateHTTPWebWebsocketRequest)(nil),       // 21: pb.UpdateHTTPWebWebsocketRequest
	(*UpdateHTTPWebFastcgiRequest)(nil),         // 22: pb.UpdateHTTPWebFastcgiRequest
	(*UpdateHTTPWebRewriteRulesRequest)(nil),    // 23: pb.UpdateHTTPWebRewriteRulesRequest
	(*UpdateHTTPWebHostRedirectsRequest)(nil),   // 24: pb.UpdateHTTPWebHostRedirectsRequest
	(*FindHTTPWebHostRedirectsRequest)(nil),     // 25: pb.FindHTTPWebHostRedirectsRequest
	(*FindHTTPWebHostRedirectsResponse)(nil),    // 26: pb.FindHTTPWebHostRedirectsResponse
	(*UpdateHTTPWebAuthRequest)(nil),            // 27: pb.UpdateHTTPWebAuthRequest
	(*UpdateHTTPWebCommonRequest)(nil),          // 28: pb.UpdateHTTPWebCommonRequest
	(*UpdateHTTPWebRequestLimitRequest)(nil),    // 29: pb.UpdateHTTPWebRequestLimitRequest
	(*FindHTTPWebRequestLimitRequest)(nil),      // 30: pb.FindHTTPWebRequestLimitRequest
	(*FindHTTPWebRequestLimitResponse)(nil),     // 31: pb.FindHTTPWebRequestLimitResponse
	(*UpdateHTTPWebRequestScriptsRequest)(nil),  // 32: pb.UpdateHTTPWebRequestScriptsRequest
	(*FindHTTPWebRequestScriptsRequest)(nil),    // 33: pb.FindHTTPWebRequestScriptsRequest
	(*FindHTTPWebRequestScriptsResponse)(nil),   // 34: pb.FindHTTPWebRequestScriptsResponse
	(*UpdateHTTPWebUAMRequest)(nil),             // 35: pb.UpdateHTTPWebUAMRequest
	(*FindHTTPWebUAMRequest)(nil),               // 36: pb.FindHTTPWebUAMRequest
	(*FindHTTPWebUAMResponse)(nil),              // 37: pb.FindHTTPWebUAMResponse
	(*UpdateHTTPWebCCRequest)(nil),              // 38: pb.UpdateHTTPWebCCRequest
	(*FindHTTPWebCCRequest)(nil),                // 39: pb.FindHTTPWebCCRequest
	(*FindHTTPWebCCResponse)(nil),               // 40: pb.FindHTTPWebCCResponse
	(*UpdateHTTPWebReferersRequest)(nil),        // 41: pb.UpdateHTTPWebReferersRequest
	(*FindHTTPWebReferersRequest)(nil),          // 42: pb.FindHTTPWebReferersRequest
	(*FindHTTPWebReferersResponse)(nil),         // 43: pb.FindHTTPWebReferersResponse
	(*UpdateHTTPWebUserAgentRequest)(nil),       // 44: pb.UpdateHTTPWebUserAgentRequest
	(*FindHTTPWebUserAgentRequest)(nil),         // 45: pb.FindHTTPWebUserAgentRequest
	(*FindHTTPWebUserAgentResponse)(nil),        // 46: pb.FindHTTPWebUserAgentResponse
	(*HTTPWeb)(nil),                             // 47: pb.HTTPWeb
	(*RPCSuccess)(nil),                          // 48: pb.RPCSuccess
}
var file_service_http_web_proto_depIdxs = []int32{
	47, // 0: pb.FindEnabledHTTPWebResponse.httpWeb:type_name -> pb.HTTPWeb
	0,  // 1: pb.HTTPWebService.createHTTPWeb:input_type -> pb.CreateHTTPWebRequest
	2,  // 2: pb.HTTPWebService.findEnabledHTTPWeb:input_type -> pb.FindEnabledHTTPWebRequest
	4,  // 3: pb.HTTPWebService.findEnabledHTTPWebConfig:input_type -> pb.FindEnabledHTTPWebConfigRequest
	6,  // 4: pb.HTTPWebService.updateHTTPWeb:input_type -> pb.UpdateHTTPWebRequest
	7,  // 5: pb.HTTPWebService.updateHTTPWebCompression:input_type -> pb.UpdateHTTPWebCompressionRequest
	8,  // 6: pb.HTTPWebService.updateHTTPWebWebP:input_type -> pb.UpdateHTTPWebWebPRequest
	9,  // 7: pb.HTTPWebService.updateHTTPWebRemoteAddr:input_type -> pb.UpdateHTTPWebRemoteAddrRequest
	10, // 8: pb.HTTPWebService.updateHTTPWebCharset:input_type -> pb.UpdateHTTPWebCharsetRequest
	11, // 9: pb.HTTPWebService.updateHTTPWebRequestHeader:input_type -> pb.UpdateHTTPWebRequestHeaderRequest
	12, // 10: pb.HTTPWebService.updateHTTPWebResponseHeader:input_type -> pb.UpdateHTTPWebResponseHeaderRequest
	13, // 11: pb.HTTPWebService.updateHTTPWebShutdown:input_type -> pb.UpdateHTTPWebShutdownRequest
	14, // 12: pb.HTTPWebService.updateHTTPWebPages:input_type -> pb.UpdateHTTPWebPagesRequest
	15, // 13: pb.HTTPWebService.updateHTTPWebAccessLog:input_type -> pb.UpdateHTTPWebAccessLogRequest
	16, // 14: pb.HTTPWebService.updateHTTPWebStat:input_type -> pb.UpdateHTTPWebStatRequest
	17, // 15: pb.HTTPWebService.updateHTTPWebCache:input_type -> pb.UpdateHTTPWebCacheRequest
	18, // 16: pb.HTTPWebService.updateHTTPWebFirewall:input_type -> pb.UpdateHTTPWebFirewallRequest
	19, // 17: pb.HTTPWebService.updateHTTPWebLocations:input_type -> pb.UpdateHTTPWebLocationsRequest
	20, // 18: pb.HTTPWebService.updateHTTPWebRedirectToHTTPS:input_type -> pb.UpdateHTTPWebRedirectToHTTPSRequest
	21, // 19: pb.HTTPWebService.updateHTTPWebWebsocket:input_type -> pb.UpdateHTTPWebWebsocketRequest
	22, // 20: pb.HTTPWebService.updateHTTPWebFastcgi:input_type -> pb.UpdateHTTPWebFastcgiRequest
	23, // 21: pb.HTTPWebService.updateHTTPWebRewriteRules:input_type -> pb.UpdateHTTPWebRewriteRulesRequest
	24, // 22: pb.HTTPWebService.updateHTTPWebHostRedirects:input_type -> pb.UpdateHTTPWebHostRedirectsRequest
	25, // 23: pb.HTTPWebService.findHTTPWebHostRedirects:input_type -> pb.FindHTTPWebHostRedirectsRequest
	27, // 24: pb.HTTPWebService.updateHTTPWebAuth:input_type -> pb.UpdateHTTPWebAuthRequest
	28, // 25: pb.HTTPWebService.updateHTTPWebCommon:input_type -> pb.UpdateHTTPWebCommonRequest
	29, // 26: pb.HTTPWebService.updateHTTPWebRequestLimit:input_type -> pb.UpdateHTTPWebRequestLimitRequest
	30, // 27: pb.HTTPWebService.findHTTPWebRequestLimit:input_type -> pb.FindHTTPWebRequestLimitRequest
	32, // 28: pb.HTTPWebService.updateHTTPWebRequestScripts:input_type -> pb.UpdateHTTPWebRequestScriptsRequest
	33, // 29: pb.HTTPWebService.findHTTPWebRequestScripts:input_type -> pb.FindHTTPWebRequestScriptsRequest
	35, // 30: pb.HTTPWebService.updateHTTPWebUAM:input_type -> pb.UpdateHTTPWebUAMRequest
	36, // 31: pb.HTTPWebService.findHTTPWebUAM:input_type -> pb.FindHTTPWebUAMRequest
	38, // 32: pb.HTTPWebService.updateHTTPWebCC:input_type -> pb.UpdateHTTPWebCCRequest
	39, // 33: pb.HTTPWebService.findHTTPWebCC:input_type -> pb.FindHTTPWebCCRequest
	41, // 34: pb.HTTPWebService.updateHTTPWebReferers:input_type -> pb.UpdateHTTPWebReferersRequest
	42, // 35: pb.HTTPWebService.findHTTPWebReferers:input_type -> pb.FindHTTPWebReferersRequest
	44, // 36: pb.HTTPWebService.updateHTTPWebUserAgent:input_type -> pb.UpdateHTTPWebUserAgentRequest
	45, // 37: pb.HTTPWebService.findHTTPWebUserAgent:input_type -> pb.FindHTTPWebUserAgentRequest
	1,  // 38: pb.HTTPWebService.createHTTPWeb:output_type -> pb.CreateHTTPWebResponse
	3,  // 39: pb.HTTPWebService.findEnabledHTTPWeb:output_type -> pb.FindEnabledHTTPWebResponse
	5,  // 40: pb.HTTPWebService.findEnabledHTTPWebConfig:output_type -> pb.FindEnabledHTTPWebConfigResponse
	48, // 41: pb.HTTPWebService.updateHTTPWeb:output_type -> pb.RPCSuccess
	48, // 42: pb.HTTPWebService.updateHTTPWebCompression:output_type -> pb.RPCSuccess
	48, // 43: pb.HTTPWebService.updateHTTPWebWebP:output_type -> pb.RPCSuccess
	48, // 44: pb.HTTPWebService.updateHTTPWebRemoteAddr:output_type -> pb.RPCSuccess
	48, // 45: pb.HTTPWebService.updateHTTPWebCharset:output_type -> pb.RPCSuccess
	48, // 46: pb.HTTPWebService.updateHTTPWebRequestHeader:output_type -> pb.RPCSuccess
	48, // 47: pb.HTTPWebService.updateHTTPWebResponseHeader:output_type -> pb.RPCSuccess
	48, // 48: pb.HTTPWebService.updateHTTPWebShutdown:output_type -> pb.RPCSuccess
	48, // 49: pb.HTTPWebService.updateHTTPWebPages:output_type -> pb.RPCSuccess
	48, // 50: pb.HTTPWebService.updateHTTPWebAccessLog:output_type -> pb.RPCSuccess
	48, // 51: pb.HTTPWebService.updateHTTPWebStat:output_type -> pb.RPCSuccess
	48, // 52: pb.HTTPWebService.updateHTTPWebCache:output_type -> pb.RPCSuccess
	48, // 53: pb.HTTPWebService.updateHTTPWebFirewall:output_type -> pb.RPCSuccess
	48, // 54: pb.HTTPWebService.updateHTTPWebLocations:output_type -> pb.RPCSuccess
	48, // 55: pb.HTTPWebService.updateHTTPWebRedirectToHTTPS:output_type -> pb.RPCSuccess
	48, // 56: pb.HTTPWebService.updateHTTPWebWebsocket:output_type -> pb.RPCSuccess
	48, // 57: pb.HTTPWebService.updateHTTPWebFastcgi:output_type -> pb.RPCSuccess
	48, // 58: pb.HTTPWebService.updateHTTPWebRewriteRules:output_type -> pb.RPCSuccess
	48, // 59: pb.HTTPWebService.updateHTTPWebHostRedirects:output_type -> pb.RPCSuccess
	26, // 60: pb.HTTPWebService.findHTTPWebHostRedirects:output_type -> pb.FindHTTPWebHostRedirectsResponse
	48, // 61: pb.HTTPWebService.updateHTTPWebAuth:output_type -> pb.RPCSuccess
	48, // 62: pb.HTTPWebService.updateHTTPWebCommon:output_type -> pb.RPCSuccess
	48, // 63: pb.HTTPWebService.updateHTTPWebRequestLimit:output_type -> pb.RPCSuccess
	31, // 64: pb.HTTPWebService.findHTTPWebRequestLimit:output_type -> pb.FindHTTPWebRequestLimitResponse
	48, // 65: pb.HTTPWebService.updateHTTPWebRequestScripts:output_type -> pb.RPCSuccess
	34, // 66: pb.HTTPWebService.findHTTPWebRequestScripts:output_type -> pb.FindHTTPWebRequestScriptsResponse
	48, // 67: pb.HTTPWebService.updateHTTPWebUAM:output_type -> pb.RPCSuccess
	37, // 68: pb.HTTPWebService.findHTTPWebUAM:output_type -> pb.FindHTTPWebUAMResponse
	48, // 69: pb.HTTPWebService.updateHTTPWebCC:output_type -> pb.RPCSuccess
	40, // 70: pb.HTTPWebService.findHTTPWebCC:output_type -> pb.FindHTTPWebCCResponse
	48, // 71: pb.HTTPWebService.updateHTTPWebReferers:output_type -> pb.RPCSuccess
	43, // 72: pb.HTTPWebService.findHTTPWebReferers:output_type -> pb.FindHTTPWebReferersResponse
	48, // 73: pb.HTTPWebService.updateHTTPWebUserAgent:output_type -> pb.RPCSuccess
	46, // 74: pb.HTTPWebService.findHTTPWebUserAgent:output_type -> pb.FindHTTPWebUserAgentResponse
	38, // [38:75] is the sub-list for method output_type
	1,  // [1:38] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_service_http_web_proto_init() }
func file_service_http_web_proto_init() {
	if File_service_http_web_proto != nil {
		return
	}
	file_models_model_http_web_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_http_web_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPWebResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCompressionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebWebPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRemoteAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCharsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequestHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebResponseHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebAccessLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebFirewallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRedirectToHTTPSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebWebsocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebFastcgiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRewriteRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebHostRedirectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebHostRedirectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebHostRedirectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequestLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebRequestLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebRequestLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequestScriptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebRequestScriptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebRequestScriptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebUAMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebUAMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebUAMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebCCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebCCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebReferersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebReferersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebReferersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebUserAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebUserAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebUserAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_http_web_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_http_web_proto_goTypes,
		DependencyIndexes: file_service_http_web_proto_depIdxs,
		MessageInfos:      file_service_http_web_proto_msgTypes,
	}.Build()
	File_service_http_web_proto = out.File
	file_service_http_web_proto_rawDesc = nil
	file_service_http_web_proto_goTypes = nil
	file_service_http_web_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HTTPWebServiceClient is the client API for HTTPWebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HTTPWebServiceClient interface {
	// 创建Web配置
	CreateHTTPWeb(ctx context.Context, in *CreateHTTPWebRequest, opts ...grpc.CallOption) (*CreateHTTPWebResponse, error)
	// 查找Web信息
	FindEnabledHTTPWeb(ctx context.Context, in *FindEnabledHTTPWebRequest, opts ...grpc.CallOption) (*FindEnabledHTTPWebResponse, error)
	// 查找Web配置
	FindEnabledHTTPWebConfig(ctx context.Context, in *FindEnabledHTTPWebConfigRequest, opts ...grpc.CallOption) (*FindEnabledHTTPWebConfigResponse, error)
	// 更改Web配置
	UpdateHTTPWeb(ctx context.Context, in *UpdateHTTPWebRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改压缩配置
	UpdateHTTPWebCompression(ctx context.Context, in *UpdateHTTPWebCompressionRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改WebP配置
	UpdateHTTPWebWebP(ctx context.Context, in *UpdateHTTPWebWebPRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改RemoteAddr配置
	UpdateHTTPWebRemoteAddr(ctx context.Context, in *UpdateHTTPWebRemoteAddrRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改字符集配置
	UpdateHTTPWebCharset(ctx context.Context, in *UpdateHTTPWebCharsetRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改请求Header策略
	UpdateHTTPWebRequestHeader(ctx context.Context, in *UpdateHTTPWebRequestHeaderRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改响应Header策略
	UpdateHTTPWebResponseHeader(ctx context.Context, in *UpdateHTTPWebResponseHeaderRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改Shutdown
	UpdateHTTPWebShutdown(ctx context.Context, in *UpdateHTTPWebShutdownRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改Pages
	UpdateHTTPWebPages(ctx context.Context, in *UpdateHTTPWebPagesRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改访问日志配置
	UpdateHTTPWebAccessLog(ctx context.Context, in *UpdateHTTPWebAccessLogRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改统计配置
	UpdateHTTPWebStat(ctx context.Context, in *UpdateHTTPWebStatRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改缓存配置
	UpdateHTTPWebCache(ctx context.Context, in *UpdateHTTPWebCacheRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改防火墙设置
	UpdateHTTPWebFirewall(ctx context.Context, in *UpdateHTTPWebFirewallRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改路径规则配置
	UpdateHTTPWebLocations(ctx context.Context, in *UpdateHTTPWebLocationsRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改跳转到HTTPS设置
	UpdateHTTPWebRedirectToHTTPS(ctx context.Context, in *UpdateHTTPWebRedirectToHTTPSRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改Websocket设置
	UpdateHTTPWebWebsocket(ctx context.Context, in *UpdateHTTPWebWebsocketRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改Fastcgi设置
	UpdateHTTPWebFastcgi(ctx context.Context, in *UpdateHTTPWebFastcgiRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改重写规则设置
	UpdateHTTPWebRewriteRules(ctx context.Context, in *UpdateHTTPWebRewriteRulesRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改主机跳转设置
	UpdateHTTPWebHostRedirects(ctx context.Context, in *UpdateHTTPWebHostRedirectsRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找主机跳转设置
	FindHTTPWebHostRedirects(ctx context.Context, in *FindHTTPWebHostRedirectsRequest, opts ...grpc.CallOption) (*FindHTTPWebHostRedirectsResponse, error)
	// 更改认证设置
	UpdateHTTPWebAuth(ctx context.Context, in *UpdateHTTPWebAuthRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 更改通用设置
	UpdateHTTPWebCommon(ctx context.Context, in *UpdateHTTPWebCommonRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改请求限制
	UpdateHTTPWebRequestLimit(ctx context.Context, in *UpdateHTTPWebRequestLimitRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找请求限制
	FindHTTPWebRequestLimit(ctx context.Context, in *FindHTTPWebRequestLimitRequest, opts ...grpc.CallOption) (*FindHTTPWebRequestLimitResponse, error)
	// 修改请求脚本
	UpdateHTTPWebRequestScripts(ctx context.Context, in *UpdateHTTPWebRequestScriptsRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找请求脚本
	FindHTTPWebRequestScripts(ctx context.Context, in *FindHTTPWebRequestScriptsRequest, opts ...grpc.CallOption) (*FindHTTPWebRequestScriptsResponse, error)
	// 修改UAM设置
	UpdateHTTPWebUAM(ctx context.Context, in *UpdateHTTPWebUAMRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找UAM设置
	FindHTTPWebUAM(ctx context.Context, in *FindHTTPWebUAMRequest, opts ...grpc.CallOption) (*FindHTTPWebUAMResponse, error)
	// 修改CC设置
	UpdateHTTPWebCC(ctx context.Context, in *UpdateHTTPWebCCRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找UAM设置
	FindHTTPWebCC(ctx context.Context, in *FindHTTPWebCCRequest, opts ...grpc.CallOption) (*FindHTTPWebCCResponse, error)
	// 修改防盗链设置
	UpdateHTTPWebReferers(ctx context.Context, in *UpdateHTTPWebReferersRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找防盗链设置
	FindHTTPWebReferers(ctx context.Context, in *FindHTTPWebReferersRequest, opts ...grpc.CallOption) (*FindHTTPWebReferersResponse, error)
	// 修改UserAgent设置
	UpdateHTTPWebUserAgent(ctx context.Context, in *UpdateHTTPWebUserAgentRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找UserAgent设置
	FindHTTPWebUserAgent(ctx context.Context, in *FindHTTPWebUserAgentRequest, opts ...grpc.CallOption) (*FindHTTPWebUserAgentResponse, error)
}

type hTTPWebServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPWebServiceClient(cc grpc.ClientConnInterface) HTTPWebServiceClient {
	return &hTTPWebServiceClient{cc}
}

func (c *hTTPWebServiceClient) CreateHTTPWeb(ctx context.Context, in *CreateHTTPWebRequest, opts ...grpc.CallOption) (*CreateHTTPWebResponse, error) {
	out := new(CreateHTTPWebResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/createHTTPWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindEnabledHTTPWeb(ctx context.Context, in *FindEnabledHTTPWebRequest, opts ...grpc.CallOption) (*FindEnabledHTTPWebResponse, error) {
	out := new(FindEnabledHTTPWebResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findEnabledHTTPWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindEnabledHTTPWebConfig(ctx context.Context, in *FindEnabledHTTPWebConfigRequest, opts ...grpc.CallOption) (*FindEnabledHTTPWebConfigResponse, error) {
	out := new(FindEnabledHTTPWebConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findEnabledHTTPWebConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWeb(ctx context.Context, in *UpdateHTTPWebRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebCompression(ctx context.Context, in *UpdateHTTPWebCompressionRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebCompression", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebWebP(ctx context.Context, in *UpdateHTTPWebWebPRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebWebP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebRemoteAddr(ctx context.Context, in *UpdateHTTPWebRemoteAddrRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebRemoteAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebCharset(ctx context.Context, in *UpdateHTTPWebCharsetRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebCharset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebRequestHeader(ctx context.Context, in *UpdateHTTPWebRequestHeaderRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebRequestHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebResponseHeader(ctx context.Context, in *UpdateHTTPWebResponseHeaderRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebResponseHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebShutdown(ctx context.Context, in *UpdateHTTPWebShutdownRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebPages(ctx context.Context, in *UpdateHTTPWebPagesRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebAccessLog(ctx context.Context, in *UpdateHTTPWebAccessLogRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebAccessLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebStat(ctx context.Context, in *UpdateHTTPWebStatRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebCache(ctx context.Context, in *UpdateHTTPWebCacheRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebFirewall(ctx context.Context, in *UpdateHTTPWebFirewallRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebLocations(ctx context.Context, in *UpdateHTTPWebLocationsRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebRedirectToHTTPS(ctx context.Context, in *UpdateHTTPWebRedirectToHTTPSRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebRedirectToHTTPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebWebsocket(ctx context.Context, in *UpdateHTTPWebWebsocketRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebWebsocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebFastcgi(ctx context.Context, in *UpdateHTTPWebFastcgiRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebFastcgi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebRewriteRules(ctx context.Context, in *UpdateHTTPWebRewriteRulesRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebRewriteRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebHostRedirects(ctx context.Context, in *UpdateHTTPWebHostRedirectsRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebHostRedirects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindHTTPWebHostRedirects(ctx context.Context, in *FindHTTPWebHostRedirectsRequest, opts ...grpc.CallOption) (*FindHTTPWebHostRedirectsResponse, error) {
	out := new(FindHTTPWebHostRedirectsResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findHTTPWebHostRedirects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebAuth(ctx context.Context, in *UpdateHTTPWebAuthRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebCommon(ctx context.Context, in *UpdateHTTPWebCommonRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebCommon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebRequestLimit(ctx context.Context, in *UpdateHTTPWebRequestLimitRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebRequestLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindHTTPWebRequestLimit(ctx context.Context, in *FindHTTPWebRequestLimitRequest, opts ...grpc.CallOption) (*FindHTTPWebRequestLimitResponse, error) {
	out := new(FindHTTPWebRequestLimitResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findHTTPWebRequestLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebRequestScripts(ctx context.Context, in *UpdateHTTPWebRequestScriptsRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebRequestScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindHTTPWebRequestScripts(ctx context.Context, in *FindHTTPWebRequestScriptsRequest, opts ...grpc.CallOption) (*FindHTTPWebRequestScriptsResponse, error) {
	out := new(FindHTTPWebRequestScriptsResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findHTTPWebRequestScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebUAM(ctx context.Context, in *UpdateHTTPWebUAMRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebUAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindHTTPWebUAM(ctx context.Context, in *FindHTTPWebUAMRequest, opts ...grpc.CallOption) (*FindHTTPWebUAMResponse, error) {
	out := new(FindHTTPWebUAMResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findHTTPWebUAM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebCC(ctx context.Context, in *UpdateHTTPWebCCRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindHTTPWebCC(ctx context.Context, in *FindHTTPWebCCRequest, opts ...grpc.CallOption) (*FindHTTPWebCCResponse, error) {
	out := new(FindHTTPWebCCResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findHTTPWebCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebReferers(ctx context.Context, in *UpdateHTTPWebReferersRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebReferers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindHTTPWebReferers(ctx context.Context, in *FindHTTPWebReferersRequest, opts ...grpc.CallOption) (*FindHTTPWebReferersResponse, error) {
	out := new(FindHTTPWebReferersResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findHTTPWebReferers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) UpdateHTTPWebUserAgent(ctx context.Context, in *UpdateHTTPWebUserAgentRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/updateHTTPWebUserAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPWebServiceClient) FindHTTPWebUserAgent(ctx context.Context, in *FindHTTPWebUserAgentRequest, opts ...grpc.CallOption) (*FindHTTPWebUserAgentResponse, error) {
	out := new(FindHTTPWebUserAgentResponse)
	err := c.cc.Invoke(ctx, "/pb.HTTPWebService/findHTTPWebUserAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPWebServiceServer is the server API for HTTPWebService service.
type HTTPWebServiceServer interface {
	// 创建Web配置
	CreateHTTPWeb(context.Context, *CreateHTTPWebRequest) (*CreateHTTPWebResponse, error)
	// 查找Web信息
	FindEnabledHTTPWeb(context.Context, *FindEnabledHTTPWebRequest) (*FindEnabledHTTPWebResponse, error)
	// 查找Web配置
	FindEnabledHTTPWebConfig(context.Context, *FindEnabledHTTPWebConfigRequest) (*FindEnabledHTTPWebConfigResponse, error)
	// 更改Web配置
	UpdateHTTPWeb(context.Context, *UpdateHTTPWebRequest) (*RPCSuccess, error)
	// 更改压缩配置
	UpdateHTTPWebCompression(context.Context, *UpdateHTTPWebCompressionRequest) (*RPCSuccess, error)
	// 更改WebP配置
	UpdateHTTPWebWebP(context.Context, *UpdateHTTPWebWebPRequest) (*RPCSuccess, error)
	// 更改RemoteAddr配置
	UpdateHTTPWebRemoteAddr(context.Context, *UpdateHTTPWebRemoteAddrRequest) (*RPCSuccess, error)
	// 更改字符集配置
	UpdateHTTPWebCharset(context.Context, *UpdateHTTPWebCharsetRequest) (*RPCSuccess, error)
	// 更改请求Header策略
	UpdateHTTPWebRequestHeader(context.Context, *UpdateHTTPWebRequestHeaderRequest) (*RPCSuccess, error)
	// 更改响应Header策略
	UpdateHTTPWebResponseHeader(context.Context, *UpdateHTTPWebResponseHeaderRequest) (*RPCSuccess, error)
	// 更改Shutdown
	UpdateHTTPWebShutdown(context.Context, *UpdateHTTPWebShutdownRequest) (*RPCSuccess, error)
	// 更改Pages
	UpdateHTTPWebPages(context.Context, *UpdateHTTPWebPagesRequest) (*RPCSuccess, error)
	// 更改访问日志配置
	UpdateHTTPWebAccessLog(context.Context, *UpdateHTTPWebAccessLogRequest) (*RPCSuccess, error)
	// 更改统计配置
	UpdateHTTPWebStat(context.Context, *UpdateHTTPWebStatRequest) (*RPCSuccess, error)
	// 更改缓存配置
	UpdateHTTPWebCache(context.Context, *UpdateHTTPWebCacheRequest) (*RPCSuccess, error)
	// 更改防火墙设置
	UpdateHTTPWebFirewall(context.Context, *UpdateHTTPWebFirewallRequest) (*RPCSuccess, error)
	// 更改路径规则配置
	UpdateHTTPWebLocations(context.Context, *UpdateHTTPWebLocationsRequest) (*RPCSuccess, error)
	// 更改跳转到HTTPS设置
	UpdateHTTPWebRedirectToHTTPS(context.Context, *UpdateHTTPWebRedirectToHTTPSRequest) (*RPCSuccess, error)
	// 更改Websocket设置
	UpdateHTTPWebWebsocket(context.Context, *UpdateHTTPWebWebsocketRequest) (*RPCSuccess, error)
	// 更改Fastcgi设置
	UpdateHTTPWebFastcgi(context.Context, *UpdateHTTPWebFastcgiRequest) (*RPCSuccess, error)
	// 更改重写规则设置
	UpdateHTTPWebRewriteRules(context.Context, *UpdateHTTPWebRewriteRulesRequest) (*RPCSuccess, error)
	// 更改主机跳转设置
	UpdateHTTPWebHostRedirects(context.Context, *UpdateHTTPWebHostRedirectsRequest) (*RPCSuccess, error)
	// 查找主机跳转设置
	FindHTTPWebHostRedirects(context.Context, *FindHTTPWebHostRedirectsRequest) (*FindHTTPWebHostRedirectsResponse, error)
	// 更改认证设置
	UpdateHTTPWebAuth(context.Context, *UpdateHTTPWebAuthRequest) (*RPCSuccess, error)
	// 更改通用设置
	UpdateHTTPWebCommon(context.Context, *UpdateHTTPWebCommonRequest) (*RPCSuccess, error)
	// 修改请求限制
	UpdateHTTPWebRequestLimit(context.Context, *UpdateHTTPWebRequestLimitRequest) (*RPCSuccess, error)
	// 查找请求限制
	FindHTTPWebRequestLimit(context.Context, *FindHTTPWebRequestLimitRequest) (*FindHTTPWebRequestLimitResponse, error)
	// 修改请求脚本
	UpdateHTTPWebRequestScripts(context.Context, *UpdateHTTPWebRequestScriptsRequest) (*RPCSuccess, error)
	// 查找请求脚本
	FindHTTPWebRequestScripts(context.Context, *FindHTTPWebRequestScriptsRequest) (*FindHTTPWebRequestScriptsResponse, error)
	// 修改UAM设置
	UpdateHTTPWebUAM(context.Context, *UpdateHTTPWebUAMRequest) (*RPCSuccess, error)
	// 查找UAM设置
	FindHTTPWebUAM(context.Context, *FindHTTPWebUAMRequest) (*FindHTTPWebUAMResponse, error)
	// 修改CC设置
	UpdateHTTPWebCC(context.Context, *UpdateHTTPWebCCRequest) (*RPCSuccess, error)
	// 查找UAM设置
	FindHTTPWebCC(context.Context, *FindHTTPWebCCRequest) (*FindHTTPWebCCResponse, error)
	// 修改防盗链设置
	UpdateHTTPWebReferers(context.Context, *UpdateHTTPWebReferersRequest) (*RPCSuccess, error)
	// 查找防盗链设置
	FindHTTPWebReferers(context.Context, *FindHTTPWebReferersRequest) (*FindHTTPWebReferersResponse, error)
	// 修改UserAgent设置
	UpdateHTTPWebUserAgent(context.Context, *UpdateHTTPWebUserAgentRequest) (*RPCSuccess, error)
	// 查找UserAgent设置
	FindHTTPWebUserAgent(context.Context, *FindHTTPWebUserAgentRequest) (*FindHTTPWebUserAgentResponse, error)
}

// UnimplementedHTTPWebServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHTTPWebServiceServer struct {
}

func (*UnimplementedHTTPWebServiceServer) CreateHTTPWeb(context.Context, *CreateHTTPWebRequest) (*CreateHTTPWebResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHTTPWeb not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindEnabledHTTPWeb(context.Context, *FindEnabledHTTPWebRequest) (*FindEnabledHTTPWebResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledHTTPWeb not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindEnabledHTTPWebConfig(context.Context, *FindEnabledHTTPWebConfigRequest) (*FindEnabledHTTPWebConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledHTTPWebConfig not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWeb(context.Context, *UpdateHTTPWebRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWeb not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebCompression(context.Context, *UpdateHTTPWebCompressionRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebCompression not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebWebP(context.Context, *UpdateHTTPWebWebPRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebWebP not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebRemoteAddr(context.Context, *UpdateHTTPWebRemoteAddrRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebRemoteAddr not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebCharset(context.Context, *UpdateHTTPWebCharsetRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebCharset not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebRequestHeader(context.Context, *UpdateHTTPWebRequestHeaderRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebRequestHeader not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebResponseHeader(context.Context, *UpdateHTTPWebResponseHeaderRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebResponseHeader not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebShutdown(context.Context, *UpdateHTTPWebShutdownRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebShutdown not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebPages(context.Context, *UpdateHTTPWebPagesRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebPages not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebAccessLog(context.Context, *UpdateHTTPWebAccessLogRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebAccessLog not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebStat(context.Context, *UpdateHTTPWebStatRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebStat not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebCache(context.Context, *UpdateHTTPWebCacheRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebCache not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebFirewall(context.Context, *UpdateHTTPWebFirewallRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebFirewall not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebLocations(context.Context, *UpdateHTTPWebLocationsRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebLocations not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebRedirectToHTTPS(context.Context, *UpdateHTTPWebRedirectToHTTPSRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebRedirectToHTTPS not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebWebsocket(context.Context, *UpdateHTTPWebWebsocketRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebWebsocket not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebFastcgi(context.Context, *UpdateHTTPWebFastcgiRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebFastcgi not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebRewriteRules(context.Context, *UpdateHTTPWebRewriteRulesRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebRewriteRules not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebHostRedirects(context.Context, *UpdateHTTPWebHostRedirectsRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebHostRedirects not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindHTTPWebHostRedirects(context.Context, *FindHTTPWebHostRedirectsRequest) (*FindHTTPWebHostRedirectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHTTPWebHostRedirects not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebAuth(context.Context, *UpdateHTTPWebAuthRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebAuth not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebCommon(context.Context, *UpdateHTTPWebCommonRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebCommon not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebRequestLimit(context.Context, *UpdateHTTPWebRequestLimitRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebRequestLimit not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindHTTPWebRequestLimit(context.Context, *FindHTTPWebRequestLimitRequest) (*FindHTTPWebRequestLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHTTPWebRequestLimit not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebRequestScripts(context.Context, *UpdateHTTPWebRequestScriptsRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebRequestScripts not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindHTTPWebRequestScripts(context.Context, *FindHTTPWebRequestScriptsRequest) (*FindHTTPWebRequestScriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHTTPWebRequestScripts not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebUAM(context.Context, *UpdateHTTPWebUAMRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebUAM not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindHTTPWebUAM(context.Context, *FindHTTPWebUAMRequest) (*FindHTTPWebUAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHTTPWebUAM not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebCC(context.Context, *UpdateHTTPWebCCRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebCC not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindHTTPWebCC(context.Context, *FindHTTPWebCCRequest) (*FindHTTPWebCCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHTTPWebCC not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebReferers(context.Context, *UpdateHTTPWebReferersRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebReferers not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindHTTPWebReferers(context.Context, *FindHTTPWebReferersRequest) (*FindHTTPWebReferersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHTTPWebReferers not implemented")
}
func (*UnimplementedHTTPWebServiceServer) UpdateHTTPWebUserAgent(context.Context, *UpdateHTTPWebUserAgentRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPWebUserAgent not implemented")
}
func (*UnimplementedHTTPWebServiceServer) FindHTTPWebUserAgent(context.Context, *FindHTTPWebUserAgentRequest) (*FindHTTPWebUserAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHTTPWebUserAgent not implemented")
}

func RegisterHTTPWebServiceServer(s *grpc.Server, srv HTTPWebServiceServer) {
	s.RegisterService(&_HTTPWebService_serviceDesc, srv)
}

func _HTTPWebService_CreateHTTPWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHTTPWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).CreateHTTPWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/CreateHTTPWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).CreateHTTPWeb(ctx, req.(*CreateHTTPWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindEnabledHTTPWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledHTTPWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindEnabledHTTPWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindEnabledHTTPWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindEnabledHTTPWeb(ctx, req.(*FindEnabledHTTPWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindEnabledHTTPWebConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledHTTPWebConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindEnabledHTTPWebConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindEnabledHTTPWebConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindEnabledHTTPWebConfig(ctx, req.(*FindEnabledHTTPWebConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWeb(ctx, req.(*UpdateHTTPWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebCompression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebCompressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCompression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebCompression",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCompression(ctx, req.(*UpdateHTTPWebCompressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebWebP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebWebPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebWebP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebWebP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebWebP(ctx, req.(*UpdateHTTPWebWebPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebRemoteAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRemoteAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRemoteAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebRemoteAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRemoteAddr(ctx, req.(*UpdateHTTPWebRemoteAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebCharset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebCharsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCharset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebCharset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCharset(ctx, req.(*UpdateHTTPWebCharsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebRequestHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRequestHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRequestHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebRequestHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRequestHeader(ctx, req.(*UpdateHTTPWebRequestHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebResponseHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebResponseHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebResponseHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebResponseHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebResponseHeader(ctx, req.(*UpdateHTTPWebResponseHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebShutdown(ctx, req.(*UpdateHTTPWebShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebPages(ctx, req.(*UpdateHTTPWebPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebAccessLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebAccessLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebAccessLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebAccessLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebAccessLog(ctx, req.(*UpdateHTTPWebAccessLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebStat(ctx, req.(*UpdateHTTPWebStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCache(ctx, req.(*UpdateHTTPWebCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebFirewallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebFirewall(ctx, req.(*UpdateHTTPWebFirewallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebLocations(ctx, req.(*UpdateHTTPWebLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebRedirectToHTTPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRedirectToHTTPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRedirectToHTTPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebRedirectToHTTPS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRedirectToHTTPS(ctx, req.(*UpdateHTTPWebRedirectToHTTPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebWebsocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebWebsocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebWebsocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebWebsocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebWebsocket(ctx, req.(*UpdateHTTPWebWebsocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebFastcgi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebFastcgiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebFastcgi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebFastcgi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebFastcgi(ctx, req.(*UpdateHTTPWebFastcgiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebRewriteRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRewriteRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRewriteRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebRewriteRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRewriteRules(ctx, req.(*UpdateHTTPWebRewriteRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebHostRedirects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebHostRedirectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebHostRedirects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebHostRedirects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebHostRedirects(ctx, req.(*UpdateHTTPWebHostRedirectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindHTTPWebHostRedirects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHTTPWebHostRedirectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindHTTPWebHostRedirects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindHTTPWebHostRedirects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindHTTPWebHostRedirects(ctx, req.(*FindHTTPWebHostRedirectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebAuth(ctx, req.(*UpdateHTTPWebAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebCommon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCommon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebCommon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCommon(ctx, req.(*UpdateHTTPWebCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebRequestLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRequestLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRequestLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebRequestLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRequestLimit(ctx, req.(*UpdateHTTPWebRequestLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindHTTPWebRequestLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHTTPWebRequestLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindHTTPWebRequestLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindHTTPWebRequestLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindHTTPWebRequestLimit(ctx, req.(*FindHTTPWebRequestLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebRequestScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebRequestScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRequestScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebRequestScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebRequestScripts(ctx, req.(*UpdateHTTPWebRequestScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindHTTPWebRequestScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHTTPWebRequestScriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindHTTPWebRequestScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindHTTPWebRequestScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindHTTPWebRequestScripts(ctx, req.(*FindHTTPWebRequestScriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebUAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebUAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebUAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebUAM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebUAM(ctx, req.(*UpdateHTTPWebUAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindHTTPWebUAM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHTTPWebUAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindHTTPWebUAM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindHTTPWebUAM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindHTTPWebUAM(ctx, req.(*FindHTTPWebUAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebCCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebCC(ctx, req.(*UpdateHTTPWebCCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindHTTPWebCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHTTPWebCCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindHTTPWebCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindHTTPWebCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindHTTPWebCC(ctx, req.(*FindHTTPWebCCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebReferers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebReferersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebReferers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebReferers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebReferers(ctx, req.(*UpdateHTTPWebReferersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindHTTPWebReferers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHTTPWebReferersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindHTTPWebReferers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindHTTPWebReferers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindHTTPWebReferers(ctx, req.(*FindHTTPWebReferersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_UpdateHTTPWebUserAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPWebUserAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebUserAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/UpdateHTTPWebUserAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).UpdateHTTPWebUserAgent(ctx, req.(*UpdateHTTPWebUserAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPWebService_FindHTTPWebUserAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHTTPWebUserAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPWebServiceServer).FindHTTPWebUserAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HTTPWebService/FindHTTPWebUserAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPWebServiceServer).FindHTTPWebUserAgent(ctx, req.(*FindHTTPWebUserAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTPWebService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HTTPWebService",
	HandlerType: (*HTTPWebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createHTTPWeb",
			Handler:    _HTTPWebService_CreateHTTPWeb_Handler,
		},
		{
			MethodName: "findEnabledHTTPWeb",
			Handler:    _HTTPWebService_FindEnabledHTTPWeb_Handler,
		},
		{
			MethodName: "findEnabledHTTPWebConfig",
			Handler:    _HTTPWebService_FindEnabledHTTPWebConfig_Handler,
		},
		{
			MethodName: "updateHTTPWeb",
			Handler:    _HTTPWebService_UpdateHTTPWeb_Handler,
		},
		{
			MethodName: "updateHTTPWebCompression",
			Handler:    _HTTPWebService_UpdateHTTPWebCompression_Handler,
		},
		{
			MethodName: "updateHTTPWebWebP",
			Handler:    _HTTPWebService_UpdateHTTPWebWebP_Handler,
		},
		{
			MethodName: "updateHTTPWebRemoteAddr",
			Handler:    _HTTPWebService_UpdateHTTPWebRemoteAddr_Handler,
		},
		{
			MethodName: "updateHTTPWebCharset",
			Handler:    _HTTPWebService_UpdateHTTPWebCharset_Handler,
		},
		{
			MethodName: "updateHTTPWebRequestHeader",
			Handler:    _HTTPWebService_UpdateHTTPWebRequestHeader_Handler,
		},
		{
			MethodName: "updateHTTPWebResponseHeader",
			Handler:    _HTTPWebService_UpdateHTTPWebResponseHeader_Handler,
		},
		{
			MethodName: "updateHTTPWebShutdown",
			Handler:    _HTTPWebService_UpdateHTTPWebShutdown_Handler,
		},
		{
			MethodName: "updateHTTPWebPages",
			Handler:    _HTTPWebService_UpdateHTTPWebPages_Handler,
		},
		{
			MethodName: "updateHTTPWebAccessLog",
			Handler:    _HTTPWebService_UpdateHTTPWebAccessLog_Handler,
		},
		{
			MethodName: "updateHTTPWebStat",
			Handler:    _HTTPWebService_UpdateHTTPWebStat_Handler,
		},
		{
			MethodName: "updateHTTPWebCache",
			Handler:    _HTTPWebService_UpdateHTTPWebCache_Handler,
		},
		{
			MethodName: "updateHTTPWebFirewall",
			Handler:    _HTTPWebService_UpdateHTTPWebFirewall_Handler,
		},
		{
			MethodName: "updateHTTPWebLocations",
			Handler:    _HTTPWebService_UpdateHTTPWebLocations_Handler,
		},
		{
			MethodName: "updateHTTPWebRedirectToHTTPS",
			Handler:    _HTTPWebService_UpdateHTTPWebRedirectToHTTPS_Handler,
		},
		{
			MethodName: "updateHTTPWebWebsocket",
			Handler:    _HTTPWebService_UpdateHTTPWebWebsocket_Handler,
		},
		{
			MethodName: "updateHTTPWebFastcgi",
			Handler:    _HTTPWebService_UpdateHTTPWebFastcgi_Handler,
		},
		{
			MethodName: "updateHTTPWebRewriteRules",
			Handler:    _HTTPWebService_UpdateHTTPWebRewriteRules_Handler,
		},
		{
			MethodName: "updateHTTPWebHostRedirects",
			Handler:    _HTTPWebService_UpdateHTTPWebHostRedirects_Handler,
		},
		{
			MethodName: "findHTTPWebHostRedirects",
			Handler:    _HTTPWebService_FindHTTPWebHostRedirects_Handler,
		},
		{
			MethodName: "updateHTTPWebAuth",
			Handler:    _HTTPWebService_UpdateHTTPWebAuth_Handler,
		},
		{
			MethodName: "updateHTTPWebCommon",
			Handler:    _HTTPWebService_UpdateHTTPWebCommon_Handler,
		},
		{
			MethodName: "updateHTTPWebRequestLimit",
			Handler:    _HTTPWebService_UpdateHTTPWebRequestLimit_Handler,
		},
		{
			MethodName: "findHTTPWebRequestLimit",
			Handler:    _HTTPWebService_FindHTTPWebRequestLimit_Handler,
		},
		{
			MethodName: "updateHTTPWebRequestScripts",
			Handler:    _HTTPWebService_UpdateHTTPWebRequestScripts_Handler,
		},
		{
			MethodName: "findHTTPWebRequestScripts",
			Handler:    _HTTPWebService_FindHTTPWebRequestScripts_Handler,
		},
		{
			MethodName: "updateHTTPWebUAM",
			Handler:    _HTTPWebService_UpdateHTTPWebUAM_Handler,
		},
		{
			MethodName: "findHTTPWebUAM",
			Handler:    _HTTPWebService_FindHTTPWebUAM_Handler,
		},
		{
			MethodName: "updateHTTPWebCC",
			Handler:    _HTTPWebService_UpdateHTTPWebCC_Handler,
		},
		{
			MethodName: "findHTTPWebCC",
			Handler:    _HTTPWebService_FindHTTPWebCC_Handler,
		},
		{
			MethodName: "updateHTTPWebReferers",
			Handler:    _HTTPWebService_UpdateHTTPWebReferers_Handler,
		},
		{
			MethodName: "findHTTPWebReferers",
			Handler:    _HTTPWebService_FindHTTPWebReferers_Handler,
		},
		{
			MethodName: "updateHTTPWebUserAgent",
			Handler:    _HTTPWebService_UpdateHTTPWebUserAgent_Handler,
		},
		{
			MethodName: "findHTTPWebUserAgent",
			Handler:    _HTTPWebService_FindHTTPWebUserAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_http_web.proto",
}
