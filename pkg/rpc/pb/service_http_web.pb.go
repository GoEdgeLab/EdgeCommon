// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_http_web.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建Web配置
type CreateHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootJSON []byte `protobuf:"bytes,1,opt,name=rootJSON,proto3" json:"rootJSON,omitempty"` // 可选，静态分发配置
}

func (x *CreateHTTPWebRequest) Reset() {
	*x = CreateHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPWebRequest) ProtoMessage() {}

func (x *CreateHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*CreateHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHTTPWebRequest) GetRootJSON() []byte {
	if x != nil {
		return x.RootJSON
	}
	return nil
}

type CreateHTTPWebResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *CreateHTTPWebResponse) Reset() {
	*x = CreateHTTPWebResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPWebResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPWebResponse) ProtoMessage() {}

func (x *CreateHTTPWebResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPWebResponse.ProtoReflect.Descriptor instead.
func (*CreateHTTPWebResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHTTPWebResponse) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

// 查找Web信息
type FindEnabledHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindEnabledHTTPWebRequest) Reset() {
	*x = FindEnabledHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebRequest) ProtoMessage() {}

func (x *FindEnabledHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{2}
}

func (x *FindEnabledHTTPWebRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindEnabledHTTPWebResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWeb *HTTPWeb `protobuf:"bytes,1,opt,name=httpWeb,proto3" json:"httpWeb,omitempty"`
}

func (x *FindEnabledHTTPWebResponse) Reset() {
	*x = FindEnabledHTTPWebResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebResponse) ProtoMessage() {}

func (x *FindEnabledHTTPWebResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledHTTPWebResponse) GetHttpWeb() *HTTPWeb {
	if x != nil {
		return x.HttpWeb
	}
	return nil
}

// 查找Web配置
type FindEnabledHTTPWebConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindEnabledHTTPWebConfigRequest) Reset() {
	*x = FindEnabledHTTPWebConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebConfigRequest) ProtoMessage() {}

func (x *FindEnabledHTTPWebConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebConfigRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{4}
}

func (x *FindEnabledHTTPWebConfigRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindEnabledHTTPWebConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebJSON []byte `protobuf:"bytes,1,opt,name=httpWebJSON,proto3" json:"httpWebJSON,omitempty"`
}

func (x *FindEnabledHTTPWebConfigResponse) Reset() {
	*x = FindEnabledHTTPWebConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPWebConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPWebConfigResponse) ProtoMessage() {}

func (x *FindEnabledHTTPWebConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPWebConfigResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPWebConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{5}
}

func (x *FindEnabledHTTPWebConfigResponse) GetHttpWebJSON() []byte {
	if x != nil {
		return x.HttpWebJSON
	}
	return nil
}

// 更改Web配置
type UpdateHTTPWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RootJSON  []byte `protobuf:"bytes,2,opt,name=rootJSON,proto3" json:"rootJSON,omitempty"`
}

func (x *UpdateHTTPWebRequest) Reset() {
	*x = UpdateHTTPWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateHTTPWebRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRequest) GetRootJSON() []byte {
	if x != nil {
		return x.RootJSON
	}
	return nil
}

// 更改压缩配置
type UpdateHTTPWebCompressionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId       int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	CompressionJSON []byte `protobuf:"bytes,2,opt,name=compressionJSON,proto3" json:"compressionJSON,omitempty"`
}

func (x *UpdateHTTPWebCompressionRequest) Reset() {
	*x = UpdateHTTPWebCompressionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCompressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCompressionRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCompressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCompressionRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCompressionRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateHTTPWebCompressionRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebCompressionRequest) GetCompressionJSON() []byte {
	if x != nil {
		return x.CompressionJSON
	}
	return nil
}

// 更改页面优化配置
type UpdateHTTPWebOptimizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId        int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	OptimizationJSON []byte `protobuf:"bytes,2,opt,name=optimizationJSON,proto3" json:"optimizationJSON,omitempty"`
}

func (x *UpdateHTTPWebOptimizationRequest) Reset() {
	*x = UpdateHTTPWebOptimizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebOptimizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebOptimizationRequest) ProtoMessage() {}

func (x *UpdateHTTPWebOptimizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebOptimizationRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebOptimizationRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateHTTPWebOptimizationRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebOptimizationRequest) GetOptimizationJSON() []byte {
	if x != nil {
		return x.OptimizationJSON
	}
	return nil
}

// 更改WebP配置
type UpdateHTTPWebWebPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	WebpJSON  []byte `protobuf:"bytes,2,opt,name=webpJSON,proto3" json:"webpJSON,omitempty"`
}

func (x *UpdateHTTPWebWebPRequest) Reset() {
	*x = UpdateHTTPWebWebPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebWebPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebWebPRequest) ProtoMessage() {}

func (x *UpdateHTTPWebWebPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebWebPRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebWebPRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateHTTPWebWebPRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebWebPRequest) GetWebpJSON() []byte {
	if x != nil {
		return x.WebpJSON
	}
	return nil
}

// 更改RemoteAddr配置
type UpdateHTTPWebRemoteAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId      int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RemoteAddrJSON []byte `protobuf:"bytes,2,opt,name=remoteAddrJSON,proto3" json:"remoteAddrJSON,omitempty"` // @link json:http_remote_addr_config
}

func (x *UpdateHTTPWebRemoteAddrRequest) Reset() {
	*x = UpdateHTTPWebRemoteAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRemoteAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRemoteAddrRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRemoteAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRemoteAddrRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRemoteAddrRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateHTTPWebRemoteAddrRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRemoteAddrRequest) GetRemoteAddrJSON() []byte {
	if x != nil {
		return x.RemoteAddrJSON
	}
	return nil
}

// 更改字符集配置
type UpdateHTTPWebCharsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId   int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	CharsetJSON []byte `protobuf:"bytes,2,opt,name=charsetJSON,proto3" json:"charsetJSON,omitempty"`
}

func (x *UpdateHTTPWebCharsetRequest) Reset() {
	*x = UpdateHTTPWebCharsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCharsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCharsetRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCharsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCharsetRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCharsetRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateHTTPWebCharsetRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebCharsetRequest) GetCharsetJSON() []byte {
	if x != nil {
		return x.CharsetJSON
	}
	return nil
}

// 更改请求Header策略
type UpdateHTTPWebRequestHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId  int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	HeaderJSON []byte `protobuf:"bytes,2,opt,name=headerJSON,proto3" json:"headerJSON,omitempty"`
}

func (x *UpdateHTTPWebRequestHeaderRequest) Reset() {
	*x = UpdateHTTPWebRequestHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequestHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequestHeaderRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequestHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequestHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequestHeaderRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateHTTPWebRequestHeaderRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRequestHeaderRequest) GetHeaderJSON() []byte {
	if x != nil {
		return x.HeaderJSON
	}
	return nil
}

// 更改响应Header策略
type UpdateHTTPWebResponseHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId  int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	HeaderJSON []byte `protobuf:"bytes,2,opt,name=headerJSON,proto3" json:"headerJSON,omitempty"`
}

func (x *UpdateHTTPWebResponseHeaderRequest) Reset() {
	*x = UpdateHTTPWebResponseHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebResponseHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebResponseHeaderRequest) ProtoMessage() {}

func (x *UpdateHTTPWebResponseHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebResponseHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebResponseHeaderRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateHTTPWebResponseHeaderRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebResponseHeaderRequest) GetHeaderJSON() []byte {
	if x != nil {
		return x.HeaderJSON
	}
	return nil
}

// 更改Shutdown
type UpdateHTTPWebShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId    int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	ShutdownJSON []byte `protobuf:"bytes,2,opt,name=shutdownJSON,proto3" json:"shutdownJSON,omitempty"`
}

func (x *UpdateHTTPWebShutdownRequest) Reset() {
	*x = UpdateHTTPWebShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebShutdownRequest) ProtoMessage() {}

func (x *UpdateHTTPWebShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebShutdownRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebShutdownRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateHTTPWebShutdownRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebShutdownRequest) GetShutdownJSON() []byte {
	if x != nil {
		return x.ShutdownJSON
	}
	return nil
}

// 更改Pages
type UpdateHTTPWebPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	PagesJSON []byte `protobuf:"bytes,2,opt,name=pagesJSON,proto3" json:"pagesJSON,omitempty"`
}

func (x *UpdateHTTPWebPagesRequest) Reset() {
	*x = UpdateHTTPWebPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebPagesRequest) ProtoMessage() {}

func (x *UpdateHTTPWebPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebPagesRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebPagesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateHTTPWebPagesRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebPagesRequest) GetPagesJSON() []byte {
	if x != nil {
		return x.PagesJSON
	}
	return nil
}

// 更改访问日志配置
type UpdateHTTPWebAccessLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId     int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	AccessLogJSON []byte `protobuf:"bytes,2,opt,name=accessLogJSON,proto3" json:"accessLogJSON,omitempty"` // @link json:http_access_log_ref
}

func (x *UpdateHTTPWebAccessLogRequest) Reset() {
	*x = UpdateHTTPWebAccessLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebAccessLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebAccessLogRequest) ProtoMessage() {}

func (x *UpdateHTTPWebAccessLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebAccessLogRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebAccessLogRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateHTTPWebAccessLogRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebAccessLogRequest) GetAccessLogJSON() []byte {
	if x != nil {
		return x.AccessLogJSON
	}
	return nil
}

// 更改统计配置
type UpdateHTTPWebStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	StatJSON  []byte `protobuf:"bytes,2,opt,name=statJSON,proto3" json:"statJSON,omitempty"` // @link json:http_stat_stat_ref
}

func (x *UpdateHTTPWebStatRequest) Reset() {
	*x = UpdateHTTPWebStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebStatRequest) ProtoMessage() {}

func (x *UpdateHTTPWebStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebStatRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebStatRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateHTTPWebStatRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebStatRequest) GetStatJSON() []byte {
	if x != nil {
		return x.StatJSON
	}
	return nil
}

// 更改缓存配置
type UpdateHTTPWebCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	CacheJSON []byte `protobuf:"bytes,2,opt,name=cacheJSON,proto3" json:"cacheJSON,omitempty"` // @link json:http_cache_config
}

func (x *UpdateHTTPWebCacheRequest) Reset() {
	*x = UpdateHTTPWebCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCacheRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCacheRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCacheRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateHTTPWebCacheRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebCacheRequest) GetCacheJSON() []byte {
	if x != nil {
		return x.CacheJSON
	}
	return nil
}

// 更改防火墙设置
type UpdateHTTPWebFirewallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId    int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	FirewallJSON []byte `protobuf:"bytes,2,opt,name=firewallJSON,proto3" json:"firewallJSON,omitempty"` // @link json:http_firewall_ref
}

func (x *UpdateHTTPWebFirewallRequest) Reset() {
	*x = UpdateHTTPWebFirewallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebFirewallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebFirewallRequest) ProtoMessage() {}

func (x *UpdateHTTPWebFirewallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebFirewallRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebFirewallRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateHTTPWebFirewallRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebFirewallRequest) GetFirewallJSON() []byte {
	if x != nil {
		return x.FirewallJSON
	}
	return nil
}

// 更改路径规则配置
type UpdateHTTPWebLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId     int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	LocationsJSON []byte `protobuf:"bytes,3,opt,name=locationsJSON,proto3" json:"locationsJSON,omitempty"`
}

func (x *UpdateHTTPWebLocationsRequest) Reset() {
	*x = UpdateHTTPWebLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebLocationsRequest) ProtoMessage() {}

func (x *UpdateHTTPWebLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebLocationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebLocationsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateHTTPWebLocationsRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebLocationsRequest) GetLocationsJSON() []byte {
	if x != nil {
		return x.LocationsJSON
	}
	return nil
}

// 更改跳转到HTTPS设置
type UpdateHTTPWebRedirectToHTTPSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId           int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RedirectToHTTPSJSON []byte `protobuf:"bytes,2,opt,name=redirectToHTTPSJSON,proto3" json:"redirectToHTTPSJSON,omitempty"`
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) Reset() {
	*x = UpdateHTTPWebRedirectToHTTPSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRedirectToHTTPSRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRedirectToHTTPSRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRedirectToHTTPSRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRedirectToHTTPSRequest) GetRedirectToHTTPSJSON() []byte {
	if x != nil {
		return x.RedirectToHTTPSJSON
	}
	return nil
}

// 更改Websocket设置
type UpdateHTTPWebWebsocketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId     int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	WebsocketJSON []byte `protobuf:"bytes,2,opt,name=websocketJSON,proto3" json:"websocketJSON,omitempty"` // @link json:http_websocket_ref
}

func (x *UpdateHTTPWebWebsocketRequest) Reset() {
	*x = UpdateHTTPWebWebsocketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebWebsocketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebWebsocketRequest) ProtoMessage() {}

func (x *UpdateHTTPWebWebsocketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebWebsocketRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebWebsocketRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateHTTPWebWebsocketRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebWebsocketRequest) GetWebsocketJSON() []byte {
	if x != nil {
		return x.WebsocketJSON
	}
	return nil
}

// 更改Fastcgi设置
type UpdateHTTPWebFastcgiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId   int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	FastcgiJSON []byte `protobuf:"bytes,2,opt,name=fastcgiJSON,proto3" json:"fastcgiJSON,omitempty"`
}

func (x *UpdateHTTPWebFastcgiRequest) Reset() {
	*x = UpdateHTTPWebFastcgiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebFastcgiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebFastcgiRequest) ProtoMessage() {}

func (x *UpdateHTTPWebFastcgiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebFastcgiRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebFastcgiRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateHTTPWebFastcgiRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebFastcgiRequest) GetFastcgiJSON() []byte {
	if x != nil {
		return x.FastcgiJSON
	}
	return nil
}

// 更改重写规则设置
type UpdateHTTPWebRewriteRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId        int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RewriteRulesJSON []byte `protobuf:"bytes,2,opt,name=rewriteRulesJSON,proto3" json:"rewriteRulesJSON,omitempty"`
}

func (x *UpdateHTTPWebRewriteRulesRequest) Reset() {
	*x = UpdateHTTPWebRewriteRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRewriteRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRewriteRulesRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRewriteRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRewriteRulesRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRewriteRulesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateHTTPWebRewriteRulesRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRewriteRulesRequest) GetRewriteRulesJSON() []byte {
	if x != nil {
		return x.RewriteRulesJSON
	}
	return nil
}

// 更改主机跳转设置
type UpdateHTTPWebHostRedirectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId         int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	HostRedirectsJSON []byte `protobuf:"bytes,2,opt,name=hostRedirectsJSON,proto3" json:"hostRedirectsJSON,omitempty"`
}

func (x *UpdateHTTPWebHostRedirectsRequest) Reset() {
	*x = UpdateHTTPWebHostRedirectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebHostRedirectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebHostRedirectsRequest) ProtoMessage() {}

func (x *UpdateHTTPWebHostRedirectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebHostRedirectsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebHostRedirectsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateHTTPWebHostRedirectsRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebHostRedirectsRequest) GetHostRedirectsJSON() []byte {
	if x != nil {
		return x.HostRedirectsJSON
	}
	return nil
}

// 查找主机跳转设置
type FindHTTPWebHostRedirectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebHostRedirectsRequest) Reset() {
	*x = FindHTTPWebHostRedirectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebHostRedirectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebHostRedirectsRequest) ProtoMessage() {}

func (x *FindHTTPWebHostRedirectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebHostRedirectsRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebHostRedirectsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{26}
}

func (x *FindHTTPWebHostRedirectsRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebHostRedirectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostRedirectsJSON []byte `protobuf:"bytes,1,opt,name=hostRedirectsJSON,proto3" json:"hostRedirectsJSON,omitempty"`
}

func (x *FindHTTPWebHostRedirectsResponse) Reset() {
	*x = FindHTTPWebHostRedirectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebHostRedirectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebHostRedirectsResponse) ProtoMessage() {}

func (x *FindHTTPWebHostRedirectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebHostRedirectsResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebHostRedirectsResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{27}
}

func (x *FindHTTPWebHostRedirectsResponse) GetHostRedirectsJSON() []byte {
	if x != nil {
		return x.HostRedirectsJSON
	}
	return nil
}

// 更改认证设置
type UpdateHTTPWebAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	AuthJSON  []byte `protobuf:"bytes,2,opt,name=authJSON,proto3" json:"authJSON,omitempty"`
}

func (x *UpdateHTTPWebAuthRequest) Reset() {
	*x = UpdateHTTPWebAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebAuthRequest) ProtoMessage() {}

func (x *UpdateHTTPWebAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebAuthRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebAuthRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateHTTPWebAuthRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebAuthRequest) GetAuthJSON() []byte {
	if x != nil {
		return x.AuthJSON
	}
	return nil
}

// 更改通用设置
type UpdateHTTPWebCommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId    int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	MergeSlashes bool  `protobuf:"varint,2,opt,name=mergeSlashes,proto3" json:"mergeSlashes,omitempty"`
}

func (x *UpdateHTTPWebCommonRequest) Reset() {
	*x = UpdateHTTPWebCommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCommonRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCommonRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCommonRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateHTTPWebCommonRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebCommonRequest) GetMergeSlashes() bool {
	if x != nil {
		return x.MergeSlashes
	}
	return false
}

// 修改请求限制
type UpdateHTTPWebRequestLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId        int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RequestLimitJSON []byte `protobuf:"bytes,2,opt,name=requestLimitJSON,proto3" json:"requestLimitJSON,omitempty"`
}

func (x *UpdateHTTPWebRequestLimitRequest) Reset() {
	*x = UpdateHTTPWebRequestLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequestLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequestLimitRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequestLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequestLimitRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequestLimitRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateHTTPWebRequestLimitRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRequestLimitRequest) GetRequestLimitJSON() []byte {
	if x != nil {
		return x.RequestLimitJSON
	}
	return nil
}

// 查找请求限制
type FindHTTPWebRequestLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebRequestLimitRequest) Reset() {
	*x = FindHTTPWebRequestLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebRequestLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebRequestLimitRequest) ProtoMessage() {}

func (x *FindHTTPWebRequestLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebRequestLimitRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebRequestLimitRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{31}
}

func (x *FindHTTPWebRequestLimitRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebRequestLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestLimitJSON []byte `protobuf:"bytes,1,opt,name=requestLimitJSON,proto3" json:"requestLimitJSON,omitempty"`
}

func (x *FindHTTPWebRequestLimitResponse) Reset() {
	*x = FindHTTPWebRequestLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebRequestLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebRequestLimitResponse) ProtoMessage() {}

func (x *FindHTTPWebRequestLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebRequestLimitResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebRequestLimitResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{32}
}

func (x *FindHTTPWebRequestLimitResponse) GetRequestLimitJSON() []byte {
	if x != nil {
		return x.RequestLimitJSON
	}
	return nil
}

// 修改请求脚本
type UpdateHTTPWebRequestScriptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId          int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	RequestScriptsJSON []byte `protobuf:"bytes,2,opt,name=requestScriptsJSON,proto3" json:"requestScriptsJSON,omitempty"`
}

func (x *UpdateHTTPWebRequestScriptsRequest) Reset() {
	*x = UpdateHTTPWebRequestScriptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebRequestScriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebRequestScriptsRequest) ProtoMessage() {}

func (x *UpdateHTTPWebRequestScriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebRequestScriptsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebRequestScriptsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateHTTPWebRequestScriptsRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebRequestScriptsRequest) GetRequestScriptsJSON() []byte {
	if x != nil {
		return x.RequestScriptsJSON
	}
	return nil
}

// 查找请求脚本
type FindHTTPWebRequestScriptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebRequestScriptsRequest) Reset() {
	*x = FindHTTPWebRequestScriptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebRequestScriptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebRequestScriptsRequest) ProtoMessage() {}

func (x *FindHTTPWebRequestScriptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebRequestScriptsRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebRequestScriptsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{34}
}

func (x *FindHTTPWebRequestScriptsRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebRequestScriptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestScriptsJSON []byte `protobuf:"bytes,1,opt,name=requestScriptsJSON,proto3" json:"requestScriptsJSON,omitempty"`
}

func (x *FindHTTPWebRequestScriptsResponse) Reset() {
	*x = FindHTTPWebRequestScriptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebRequestScriptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebRequestScriptsResponse) ProtoMessage() {}

func (x *FindHTTPWebRequestScriptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebRequestScriptsResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebRequestScriptsResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{35}
}

func (x *FindHTTPWebRequestScriptsResponse) GetRequestScriptsJSON() []byte {
	if x != nil {
		return x.RequestScriptsJSON
	}
	return nil
}

// 修改网站UAM设置
type UpdateHTTPWebUAMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	UamJSON   []byte `protobuf:"bytes,2,opt,name=uamJSON,proto3" json:"uamJSON,omitempty"`
}

func (x *UpdateHTTPWebUAMRequest) Reset() {
	*x = UpdateHTTPWebUAMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebUAMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebUAMRequest) ProtoMessage() {}

func (x *UpdateHTTPWebUAMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebUAMRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebUAMRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateHTTPWebUAMRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebUAMRequest) GetUamJSON() []byte {
	if x != nil {
		return x.UamJSON
	}
	return nil
}

// 查找网站UAM设置
type FindHTTPWebUAMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebUAMRequest) Reset() {
	*x = FindHTTPWebUAMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebUAMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebUAMRequest) ProtoMessage() {}

func (x *FindHTTPWebUAMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebUAMRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebUAMRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{37}
}

func (x *FindHTTPWebUAMRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebUAMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UamJSON []byte `protobuf:"bytes,1,opt,name=uamJSON,proto3" json:"uamJSON,omitempty"`
}

func (x *FindHTTPWebUAMResponse) Reset() {
	*x = FindHTTPWebUAMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebUAMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebUAMResponse) ProtoMessage() {}

func (x *FindHTTPWebUAMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebUAMResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebUAMResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{38}
}

func (x *FindHTTPWebUAMResponse) GetUamJSON() []byte {
	if x != nil {
		return x.UamJSON
	}
	return nil
}

// 修改网站CC设置
type UpdateHTTPWebCCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	CcJSON    []byte `protobuf:"bytes,2,opt,name=ccJSON,proto3" json:"ccJSON,omitempty"`
}

func (x *UpdateHTTPWebCCRequest) Reset() {
	*x = UpdateHTTPWebCCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebCCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebCCRequest) ProtoMessage() {}

func (x *UpdateHTTPWebCCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebCCRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebCCRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateHTTPWebCCRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebCCRequest) GetCcJSON() []byte {
	if x != nil {
		return x.CcJSON
	}
	return nil
}

// 查找网站CC设置
type FindHTTPWebCCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebCCRequest) Reset() {
	*x = FindHTTPWebCCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebCCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebCCRequest) ProtoMessage() {}

func (x *FindHTTPWebCCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebCCRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebCCRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{40}
}

func (x *FindHTTPWebCCRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebCCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CcJSON []byte `protobuf:"bytes,1,opt,name=ccJSON,proto3" json:"ccJSON,omitempty"`
}

func (x *FindHTTPWebCCResponse) Reset() {
	*x = FindHTTPWebCCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebCCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebCCResponse) ProtoMessage() {}

func (x *FindHTTPWebCCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebCCResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebCCResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{41}
}

func (x *FindHTTPWebCCResponse) GetCcJSON() []byte {
	if x != nil {
		return x.CcJSON
	}
	return nil
}

// 修改防盗链设置
type UpdateHTTPWebReferersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId    int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	ReferersJSON []byte `protobuf:"bytes,2,opt,name=referersJSON,proto3" json:"referersJSON,omitempty"`
}

func (x *UpdateHTTPWebReferersRequest) Reset() {
	*x = UpdateHTTPWebReferersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebReferersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebReferersRequest) ProtoMessage() {}

func (x *UpdateHTTPWebReferersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebReferersRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebReferersRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateHTTPWebReferersRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebReferersRequest) GetReferersJSON() []byte {
	if x != nil {
		return x.ReferersJSON
	}
	return nil
}

// 查找防盗链设置
type FindHTTPWebReferersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebReferersRequest) Reset() {
	*x = FindHTTPWebReferersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebReferersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebReferersRequest) ProtoMessage() {}

func (x *FindHTTPWebReferersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebReferersRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebReferersRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{43}
}

func (x *FindHTTPWebReferersRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebReferersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferersJSON []byte `protobuf:"bytes,1,opt,name=referersJSON,proto3" json:"referersJSON,omitempty"`
}

func (x *FindHTTPWebReferersResponse) Reset() {
	*x = FindHTTPWebReferersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebReferersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebReferersResponse) ProtoMessage() {}

func (x *FindHTTPWebReferersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebReferersResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebReferersResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{44}
}

func (x *FindHTTPWebReferersResponse) GetReferersJSON() []byte {
	if x != nil {
		return x.ReferersJSON
	}
	return nil
}

// 修改防盗链设置
type UpdateHTTPWebUserAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId     int64  `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
	UserAgentJSON []byte `protobuf:"bytes,2,opt,name=userAgentJSON,proto3" json:"userAgentJSON,omitempty"`
}

func (x *UpdateHTTPWebUserAgentRequest) Reset() {
	*x = UpdateHTTPWebUserAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPWebUserAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPWebUserAgentRequest) ProtoMessage() {}

func (x *UpdateHTTPWebUserAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPWebUserAgentRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPWebUserAgentRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateHTTPWebUserAgentRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

func (x *UpdateHTTPWebUserAgentRequest) GetUserAgentJSON() []byte {
	if x != nil {
		return x.UserAgentJSON
	}
	return nil
}

// 查找UserAgent设置
type FindHTTPWebUserAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpWebId int64 `protobuf:"varint,1,opt,name=httpWebId,proto3" json:"httpWebId,omitempty"`
}

func (x *FindHTTPWebUserAgentRequest) Reset() {
	*x = FindHTTPWebUserAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebUserAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebUserAgentRequest) ProtoMessage() {}

func (x *FindHTTPWebUserAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebUserAgentRequest.ProtoReflect.Descriptor instead.
func (*FindHTTPWebUserAgentRequest) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{46}
}

func (x *FindHTTPWebUserAgentRequest) GetHttpWebId() int64 {
	if x != nil {
		return x.HttpWebId
	}
	return 0
}

type FindHTTPWebUserAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAgentJSON []byte `protobuf:"bytes,1,opt,name=userAgentJSON,proto3" json:"userAgentJSON,omitempty"`
}

func (x *FindHTTPWebUserAgentResponse) Reset() {
	*x = FindHTTPWebUserAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_web_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHTTPWebUserAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHTTPWebUserAgentResponse) ProtoMessage() {}

func (x *FindHTTPWebUserAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_web_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHTTPWebUserAgentResponse.ProtoReflect.Descriptor instead.
func (*FindHTTPWebUserAgentResponse) Descriptor() ([]byte, []int) {
	return file_service_http_web_proto_rawDescGZIP(), []int{47}
}

func (x *FindHTTPWebUserAgentResponse) GetUserAgentJSON() []byte {
	if x != nil {
		return x.UserAgentJSON
	}
	return nil
}

var File_service_http_web_proto protoreflect.FileDescriptor

var file_service_http_web_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x77,
	0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x77, 0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22,
	0x39, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x1a, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x68, 0x74, 0x74, 0x70,
	0x57, 0x65, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x22,
	0x3f, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x22, 0x44, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x57,
	0x65, 0x62, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x50, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x69, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a,
	0x53, 0x4f, 0x4e, 0x22, 0x6c, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57,
	0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x54, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x57, 0x65, 0x62, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77,
	0x65, 0x62, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77,
	0x65, 0x62, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x66, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74,
	0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x22,
	0x5d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x61,
	0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x62, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57,
	0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x60, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65,
	0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x57, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e,
	0x22, 0x63, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x4a, 0x53, 0x4f, 0x4e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x54, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x57, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74,
	0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x60, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x63, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57,
	0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x75, 0x0a, 0x23, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x4a, 0x53,
	0x4f, 0x4e, 0x22, 0x63, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x5d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x61, 0x73, 0x74, 0x63, 0x67, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65,
	0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57,
	0x65, 0x62, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x63, 0x67, 0x69, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x63,
	0x67, 0x69, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x6c, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x6f, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74,
	0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x3f, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74,
	0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x54, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x5e,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x6c,
	0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x3e, 0x0a, 0x1e,
	0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1f,
	0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x72, 0x0a, 0x22, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22,
	0x40, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49,
	0x64, 0x22, 0x53, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x51, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x75, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x35, 0x0a, 0x15, 0x46, 0x69, 0x6e,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64,
	0x22, 0x32, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55,
	0x41, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x61,
	0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x75, 0x61, 0x6d,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x63, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x63,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x34, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x43, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x46, 0x69,
	0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x63, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x63, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x60, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x3a, 0x0a,
	0x1a, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x46, 0x69, 0x6e,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x63, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x3b, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x57, 0x65, 0x62, 0x49, 0x64, 0x22, 0x44,
	0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4a, 0x53, 0x4f, 0x4e, 0x32, 0xcf, 0x17, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x12, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x57, 0x65, 0x62, 0x50, 0x12, 0x1c, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x57, 0x65, 0x62, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x17, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x68, 0x61, 0x72, 0x73,
	0x65, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x1a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x1b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x49, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x4b, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x11,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x43, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x4b, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x1c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x27, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x46, 0x61, 0x73, 0x74, 0x63, 0x67, 0x69, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x46, 0x61, 0x73,
	0x74, 0x63, 0x67, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x19, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53,
	0x0a, 0x1a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a,
	0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x1b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x68, 0x0a, 0x19, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12,
	0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x41, 0x4d,
	0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x65, 0x62, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a,
	0x0e, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x41, 0x4d, 0x12,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62,
	0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x41, 0x4d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x43, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65,
	0x62, 0x43, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x66,
	0x69, 0x6e, 0x64, 0x48, 0x54, 0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_http_web_proto_rawDescOnce sync.Once
	file_service_http_web_proto_rawDescData = file_service_http_web_proto_rawDesc
)

func file_service_http_web_proto_rawDescGZIP() []byte {
	file_service_http_web_proto_rawDescOnce.Do(func() {
		file_service_http_web_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_http_web_proto_rawDescData)
	})
	return file_service_http_web_proto_rawDescData
}

var file_service_http_web_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_service_http_web_proto_goTypes = []interface{}{
	(*CreateHTTPWebRequest)(nil),                // 0: pb.CreateHTTPWebRequest
	(*CreateHTTPWebResponse)(nil),               // 1: pb.CreateHTTPWebResponse
	(*FindEnabledHTTPWebRequest)(nil),           // 2: pb.FindEnabledHTTPWebRequest
	(*FindEnabledHTTPWebResponse)(nil),          // 3: pb.FindEnabledHTTPWebResponse
	(*FindEnabledHTTPWebConfigRequest)(nil),     // 4: pb.FindEnabledHTTPWebConfigRequest
	(*FindEnabledHTTPWebConfigResponse)(nil),    // 5: pb.FindEnabledHTTPWebConfigResponse
	(*UpdateHTTPWebRequest)(nil),                // 6: pb.UpdateHTTPWebRequest
	(*UpdateHTTPWebCompressionRequest)(nil),     // 7: pb.UpdateHTTPWebCompressionRequest
	(*UpdateHTTPWebOptimizationRequest)(nil),    // 8: pb.UpdateHTTPWebOptimizationRequest
	(*UpdateHTTPWebWebPRequest)(nil),            // 9: pb.UpdateHTTPWebWebPRequest
	(*UpdateHTTPWebRemoteAddrRequest)(nil),      // 10: pb.UpdateHTTPWebRemoteAddrRequest
	(*UpdateHTTPWebCharsetRequest)(nil),         // 11: pb.UpdateHTTPWebCharsetRequest
	(*UpdateHTTPWebRequestHeaderRequest)(nil),   // 12: pb.UpdateHTTPWebRequestHeaderRequest
	(*UpdateHTTPWebResponseHeaderRequest)(nil),  // 13: pb.UpdateHTTPWebResponseHeaderRequest
	(*UpdateHTTPWebShutdownRequest)(nil),        // 14: pb.UpdateHTTPWebShutdownRequest
	(*UpdateHTTPWebPagesRequest)(nil),           // 15: pb.UpdateHTTPWebPagesRequest
	(*UpdateHTTPWebAccessLogRequest)(nil),       // 16: pb.UpdateHTTPWebAccessLogRequest
	(*UpdateHTTPWebStatRequest)(nil),            // 17: pb.UpdateHTTPWebStatRequest
	(*UpdateHTTPWebCacheRequest)(nil),           // 18: pb.UpdateHTTPWebCacheRequest
	(*UpdateHTTPWebFirewallRequest)(nil),        // 19: pb.UpdateHTTPWebFirewallRequest
	(*UpdateHTTPWebLocationsRequest)(nil),       // 20: pb.UpdateHTTPWebLocationsRequest
	(*UpdateHTTPWebRedirectToHTTPSRequest)(nil), // 21: pb.UpdateHTTPWebRedirectToHTTPSRequest
	(*UpdateHTTPWebWebsocketRequest)(nil),       // 22: pb.UpdateHTTPWebWebsocketRequest
	(*UpdateHTTPWebFastcgiRequest)(nil),         // 23: pb.UpdateHTTPWebFastcgiRequest
	(*UpdateHTTPWebRewriteRulesRequest)(nil),    // 24: pb.UpdateHTTPWebRewriteRulesRequest
	(*UpdateHTTPWebHostRedirectsRequest)(nil),   // 25: pb.UpdateHTTPWebHostRedirectsRequest
	(*FindHTTPWebHostRedirectsRequest)(nil),     // 26: pb.FindHTTPWebHostRedirectsRequest
	(*FindHTTPWebHostRedirectsResponse)(nil),    // 27: pb.FindHTTPWebHostRedirectsResponse
	(*UpdateHTTPWebAuthRequest)(nil),            // 28: pb.UpdateHTTPWebAuthRequest
	(*UpdateHTTPWebCommonRequest)(nil),          // 29: pb.UpdateHTTPWebCommonRequest
	(*UpdateHTTPWebRequestLimitRequest)(nil),    // 30: pb.UpdateHTTPWebRequestLimitRequest
	(*FindHTTPWebRequestLimitRequest)(nil),      // 31: pb.FindHTTPWebRequestLimitRequest
	(*FindHTTPWebRequestLimitResponse)(nil),     // 32: pb.FindHTTPWebRequestLimitResponse
	(*UpdateHTTPWebRequestScriptsRequest)(nil),  // 33: pb.UpdateHTTPWebRequestScriptsRequest
	(*FindHTTPWebRequestScriptsRequest)(nil),    // 34: pb.FindHTTPWebRequestScriptsRequest
	(*FindHTTPWebRequestScriptsResponse)(nil),   // 35: pb.FindHTTPWebRequestScriptsResponse
	(*UpdateHTTPWebUAMRequest)(nil),             // 36: pb.UpdateHTTPWebUAMRequest
	(*FindHTTPWebUAMRequest)(nil),               // 37: pb.FindHTTPWebUAMRequest
	(*FindHTTPWebUAMResponse)(nil),              // 38: pb.FindHTTPWebUAMResponse
	(*UpdateHTTPWebCCRequest)(nil),              // 39: pb.UpdateHTTPWebCCRequest
	(*FindHTTPWebCCRequest)(nil),                // 40: pb.FindHTTPWebCCRequest
	(*FindHTTPWebCCResponse)(nil),               // 41: pb.FindHTTPWebCCResponse
	(*UpdateHTTPWebReferersRequest)(nil),        // 42: pb.UpdateHTTPWebReferersRequest
	(*FindHTTPWebReferersRequest)(nil),          // 43: pb.FindHTTPWebReferersRequest
	(*FindHTTPWebReferersResponse)(nil),         // 44: pb.FindHTTPWebReferersResponse
	(*UpdateHTTPWebUserAgentRequest)(nil),       // 45: pb.UpdateHTTPWebUserAgentRequest
	(*FindHTTPWebUserAgentRequest)(nil),         // 46: pb.FindHTTPWebUserAgentRequest
	(*FindHTTPWebUserAgentResponse)(nil),        // 47: pb.FindHTTPWebUserAgentResponse
	(*HTTPWeb)(nil),                             // 48: pb.HTTPWeb
	(*RPCSuccess)(nil),                          // 49: pb.RPCSuccess
}
var file_service_http_web_proto_depIdxs = []int32{
	48, // 0: pb.FindEnabledHTTPWebResponse.httpWeb:type_name -> pb.HTTPWeb
	0,  // 1: pb.HTTPWebService.createHTTPWeb:input_type -> pb.CreateHTTPWebRequest
	2,  // 2: pb.HTTPWebService.findEnabledHTTPWeb:input_type -> pb.FindEnabledHTTPWebRequest
	4,  // 3: pb.HTTPWebService.findEnabledHTTPWebConfig:input_type -> pb.FindEnabledHTTPWebConfigRequest
	6,  // 4: pb.HTTPWebService.updateHTTPWeb:input_type -> pb.UpdateHTTPWebRequest
	7,  // 5: pb.HTTPWebService.updateHTTPWebCompression:input_type -> pb.UpdateHTTPWebCompressionRequest
	8,  // 6: pb.HTTPWebService.updateHTTPWebOptimization:input_type -> pb.UpdateHTTPWebOptimizationRequest
	9,  // 7: pb.HTTPWebService.updateHTTPWebWebP:input_type -> pb.UpdateHTTPWebWebPRequest
	10, // 8: pb.HTTPWebService.updateHTTPWebRemoteAddr:input_type -> pb.UpdateHTTPWebRemoteAddrRequest
	11, // 9: pb.HTTPWebService.updateHTTPWebCharset:input_type -> pb.UpdateHTTPWebCharsetRequest
	12, // 10: pb.HTTPWebService.updateHTTPWebRequestHeader:input_type -> pb.UpdateHTTPWebRequestHeaderRequest
	13, // 11: pb.HTTPWebService.updateHTTPWebResponseHeader:input_type -> pb.UpdateHTTPWebResponseHeaderRequest
	14, // 12: pb.HTTPWebService.updateHTTPWebShutdown:input_type -> pb.UpdateHTTPWebShutdownRequest
	15, // 13: pb.HTTPWebService.updateHTTPWebPages:input_type -> pb.UpdateHTTPWebPagesRequest
	16, // 14: pb.HTTPWebService.updateHTTPWebAccessLog:input_type -> pb.UpdateHTTPWebAccessLogRequest
	17, // 15: pb.HTTPWebService.updateHTTPWebStat:input_type -> pb.UpdateHTTPWebStatRequest
	18, // 16: pb.HTTPWebService.updateHTTPWebCache:input_type -> pb.UpdateHTTPWebCacheRequest
	19, // 17: pb.HTTPWebService.updateHTTPWebFirewall:input_type -> pb.UpdateHTTPWebFirewallRequest
	20, // 18: pb.HTTPWebService.updateHTTPWebLocations:input_type -> pb.UpdateHTTPWebLocationsRequest
	21, // 19: pb.HTTPWebService.updateHTTPWebRedirectToHTTPS:input_type -> pb.UpdateHTTPWebRedirectToHTTPSRequest
	22, // 20: pb.HTTPWebService.updateHTTPWebWebsocket:input_type -> pb.UpdateHTTPWebWebsocketRequest
	23, // 21: pb.HTTPWebService.updateHTTPWebFastcgi:input_type -> pb.UpdateHTTPWebFastcgiRequest
	24, // 22: pb.HTTPWebService.updateHTTPWebRewriteRules:input_type -> pb.UpdateHTTPWebRewriteRulesRequest
	25, // 23: pb.HTTPWebService.updateHTTPWebHostRedirects:input_type -> pb.UpdateHTTPWebHostRedirectsRequest
	26, // 24: pb.HTTPWebService.findHTTPWebHostRedirects:input_type -> pb.FindHTTPWebHostRedirectsRequest
	28, // 25: pb.HTTPWebService.updateHTTPWebAuth:input_type -> pb.UpdateHTTPWebAuthRequest
	29, // 26: pb.HTTPWebService.updateHTTPWebCommon:input_type -> pb.UpdateHTTPWebCommonRequest
	30, // 27: pb.HTTPWebService.updateHTTPWebRequestLimit:input_type -> pb.UpdateHTTPWebRequestLimitRequest
	31, // 28: pb.HTTPWebService.findHTTPWebRequestLimit:input_type -> pb.FindHTTPWebRequestLimitRequest
	33, // 29: pb.HTTPWebService.updateHTTPWebRequestScripts:input_type -> pb.UpdateHTTPWebRequestScriptsRequest
	34, // 30: pb.HTTPWebService.findHTTPWebRequestScripts:input_type -> pb.FindHTTPWebRequestScriptsRequest
	36, // 31: pb.HTTPWebService.updateHTTPWebUAM:input_type -> pb.UpdateHTTPWebUAMRequest
	37, // 32: pb.HTTPWebService.findHTTPWebUAM:input_type -> pb.FindHTTPWebUAMRequest
	39, // 33: pb.HTTPWebService.updateHTTPWebCC:input_type -> pb.UpdateHTTPWebCCRequest
	40, // 34: pb.HTTPWebService.findHTTPWebCC:input_type -> pb.FindHTTPWebCCRequest
	42, // 35: pb.HTTPWebService.updateHTTPWebReferers:input_type -> pb.UpdateHTTPWebReferersRequest
	43, // 36: pb.HTTPWebService.findHTTPWebReferers:input_type -> pb.FindHTTPWebReferersRequest
	45, // 37: pb.HTTPWebService.updateHTTPWebUserAgent:input_type -> pb.UpdateHTTPWebUserAgentRequest
	46, // 38: pb.HTTPWebService.findHTTPWebUserAgent:input_type -> pb.FindHTTPWebUserAgentRequest
	1,  // 39: pb.HTTPWebService.createHTTPWeb:output_type -> pb.CreateHTTPWebResponse
	3,  // 40: pb.HTTPWebService.findEnabledHTTPWeb:output_type -> pb.FindEnabledHTTPWebResponse
	5,  // 41: pb.HTTPWebService.findEnabledHTTPWebConfig:output_type -> pb.FindEnabledHTTPWebConfigResponse
	49, // 42: pb.HTTPWebService.updateHTTPWeb:output_type -> pb.RPCSuccess
	49, // 43: pb.HTTPWebService.updateHTTPWebCompression:output_type -> pb.RPCSuccess
	49, // 44: pb.HTTPWebService.updateHTTPWebOptimization:output_type -> pb.RPCSuccess
	49, // 45: pb.HTTPWebService.updateHTTPWebWebP:output_type -> pb.RPCSuccess
	49, // 46: pb.HTTPWebService.updateHTTPWebRemoteAddr:output_type -> pb.RPCSuccess
	49, // 47: pb.HTTPWebService.updateHTTPWebCharset:output_type -> pb.RPCSuccess
	49, // 48: pb.HTTPWebService.updateHTTPWebRequestHeader:output_type -> pb.RPCSuccess
	49, // 49: pb.HTTPWebService.updateHTTPWebResponseHeader:output_type -> pb.RPCSuccess
	49, // 50: pb.HTTPWebService.updateHTTPWebShutdown:output_type -> pb.RPCSuccess
	49, // 51: pb.HTTPWebService.updateHTTPWebPages:output_type -> pb.RPCSuccess
	49, // 52: pb.HTTPWebService.updateHTTPWebAccessLog:output_type -> pb.RPCSuccess
	49, // 53: pb.HTTPWebService.updateHTTPWebStat:output_type -> pb.RPCSuccess
	49, // 54: pb.HTTPWebService.updateHTTPWebCache:output_type -> pb.RPCSuccess
	49, // 55: pb.HTTPWebService.updateHTTPWebFirewall:output_type -> pb.RPCSuccess
	49, // 56: pb.HTTPWebService.updateHTTPWebLocations:output_type -> pb.RPCSuccess
	49, // 57: pb.HTTPWebService.updateHTTPWebRedirectToHTTPS:output_type -> pb.RPCSuccess
	49, // 58: pb.HTTPWebService.updateHTTPWebWebsocket:output_type -> pb.RPCSuccess
	49, // 59: pb.HTTPWebService.updateHTTPWebFastcgi:output_type -> pb.RPCSuccess
	49, // 60: pb.HTTPWebService.updateHTTPWebRewriteRules:output_type -> pb.RPCSuccess
	49, // 61: pb.HTTPWebService.updateHTTPWebHostRedirects:output_type -> pb.RPCSuccess
	27, // 62: pb.HTTPWebService.findHTTPWebHostRedirects:output_type -> pb.FindHTTPWebHostRedirectsResponse
	49, // 63: pb.HTTPWebService.updateHTTPWebAuth:output_type -> pb.RPCSuccess
	49, // 64: pb.HTTPWebService.updateHTTPWebCommon:output_type -> pb.RPCSuccess
	49, // 65: pb.HTTPWebService.updateHTTPWebRequestLimit:output_type -> pb.RPCSuccess
	32, // 66: pb.HTTPWebService.findHTTPWebRequestLimit:output_type -> pb.FindHTTPWebRequestLimitResponse
	49, // 67: pb.HTTPWebService.updateHTTPWebRequestScripts:output_type -> pb.RPCSuccess
	35, // 68: pb.HTTPWebService.findHTTPWebRequestScripts:output_type -> pb.FindHTTPWebRequestScriptsResponse
	49, // 69: pb.HTTPWebService.updateHTTPWebUAM:output_type -> pb.RPCSuccess
	38, // 70: pb.HTTPWebService.findHTTPWebUAM:output_type -> pb.FindHTTPWebUAMResponse
	49, // 71: pb.HTTPWebService.updateHTTPWebCC:output_type -> pb.RPCSuccess
	41, // 72: pb.HTTPWebService.findHTTPWebCC:output_type -> pb.FindHTTPWebCCResponse
	49, // 73: pb.HTTPWebService.updateHTTPWebReferers:output_type -> pb.RPCSuccess
	44, // 74: pb.HTTPWebService.findHTTPWebReferers:output_type -> pb.FindHTTPWebReferersResponse
	49, // 75: pb.HTTPWebService.updateHTTPWebUserAgent:output_type -> pb.RPCSuccess
	47, // 76: pb.HTTPWebService.findHTTPWebUserAgent:output_type -> pb.FindHTTPWebUserAgentResponse
	39, // [39:77] is the sub-list for method output_type
	1,  // [1:39] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_service_http_web_proto_init() }
func file_service_http_web_proto_init() {
	if File_service_http_web_proto != nil {
		return
	}
	file_models_model_http_web_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_http_web_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPWebResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPWebConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCompressionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebOptimizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebWebPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRemoteAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCharsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequestHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebResponseHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebAccessLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebFirewallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRedirectToHTTPSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebWebsocketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebFastcgiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRewriteRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebHostRedirectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebHostRedirectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebHostRedirectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequestLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebRequestLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebRequestLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebRequestScriptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebRequestScriptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebRequestScriptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebUAMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebUAMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebUAMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebCCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebCCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebCCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebReferersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebReferersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebReferersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPWebUserAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebUserAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_web_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHTTPWebUserAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_http_web_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_http_web_proto_goTypes,
		DependencyIndexes: file_service_http_web_proto_depIdxs,
		MessageInfos:      file_service_http_web_proto_msgTypes,
	}.Build()
	File_service_http_web_proto = out.File
	file_service_http_web_proto_rawDesc = nil
	file_service_http_web_proto_goTypes = nil
	file_service_http_web_proto_depIdxs = nil
}
