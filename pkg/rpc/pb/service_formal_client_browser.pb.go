// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_formal_client_browser.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建浏览器信息
type CreateFormalClientBrowserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Codes  []string `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"`
	DataId string   `protobuf:"bytes,3,opt,name=dataId,proto3" json:"dataId,omitempty"`
}

func (x *CreateFormalClientBrowserRequest) Reset() {
	*x = CreateFormalClientBrowserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_formal_client_browser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFormalClientBrowserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFormalClientBrowserRequest) ProtoMessage() {}

func (x *CreateFormalClientBrowserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_formal_client_browser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFormalClientBrowserRequest.ProtoReflect.Descriptor instead.
func (*CreateFormalClientBrowserRequest) Descriptor() ([]byte, []int) {
	return file_service_formal_client_browser_proto_rawDescGZIP(), []int{0}
}

func (x *CreateFormalClientBrowserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFormalClientBrowserRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *CreateFormalClientBrowserRequest) GetDataId() string {
	if x != nil {
		return x.DataId
	}
	return ""
}

type CreateFormalClientBrowserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormalClientBrowserId int64 `protobuf:"varint,1,opt,name=formalClientBrowserId,proto3" json:"formalClientBrowserId,omitempty"`
}

func (x *CreateFormalClientBrowserResponse) Reset() {
	*x = CreateFormalClientBrowserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_formal_client_browser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFormalClientBrowserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFormalClientBrowserResponse) ProtoMessage() {}

func (x *CreateFormalClientBrowserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_formal_client_browser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFormalClientBrowserResponse.ProtoReflect.Descriptor instead.
func (*CreateFormalClientBrowserResponse) Descriptor() ([]byte, []int) {
	return file_service_formal_client_browser_proto_rawDescGZIP(), []int{1}
}

func (x *CreateFormalClientBrowserResponse) GetFormalClientBrowserId() int64 {
	if x != nil {
		return x.FormalClientBrowserId
	}
	return 0
}

// 计算浏览器信息数量
type CountFormalClientBrowsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"` // 可选
}

func (x *CountFormalClientBrowsersRequest) Reset() {
	*x = CountFormalClientBrowsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_formal_client_browser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFormalClientBrowsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFormalClientBrowsersRequest) ProtoMessage() {}

func (x *CountFormalClientBrowsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_formal_client_browser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFormalClientBrowsersRequest.ProtoReflect.Descriptor instead.
func (*CountFormalClientBrowsersRequest) Descriptor() ([]byte, []int) {
	return file_service_formal_client_browser_proto_rawDescGZIP(), []int{2}
}

func (x *CountFormalClientBrowsersRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

// 列出单页浏览器信息
type ListFormalClientBrowsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"` // 可选
	Offset  int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size    int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListFormalClientBrowsersRequest) Reset() {
	*x = ListFormalClientBrowsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_formal_client_browser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFormalClientBrowsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFormalClientBrowsersRequest) ProtoMessage() {}

func (x *ListFormalClientBrowsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_formal_client_browser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFormalClientBrowsersRequest.ProtoReflect.Descriptor instead.
func (*ListFormalClientBrowsersRequest) Descriptor() ([]byte, []int) {
	return file_service_formal_client_browser_proto_rawDescGZIP(), []int{3}
}

func (x *ListFormalClientBrowsersRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListFormalClientBrowsersRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListFormalClientBrowsersRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListFormalClientBrowsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormalClientBrowsers []*FormalClientBrowser `protobuf:"bytes,1,rep,name=formalClientBrowsers,proto3" json:"formalClientBrowsers,omitempty"`
}

func (x *ListFormalClientBrowsersResponse) Reset() {
	*x = ListFormalClientBrowsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_formal_client_browser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFormalClientBrowsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFormalClientBrowsersResponse) ProtoMessage() {}

func (x *ListFormalClientBrowsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_formal_client_browser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFormalClientBrowsersResponse.ProtoReflect.Descriptor instead.
func (*ListFormalClientBrowsersResponse) Descriptor() ([]byte, []int) {
	return file_service_formal_client_browser_proto_rawDescGZIP(), []int{4}
}

func (x *ListFormalClientBrowsersResponse) GetFormalClientBrowsers() []*FormalClientBrowser {
	if x != nil {
		return x.FormalClientBrowsers
	}
	return nil
}

// 修改浏览器信息
type UpdateFormalClientBrowserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormalClientBrowserId int64    `protobuf:"varint,1,opt,name=formalClientBrowserId,proto3" json:"formalClientBrowserId,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Codes                 []string `protobuf:"bytes,3,rep,name=codes,proto3" json:"codes,omitempty"`
	DataId                string   `protobuf:"bytes,4,opt,name=dataId,proto3" json:"dataId,omitempty"`
}

func (x *UpdateFormalClientBrowserRequest) Reset() {
	*x = UpdateFormalClientBrowserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_formal_client_browser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFormalClientBrowserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFormalClientBrowserRequest) ProtoMessage() {}

func (x *UpdateFormalClientBrowserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_formal_client_browser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFormalClientBrowserRequest.ProtoReflect.Descriptor instead.
func (*UpdateFormalClientBrowserRequest) Descriptor() ([]byte, []int) {
	return file_service_formal_client_browser_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateFormalClientBrowserRequest) GetFormalClientBrowserId() int64 {
	if x != nil {
		return x.FormalClientBrowserId
	}
	return 0
}

func (x *UpdateFormalClientBrowserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFormalClientBrowserRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *UpdateFormalClientBrowserRequest) GetDataId() string {
	if x != nil {
		return x.DataId
	}
	return ""
}

// 通过dataId查询浏览器信息
type FindFormalClientBrowserWithDataIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId string `protobuf:"bytes,1,opt,name=dataId,proto3" json:"dataId,omitempty"`
}

func (x *FindFormalClientBrowserWithDataIdRequest) Reset() {
	*x = FindFormalClientBrowserWithDataIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_formal_client_browser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFormalClientBrowserWithDataIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFormalClientBrowserWithDataIdRequest) ProtoMessage() {}

func (x *FindFormalClientBrowserWithDataIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_formal_client_browser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFormalClientBrowserWithDataIdRequest.ProtoReflect.Descriptor instead.
func (*FindFormalClientBrowserWithDataIdRequest) Descriptor() ([]byte, []int) {
	return file_service_formal_client_browser_proto_rawDescGZIP(), []int{6}
}

func (x *FindFormalClientBrowserWithDataIdRequest) GetDataId() string {
	if x != nil {
		return x.DataId
	}
	return ""
}

type FindFormalClientBrowserWithDataIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormalClientBrowser *FormalClientBrowser `protobuf:"bytes,1,opt,name=formalClientBrowser,proto3" json:"formalClientBrowser,omitempty"`
}

func (x *FindFormalClientBrowserWithDataIdResponse) Reset() {
	*x = FindFormalClientBrowserWithDataIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_formal_client_browser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFormalClientBrowserWithDataIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFormalClientBrowserWithDataIdResponse) ProtoMessage() {}

func (x *FindFormalClientBrowserWithDataIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_formal_client_browser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFormalClientBrowserWithDataIdResponse.ProtoReflect.Descriptor instead.
func (*FindFormalClientBrowserWithDataIdResponse) Descriptor() ([]byte, []int) {
	return file_service_formal_client_browser_proto_rawDescGZIP(), []int{7}
}

func (x *FindFormalClientBrowserWithDataIdResponse) GetFormalClientBrowser() *FormalClientBrowser {
	if x != nil {
		return x.FormalClientBrowser
	}
	return nil
}

var File_service_formal_client_browser_proto protoreflect.FileDescriptor

var file_service_formal_client_browser_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64,
	0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x3c, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x67, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x6f, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x29, 0x46, 0x69, 0x6e, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x13, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x32, 0x9c, 0x04, 0x0a, 0x1a, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x68, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x19, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x21, 0x66, 0x69, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_formal_client_browser_proto_rawDescOnce sync.Once
	file_service_formal_client_browser_proto_rawDescData = file_service_formal_client_browser_proto_rawDesc
)

func file_service_formal_client_browser_proto_rawDescGZIP() []byte {
	file_service_formal_client_browser_proto_rawDescOnce.Do(func() {
		file_service_formal_client_browser_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_formal_client_browser_proto_rawDescData)
	})
	return file_service_formal_client_browser_proto_rawDescData
}

var file_service_formal_client_browser_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_service_formal_client_browser_proto_goTypes = []interface{}{
	(*CreateFormalClientBrowserRequest)(nil),          // 0: pb.CreateFormalClientBrowserRequest
	(*CreateFormalClientBrowserResponse)(nil),         // 1: pb.CreateFormalClientBrowserResponse
	(*CountFormalClientBrowsersRequest)(nil),          // 2: pb.CountFormalClientBrowsersRequest
	(*ListFormalClientBrowsersRequest)(nil),           // 3: pb.ListFormalClientBrowsersRequest
	(*ListFormalClientBrowsersResponse)(nil),          // 4: pb.ListFormalClientBrowsersResponse
	(*UpdateFormalClientBrowserRequest)(nil),          // 5: pb.UpdateFormalClientBrowserRequest
	(*FindFormalClientBrowserWithDataIdRequest)(nil),  // 6: pb.FindFormalClientBrowserWithDataIdRequest
	(*FindFormalClientBrowserWithDataIdResponse)(nil), // 7: pb.FindFormalClientBrowserWithDataIdResponse
	(*FormalClientBrowser)(nil),                       // 8: pb.FormalClientBrowser
	(*RPCCountResponse)(nil),                          // 9: pb.RPCCountResponse
	(*RPCSuccess)(nil),                                // 10: pb.RPCSuccess
}
var file_service_formal_client_browser_proto_depIdxs = []int32{
	8,  // 0: pb.ListFormalClientBrowsersResponse.formalClientBrowsers:type_name -> pb.FormalClientBrowser
	8,  // 1: pb.FindFormalClientBrowserWithDataIdResponse.formalClientBrowser:type_name -> pb.FormalClientBrowser
	0,  // 2: pb.FormalClientBrowserService.createFormalClientBrowser:input_type -> pb.CreateFormalClientBrowserRequest
	2,  // 3: pb.FormalClientBrowserService.countFormalClientBrowsers:input_type -> pb.CountFormalClientBrowsersRequest
	3,  // 4: pb.FormalClientBrowserService.listFormalClientBrowsers:input_type -> pb.ListFormalClientBrowsersRequest
	5,  // 5: pb.FormalClientBrowserService.updateFormalClientBrowser:input_type -> pb.UpdateFormalClientBrowserRequest
	6,  // 6: pb.FormalClientBrowserService.findFormalClientBrowserWithDataId:input_type -> pb.FindFormalClientBrowserWithDataIdRequest
	1,  // 7: pb.FormalClientBrowserService.createFormalClientBrowser:output_type -> pb.CreateFormalClientBrowserResponse
	9,  // 8: pb.FormalClientBrowserService.countFormalClientBrowsers:output_type -> pb.RPCCountResponse
	4,  // 9: pb.FormalClientBrowserService.listFormalClientBrowsers:output_type -> pb.ListFormalClientBrowsersResponse
	10, // 10: pb.FormalClientBrowserService.updateFormalClientBrowser:output_type -> pb.RPCSuccess
	7,  // 11: pb.FormalClientBrowserService.findFormalClientBrowserWithDataId:output_type -> pb.FindFormalClientBrowserWithDataIdResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_formal_client_browser_proto_init() }
func file_service_formal_client_browser_proto_init() {
	if File_service_formal_client_browser_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_formal_client_browser_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_formal_client_browser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFormalClientBrowserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_formal_client_browser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFormalClientBrowserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_formal_client_browser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFormalClientBrowsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_formal_client_browser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFormalClientBrowsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_formal_client_browser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFormalClientBrowsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_formal_client_browser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFormalClientBrowserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_formal_client_browser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFormalClientBrowserWithDataIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_formal_client_browser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFormalClientBrowserWithDataIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_formal_client_browser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_formal_client_browser_proto_goTypes,
		DependencyIndexes: file_service_formal_client_browser_proto_depIdxs,
		MessageInfos:      file_service_formal_client_browser_proto_msgTypes,
	}.Build()
	File_service_formal_client_browser_proto = out.File
	file_service_formal_client_browser_proto_rawDesc = nil
	file_service_formal_client_browser_proto_goTypes = nil
	file_service_formal_client_browser_proto_depIdxs = nil
}
