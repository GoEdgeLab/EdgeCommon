// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_db_node.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建数据库节点
type CreateDBNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOn        bool   `protobuf:"varint,1,opt,name=isOn,proto3" json:"isOn,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Host        string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Port        int32  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Database    string `protobuf:"bytes,6,opt,name=database,proto3" json:"database,omitempty"`
	Username    string `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	Charset     string `protobuf:"bytes,9,opt,name=charset,proto3" json:"charset,omitempty"`
}

func (x *CreateDBNodeRequest) Reset() {
	*x = CreateDBNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_db_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDBNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDBNodeRequest) ProtoMessage() {}

func (x *CreateDBNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_db_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDBNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateDBNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_db_node_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDBNodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *CreateDBNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDBNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateDBNodeRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CreateDBNodeRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CreateDBNodeRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *CreateDBNodeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateDBNodeRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateDBNodeRequest) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

type CreateDBNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *CreateDBNodeResponse) Reset() {
	*x = CreateDBNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_db_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDBNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDBNodeResponse) ProtoMessage() {}

func (x *CreateDBNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_db_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDBNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateDBNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_db_node_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDBNodeResponse) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// 修改数据库节点
type UpdateDBNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IsOn        bool   `protobuf:"varint,4,opt,name=isOn,proto3" json:"isOn,omitempty"`
	Host        string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Port        int32  `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	Database    string `protobuf:"bytes,7,opt,name=database,proto3" json:"database,omitempty"`
	Username    string `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	Charset     string `protobuf:"bytes,10,opt,name=charset,proto3" json:"charset,omitempty"`
}

func (x *UpdateDBNodeRequest) Reset() {
	*x = UpdateDBNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_db_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDBNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDBNodeRequest) ProtoMessage() {}

func (x *UpdateDBNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_db_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDBNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateDBNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_db_node_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDBNodeRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *UpdateDBNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDBNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDBNodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateDBNodeRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *UpdateDBNodeRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *UpdateDBNodeRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *UpdateDBNodeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateDBNodeRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateDBNodeRequest) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

// 删除节点
type DeleteDBNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *DeleteDBNodeRequest) Reset() {
	*x = DeleteDBNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_db_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDBNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDBNodeRequest) ProtoMessage() {}

func (x *DeleteDBNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_db_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDBNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteDBNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_db_node_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDBNodeRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// 计算可用的数据库节点数量
type CountAllEnabledDBNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllEnabledDBNodesRequest) Reset() {
	*x = CountAllEnabledDBNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_db_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledDBNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledDBNodesRequest) ProtoMessage() {}

func (x *CountAllEnabledDBNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_db_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledDBNodesRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledDBNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_db_node_proto_rawDescGZIP(), []int{4}
}

type CountAllEnabledDBNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountAllEnabledDBNodesResponse) Reset() {
	*x = CountAllEnabledDBNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_db_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledDBNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledDBNodesResponse) ProtoMessage() {}

func (x *CountAllEnabledDBNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_db_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledDBNodesResponse.ProtoReflect.Descriptor instead.
func (*CountAllEnabledDBNodesResponse) Descriptor() ([]byte, []int) {
	return file_service_db_node_proto_rawDescGZIP(), []int{5}
}

func (x *CountAllEnabledDBNodesResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 列出单页的数据库节点
type ListEnabledDBNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledDBNodesRequest) Reset() {
	*x = ListEnabledDBNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_db_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledDBNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledDBNodesRequest) ProtoMessage() {}

func (x *ListEnabledDBNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_db_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledDBNodesRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledDBNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_db_node_proto_rawDescGZIP(), []int{6}
}

func (x *ListEnabledDBNodesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledDBNodesRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledDBNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*DBNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListEnabledDBNodesResponse) Reset() {
	*x = ListEnabledDBNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_db_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledDBNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledDBNodesResponse) ProtoMessage() {}

func (x *ListEnabledDBNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_db_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledDBNodesResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledDBNodesResponse) Descriptor() ([]byte, []int) {
	return file_service_db_node_proto_rawDescGZIP(), []int{7}
}

func (x *ListEnabledDBNodesResponse) GetNodes() []*DBNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// 根据ID查找可用的数据库节点
type FindEnabledDBNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *FindEnabledDBNodeRequest) Reset() {
	*x = FindEnabledDBNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_db_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledDBNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledDBNodeRequest) ProtoMessage() {}

func (x *FindEnabledDBNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_db_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledDBNodeRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledDBNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_db_node_proto_rawDescGZIP(), []int{8}
}

func (x *FindEnabledDBNodeRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type FindEnabledDBNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *DBNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *FindEnabledDBNodeResponse) Reset() {
	*x = FindEnabledDBNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_db_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledDBNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledDBNodeResponse) ProtoMessage() {}

func (x *FindEnabledDBNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_db_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledDBNodeResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledDBNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_db_node_proto_rawDescGZIP(), []int{9}
}

func (x *FindEnabledDBNodeResponse) GetNode() *DBNode {
	if x != nil {
		return x.Node
	}
	return nil
}

var File_service_db_node_proto protoreflect.FileDescriptor

var file_service_db_node_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x13, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x42, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x4f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x22, 0x2e, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x02, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x22, 0x2d, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x42,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x1e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44,
	0x42, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3e, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x42, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x32, 0x0a,
	0x18, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x42, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x22, 0x3b, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0xd8,
	0x03, 0x0a, 0x0d, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x42, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x42, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x42, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x5f, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x42, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x42, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x42, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_db_node_proto_rawDescOnce sync.Once
	file_service_db_node_proto_rawDescData = file_service_db_node_proto_rawDesc
)

func file_service_db_node_proto_rawDescGZIP() []byte {
	file_service_db_node_proto_rawDescOnce.Do(func() {
		file_service_db_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_db_node_proto_rawDescData)
	})
	return file_service_db_node_proto_rawDescData
}

var file_service_db_node_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_service_db_node_proto_goTypes = []interface{}{
	(*CreateDBNodeRequest)(nil),            // 0: pb.CreateDBNodeRequest
	(*CreateDBNodeResponse)(nil),           // 1: pb.CreateDBNodeResponse
	(*UpdateDBNodeRequest)(nil),            // 2: pb.UpdateDBNodeRequest
	(*DeleteDBNodeRequest)(nil),            // 3: pb.DeleteDBNodeRequest
	(*CountAllEnabledDBNodesRequest)(nil),  // 4: pb.CountAllEnabledDBNodesRequest
	(*CountAllEnabledDBNodesResponse)(nil), // 5: pb.CountAllEnabledDBNodesResponse
	(*ListEnabledDBNodesRequest)(nil),      // 6: pb.ListEnabledDBNodesRequest
	(*ListEnabledDBNodesResponse)(nil),     // 7: pb.ListEnabledDBNodesResponse
	(*FindEnabledDBNodeRequest)(nil),       // 8: pb.FindEnabledDBNodeRequest
	(*FindEnabledDBNodeResponse)(nil),      // 9: pb.FindEnabledDBNodeResponse
	(*DBNode)(nil),                         // 10: pb.DBNode
	(*RPCUpdateSuccess)(nil),               // 11: pb.RPCUpdateSuccess
	(*RPCDeleteSuccess)(nil),               // 12: pb.RPCDeleteSuccess
}
var file_service_db_node_proto_depIdxs = []int32{
	10, // 0: pb.ListEnabledDBNodesResponse.nodes:type_name -> pb.DBNode
	10, // 1: pb.FindEnabledDBNodeResponse.node:type_name -> pb.DBNode
	0,  // 2: pb.DBNodeService.createDBNode:input_type -> pb.CreateDBNodeRequest
	2,  // 3: pb.DBNodeService.updateDBNode:input_type -> pb.UpdateDBNodeRequest
	3,  // 4: pb.DBNodeService.deleteDBNode:input_type -> pb.DeleteDBNodeRequest
	4,  // 5: pb.DBNodeService.countAllEnabledDBNodes:input_type -> pb.CountAllEnabledDBNodesRequest
	6,  // 6: pb.DBNodeService.listEnabledDBNodes:input_type -> pb.ListEnabledDBNodesRequest
	8,  // 7: pb.DBNodeService.findEnabledDBNode:input_type -> pb.FindEnabledDBNodeRequest
	1,  // 8: pb.DBNodeService.createDBNode:output_type -> pb.CreateDBNodeResponse
	11, // 9: pb.DBNodeService.updateDBNode:output_type -> pb.RPCUpdateSuccess
	12, // 10: pb.DBNodeService.deleteDBNode:output_type -> pb.RPCDeleteSuccess
	5,  // 11: pb.DBNodeService.countAllEnabledDBNodes:output_type -> pb.CountAllEnabledDBNodesResponse
	7,  // 12: pb.DBNodeService.listEnabledDBNodes:output_type -> pb.ListEnabledDBNodesResponse
	9,  // 13: pb.DBNodeService.findEnabledDBNode:output_type -> pb.FindEnabledDBNodeResponse
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_db_node_proto_init() }
func file_service_db_node_proto_init() {
	if File_service_db_node_proto != nil {
		return
	}
	file_model_db_node_proto_init()
	file_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_db_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDBNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_db_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDBNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_db_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDBNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_db_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDBNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_db_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledDBNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_db_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledDBNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_db_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledDBNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_db_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledDBNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_db_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledDBNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_db_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledDBNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_db_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_db_node_proto_goTypes,
		DependencyIndexes: file_service_db_node_proto_depIdxs,
		MessageInfos:      file_service_db_node_proto_msgTypes,
	}.Build()
	File_service_db_node_proto = out.File
	file_service_db_node_proto_rawDesc = nil
	file_service_db_node_proto_goTypes = nil
	file_service_db_node_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DBNodeServiceClient is the client API for DBNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DBNodeServiceClient interface {
	// 创建数据库节点
	CreateDBNode(ctx context.Context, in *CreateDBNodeRequest, opts ...grpc.CallOption) (*CreateDBNodeResponse, error)
	// 修改数据库节点
	UpdateDBNode(ctx context.Context, in *UpdateDBNodeRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 删除节点
	DeleteDBNode(ctx context.Context, in *DeleteDBNodeRequest, opts ...grpc.CallOption) (*RPCDeleteSuccess, error)
	// 计算可用的数据库节点数量
	CountAllEnabledDBNodes(ctx context.Context, in *CountAllEnabledDBNodesRequest, opts ...grpc.CallOption) (*CountAllEnabledDBNodesResponse, error)
	// 列出单页的数据库节点
	ListEnabledDBNodes(ctx context.Context, in *ListEnabledDBNodesRequest, opts ...grpc.CallOption) (*ListEnabledDBNodesResponse, error)
	// 根据ID查找可用的数据库节点
	FindEnabledDBNode(ctx context.Context, in *FindEnabledDBNodeRequest, opts ...grpc.CallOption) (*FindEnabledDBNodeResponse, error)
}

type dBNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDBNodeServiceClient(cc grpc.ClientConnInterface) DBNodeServiceClient {
	return &dBNodeServiceClient{cc}
}

func (c *dBNodeServiceClient) CreateDBNode(ctx context.Context, in *CreateDBNodeRequest, opts ...grpc.CallOption) (*CreateDBNodeResponse, error) {
	out := new(CreateDBNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.DBNodeService/createDBNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBNodeServiceClient) UpdateDBNode(ctx context.Context, in *UpdateDBNodeRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.DBNodeService/updateDBNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBNodeServiceClient) DeleteDBNode(ctx context.Context, in *DeleteDBNodeRequest, opts ...grpc.CallOption) (*RPCDeleteSuccess, error) {
	out := new(RPCDeleteSuccess)
	err := c.cc.Invoke(ctx, "/pb.DBNodeService/deleteDBNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBNodeServiceClient) CountAllEnabledDBNodes(ctx context.Context, in *CountAllEnabledDBNodesRequest, opts ...grpc.CallOption) (*CountAllEnabledDBNodesResponse, error) {
	out := new(CountAllEnabledDBNodesResponse)
	err := c.cc.Invoke(ctx, "/pb.DBNodeService/countAllEnabledDBNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBNodeServiceClient) ListEnabledDBNodes(ctx context.Context, in *ListEnabledDBNodesRequest, opts ...grpc.CallOption) (*ListEnabledDBNodesResponse, error) {
	out := new(ListEnabledDBNodesResponse)
	err := c.cc.Invoke(ctx, "/pb.DBNodeService/listEnabledDBNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBNodeServiceClient) FindEnabledDBNode(ctx context.Context, in *FindEnabledDBNodeRequest, opts ...grpc.CallOption) (*FindEnabledDBNodeResponse, error) {
	out := new(FindEnabledDBNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.DBNodeService/findEnabledDBNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBNodeServiceServer is the server API for DBNodeService service.
type DBNodeServiceServer interface {
	// 创建数据库节点
	CreateDBNode(context.Context, *CreateDBNodeRequest) (*CreateDBNodeResponse, error)
	// 修改数据库节点
	UpdateDBNode(context.Context, *UpdateDBNodeRequest) (*RPCUpdateSuccess, error)
	// 删除节点
	DeleteDBNode(context.Context, *DeleteDBNodeRequest) (*RPCDeleteSuccess, error)
	// 计算可用的数据库节点数量
	CountAllEnabledDBNodes(context.Context, *CountAllEnabledDBNodesRequest) (*CountAllEnabledDBNodesResponse, error)
	// 列出单页的数据库节点
	ListEnabledDBNodes(context.Context, *ListEnabledDBNodesRequest) (*ListEnabledDBNodesResponse, error)
	// 根据ID查找可用的数据库节点
	FindEnabledDBNode(context.Context, *FindEnabledDBNodeRequest) (*FindEnabledDBNodeResponse, error)
}

// UnimplementedDBNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDBNodeServiceServer struct {
}

func (*UnimplementedDBNodeServiceServer) CreateDBNode(context.Context, *CreateDBNodeRequest) (*CreateDBNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDBNode not implemented")
}
func (*UnimplementedDBNodeServiceServer) UpdateDBNode(context.Context, *UpdateDBNodeRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDBNode not implemented")
}
func (*UnimplementedDBNodeServiceServer) DeleteDBNode(context.Context, *DeleteDBNodeRequest) (*RPCDeleteSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDBNode not implemented")
}
func (*UnimplementedDBNodeServiceServer) CountAllEnabledDBNodes(context.Context, *CountAllEnabledDBNodesRequest) (*CountAllEnabledDBNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledDBNodes not implemented")
}
func (*UnimplementedDBNodeServiceServer) ListEnabledDBNodes(context.Context, *ListEnabledDBNodesRequest) (*ListEnabledDBNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledDBNodes not implemented")
}
func (*UnimplementedDBNodeServiceServer) FindEnabledDBNode(context.Context, *FindEnabledDBNodeRequest) (*FindEnabledDBNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledDBNode not implemented")
}

func RegisterDBNodeServiceServer(s *grpc.Server, srv DBNodeServiceServer) {
	s.RegisterService(&_DBNodeService_serviceDesc, srv)
}

func _DBNodeService_CreateDBNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDBNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBNodeServiceServer).CreateDBNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DBNodeService/CreateDBNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBNodeServiceServer).CreateDBNode(ctx, req.(*CreateDBNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBNodeService_UpdateDBNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDBNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBNodeServiceServer).UpdateDBNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DBNodeService/UpdateDBNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBNodeServiceServer).UpdateDBNode(ctx, req.(*UpdateDBNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBNodeService_DeleteDBNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDBNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBNodeServiceServer).DeleteDBNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DBNodeService/DeleteDBNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBNodeServiceServer).DeleteDBNode(ctx, req.(*DeleteDBNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBNodeService_CountAllEnabledDBNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledDBNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBNodeServiceServer).CountAllEnabledDBNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DBNodeService/CountAllEnabledDBNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBNodeServiceServer).CountAllEnabledDBNodes(ctx, req.(*CountAllEnabledDBNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBNodeService_ListEnabledDBNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledDBNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBNodeServiceServer).ListEnabledDBNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DBNodeService/ListEnabledDBNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBNodeServiceServer).ListEnabledDBNodes(ctx, req.(*ListEnabledDBNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBNodeService_FindEnabledDBNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledDBNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBNodeServiceServer).FindEnabledDBNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DBNodeService/FindEnabledDBNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBNodeServiceServer).FindEnabledDBNode(ctx, req.(*FindEnabledDBNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DBNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DBNodeService",
	HandlerType: (*DBNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createDBNode",
			Handler:    _DBNodeService_CreateDBNode_Handler,
		},
		{
			MethodName: "updateDBNode",
			Handler:    _DBNodeService_UpdateDBNode_Handler,
		},
		{
			MethodName: "deleteDBNode",
			Handler:    _DBNodeService_DeleteDBNode_Handler,
		},
		{
			MethodName: "countAllEnabledDBNodes",
			Handler:    _DBNodeService_CountAllEnabledDBNodes_Handler,
		},
		{
			MethodName: "listEnabledDBNodes",
			Handler:    _DBNodeService_ListEnabledDBNodes_Handler,
		},
		{
			MethodName: "findEnabledDBNode",
			Handler:    _DBNodeService_FindEnabledDBNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_db_node.proto",
}
