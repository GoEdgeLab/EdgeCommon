// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_ip_library_file.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 查找所有已完成的IP库文件
type FindAllFinishedIPLibraryFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllFinishedIPLibraryFilesRequest) Reset() {
	*x = FindAllFinishedIPLibraryFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllFinishedIPLibraryFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllFinishedIPLibraryFilesRequest) ProtoMessage() {}

func (x *FindAllFinishedIPLibraryFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllFinishedIPLibraryFilesRequest.ProtoReflect.Descriptor instead.
func (*FindAllFinishedIPLibraryFilesRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{0}
}

type FindAllFinishedIPLibraryFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFiles []*IPLibraryFile `protobuf:"bytes,1,rep,name=ipLibraryFiles,proto3" json:"ipLibraryFiles,omitempty"`
}

func (x *FindAllFinishedIPLibraryFilesResponse) Reset() {
	*x = FindAllFinishedIPLibraryFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllFinishedIPLibraryFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllFinishedIPLibraryFilesResponse) ProtoMessage() {}

func (x *FindAllFinishedIPLibraryFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllFinishedIPLibraryFilesResponse.ProtoReflect.Descriptor instead.
func (*FindAllFinishedIPLibraryFilesResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{1}
}

func (x *FindAllFinishedIPLibraryFilesResponse) GetIpLibraryFiles() []*IPLibraryFile {
	if x != nil {
		return x.IpLibraryFiles
	}
	return nil
}

// 查找所有未完成的IP库文件
type FindAllUnfinishedIPLibraryFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllUnfinishedIPLibraryFilesRequest) Reset() {
	*x = FindAllUnfinishedIPLibraryFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllUnfinishedIPLibraryFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllUnfinishedIPLibraryFilesRequest) ProtoMessage() {}

func (x *FindAllUnfinishedIPLibraryFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllUnfinishedIPLibraryFilesRequest.ProtoReflect.Descriptor instead.
func (*FindAllUnfinishedIPLibraryFilesRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{2}
}

type FindAllUnfinishedIPLibraryFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFiles []*IPLibraryFile `protobuf:"bytes,1,rep,name=ipLibraryFiles,proto3" json:"ipLibraryFiles,omitempty"`
}

func (x *FindAllUnfinishedIPLibraryFilesResponse) Reset() {
	*x = FindAllUnfinishedIPLibraryFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllUnfinishedIPLibraryFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllUnfinishedIPLibraryFilesResponse) ProtoMessage() {}

func (x *FindAllUnfinishedIPLibraryFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllUnfinishedIPLibraryFilesResponse.ProtoReflect.Descriptor instead.
func (*FindAllUnfinishedIPLibraryFilesResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{3}
}

func (x *FindAllUnfinishedIPLibraryFilesResponse) GetIpLibraryFiles() []*IPLibraryFile {
	if x != nil {
		return x.IpLibraryFiles
	}
	return nil
}

// 查找单个IP库文件
type FindIPLibraryFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFileId int64 `protobuf:"varint,1,opt,name=ipLibraryFileId,proto3" json:"ipLibraryFileId,omitempty"`
}

func (x *FindIPLibraryFileRequest) Reset() {
	*x = FindIPLibraryFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindIPLibraryFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindIPLibraryFileRequest) ProtoMessage() {}

func (x *FindIPLibraryFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindIPLibraryFileRequest.ProtoReflect.Descriptor instead.
func (*FindIPLibraryFileRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{4}
}

func (x *FindIPLibraryFileRequest) GetIpLibraryFileId() int64 {
	if x != nil {
		return x.IpLibraryFileId
	}
	return 0
}

type FindIPLibraryFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFile *IPLibraryFile `protobuf:"bytes,1,opt,name=ipLibraryFile,proto3" json:"ipLibraryFile,omitempty"`
}

func (x *FindIPLibraryFileResponse) Reset() {
	*x = FindIPLibraryFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindIPLibraryFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindIPLibraryFileResponse) ProtoMessage() {}

func (x *FindIPLibraryFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindIPLibraryFileResponse.ProtoReflect.Descriptor instead.
func (*FindIPLibraryFileResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{5}
}

func (x *FindIPLibraryFileResponse) GetIpLibraryFile() *IPLibraryFile {
	if x != nil {
		return x.IpLibraryFile
	}
	return nil
}

// 创建IP库文件
type CreateIPLibraryFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Template      string   `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	EmptyValues   []string `protobuf:"bytes,3,rep,name=emptyValues,proto3" json:"emptyValues,omitempty"`
	FileId        int64    `protobuf:"varint,4,opt,name=fileId,proto3" json:"fileId,omitempty"`
	CountriesJSON []byte   `protobuf:"bytes,5,opt,name=countriesJSON,proto3" json:"countriesJSON,omitempty"`
	ProvincesJSON []byte   `protobuf:"bytes,6,opt,name=provincesJSON,proto3" json:"provincesJSON,omitempty"`
	CitiesJSON    []byte   `protobuf:"bytes,7,opt,name=citiesJSON,proto3" json:"citiesJSON,omitempty"`
	TownsJSON     []byte   `protobuf:"bytes,8,opt,name=townsJSON,proto3" json:"townsJSON,omitempty"`
	ProvidersJSON []byte   `protobuf:"bytes,9,opt,name=providersJSON,proto3" json:"providersJSON,omitempty"`
	Password      string   `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"` // 密码
}

func (x *CreateIPLibraryFileRequest) Reset() {
	*x = CreateIPLibraryFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIPLibraryFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIPLibraryFileRequest) ProtoMessage() {}

func (x *CreateIPLibraryFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIPLibraryFileRequest.ProtoReflect.Descriptor instead.
func (*CreateIPLibraryFileRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{6}
}

func (x *CreateIPLibraryFileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateIPLibraryFileRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *CreateIPLibraryFileRequest) GetEmptyValues() []string {
	if x != nil {
		return x.EmptyValues
	}
	return nil
}

func (x *CreateIPLibraryFileRequest) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *CreateIPLibraryFileRequest) GetCountriesJSON() []byte {
	if x != nil {
		return x.CountriesJSON
	}
	return nil
}

func (x *CreateIPLibraryFileRequest) GetProvincesJSON() []byte {
	if x != nil {
		return x.ProvincesJSON
	}
	return nil
}

func (x *CreateIPLibraryFileRequest) GetCitiesJSON() []byte {
	if x != nil {
		return x.CitiesJSON
	}
	return nil
}

func (x *CreateIPLibraryFileRequest) GetTownsJSON() []byte {
	if x != nil {
		return x.TownsJSON
	}
	return nil
}

func (x *CreateIPLibraryFileRequest) GetProvidersJSON() []byte {
	if x != nil {
		return x.ProvidersJSON
	}
	return nil
}

func (x *CreateIPLibraryFileRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CreateIPLibraryFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFileId int64 `protobuf:"varint,1,opt,name=ipLibraryFileId,proto3" json:"ipLibraryFileId,omitempty"`
}

func (x *CreateIPLibraryFileResponse) Reset() {
	*x = CreateIPLibraryFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIPLibraryFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIPLibraryFileResponse) ProtoMessage() {}

func (x *CreateIPLibraryFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIPLibraryFileResponse.ProtoReflect.Descriptor instead.
func (*CreateIPLibraryFileResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{7}
}

func (x *CreateIPLibraryFileResponse) GetIpLibraryFileId() int64 {
	if x != nil {
		return x.IpLibraryFileId
	}
	return 0
}

// 检查国家/地区
type CheckCountriesWithIPLibraryFileIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFileId int64 `protobuf:"varint,1,opt,name=ipLibraryFileId,proto3" json:"ipLibraryFileId,omitempty"`
}

func (x *CheckCountriesWithIPLibraryFileIdRequest) Reset() {
	*x = CheckCountriesWithIPLibraryFileIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCountriesWithIPLibraryFileIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCountriesWithIPLibraryFileIdRequest) ProtoMessage() {}

func (x *CheckCountriesWithIPLibraryFileIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCountriesWithIPLibraryFileIdRequest.ProtoReflect.Descriptor instead.
func (*CheckCountriesWithIPLibraryFileIdRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{8}
}

func (x *CheckCountriesWithIPLibraryFileIdRequest) GetIpLibraryFileId() int64 {
	if x != nil {
		return x.IpLibraryFileId
	}
	return 0
}

type CheckCountriesWithIPLibraryFileIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissingCountries []*CheckCountriesWithIPLibraryFileIdResponse_MissingCountry `protobuf:"bytes,1,rep,name=missingCountries,proto3" json:"missingCountries,omitempty"`
}

func (x *CheckCountriesWithIPLibraryFileIdResponse) Reset() {
	*x = CheckCountriesWithIPLibraryFileIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCountriesWithIPLibraryFileIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCountriesWithIPLibraryFileIdResponse) ProtoMessage() {}

func (x *CheckCountriesWithIPLibraryFileIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCountriesWithIPLibraryFileIdResponse.ProtoReflect.Descriptor instead.
func (*CheckCountriesWithIPLibraryFileIdResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{9}
}

func (x *CheckCountriesWithIPLibraryFileIdResponse) GetMissingCountries() []*CheckCountriesWithIPLibraryFileIdResponse_MissingCountry {
	if x != nil {
		return x.MissingCountries
	}
	return nil
}

// 检查省份/州
type CheckProvincesWithIPLibraryFileIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFileId int64 `protobuf:"varint,1,opt,name=ipLibraryFileId,proto3" json:"ipLibraryFileId,omitempty"`
}

func (x *CheckProvincesWithIPLibraryFileIdRequest) Reset() {
	*x = CheckProvincesWithIPLibraryFileIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProvincesWithIPLibraryFileIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProvincesWithIPLibraryFileIdRequest) ProtoMessage() {}

func (x *CheckProvincesWithIPLibraryFileIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProvincesWithIPLibraryFileIdRequest.ProtoReflect.Descriptor instead.
func (*CheckProvincesWithIPLibraryFileIdRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{10}
}

func (x *CheckProvincesWithIPLibraryFileIdRequest) GetIpLibraryFileId() int64 {
	if x != nil {
		return x.IpLibraryFileId
	}
	return 0
}

type CheckProvincesWithIPLibraryFileIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissingProvinces []*CheckProvincesWithIPLibraryFileIdResponse_MissingProvince `protobuf:"bytes,1,rep,name=missingProvinces,proto3" json:"missingProvinces,omitempty"`
}

func (x *CheckProvincesWithIPLibraryFileIdResponse) Reset() {
	*x = CheckProvincesWithIPLibraryFileIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProvincesWithIPLibraryFileIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProvincesWithIPLibraryFileIdResponse) ProtoMessage() {}

func (x *CheckProvincesWithIPLibraryFileIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProvincesWithIPLibraryFileIdResponse.ProtoReflect.Descriptor instead.
func (*CheckProvincesWithIPLibraryFileIdResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{11}
}

func (x *CheckProvincesWithIPLibraryFileIdResponse) GetMissingProvinces() []*CheckProvincesWithIPLibraryFileIdResponse_MissingProvince {
	if x != nil {
		return x.MissingProvinces
	}
	return nil
}

// 检查城市/市
type CheckCitiesWithIPLibraryFileIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFileId int64 `protobuf:"varint,1,opt,name=ipLibraryFileId,proto3" json:"ipLibraryFileId,omitempty"`
}

func (x *CheckCitiesWithIPLibraryFileIdRequest) Reset() {
	*x = CheckCitiesWithIPLibraryFileIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCitiesWithIPLibraryFileIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCitiesWithIPLibraryFileIdRequest) ProtoMessage() {}

func (x *CheckCitiesWithIPLibraryFileIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCitiesWithIPLibraryFileIdRequest.ProtoReflect.Descriptor instead.
func (*CheckCitiesWithIPLibraryFileIdRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{12}
}

func (x *CheckCitiesWithIPLibraryFileIdRequest) GetIpLibraryFileId() int64 {
	if x != nil {
		return x.IpLibraryFileId
	}
	return 0
}

type CheckCitiesWithIPLibraryFileIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissingCities []*CheckCitiesWithIPLibraryFileIdResponse_MissingCity `protobuf:"bytes,1,rep,name=missingCities,proto3" json:"missingCities,omitempty"`
}

func (x *CheckCitiesWithIPLibraryFileIdResponse) Reset() {
	*x = CheckCitiesWithIPLibraryFileIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCitiesWithIPLibraryFileIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCitiesWithIPLibraryFileIdResponse) ProtoMessage() {}

func (x *CheckCitiesWithIPLibraryFileIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCitiesWithIPLibraryFileIdResponse.ProtoReflect.Descriptor instead.
func (*CheckCitiesWithIPLibraryFileIdResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{13}
}

func (x *CheckCitiesWithIPLibraryFileIdResponse) GetMissingCities() []*CheckCitiesWithIPLibraryFileIdResponse_MissingCity {
	if x != nil {
		return x.MissingCities
	}
	return nil
}

// 检查区县
type CheckTownsWithIPLibraryFileIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFileId int64 `protobuf:"varint,1,opt,name=ipLibraryFileId,proto3" json:"ipLibraryFileId,omitempty"`
}

func (x *CheckTownsWithIPLibraryFileIdRequest) Reset() {
	*x = CheckTownsWithIPLibraryFileIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTownsWithIPLibraryFileIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTownsWithIPLibraryFileIdRequest) ProtoMessage() {}

func (x *CheckTownsWithIPLibraryFileIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTownsWithIPLibraryFileIdRequest.ProtoReflect.Descriptor instead.
func (*CheckTownsWithIPLibraryFileIdRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{14}
}

func (x *CheckTownsWithIPLibraryFileIdRequest) GetIpLibraryFileId() int64 {
	if x != nil {
		return x.IpLibraryFileId
	}
	return 0
}

type CheckTownsWithIPLibraryFileIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissingTowns []*CheckTownsWithIPLibraryFileIdResponse_MissingTown `protobuf:"bytes,1,rep,name=missingTowns,proto3" json:"missingTowns,omitempty"`
}

func (x *CheckTownsWithIPLibraryFileIdResponse) Reset() {
	*x = CheckTownsWithIPLibraryFileIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTownsWithIPLibraryFileIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTownsWithIPLibraryFileIdResponse) ProtoMessage() {}

func (x *CheckTownsWithIPLibraryFileIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTownsWithIPLibraryFileIdResponse.ProtoReflect.Descriptor instead.
func (*CheckTownsWithIPLibraryFileIdResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{15}
}

func (x *CheckTownsWithIPLibraryFileIdResponse) GetMissingTowns() []*CheckTownsWithIPLibraryFileIdResponse_MissingTown {
	if x != nil {
		return x.MissingTowns
	}
	return nil
}

// 检查ISP运营商
type CheckProvidersWithIPLibraryFileIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFileId int64 `protobuf:"varint,1,opt,name=ipLibraryFileId,proto3" json:"ipLibraryFileId,omitempty"`
}

func (x *CheckProvidersWithIPLibraryFileIdRequest) Reset() {
	*x = CheckProvidersWithIPLibraryFileIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProvidersWithIPLibraryFileIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProvidersWithIPLibraryFileIdRequest) ProtoMessage() {}

func (x *CheckProvidersWithIPLibraryFileIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProvidersWithIPLibraryFileIdRequest.ProtoReflect.Descriptor instead.
func (*CheckProvidersWithIPLibraryFileIdRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{16}
}

func (x *CheckProvidersWithIPLibraryFileIdRequest) GetIpLibraryFileId() int64 {
	if x != nil {
		return x.IpLibraryFileId
	}
	return 0
}

type CheckProvidersWithIPLibraryFileIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissingProviders []*CheckProvidersWithIPLibraryFileIdResponse_MissingProvider `protobuf:"bytes,1,rep,name=missingProviders,proto3" json:"missingProviders,omitempty"`
}

func (x *CheckProvidersWithIPLibraryFileIdResponse) Reset() {
	*x = CheckProvidersWithIPLibraryFileIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProvidersWithIPLibraryFileIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProvidersWithIPLibraryFileIdResponse) ProtoMessage() {}

func (x *CheckProvidersWithIPLibraryFileIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProvidersWithIPLibraryFileIdResponse.ProtoReflect.Descriptor instead.
func (*CheckProvidersWithIPLibraryFileIdResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{17}
}

func (x *CheckProvidersWithIPLibraryFileIdResponse) GetMissingProviders() []*CheckProvidersWithIPLibraryFileIdResponse_MissingProvider {
	if x != nil {
		return x.MissingProviders
	}
	return nil
}

// 生成IP库文件
type GenerateIPLibraryFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFileId int64 `protobuf:"varint,1,opt,name=ipLibraryFileId,proto3" json:"ipLibraryFileId,omitempty"`
}

func (x *GenerateIPLibraryFileRequest) Reset() {
	*x = GenerateIPLibraryFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateIPLibraryFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateIPLibraryFileRequest) ProtoMessage() {}

func (x *GenerateIPLibraryFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateIPLibraryFileRequest.ProtoReflect.Descriptor instead.
func (*GenerateIPLibraryFileRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{18}
}

func (x *GenerateIPLibraryFileRequest) GetIpLibraryFileId() int64 {
	if x != nil {
		return x.IpLibraryFileId
	}
	return 0
}

// 设置某个IP库为已完成
type UpdateIPLibraryFileFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFileId int64 `protobuf:"varint,1,opt,name=ipLibraryFileId,proto3" json:"ipLibraryFileId,omitempty"`
}

func (x *UpdateIPLibraryFileFinishedRequest) Reset() {
	*x = UpdateIPLibraryFileFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIPLibraryFileFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIPLibraryFileFinishedRequest) ProtoMessage() {}

func (x *UpdateIPLibraryFileFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIPLibraryFileFinishedRequest.ProtoReflect.Descriptor instead.
func (*UpdateIPLibraryFileFinishedRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateIPLibraryFileFinishedRequest) GetIpLibraryFileId() int64 {
	if x != nil {
		return x.IpLibraryFileId
	}
	return 0
}

// 删除IP库文件
type DeleteIPLibraryFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLibraryFileId int64 `protobuf:"varint,1,opt,name=ipLibraryFileId,proto3" json:"ipLibraryFileId,omitempty"`
}

func (x *DeleteIPLibraryFileRequest) Reset() {
	*x = DeleteIPLibraryFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIPLibraryFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIPLibraryFileRequest) ProtoMessage() {}

func (x *DeleteIPLibraryFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIPLibraryFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteIPLibraryFileRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteIPLibraryFileRequest) GetIpLibraryFileId() int64 {
	if x != nil {
		return x.IpLibraryFileId
	}
	return 0
}

type CheckCountriesWithIPLibraryFileIdResponse_MissingCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryName      string           `protobuf:"bytes,1,opt,name=countryName,proto3" json:"countryName,omitempty"`
	SimilarCountries []*RegionCountry `protobuf:"bytes,2,rep,name=similarCountries,proto3" json:"similarCountries,omitempty"`
}

func (x *CheckCountriesWithIPLibraryFileIdResponse_MissingCountry) Reset() {
	*x = CheckCountriesWithIPLibraryFileIdResponse_MissingCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCountriesWithIPLibraryFileIdResponse_MissingCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCountriesWithIPLibraryFileIdResponse_MissingCountry) ProtoMessage() {}

func (x *CheckCountriesWithIPLibraryFileIdResponse_MissingCountry) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCountriesWithIPLibraryFileIdResponse_MissingCountry.ProtoReflect.Descriptor instead.
func (*CheckCountriesWithIPLibraryFileIdResponse_MissingCountry) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CheckCountriesWithIPLibraryFileIdResponse_MissingCountry) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CheckCountriesWithIPLibraryFileIdResponse_MissingCountry) GetSimilarCountries() []*RegionCountry {
	if x != nil {
		return x.SimilarCountries
	}
	return nil
}

type CheckProvincesWithIPLibraryFileIdResponse_MissingProvince struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryName      string            `protobuf:"bytes,1,opt,name=countryName,proto3" json:"countryName,omitempty"`
	ProvinceName     string            `protobuf:"bytes,2,opt,name=provinceName,proto3" json:"provinceName,omitempty"`
	SimilarProvinces []*RegionProvince `protobuf:"bytes,3,rep,name=similarProvinces,proto3" json:"similarProvinces,omitempty"`
}

func (x *CheckProvincesWithIPLibraryFileIdResponse_MissingProvince) Reset() {
	*x = CheckProvincesWithIPLibraryFileIdResponse_MissingProvince{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProvincesWithIPLibraryFileIdResponse_MissingProvince) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProvincesWithIPLibraryFileIdResponse_MissingProvince) ProtoMessage() {}

func (x *CheckProvincesWithIPLibraryFileIdResponse_MissingProvince) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProvincesWithIPLibraryFileIdResponse_MissingProvince.ProtoReflect.Descriptor instead.
func (*CheckProvincesWithIPLibraryFileIdResponse_MissingProvince) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CheckProvincesWithIPLibraryFileIdResponse_MissingProvince) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CheckProvincesWithIPLibraryFileIdResponse_MissingProvince) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *CheckProvincesWithIPLibraryFileIdResponse_MissingProvince) GetSimilarProvinces() []*RegionProvince {
	if x != nil {
		return x.SimilarProvinces
	}
	return nil
}

type CheckCitiesWithIPLibraryFileIdResponse_MissingCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryName   string        `protobuf:"bytes,1,opt,name=countryName,proto3" json:"countryName,omitempty"`
	ProvinceName  string        `protobuf:"bytes,2,opt,name=provinceName,proto3" json:"provinceName,omitempty"`
	CityName      string        `protobuf:"bytes,3,opt,name=cityName,proto3" json:"cityName,omitempty"`
	SimilarCities []*RegionCity `protobuf:"bytes,4,rep,name=similarCities,proto3" json:"similarCities,omitempty"`
}

func (x *CheckCitiesWithIPLibraryFileIdResponse_MissingCity) Reset() {
	*x = CheckCitiesWithIPLibraryFileIdResponse_MissingCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCitiesWithIPLibraryFileIdResponse_MissingCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCitiesWithIPLibraryFileIdResponse_MissingCity) ProtoMessage() {}

func (x *CheckCitiesWithIPLibraryFileIdResponse_MissingCity) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCitiesWithIPLibraryFileIdResponse_MissingCity.ProtoReflect.Descriptor instead.
func (*CheckCitiesWithIPLibraryFileIdResponse_MissingCity) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CheckCitiesWithIPLibraryFileIdResponse_MissingCity) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CheckCitiesWithIPLibraryFileIdResponse_MissingCity) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *CheckCitiesWithIPLibraryFileIdResponse_MissingCity) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *CheckCitiesWithIPLibraryFileIdResponse_MissingCity) GetSimilarCities() []*RegionCity {
	if x != nil {
		return x.SimilarCities
	}
	return nil
}

type CheckTownsWithIPLibraryFileIdResponse_MissingTown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryName  string        `protobuf:"bytes,1,opt,name=countryName,proto3" json:"countryName,omitempty"`
	ProvinceName string        `protobuf:"bytes,2,opt,name=provinceName,proto3" json:"provinceName,omitempty"`
	CityName     string        `protobuf:"bytes,3,opt,name=cityName,proto3" json:"cityName,omitempty"`
	TownName     string        `protobuf:"bytes,4,opt,name=townName,proto3" json:"townName,omitempty"`
	SimilarTowns []*RegionTown `protobuf:"bytes,5,rep,name=similarTowns,proto3" json:"similarTowns,omitempty"`
}

func (x *CheckTownsWithIPLibraryFileIdResponse_MissingTown) Reset() {
	*x = CheckTownsWithIPLibraryFileIdResponse_MissingTown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTownsWithIPLibraryFileIdResponse_MissingTown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTownsWithIPLibraryFileIdResponse_MissingTown) ProtoMessage() {}

func (x *CheckTownsWithIPLibraryFileIdResponse_MissingTown) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTownsWithIPLibraryFileIdResponse_MissingTown.ProtoReflect.Descriptor instead.
func (*CheckTownsWithIPLibraryFileIdResponse_MissingTown) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CheckTownsWithIPLibraryFileIdResponse_MissingTown) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *CheckTownsWithIPLibraryFileIdResponse_MissingTown) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *CheckTownsWithIPLibraryFileIdResponse_MissingTown) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *CheckTownsWithIPLibraryFileIdResponse_MissingTown) GetTownName() string {
	if x != nil {
		return x.TownName
	}
	return ""
}

func (x *CheckTownsWithIPLibraryFileIdResponse_MissingTown) GetSimilarTowns() []*RegionTown {
	if x != nil {
		return x.SimilarTowns
	}
	return nil
}

type CheckProvidersWithIPLibraryFileIdResponse_MissingProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderName     string            `protobuf:"bytes,1,opt,name=providerName,proto3" json:"providerName,omitempty"`
	SimilarProviders []*RegionProvider `protobuf:"bytes,2,rep,name=similarProviders,proto3" json:"similarProviders,omitempty"`
}

func (x *CheckProvidersWithIPLibraryFileIdResponse_MissingProvider) Reset() {
	*x = CheckProvidersWithIPLibraryFileIdResponse_MissingProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_library_file_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckProvidersWithIPLibraryFileIdResponse_MissingProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProvidersWithIPLibraryFileIdResponse_MissingProvider) ProtoMessage() {}

func (x *CheckProvidersWithIPLibraryFileIdResponse_MissingProvider) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_library_file_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProvidersWithIPLibraryFileIdResponse_MissingProvider.ProtoReflect.Descriptor instead.
func (*CheckProvidersWithIPLibraryFileIdResponse_MissingProvider) Descriptor() ([]byte, []int) {
	return file_service_ip_library_file_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CheckProvidersWithIPLibraryFileIdResponse_MissingProvider) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *CheckProvidersWithIPLibraryFileIdResponse_MissingProvider) GetSimilarProviders() []*RegionProvider {
	if x != nil {
		return x.SimilarProviders
	}
	return nil
}

var File_service_ip_library_file_proto protoreflect.FileDescriptor

var file_service_ip_library_file_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x70, 0x5f,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x77, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a,
	0x24, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0e, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x50, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x69, 0x70, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x26, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x50,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x55, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0e, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x50, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x69, 0x70, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x18, 0x46, 0x69, 0x6e,
	0x64, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x54, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d,
	0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x77, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74,
	0x6f, 0x77, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x47, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x28, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x29, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x1a, 0x71, 0x0a, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x28, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x29, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x73, 0x1a, 0x97, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x73, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x51, 0x0a,
	0x25, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0xae, 0x02, 0x0a, 0x26, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xa5, 0x01, 0x0a, 0x0b, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x73,
	0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x74, 0x79, 0x52, 0x0d, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x43, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x50, 0x0a, 0x24, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x77, 0x6e, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x25, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x77,
	0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f,
	0x77, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x77, 0x6e, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x0b, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x77, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x77, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x77, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	0x72, 0x54, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x73, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x54, 0x6f, 0x77, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x28, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x8d, 0x02, 0x0a, 0x29, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69,
	0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x75, 0x0a, 0x0f, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x10,
	0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x22, 0x48, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x22, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x69, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x32, 0x93, 0x0a, 0x0a, 0x14, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x66,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x50,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7a, 0x0a, 0x1f, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x11, 0x66, 0x69, 0x6e, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x50, 0x4c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x21, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x21, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a,
	0x1e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x29, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x77, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x6f, 0x77, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x77, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a,
	0x21, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x1b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x45, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_ip_library_file_proto_rawDescOnce sync.Once
	file_service_ip_library_file_proto_rawDescData = file_service_ip_library_file_proto_rawDesc
)

func file_service_ip_library_file_proto_rawDescGZIP() []byte {
	file_service_ip_library_file_proto_rawDescOnce.Do(func() {
		file_service_ip_library_file_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ip_library_file_proto_rawDescData)
	})
	return file_service_ip_library_file_proto_rawDescData
}

var file_service_ip_library_file_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_service_ip_library_file_proto_goTypes = []interface{}{
	(*FindAllFinishedIPLibraryFilesRequest)(nil),                      // 0: pb.FindAllFinishedIPLibraryFilesRequest
	(*FindAllFinishedIPLibraryFilesResponse)(nil),                     // 1: pb.FindAllFinishedIPLibraryFilesResponse
	(*FindAllUnfinishedIPLibraryFilesRequest)(nil),                    // 2: pb.FindAllUnfinishedIPLibraryFilesRequest
	(*FindAllUnfinishedIPLibraryFilesResponse)(nil),                   // 3: pb.FindAllUnfinishedIPLibraryFilesResponse
	(*FindIPLibraryFileRequest)(nil),                                  // 4: pb.FindIPLibraryFileRequest
	(*FindIPLibraryFileResponse)(nil),                                 // 5: pb.FindIPLibraryFileResponse
	(*CreateIPLibraryFileRequest)(nil),                                // 6: pb.CreateIPLibraryFileRequest
	(*CreateIPLibraryFileResponse)(nil),                               // 7: pb.CreateIPLibraryFileResponse
	(*CheckCountriesWithIPLibraryFileIdRequest)(nil),                  // 8: pb.CheckCountriesWithIPLibraryFileIdRequest
	(*CheckCountriesWithIPLibraryFileIdResponse)(nil),                 // 9: pb.CheckCountriesWithIPLibraryFileIdResponse
	(*CheckProvincesWithIPLibraryFileIdRequest)(nil),                  // 10: pb.CheckProvincesWithIPLibraryFileIdRequest
	(*CheckProvincesWithIPLibraryFileIdResponse)(nil),                 // 11: pb.CheckProvincesWithIPLibraryFileIdResponse
	(*CheckCitiesWithIPLibraryFileIdRequest)(nil),                     // 12: pb.CheckCitiesWithIPLibraryFileIdRequest
	(*CheckCitiesWithIPLibraryFileIdResponse)(nil),                    // 13: pb.CheckCitiesWithIPLibraryFileIdResponse
	(*CheckTownsWithIPLibraryFileIdRequest)(nil),                      // 14: pb.CheckTownsWithIPLibraryFileIdRequest
	(*CheckTownsWithIPLibraryFileIdResponse)(nil),                     // 15: pb.CheckTownsWithIPLibraryFileIdResponse
	(*CheckProvidersWithIPLibraryFileIdRequest)(nil),                  // 16: pb.CheckProvidersWithIPLibraryFileIdRequest
	(*CheckProvidersWithIPLibraryFileIdResponse)(nil),                 // 17: pb.CheckProvidersWithIPLibraryFileIdResponse
	(*GenerateIPLibraryFileRequest)(nil),                              // 18: pb.GenerateIPLibraryFileRequest
	(*UpdateIPLibraryFileFinishedRequest)(nil),                        // 19: pb.UpdateIPLibraryFileFinishedRequest
	(*DeleteIPLibraryFileRequest)(nil),                                // 20: pb.DeleteIPLibraryFileRequest
	(*CheckCountriesWithIPLibraryFileIdResponse_MissingCountry)(nil),  // 21: pb.CheckCountriesWithIPLibraryFileIdResponse.MissingCountry
	(*CheckProvincesWithIPLibraryFileIdResponse_MissingProvince)(nil), // 22: pb.CheckProvincesWithIPLibraryFileIdResponse.MissingProvince
	(*CheckCitiesWithIPLibraryFileIdResponse_MissingCity)(nil),        // 23: pb.CheckCitiesWithIPLibraryFileIdResponse.MissingCity
	(*CheckTownsWithIPLibraryFileIdResponse_MissingTown)(nil),         // 24: pb.CheckTownsWithIPLibraryFileIdResponse.MissingTown
	(*CheckProvidersWithIPLibraryFileIdResponse_MissingProvider)(nil), // 25: pb.CheckProvidersWithIPLibraryFileIdResponse.MissingProvider
	(*IPLibraryFile)(nil),                                             // 26: pb.IPLibraryFile
	(*RegionCountry)(nil),                                             // 27: pb.RegionCountry
	(*RegionProvince)(nil),                                            // 28: pb.RegionProvince
	(*RegionCity)(nil),                                                // 29: pb.RegionCity
	(*RegionTown)(nil),                                                // 30: pb.RegionTown
	(*RegionProvider)(nil),                                            // 31: pb.RegionProvider
	(*RPCSuccess)(nil),                                                // 32: pb.RPCSuccess
}
var file_service_ip_library_file_proto_depIdxs = []int32{
	26, // 0: pb.FindAllFinishedIPLibraryFilesResponse.ipLibraryFiles:type_name -> pb.IPLibraryFile
	26, // 1: pb.FindAllUnfinishedIPLibraryFilesResponse.ipLibraryFiles:type_name -> pb.IPLibraryFile
	26, // 2: pb.FindIPLibraryFileResponse.ipLibraryFile:type_name -> pb.IPLibraryFile
	21, // 3: pb.CheckCountriesWithIPLibraryFileIdResponse.missingCountries:type_name -> pb.CheckCountriesWithIPLibraryFileIdResponse.MissingCountry
	22, // 4: pb.CheckProvincesWithIPLibraryFileIdResponse.missingProvinces:type_name -> pb.CheckProvincesWithIPLibraryFileIdResponse.MissingProvince
	23, // 5: pb.CheckCitiesWithIPLibraryFileIdResponse.missingCities:type_name -> pb.CheckCitiesWithIPLibraryFileIdResponse.MissingCity
	24, // 6: pb.CheckTownsWithIPLibraryFileIdResponse.missingTowns:type_name -> pb.CheckTownsWithIPLibraryFileIdResponse.MissingTown
	25, // 7: pb.CheckProvidersWithIPLibraryFileIdResponse.missingProviders:type_name -> pb.CheckProvidersWithIPLibraryFileIdResponse.MissingProvider
	27, // 8: pb.CheckCountriesWithIPLibraryFileIdResponse.MissingCountry.similarCountries:type_name -> pb.RegionCountry
	28, // 9: pb.CheckProvincesWithIPLibraryFileIdResponse.MissingProvince.similarProvinces:type_name -> pb.RegionProvince
	29, // 10: pb.CheckCitiesWithIPLibraryFileIdResponse.MissingCity.similarCities:type_name -> pb.RegionCity
	30, // 11: pb.CheckTownsWithIPLibraryFileIdResponse.MissingTown.similarTowns:type_name -> pb.RegionTown
	31, // 12: pb.CheckProvidersWithIPLibraryFileIdResponse.MissingProvider.similarProviders:type_name -> pb.RegionProvider
	0,  // 13: pb.IPLibraryFileService.findAllFinishedIPLibraryFiles:input_type -> pb.FindAllFinishedIPLibraryFilesRequest
	2,  // 14: pb.IPLibraryFileService.findAllUnfinishedIPLibraryFiles:input_type -> pb.FindAllUnfinishedIPLibraryFilesRequest
	4,  // 15: pb.IPLibraryFileService.findIPLibraryFile:input_type -> pb.FindIPLibraryFileRequest
	6,  // 16: pb.IPLibraryFileService.createIPLibraryFile:input_type -> pb.CreateIPLibraryFileRequest
	8,  // 17: pb.IPLibraryFileService.checkCountriesWithIPLibraryFileId:input_type -> pb.CheckCountriesWithIPLibraryFileIdRequest
	10, // 18: pb.IPLibraryFileService.checkProvincesWithIPLibraryFileId:input_type -> pb.CheckProvincesWithIPLibraryFileIdRequest
	12, // 19: pb.IPLibraryFileService.checkCitiesWithIPLibraryFileId:input_type -> pb.CheckCitiesWithIPLibraryFileIdRequest
	14, // 20: pb.IPLibraryFileService.checkTownsWithIPLibraryFileId:input_type -> pb.CheckTownsWithIPLibraryFileIdRequest
	16, // 21: pb.IPLibraryFileService.checkProvidersWithIPLibraryFileId:input_type -> pb.CheckProvidersWithIPLibraryFileIdRequest
	18, // 22: pb.IPLibraryFileService.generateIPLibraryFile:input_type -> pb.GenerateIPLibraryFileRequest
	19, // 23: pb.IPLibraryFileService.updateIPLibraryFileFinished:input_type -> pb.UpdateIPLibraryFileFinishedRequest
	20, // 24: pb.IPLibraryFileService.deleteIPLibraryFile:input_type -> pb.DeleteIPLibraryFileRequest
	1,  // 25: pb.IPLibraryFileService.findAllFinishedIPLibraryFiles:output_type -> pb.FindAllFinishedIPLibraryFilesResponse
	3,  // 26: pb.IPLibraryFileService.findAllUnfinishedIPLibraryFiles:output_type -> pb.FindAllUnfinishedIPLibraryFilesResponse
	5,  // 27: pb.IPLibraryFileService.findIPLibraryFile:output_type -> pb.FindIPLibraryFileResponse
	7,  // 28: pb.IPLibraryFileService.createIPLibraryFile:output_type -> pb.CreateIPLibraryFileResponse
	9,  // 29: pb.IPLibraryFileService.checkCountriesWithIPLibraryFileId:output_type -> pb.CheckCountriesWithIPLibraryFileIdResponse
	11, // 30: pb.IPLibraryFileService.checkProvincesWithIPLibraryFileId:output_type -> pb.CheckProvincesWithIPLibraryFileIdResponse
	13, // 31: pb.IPLibraryFileService.checkCitiesWithIPLibraryFileId:output_type -> pb.CheckCitiesWithIPLibraryFileIdResponse
	15, // 32: pb.IPLibraryFileService.checkTownsWithIPLibraryFileId:output_type -> pb.CheckTownsWithIPLibraryFileIdResponse
	17, // 33: pb.IPLibraryFileService.checkProvidersWithIPLibraryFileId:output_type -> pb.CheckProvidersWithIPLibraryFileIdResponse
	32, // 34: pb.IPLibraryFileService.generateIPLibraryFile:output_type -> pb.RPCSuccess
	32, // 35: pb.IPLibraryFileService.updateIPLibraryFileFinished:output_type -> pb.RPCSuccess
	32, // 36: pb.IPLibraryFileService.deleteIPLibraryFile:output_type -> pb.RPCSuccess
	25, // [25:37] is the sub-list for method output_type
	13, // [13:25] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_service_ip_library_file_proto_init() }
func file_service_ip_library_file_proto_init() {
	if File_service_ip_library_file_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_ip_library_file_proto_init()
	file_models_model_region_country_proto_init()
	file_models_model_region_province_proto_init()
	file_models_model_region_city_proto_init()
	file_models_model_region_town_proto_init()
	file_models_model_region_provider_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ip_library_file_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllFinishedIPLibraryFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllFinishedIPLibraryFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllUnfinishedIPLibraryFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllUnfinishedIPLibraryFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindIPLibraryFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindIPLibraryFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIPLibraryFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIPLibraryFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCountriesWithIPLibraryFileIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCountriesWithIPLibraryFileIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProvincesWithIPLibraryFileIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProvincesWithIPLibraryFileIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCitiesWithIPLibraryFileIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCitiesWithIPLibraryFileIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTownsWithIPLibraryFileIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTownsWithIPLibraryFileIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProvidersWithIPLibraryFileIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProvidersWithIPLibraryFileIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateIPLibraryFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIPLibraryFileFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIPLibraryFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCountriesWithIPLibraryFileIdResponse_MissingCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProvincesWithIPLibraryFileIdResponse_MissingProvince); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCitiesWithIPLibraryFileIdResponse_MissingCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTownsWithIPLibraryFileIdResponse_MissingTown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_library_file_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckProvidersWithIPLibraryFileIdResponse_MissingProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ip_library_file_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ip_library_file_proto_goTypes,
		DependencyIndexes: file_service_ip_library_file_proto_depIdxs,
		MessageInfos:      file_service_ip_library_file_proto_msgTypes,
	}.Build()
	File_service_ip_library_file_proto = out.File
	file_service_ip_library_file_proto_rawDesc = nil
	file_service_ip_library_file_proto_goTypes = nil
	file_service_ip_library_file_proto_depIdxs = nil
}
