// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_node_ip_address.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建IP地址
type CreateNodeIPAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId         int64   `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`                        // 节点ID
	Role           string  `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`                             // 角色：node：边缘节点，dns：智能DNS节点
	Name           string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                             // 名称
	Ip             string  `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`                                 // IP地址
	CanAccess      bool    `protobuf:"varint,5,opt,name=canAccess,proto3" json:"canAccess,omitempty"`                  // 是否能够访问
	IsUp           bool    `protobuf:"varint,6,opt,name=isUp,proto3" json:"isUp,omitempty"`                            // 是否上线
	NodeClusterIds []int64 `protobuf:"varint,7,rep,packed,name=nodeClusterIds,proto3" json:"nodeClusterIds,omitempty"` // 可选项，所属集群ID列表，如果没有指定，则表示应用于节点所属的所有集群
}

func (x *CreateNodeIPAddressRequest) Reset() {
	*x = CreateNodeIPAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeIPAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeIPAddressRequest) ProtoMessage() {}

func (x *CreateNodeIPAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeIPAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeIPAddressRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNodeIPAddressRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *CreateNodeIPAddressRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CreateNodeIPAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeIPAddressRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CreateNodeIPAddressRequest) GetCanAccess() bool {
	if x != nil {
		return x.CanAccess
	}
	return false
}

func (x *CreateNodeIPAddressRequest) GetIsUp() bool {
	if x != nil {
		return x.IsUp
	}
	return false
}

func (x *CreateNodeIPAddressRequest) GetNodeClusterIds() []int64 {
	if x != nil {
		return x.NodeClusterIds
	}
	return nil
}

type CreateNodeIPAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddressId int64 `protobuf:"varint,1,opt,name=nodeIPAddressId,proto3" json:"nodeIPAddressId,omitempty"`
}

func (x *CreateNodeIPAddressResponse) Reset() {
	*x = CreateNodeIPAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeIPAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeIPAddressResponse) ProtoMessage() {}

func (x *CreateNodeIPAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeIPAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeIPAddressResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNodeIPAddressResponse) GetNodeIPAddressId() int64 {
	if x != nil {
		return x.NodeIPAddressId
	}
	return 0
}

// 批量创建IP地址
type CreateNodeIPAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId         int64    `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Role           string   `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Name           string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IpList         []string `protobuf:"bytes,4,rep,name=ipList,proto3" json:"ipList,omitempty"`
	CanAccess      bool     `protobuf:"varint,5,opt,name=canAccess,proto3" json:"canAccess,omitempty"`
	IsUp           bool     `protobuf:"varint,6,opt,name=isUp,proto3" json:"isUp,omitempty"`
	GroupValue     string   `protobuf:"bytes,7,opt,name=groupValue,proto3" json:"groupValue,omitempty"`
	NodeClusterIds []int64  `protobuf:"varint,8,rep,packed,name=nodeClusterIds,proto3" json:"nodeClusterIds,omitempty"` // 可选项，所属集群ID列表，如果没有指定，则表示应用于节点所属的所有集群
}

func (x *CreateNodeIPAddressesRequest) Reset() {
	*x = CreateNodeIPAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeIPAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeIPAddressesRequest) ProtoMessage() {}

func (x *CreateNodeIPAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeIPAddressesRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeIPAddressesRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{2}
}

func (x *CreateNodeIPAddressesRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *CreateNodeIPAddressesRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CreateNodeIPAddressesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeIPAddressesRequest) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

func (x *CreateNodeIPAddressesRequest) GetCanAccess() bool {
	if x != nil {
		return x.CanAccess
	}
	return false
}

func (x *CreateNodeIPAddressesRequest) GetIsUp() bool {
	if x != nil {
		return x.IsUp
	}
	return false
}

func (x *CreateNodeIPAddressesRequest) GetGroupValue() string {
	if x != nil {
		return x.GroupValue
	}
	return ""
}

func (x *CreateNodeIPAddressesRequest) GetNodeClusterIds() []int64 {
	if x != nil {
		return x.NodeClusterIds
	}
	return nil
}

type CreateNodeIPAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddressIds []int64 `protobuf:"varint,1,rep,packed,name=nodeIPAddressIds,proto3" json:"nodeIPAddressIds,omitempty"`
}

func (x *CreateNodeIPAddressesResponse) Reset() {
	*x = CreateNodeIPAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeIPAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeIPAddressesResponse) ProtoMessage() {}

func (x *CreateNodeIPAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeIPAddressesResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeIPAddressesResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNodeIPAddressesResponse) GetNodeIPAddressIds() []int64 {
	if x != nil {
		return x.NodeIPAddressIds
	}
	return nil
}

// 修改IP地址
type UpdateNodeIPAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddressId int64   `protobuf:"varint,1,opt,name=nodeIPAddressId,proto3" json:"nodeIPAddressId,omitempty"` // IP地址ID
	Name            string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ip              string  `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	CanAccess       bool    `protobuf:"varint,4,opt,name=canAccess,proto3" json:"canAccess,omitempty"`          // 是否能够访问
	IsOn            bool    `protobuf:"varint,5,opt,name=isOn,proto3" json:"isOn,omitempty"`                    // 是否启用
	IsUp            bool    `protobuf:"varint,6,opt,name=isUp,proto3" json:"isUp,omitempty"`                    // 是否上线
	ClusterIds      []int64 `protobuf:"varint,7,rep,packed,name=clusterIds,proto3" json:"clusterIds,omitempty"` // 可选项，所属集群ID列表，如果没有指定，则表示应用于节点所属的所有集群
}

func (x *UpdateNodeIPAddressRequest) Reset() {
	*x = UpdateNodeIPAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeIPAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeIPAddressRequest) ProtoMessage() {}

func (x *UpdateNodeIPAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeIPAddressRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeIPAddressRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateNodeIPAddressRequest) GetNodeIPAddressId() int64 {
	if x != nil {
		return x.NodeIPAddressId
	}
	return 0
}

func (x *UpdateNodeIPAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNodeIPAddressRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UpdateNodeIPAddressRequest) GetCanAccess() bool {
	if x != nil {
		return x.CanAccess
	}
	return false
}

func (x *UpdateNodeIPAddressRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateNodeIPAddressRequest) GetIsUp() bool {
	if x != nil {
		return x.IsUp
	}
	return false
}

func (x *UpdateNodeIPAddressRequest) GetClusterIds() []int64 {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

// 修改IP地址所属节点
type UpdateNodeIPAddressNodeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddressId int64 `protobuf:"varint,1,opt,name=nodeIPAddressId,proto3" json:"nodeIPAddressId,omitempty"`
	NodeId          int64 `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *UpdateNodeIPAddressNodeIdRequest) Reset() {
	*x = UpdateNodeIPAddressNodeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeIPAddressNodeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeIPAddressNodeIdRequest) ProtoMessage() {}

func (x *UpdateNodeIPAddressNodeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeIPAddressNodeIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeIPAddressNodeIdRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateNodeIPAddressNodeIdRequest) GetNodeIPAddressId() int64 {
	if x != nil {
		return x.NodeIPAddressId
	}
	return 0
}

func (x *UpdateNodeIPAddressNodeIdRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// 禁用单个IP地址
type DisableNodeIPAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddressId int64 `protobuf:"varint,1,opt,name=nodeIPAddressId,proto3" json:"nodeIPAddressId,omitempty"`
}

func (x *DisableNodeIPAddressRequest) Reset() {
	*x = DisableNodeIPAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableNodeIPAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableNodeIPAddressRequest) ProtoMessage() {}

func (x *DisableNodeIPAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableNodeIPAddressRequest.ProtoReflect.Descriptor instead.
func (*DisableNodeIPAddressRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{6}
}

func (x *DisableNodeIPAddressRequest) GetNodeIPAddressId() int64 {
	if x != nil {
		return x.NodeIPAddressId
	}
	return 0
}

type DisableNodeIPAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableNodeIPAddressResponse) Reset() {
	*x = DisableNodeIPAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableNodeIPAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableNodeIPAddressResponse) ProtoMessage() {}

func (x *DisableNodeIPAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableNodeIPAddressResponse.ProtoReflect.Descriptor instead.
func (*DisableNodeIPAddressResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{7}
}

// 禁用节点的所有IP地址
type DisableAllNodeIPAddressesWithNodeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Role   string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *DisableAllNodeIPAddressesWithNodeIdRequest) Reset() {
	*x = DisableAllNodeIPAddressesWithNodeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableAllNodeIPAddressesWithNodeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAllNodeIPAddressesWithNodeIdRequest) ProtoMessage() {}

func (x *DisableAllNodeIPAddressesWithNodeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAllNodeIPAddressesWithNodeIdRequest.ProtoReflect.Descriptor instead.
func (*DisableAllNodeIPAddressesWithNodeIdRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{8}
}

func (x *DisableAllNodeIPAddressesWithNodeIdRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *DisableAllNodeIPAddressesWithNodeIdRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type DisableAllNodeIPAddressesWithNodeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableAllNodeIPAddressesWithNodeIdResponse) Reset() {
	*x = DisableAllNodeIPAddressesWithNodeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableAllNodeIPAddressesWithNodeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAllNodeIPAddressesWithNodeIdResponse) ProtoMessage() {}

func (x *DisableAllNodeIPAddressesWithNodeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAllNodeIPAddressesWithNodeIdResponse.ProtoReflect.Descriptor instead.
func (*DisableAllNodeIPAddressesWithNodeIdResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{9}
}

// 查找单个IP地址
type FindEnabledNodeIPAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddressId int64 `protobuf:"varint,1,opt,name=nodeIPAddressId,proto3" json:"nodeIPAddressId,omitempty"`
}

func (x *FindEnabledNodeIPAddressRequest) Reset() {
	*x = FindEnabledNodeIPAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNodeIPAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNodeIPAddressRequest) ProtoMessage() {}

func (x *FindEnabledNodeIPAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNodeIPAddressRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledNodeIPAddressRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{10}
}

func (x *FindEnabledNodeIPAddressRequest) GetNodeIPAddressId() int64 {
	if x != nil {
		return x.NodeIPAddressId
	}
	return 0
}

type FindEnabledNodeIPAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddress *NodeIPAddress `protobuf:"bytes,1,opt,name=nodeIPAddress,proto3" json:"nodeIPAddress,omitempty"`
}

func (x *FindEnabledNodeIPAddressResponse) Reset() {
	*x = FindEnabledNodeIPAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNodeIPAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNodeIPAddressResponse) ProtoMessage() {}

func (x *FindEnabledNodeIPAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNodeIPAddressResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledNodeIPAddressResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{11}
}

func (x *FindEnabledNodeIPAddressResponse) GetNodeIPAddress() *NodeIPAddress {
	if x != nil {
		return x.NodeIPAddress
	}
	return nil
}

// 查找节点的所有地址
type FindAllEnabledNodeIPAddressesWithNodeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Role   string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *FindAllEnabledNodeIPAddressesWithNodeIdRequest) Reset() {
	*x = FindAllEnabledNodeIPAddressesWithNodeIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNodeIPAddressesWithNodeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNodeIPAddressesWithNodeIdRequest) ProtoMessage() {}

func (x *FindAllEnabledNodeIPAddressesWithNodeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNodeIPAddressesWithNodeIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNodeIPAddressesWithNodeIdRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{12}
}

func (x *FindAllEnabledNodeIPAddressesWithNodeIdRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *FindAllEnabledNodeIPAddressesWithNodeIdRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type FindAllEnabledNodeIPAddressesWithNodeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddresses []*NodeIPAddress `protobuf:"bytes,1,rep,name=nodeIPAddresses,proto3" json:"nodeIPAddresses,omitempty"`
}

func (x *FindAllEnabledNodeIPAddressesWithNodeIdResponse) Reset() {
	*x = FindAllEnabledNodeIPAddressesWithNodeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNodeIPAddressesWithNodeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNodeIPAddressesWithNodeIdResponse) ProtoMessage() {}

func (x *FindAllEnabledNodeIPAddressesWithNodeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNodeIPAddressesWithNodeIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNodeIPAddressesWithNodeIdResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{13}
}

func (x *FindAllEnabledNodeIPAddressesWithNodeIdResponse) GetNodeIPAddresses() []*NodeIPAddress {
	if x != nil {
		return x.NodeIPAddresses
	}
	return nil
}

// 计算IP地址数量
type CountAllEnabledNodeIPAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64  `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	Role          string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	UpState       int32  `protobuf:"varint,3,opt,name=upState,proto3" json:"upState,omitempty"`
	Keyword       string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *CountAllEnabledNodeIPAddressesRequest) Reset() {
	*x = CountAllEnabledNodeIPAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledNodeIPAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledNodeIPAddressesRequest) ProtoMessage() {}

func (x *CountAllEnabledNodeIPAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledNodeIPAddressesRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledNodeIPAddressesRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{14}
}

func (x *CountAllEnabledNodeIPAddressesRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CountAllEnabledNodeIPAddressesRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CountAllEnabledNodeIPAddressesRequest) GetUpState() int32 {
	if x != nil {
		return x.UpState
	}
	return 0
}

func (x *CountAllEnabledNodeIPAddressesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

// 列出单页IP地址
type ListEnabledNodeIPAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64  `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	Role          string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	UpState       int32  `protobuf:"varint,3,opt,name=upState,proto3" json:"upState,omitempty"`
	Keyword       string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Offset        int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledNodeIPAddressesRequest) Reset() {
	*x = ListEnabledNodeIPAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledNodeIPAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledNodeIPAddressesRequest) ProtoMessage() {}

func (x *ListEnabledNodeIPAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledNodeIPAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledNodeIPAddressesRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{15}
}

func (x *ListEnabledNodeIPAddressesRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *ListEnabledNodeIPAddressesRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ListEnabledNodeIPAddressesRequest) GetUpState() int32 {
	if x != nil {
		return x.UpState
	}
	return 0
}

func (x *ListEnabledNodeIPAddressesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListEnabledNodeIPAddressesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledNodeIPAddressesRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledNodeIPAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddresses []*NodeIPAddress `protobuf:"bytes,1,rep,name=nodeIPAddresses,proto3" json:"nodeIPAddresses,omitempty"`
}

func (x *ListEnabledNodeIPAddressesResponse) Reset() {
	*x = ListEnabledNodeIPAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledNodeIPAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledNodeIPAddressesResponse) ProtoMessage() {}

func (x *ListEnabledNodeIPAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledNodeIPAddressesResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledNodeIPAddressesResponse) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{16}
}

func (x *ListEnabledNodeIPAddressesResponse) GetNodeIPAddresses() []*NodeIPAddress {
	if x != nil {
		return x.NodeIPAddresses
	}
	return nil
}

// 设置上下线状态
type UpdateNodeIPAddressIsUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddressId int64 `protobuf:"varint,1,opt,name=nodeIPAddressId,proto3" json:"nodeIPAddressId,omitempty"`
	IsUp            bool  `protobuf:"varint,2,opt,name=isUp,proto3" json:"isUp,omitempty"`
}

func (x *UpdateNodeIPAddressIsUpRequest) Reset() {
	*x = UpdateNodeIPAddressIsUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeIPAddressIsUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeIPAddressIsUpRequest) ProtoMessage() {}

func (x *UpdateNodeIPAddressIsUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeIPAddressIsUpRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeIPAddressIsUpRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateNodeIPAddressIsUpRequest) GetNodeIPAddressId() int64 {
	if x != nil {
		return x.NodeIPAddressId
	}
	return 0
}

func (x *UpdateNodeIPAddressIsUpRequest) GetIsUp() bool {
	if x != nil {
		return x.IsUp
	}
	return false
}

// 还原备用IP状态
type RestoreNodeIPAddressBackupIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIPAddressId int64 `protobuf:"varint,1,opt,name=nodeIPAddressId,proto3" json:"nodeIPAddressId,omitempty"`
}

func (x *RestoreNodeIPAddressBackupIPRequest) Reset() {
	*x = RestoreNodeIPAddressBackupIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_ip_address_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreNodeIPAddressBackupIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreNodeIPAddressBackupIPRequest) ProtoMessage() {}

func (x *RestoreNodeIPAddressBackupIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_ip_address_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreNodeIPAddressBackupIPRequest.ProtoReflect.Descriptor instead.
func (*RestoreNodeIPAddressBackupIPRequest) Descriptor() ([]byte, []int) {
	return file_service_node_ip_address_proto_rawDescGZIP(), []int{18}
}

func (x *RestoreNodeIPAddressBackupIPRequest) GetNodeIPAddressId() int64 {
	if x != nil {
		return x.NodeIPAddressId
	}
	return 0
}

var File_service_node_ip_address_proto protoreflect.FileDescriptor

var file_service_node_ip_address_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x73, 0x55, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69,
	0x73, 0x55, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x55, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x55, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69,
	0x73, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x55, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x69, 0x73, 0x55, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x1b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x2a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x22, 0x2d, 0x0a, 0x2b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4b, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x20,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5c, 0x0a, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x6e, 0x0a, 0x2f, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0xbd, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0x61, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x5e, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x73, 0x55, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x55, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x55, 0x70, 0x22, 0x4f, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x32, 0xbe, 0x09, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x13,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x20, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x14,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x23, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x27, 0x66, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x32, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x1e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6b, 0x0a, 0x1a, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x17,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x73, 0x55, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x73, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x1c, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x50, 0x12, 0x27, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_node_ip_address_proto_rawDescOnce sync.Once
	file_service_node_ip_address_proto_rawDescData = file_service_node_ip_address_proto_rawDesc
)

func file_service_node_ip_address_proto_rawDescGZIP() []byte {
	file_service_node_ip_address_proto_rawDescOnce.Do(func() {
		file_service_node_ip_address_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_node_ip_address_proto_rawDescData)
	})
	return file_service_node_ip_address_proto_rawDescData
}

var file_service_node_ip_address_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_service_node_ip_address_proto_goTypes = []interface{}{
	(*CreateNodeIPAddressRequest)(nil),                      // 0: pb.CreateNodeIPAddressRequest
	(*CreateNodeIPAddressResponse)(nil),                     // 1: pb.CreateNodeIPAddressResponse
	(*CreateNodeIPAddressesRequest)(nil),                    // 2: pb.CreateNodeIPAddressesRequest
	(*CreateNodeIPAddressesResponse)(nil),                   // 3: pb.CreateNodeIPAddressesResponse
	(*UpdateNodeIPAddressRequest)(nil),                      // 4: pb.UpdateNodeIPAddressRequest
	(*UpdateNodeIPAddressNodeIdRequest)(nil),                // 5: pb.UpdateNodeIPAddressNodeIdRequest
	(*DisableNodeIPAddressRequest)(nil),                     // 6: pb.DisableNodeIPAddressRequest
	(*DisableNodeIPAddressResponse)(nil),                    // 7: pb.DisableNodeIPAddressResponse
	(*DisableAllNodeIPAddressesWithNodeIdRequest)(nil),      // 8: pb.DisableAllNodeIPAddressesWithNodeIdRequest
	(*DisableAllNodeIPAddressesWithNodeIdResponse)(nil),     // 9: pb.DisableAllNodeIPAddressesWithNodeIdResponse
	(*FindEnabledNodeIPAddressRequest)(nil),                 // 10: pb.FindEnabledNodeIPAddressRequest
	(*FindEnabledNodeIPAddressResponse)(nil),                // 11: pb.FindEnabledNodeIPAddressResponse
	(*FindAllEnabledNodeIPAddressesWithNodeIdRequest)(nil),  // 12: pb.FindAllEnabledNodeIPAddressesWithNodeIdRequest
	(*FindAllEnabledNodeIPAddressesWithNodeIdResponse)(nil), // 13: pb.FindAllEnabledNodeIPAddressesWithNodeIdResponse
	(*CountAllEnabledNodeIPAddressesRequest)(nil),           // 14: pb.CountAllEnabledNodeIPAddressesRequest
	(*ListEnabledNodeIPAddressesRequest)(nil),               // 15: pb.ListEnabledNodeIPAddressesRequest
	(*ListEnabledNodeIPAddressesResponse)(nil),              // 16: pb.ListEnabledNodeIPAddressesResponse
	(*UpdateNodeIPAddressIsUpRequest)(nil),                  // 17: pb.UpdateNodeIPAddressIsUpRequest
	(*RestoreNodeIPAddressBackupIPRequest)(nil),             // 18: pb.RestoreNodeIPAddressBackupIPRequest
	(*NodeIPAddress)(nil),                                   // 19: pb.NodeIPAddress
	(*RPCSuccess)(nil),                                      // 20: pb.RPCSuccess
	(*RPCCountResponse)(nil),                                // 21: pb.RPCCountResponse
}
var file_service_node_ip_address_proto_depIdxs = []int32{
	19, // 0: pb.FindEnabledNodeIPAddressResponse.nodeIPAddress:type_name -> pb.NodeIPAddress
	19, // 1: pb.FindAllEnabledNodeIPAddressesWithNodeIdResponse.nodeIPAddresses:type_name -> pb.NodeIPAddress
	19, // 2: pb.ListEnabledNodeIPAddressesResponse.nodeIPAddresses:type_name -> pb.NodeIPAddress
	0,  // 3: pb.NodeIPAddressService.createNodeIPAddress:input_type -> pb.CreateNodeIPAddressRequest
	2,  // 4: pb.NodeIPAddressService.createNodeIPAddresses:input_type -> pb.CreateNodeIPAddressesRequest
	4,  // 5: pb.NodeIPAddressService.updateNodeIPAddress:input_type -> pb.UpdateNodeIPAddressRequest
	5,  // 6: pb.NodeIPAddressService.updateNodeIPAddressNodeId:input_type -> pb.UpdateNodeIPAddressNodeIdRequest
	6,  // 7: pb.NodeIPAddressService.disableNodeIPAddress:input_type -> pb.DisableNodeIPAddressRequest
	8,  // 8: pb.NodeIPAddressService.disableAllNodeIPAddressesWithNodeId:input_type -> pb.DisableAllNodeIPAddressesWithNodeIdRequest
	10, // 9: pb.NodeIPAddressService.findEnabledNodeIPAddress:input_type -> pb.FindEnabledNodeIPAddressRequest
	12, // 10: pb.NodeIPAddressService.findAllEnabledNodeIPAddressesWithNodeId:input_type -> pb.FindAllEnabledNodeIPAddressesWithNodeIdRequest
	14, // 11: pb.NodeIPAddressService.countAllEnabledNodeIPAddresses:input_type -> pb.CountAllEnabledNodeIPAddressesRequest
	15, // 12: pb.NodeIPAddressService.listEnabledNodeIPAddresses:input_type -> pb.ListEnabledNodeIPAddressesRequest
	17, // 13: pb.NodeIPAddressService.updateNodeIPAddressIsUp:input_type -> pb.UpdateNodeIPAddressIsUpRequest
	18, // 14: pb.NodeIPAddressService.restoreNodeIPAddressBackupIP:input_type -> pb.RestoreNodeIPAddressBackupIPRequest
	1,  // 15: pb.NodeIPAddressService.createNodeIPAddress:output_type -> pb.CreateNodeIPAddressResponse
	3,  // 16: pb.NodeIPAddressService.createNodeIPAddresses:output_type -> pb.CreateNodeIPAddressesResponse
	20, // 17: pb.NodeIPAddressService.updateNodeIPAddress:output_type -> pb.RPCSuccess
	20, // 18: pb.NodeIPAddressService.updateNodeIPAddressNodeId:output_type -> pb.RPCSuccess
	7,  // 19: pb.NodeIPAddressService.disableNodeIPAddress:output_type -> pb.DisableNodeIPAddressResponse
	9,  // 20: pb.NodeIPAddressService.disableAllNodeIPAddressesWithNodeId:output_type -> pb.DisableAllNodeIPAddressesWithNodeIdResponse
	11, // 21: pb.NodeIPAddressService.findEnabledNodeIPAddress:output_type -> pb.FindEnabledNodeIPAddressResponse
	13, // 22: pb.NodeIPAddressService.findAllEnabledNodeIPAddressesWithNodeId:output_type -> pb.FindAllEnabledNodeIPAddressesWithNodeIdResponse
	21, // 23: pb.NodeIPAddressService.countAllEnabledNodeIPAddresses:output_type -> pb.RPCCountResponse
	16, // 24: pb.NodeIPAddressService.listEnabledNodeIPAddresses:output_type -> pb.ListEnabledNodeIPAddressesResponse
	20, // 25: pb.NodeIPAddressService.updateNodeIPAddressIsUp:output_type -> pb.RPCSuccess
	20, // 26: pb.NodeIPAddressService.restoreNodeIPAddressBackupIP:output_type -> pb.RPCSuccess
	15, // [15:27] is the sub-list for method output_type
	3,  // [3:15] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_node_ip_address_proto_init() }
func file_service_node_ip_address_proto_init() {
	if File_service_node_ip_address_proto != nil {
		return
	}
	file_models_model_node_ip_address_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_node_ip_address_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeIPAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeIPAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeIPAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeIPAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeIPAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeIPAddressNodeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableNodeIPAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableNodeIPAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableAllNodeIPAddressesWithNodeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableAllNodeIPAddressesWithNodeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNodeIPAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNodeIPAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNodeIPAddressesWithNodeIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNodeIPAddressesWithNodeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledNodeIPAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledNodeIPAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledNodeIPAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeIPAddressIsUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_ip_address_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreNodeIPAddressBackupIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_node_ip_address_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_node_ip_address_proto_goTypes,
		DependencyIndexes: file_service_node_ip_address_proto_depIdxs,
		MessageInfos:      file_service_node_ip_address_proto_msgTypes,
	}.Build()
	File_service_node_ip_address_proto = out.File
	file_service_node_ip_address_proto_rawDesc = nil
	file_service_node_ip_address_proto_goTypes = nil
	file_service_node_ip_address_proto_depIdxs = nil
}
