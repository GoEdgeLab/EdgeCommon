// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_firewall.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 组合看板数据
type ComposeFirewallGlobalBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ComposeFirewallGlobalBoardRequest) Reset() {
	*x = ComposeFirewallGlobalBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFirewallGlobalBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFirewallGlobalBoardRequest) ProtoMessage() {}

func (x *ComposeFirewallGlobalBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFirewallGlobalBoardRequest.ProtoReflect.Descriptor instead.
func (*ComposeFirewallGlobalBoardRequest) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{0}
}

type ComposeFirewallGlobalBoardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountDailyLogs         int64                                                           `protobuf:"varint,1,opt,name=countDailyLogs,proto3" json:"countDailyLogs,omitempty"`
	CountDailyBlocks       int64                                                           `protobuf:"varint,2,opt,name=countDailyBlocks,proto3" json:"countDailyBlocks,omitempty"`
	CountDailyCaptcha      int64                                                           `protobuf:"varint,3,opt,name=countDailyCaptcha,proto3" json:"countDailyCaptcha,omitempty"`
	CountWeeklyBlocks      int64                                                           `protobuf:"varint,4,opt,name=countWeeklyBlocks,proto3" json:"countWeeklyBlocks,omitempty"`
	HttpFirewallRuleGroups []*ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat `protobuf:"bytes,30,rep,name=httpFirewallRuleGroups,proto3" json:"httpFirewallRuleGroups,omitempty"`
	DailyStats             []*ComposeFirewallGlobalBoardResponse_DailyStat                 `protobuf:"bytes,31,rep,name=dailyStats,proto3" json:"dailyStats,omitempty"`
	HourlyStats            []*ComposeFirewallGlobalBoardResponse_HourlyStat                `protobuf:"bytes,32,rep,name=hourlyStats,proto3" json:"hourlyStats,omitempty"`
	TopNodeStats           []*ComposeFirewallGlobalBoardResponse_NodeStat                  `protobuf:"bytes,33,rep,name=topNodeStats,proto3" json:"topNodeStats,omitempty"`
	TopDomainStats         []*ComposeFirewallGlobalBoardResponse_DomainStat                `protobuf:"bytes,34,rep,name=topDomainStats,proto3" json:"topDomainStats,omitempty"`
	TopCountryStats        []*ComposeFirewallGlobalBoardResponse_CountryStat               `protobuf:"bytes,35,rep,name=topCountryStats,proto3" json:"topCountryStats,omitempty"`
}

func (x *ComposeFirewallGlobalBoardResponse) Reset() {
	*x = ComposeFirewallGlobalBoardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFirewallGlobalBoardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFirewallGlobalBoardResponse) ProtoMessage() {}

func (x *ComposeFirewallGlobalBoardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFirewallGlobalBoardResponse.ProtoReflect.Descriptor instead.
func (*ComposeFirewallGlobalBoardResponse) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{1}
}

func (x *ComposeFirewallGlobalBoardResponse) GetCountDailyLogs() int64 {
	if x != nil {
		return x.CountDailyLogs
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse) GetCountDailyBlocks() int64 {
	if x != nil {
		return x.CountDailyBlocks
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse) GetCountDailyCaptcha() int64 {
	if x != nil {
		return x.CountDailyCaptcha
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse) GetCountWeeklyBlocks() int64 {
	if x != nil {
		return x.CountWeeklyBlocks
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse) GetHttpFirewallRuleGroups() []*ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat {
	if x != nil {
		return x.HttpFirewallRuleGroups
	}
	return nil
}

func (x *ComposeFirewallGlobalBoardResponse) GetDailyStats() []*ComposeFirewallGlobalBoardResponse_DailyStat {
	if x != nil {
		return x.DailyStats
	}
	return nil
}

func (x *ComposeFirewallGlobalBoardResponse) GetHourlyStats() []*ComposeFirewallGlobalBoardResponse_HourlyStat {
	if x != nil {
		return x.HourlyStats
	}
	return nil
}

func (x *ComposeFirewallGlobalBoardResponse) GetTopNodeStats() []*ComposeFirewallGlobalBoardResponse_NodeStat {
	if x != nil {
		return x.TopNodeStats
	}
	return nil
}

func (x *ComposeFirewallGlobalBoardResponse) GetTopDomainStats() []*ComposeFirewallGlobalBoardResponse_DomainStat {
	if x != nil {
		return x.TopDomainStats
	}
	return nil
}

func (x *ComposeFirewallGlobalBoardResponse) GetTopCountryStats() []*ComposeFirewallGlobalBoardResponse_CountryStat {
	if x != nil {
		return x.TopCountryStats
	}
	return nil
}

// 发送告警(notify)消息
type NotifyHTTPFirewallEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId                int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	HttpFirewallPolicyId    int64 `protobuf:"varint,2,opt,name=httpFirewallPolicyId,proto3" json:"httpFirewallPolicyId,omitempty"`
	HttpFirewallRuleGroupId int64 `protobuf:"varint,3,opt,name=httpFirewallRuleGroupId,proto3" json:"httpFirewallRuleGroupId,omitempty"`
	HttpFirewallRuleSetId   int64 `protobuf:"varint,4,opt,name=httpFirewallRuleSetId,proto3" json:"httpFirewallRuleSetId,omitempty"`
	CreatedAt               int64 `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *NotifyHTTPFirewallEventRequest) Reset() {
	*x = NotifyHTTPFirewallEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyHTTPFirewallEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyHTTPFirewallEventRequest) ProtoMessage() {}

func (x *NotifyHTTPFirewallEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyHTTPFirewallEventRequest.ProtoReflect.Descriptor instead.
func (*NotifyHTTPFirewallEventRequest) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{2}
}

func (x *NotifyHTTPFirewallEventRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *NotifyHTTPFirewallEventRequest) GetHttpFirewallPolicyId() int64 {
	if x != nil {
		return x.HttpFirewallPolicyId
	}
	return 0
}

func (x *NotifyHTTPFirewallEventRequest) GetHttpFirewallRuleGroupId() int64 {
	if x != nil {
		return x.HttpFirewallRuleGroupId
	}
	return 0
}

func (x *NotifyHTTPFirewallEventRequest) GetHttpFirewallRuleSetId() int64 {
	if x != nil {
		return x.HttpFirewallRuleSetId
	}
	return 0
}

func (x *NotifyHTTPFirewallEventRequest) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// 读取当前Block动作次数
type CountFirewallDailyBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountFirewallDailyBlocksRequest) Reset() {
	*x = CountFirewallDailyBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFirewallDailyBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFirewallDailyBlocksRequest) ProtoMessage() {}

func (x *CountFirewallDailyBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFirewallDailyBlocksRequest.ProtoReflect.Descriptor instead.
func (*CountFirewallDailyBlocksRequest) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{3}
}

type CountFirewallDailyBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountBlocks int64 `protobuf:"varint,1,opt,name=countBlocks,proto3" json:"countBlocks,omitempty"`
}

func (x *CountFirewallDailyBlocksResponse) Reset() {
	*x = CountFirewallDailyBlocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFirewallDailyBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFirewallDailyBlocksResponse) ProtoMessage() {}

func (x *CountFirewallDailyBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFirewallDailyBlocksResponse.ProtoReflect.Descriptor instead.
func (*CountFirewallDailyBlocksResponse) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{4}
}

func (x *CountFirewallDailyBlocksResponse) GetCountBlocks() int64 {
	if x != nil {
		return x.CountBlocks
	}
	return 0
}

type ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpFirewallRuleGroup *HTTPFirewallRuleGroup `protobuf:"bytes,1,opt,name=httpFirewallRuleGroup,proto3" json:"httpFirewallRuleGroup,omitempty"`
	Count                 int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat) Reset() {
	*x = ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat) ProtoMessage() {}

func (x *ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat.ProtoReflect.Descriptor instead.
func (*ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat) GetHttpFirewallRuleGroup() *HTTPFirewallRuleGroup {
	if x != nil {
		return x.HttpFirewallRuleGroup
	}
	return nil
}

func (x *ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ComposeFirewallGlobalBoardResponse_HourlyStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour         string `protobuf:"bytes,1,opt,name=hour,proto3" json:"hour,omitempty"`
	CountLogs    int64  `protobuf:"varint,2,opt,name=countLogs,proto3" json:"countLogs,omitempty"`
	CountCaptcha int64  `protobuf:"varint,3,opt,name=countCaptcha,proto3" json:"countCaptcha,omitempty"`
	CountBlocks  int64  `protobuf:"varint,4,opt,name=countBlocks,proto3" json:"countBlocks,omitempty"`
}

func (x *ComposeFirewallGlobalBoardResponse_HourlyStat) Reset() {
	*x = ComposeFirewallGlobalBoardResponse_HourlyStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFirewallGlobalBoardResponse_HourlyStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFirewallGlobalBoardResponse_HourlyStat) ProtoMessage() {}

func (x *ComposeFirewallGlobalBoardResponse_HourlyStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFirewallGlobalBoardResponse_HourlyStat.ProtoReflect.Descriptor instead.
func (*ComposeFirewallGlobalBoardResponse_HourlyStat) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ComposeFirewallGlobalBoardResponse_HourlyStat) GetHour() string {
	if x != nil {
		return x.Hour
	}
	return ""
}

func (x *ComposeFirewallGlobalBoardResponse_HourlyStat) GetCountLogs() int64 {
	if x != nil {
		return x.CountLogs
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_HourlyStat) GetCountCaptcha() int64 {
	if x != nil {
		return x.CountCaptcha
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_HourlyStat) GetCountBlocks() int64 {
	if x != nil {
		return x.CountBlocks
	}
	return 0
}

type ComposeFirewallGlobalBoardResponse_DailyStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day          string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	CountLogs    int64  `protobuf:"varint,2,opt,name=countLogs,proto3" json:"countLogs,omitempty"`
	CountCaptcha int64  `protobuf:"varint,3,opt,name=countCaptcha,proto3" json:"countCaptcha,omitempty"`
	CountBlocks  int64  `protobuf:"varint,4,opt,name=countBlocks,proto3" json:"countBlocks,omitempty"`
}

func (x *ComposeFirewallGlobalBoardResponse_DailyStat) Reset() {
	*x = ComposeFirewallGlobalBoardResponse_DailyStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFirewallGlobalBoardResponse_DailyStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFirewallGlobalBoardResponse_DailyStat) ProtoMessage() {}

func (x *ComposeFirewallGlobalBoardResponse_DailyStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFirewallGlobalBoardResponse_DailyStat.ProtoReflect.Descriptor instead.
func (*ComposeFirewallGlobalBoardResponse_DailyStat) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ComposeFirewallGlobalBoardResponse_DailyStat) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *ComposeFirewallGlobalBoardResponse_DailyStat) GetCountLogs() int64 {
	if x != nil {
		return x.CountLogs
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_DailyStat) GetCountCaptcha() int64 {
	if x != nil {
		return x.CountCaptcha
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_DailyStat) GetCountBlocks() int64 {
	if x != nil {
		return x.CountBlocks
	}
	return 0
}

type ComposeFirewallGlobalBoardResponse_NodeStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId              int64  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	NodeName            string `protobuf:"bytes,2,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	CountRequests       int64  `protobuf:"varint,3,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	Bytes               int64  `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CountAttackRequests int64  `protobuf:"varint,6,opt,name=countAttackRequests,proto3" json:"countAttackRequests,omitempty"`
	AttackBytes         int64  `protobuf:"varint,7,opt,name=attackBytes,proto3" json:"attackBytes,omitempty"`
}

func (x *ComposeFirewallGlobalBoardResponse_NodeStat) Reset() {
	*x = ComposeFirewallGlobalBoardResponse_NodeStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFirewallGlobalBoardResponse_NodeStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFirewallGlobalBoardResponse_NodeStat) ProtoMessage() {}

func (x *ComposeFirewallGlobalBoardResponse_NodeStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFirewallGlobalBoardResponse_NodeStat.ProtoReflect.Descriptor instead.
func (*ComposeFirewallGlobalBoardResponse_NodeStat) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{1, 3}
}

func (x *ComposeFirewallGlobalBoardResponse_NodeStat) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_NodeStat) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ComposeFirewallGlobalBoardResponse_NodeStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_NodeStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_NodeStat) GetCountAttackRequests() int64 {
	if x != nil {
		return x.CountAttackRequests
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_NodeStat) GetAttackBytes() int64 {
	if x != nil {
		return x.AttackBytes
	}
	return 0
}

type ComposeFirewallGlobalBoardResponse_DomainStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId            int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Domain              string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	CountRequests       int64  `protobuf:"varint,3,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	Bytes               int64  `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CountAttackRequests int64  `protobuf:"varint,6,opt,name=countAttackRequests,proto3" json:"countAttackRequests,omitempty"`
	AttackBytes         int64  `protobuf:"varint,7,opt,name=attackBytes,proto3" json:"attackBytes,omitempty"`
}

func (x *ComposeFirewallGlobalBoardResponse_DomainStat) Reset() {
	*x = ComposeFirewallGlobalBoardResponse_DomainStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFirewallGlobalBoardResponse_DomainStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFirewallGlobalBoardResponse_DomainStat) ProtoMessage() {}

func (x *ComposeFirewallGlobalBoardResponse_DomainStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFirewallGlobalBoardResponse_DomainStat.ProtoReflect.Descriptor instead.
func (*ComposeFirewallGlobalBoardResponse_DomainStat) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{1, 4}
}

func (x *ComposeFirewallGlobalBoardResponse_DomainStat) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_DomainStat) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ComposeFirewallGlobalBoardResponse_DomainStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_DomainStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_DomainStat) GetCountAttackRequests() int64 {
	if x != nil {
		return x.CountAttackRequests
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_DomainStat) GetAttackBytes() int64 {
	if x != nil {
		return x.AttackBytes
	}
	return 0
}

type ComposeFirewallGlobalBoardResponse_CountryStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryName         string  `protobuf:"bytes,1,opt,name=countryName,proto3" json:"countryName,omitempty"`
	Bytes               int64   `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CountRequests       int64   `protobuf:"varint,3,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	Percent             float32 `protobuf:"fixed32,4,opt,name=percent,proto3" json:"percent,omitempty"` // 流量占比
	CountAttackRequests int64   `protobuf:"varint,6,opt,name=countAttackRequests,proto3" json:"countAttackRequests,omitempty"`
	AttackBytes         int64   `protobuf:"varint,7,opt,name=attackBytes,proto3" json:"attackBytes,omitempty"`
}

func (x *ComposeFirewallGlobalBoardResponse_CountryStat) Reset() {
	*x = ComposeFirewallGlobalBoardResponse_CountryStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_firewall_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFirewallGlobalBoardResponse_CountryStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFirewallGlobalBoardResponse_CountryStat) ProtoMessage() {}

func (x *ComposeFirewallGlobalBoardResponse_CountryStat) ProtoReflect() protoreflect.Message {
	mi := &file_service_firewall_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFirewallGlobalBoardResponse_CountryStat.ProtoReflect.Descriptor instead.
func (*ComposeFirewallGlobalBoardResponse_CountryStat) Descriptor() ([]byte, []int) {
	return file_service_firewall_proto_rawDescGZIP(), []int{1, 5}
}

func (x *ComposeFirewallGlobalBoardResponse_CountryStat) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *ComposeFirewallGlobalBoardResponse_CountryStat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_CountryStat) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_CountryStat) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_CountryStat) GetCountAttackRequests() int64 {
	if x != nil {
		return x.CountAttackRequests
	}
	return 0
}

func (x *ComposeFirewallGlobalBoardResponse_CountryStat) GetAttackBytes() int64 {
	if x != nil {
		return x.AttackBytes
	}
	return 0
}

var File_service_firewall_proto protoreflect.FileDescriptor

var file_service_firewall_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x93, 0x0e, 0x0a, 0x22, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x6f,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x78, 0x0a, 0x16, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x16, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x0b,
	0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x53, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x0e, 0x74, 0x6f, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f,
	0x74, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a,
	0x82, 0x01, 0x0a, 0x19, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x12, 0x4f, 0x0a,
	0x15, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x15, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x84, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x09,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a,
	0xce, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x1a, 0xd0, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x1a, 0xd9, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0xfe, 0x01, 0x0a, 0x1e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x68, 0x74,
	0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15,
	0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x68, 0x74, 0x74,
	0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x21, 0x0a, 0x1f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x32, 0xb4, 0x02, 0x0a, 0x0f, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x17, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_firewall_proto_rawDescOnce sync.Once
	file_service_firewall_proto_rawDescData = file_service_firewall_proto_rawDesc
)

func file_service_firewall_proto_rawDescGZIP() []byte {
	file_service_firewall_proto_rawDescOnce.Do(func() {
		file_service_firewall_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_firewall_proto_rawDescData)
	})
	return file_service_firewall_proto_rawDescData
}

var file_service_firewall_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_service_firewall_proto_goTypes = []interface{}{
	(*ComposeFirewallGlobalBoardRequest)(nil),                            // 0: pb.ComposeFirewallGlobalBoardRequest
	(*ComposeFirewallGlobalBoardResponse)(nil),                           // 1: pb.ComposeFirewallGlobalBoardResponse
	(*NotifyHTTPFirewallEventRequest)(nil),                               // 2: pb.NotifyHTTPFirewallEventRequest
	(*CountFirewallDailyBlocksRequest)(nil),                              // 3: pb.CountFirewallDailyBlocksRequest
	(*CountFirewallDailyBlocksResponse)(nil),                             // 4: pb.CountFirewallDailyBlocksResponse
	(*ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat)(nil), // 5: pb.ComposeFirewallGlobalBoardResponse.HTTPFirewallRuleGroupStat
	(*ComposeFirewallGlobalBoardResponse_HourlyStat)(nil),                // 6: pb.ComposeFirewallGlobalBoardResponse.HourlyStat
	(*ComposeFirewallGlobalBoardResponse_DailyStat)(nil),                 // 7: pb.ComposeFirewallGlobalBoardResponse.DailyStat
	(*ComposeFirewallGlobalBoardResponse_NodeStat)(nil),                  // 8: pb.ComposeFirewallGlobalBoardResponse.NodeStat
	(*ComposeFirewallGlobalBoardResponse_DomainStat)(nil),                // 9: pb.ComposeFirewallGlobalBoardResponse.DomainStat
	(*ComposeFirewallGlobalBoardResponse_CountryStat)(nil),               // 10: pb.ComposeFirewallGlobalBoardResponse.CountryStat
	(*HTTPFirewallRuleGroup)(nil),                                        // 11: pb.HTTPFirewallRuleGroup
	(*RPCSuccess)(nil),                                                   // 12: pb.RPCSuccess
}
var file_service_firewall_proto_depIdxs = []int32{
	5,  // 0: pb.ComposeFirewallGlobalBoardResponse.httpFirewallRuleGroups:type_name -> pb.ComposeFirewallGlobalBoardResponse.HTTPFirewallRuleGroupStat
	7,  // 1: pb.ComposeFirewallGlobalBoardResponse.dailyStats:type_name -> pb.ComposeFirewallGlobalBoardResponse.DailyStat
	6,  // 2: pb.ComposeFirewallGlobalBoardResponse.hourlyStats:type_name -> pb.ComposeFirewallGlobalBoardResponse.HourlyStat
	8,  // 3: pb.ComposeFirewallGlobalBoardResponse.topNodeStats:type_name -> pb.ComposeFirewallGlobalBoardResponse.NodeStat
	9,  // 4: pb.ComposeFirewallGlobalBoardResponse.topDomainStats:type_name -> pb.ComposeFirewallGlobalBoardResponse.DomainStat
	10, // 5: pb.ComposeFirewallGlobalBoardResponse.topCountryStats:type_name -> pb.ComposeFirewallGlobalBoardResponse.CountryStat
	11, // 6: pb.ComposeFirewallGlobalBoardResponse.HTTPFirewallRuleGroupStat.httpFirewallRuleGroup:type_name -> pb.HTTPFirewallRuleGroup
	0,  // 7: pb.FirewallService.composeFirewallGlobalBoard:input_type -> pb.ComposeFirewallGlobalBoardRequest
	2,  // 8: pb.FirewallService.notifyHTTPFirewallEvent:input_type -> pb.NotifyHTTPFirewallEventRequest
	3,  // 9: pb.FirewallService.countFirewallDailyBlocks:input_type -> pb.CountFirewallDailyBlocksRequest
	1,  // 10: pb.FirewallService.composeFirewallGlobalBoard:output_type -> pb.ComposeFirewallGlobalBoardResponse
	12, // 11: pb.FirewallService.notifyHTTPFirewallEvent:output_type -> pb.RPCSuccess
	4,  // 12: pb.FirewallService.countFirewallDailyBlocks:output_type -> pb.CountFirewallDailyBlocksResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_service_firewall_proto_init() }
func file_service_firewall_proto_init() {
	if File_service_firewall_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_http_firewall_rule_group_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_firewall_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFirewallGlobalBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_firewall_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFirewallGlobalBoardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_firewall_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyHTTPFirewallEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_firewall_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFirewallDailyBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_firewall_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFirewallDailyBlocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_firewall_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFirewallGlobalBoardResponse_HTTPFirewallRuleGroupStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_firewall_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFirewallGlobalBoardResponse_HourlyStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_firewall_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFirewallGlobalBoardResponse_DailyStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_firewall_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFirewallGlobalBoardResponse_NodeStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_firewall_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFirewallGlobalBoardResponse_DomainStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_firewall_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFirewallGlobalBoardResponse_CountryStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_firewall_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_firewall_proto_goTypes,
		DependencyIndexes: file_service_firewall_proto_depIdxs,
		MessageInfos:      file_service_firewall_proto_msgTypes,
	}.Build()
	File_service_firewall_proto = out.File
	file_service_firewall_proto_rawDesc = nil
	file_service_firewall_proto_goTypes = nil
	file_service_firewall_proto_depIdxs = nil
}
