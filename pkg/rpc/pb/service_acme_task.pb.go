// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_acme_task.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 计算某个ACME用户相关的任务数量
type CountAllEnabledACMETasksWithACMEUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeUserId int64 `protobuf:"varint,1,opt,name=acmeUserId,proto3" json:"acmeUserId,omitempty"`
}

func (x *CountAllEnabledACMETasksWithACMEUserIdRequest) Reset() {
	*x = CountAllEnabledACMETasksWithACMEUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledACMETasksWithACMEUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledACMETasksWithACMEUserIdRequest) ProtoMessage() {}

func (x *CountAllEnabledACMETasksWithACMEUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledACMETasksWithACMEUserIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledACMETasksWithACMEUserIdRequest) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{0}
}

func (x *CountAllEnabledACMETasksWithACMEUserIdRequest) GetAcmeUserId() int64 {
	if x != nil {
		return x.AcmeUserId
	}
	return 0
}

// 计算跟某个DNS服务商相关的任务数量
type CountEnabledACMETasksWithDNSProviderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsProviderId int64 `protobuf:"varint,1,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
}

func (x *CountEnabledACMETasksWithDNSProviderIdRequest) Reset() {
	*x = CountEnabledACMETasksWithDNSProviderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountEnabledACMETasksWithDNSProviderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountEnabledACMETasksWithDNSProviderIdRequest) ProtoMessage() {}

func (x *CountEnabledACMETasksWithDNSProviderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountEnabledACMETasksWithDNSProviderIdRequest.ProtoReflect.Descriptor instead.
func (*CountEnabledACMETasksWithDNSProviderIdRequest) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{1}
}

func (x *CountEnabledACMETasksWithDNSProviderIdRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

// 计算所有任务数量
type CountAllEnabledACMETasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId      int64  `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`
	UserId       int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	IsAvailable  bool   `protobuf:"varint,3,opt,name=isAvailable,proto3" json:"isAvailable,omitempty"`
	IsExpired    bool   `protobuf:"varint,4,opt,name=isExpired,proto3" json:"isExpired,omitempty"`
	ExpiringDays int32  `protobuf:"varint,5,opt,name=expiringDays,proto3" json:"expiringDays,omitempty"`
	Keyword      string `protobuf:"bytes,6,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *CountAllEnabledACMETasksRequest) Reset() {
	*x = CountAllEnabledACMETasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledACMETasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledACMETasksRequest) ProtoMessage() {}

func (x *CountAllEnabledACMETasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledACMETasksRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledACMETasksRequest) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{2}
}

func (x *CountAllEnabledACMETasksRequest) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *CountAllEnabledACMETasksRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CountAllEnabledACMETasksRequest) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *CountAllEnabledACMETasksRequest) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *CountAllEnabledACMETasksRequest) GetExpiringDays() int32 {
	if x != nil {
		return x.ExpiringDays
	}
	return 0
}

func (x *CountAllEnabledACMETasksRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

// 列出单页任务
type ListEnabledACMETasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId      int64  `protobuf:"varint,1,opt,name=adminId,proto3" json:"adminId,omitempty"`
	UserId       int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Offset       int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Size         int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	IsAvailable  bool   `protobuf:"varint,5,opt,name=isAvailable,proto3" json:"isAvailable,omitempty"`
	IsExpired    bool   `protobuf:"varint,6,opt,name=isExpired,proto3" json:"isExpired,omitempty"`
	ExpiringDays int32  `protobuf:"varint,7,opt,name=expiringDays,proto3" json:"expiringDays,omitempty"`
	Keyword      string `protobuf:"bytes,8,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *ListEnabledACMETasksRequest) Reset() {
	*x = ListEnabledACMETasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledACMETasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledACMETasksRequest) ProtoMessage() {}

func (x *ListEnabledACMETasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledACMETasksRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledACMETasksRequest) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{3}
}

func (x *ListEnabledACMETasksRequest) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *ListEnabledACMETasksRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListEnabledACMETasksRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledACMETasksRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListEnabledACMETasksRequest) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *ListEnabledACMETasksRequest) GetIsExpired() bool {
	if x != nil {
		return x.IsExpired
	}
	return false
}

func (x *ListEnabledACMETasksRequest) GetExpiringDays() int32 {
	if x != nil {
		return x.ExpiringDays
	}
	return 0
}

func (x *ListEnabledACMETasksRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type ListEnabledACMETasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeTasks []*ACMETask `protobuf:"bytes,1,rep,name=acmeTasks,proto3" json:"acmeTasks,omitempty"`
}

func (x *ListEnabledACMETasksResponse) Reset() {
	*x = ListEnabledACMETasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledACMETasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledACMETasksResponse) ProtoMessage() {}

func (x *ListEnabledACMETasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledACMETasksResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledACMETasksResponse) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{4}
}

func (x *ListEnabledACMETasksResponse) GetAcmeTasks() []*ACMETask {
	if x != nil {
		return x.AcmeTasks
	}
	return nil
}

// 创建任务
type CreateACMETaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int64    `protobuf:"varint,8,opt,name=userId,proto3" json:"userId,omitempty"` // 平台用户ID，只有管理员才有权限指定
	AcmeUserId    int64    `protobuf:"varint,1,opt,name=acmeUserId,proto3" json:"acmeUserId,omitempty"`
	DnsProviderId int64    `protobuf:"varint,2,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
	DnsDomain     string   `protobuf:"bytes,3,opt,name=dnsDomain,proto3" json:"dnsDomain,omitempty"`
	Domains       []string `protobuf:"bytes,4,rep,name=domains,proto3" json:"domains,omitempty"`
	AutoRenew     bool     `protobuf:"varint,5,opt,name=autoRenew,proto3" json:"autoRenew,omitempty"`
	AuthType      string   `protobuf:"bytes,6,opt,name=authType,proto3" json:"authType,omitempty"`
	AuthURL       string   `protobuf:"bytes,7,opt,name=authURL,proto3" json:"authURL,omitempty"`
}

func (x *CreateACMETaskRequest) Reset() {
	*x = CreateACMETaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateACMETaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateACMETaskRequest) ProtoMessage() {}

func (x *CreateACMETaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateACMETaskRequest.ProtoReflect.Descriptor instead.
func (*CreateACMETaskRequest) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{5}
}

func (x *CreateACMETaskRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateACMETaskRequest) GetAcmeUserId() int64 {
	if x != nil {
		return x.AcmeUserId
	}
	return 0
}

func (x *CreateACMETaskRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

func (x *CreateACMETaskRequest) GetDnsDomain() string {
	if x != nil {
		return x.DnsDomain
	}
	return ""
}

func (x *CreateACMETaskRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *CreateACMETaskRequest) GetAutoRenew() bool {
	if x != nil {
		return x.AutoRenew
	}
	return false
}

func (x *CreateACMETaskRequest) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *CreateACMETaskRequest) GetAuthURL() string {
	if x != nil {
		return x.AuthURL
	}
	return ""
}

type CreateACMETaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeTaskId int64 `protobuf:"varint,1,opt,name=acmeTaskId,proto3" json:"acmeTaskId,omitempty"`
}

func (x *CreateACMETaskResponse) Reset() {
	*x = CreateACMETaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateACMETaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateACMETaskResponse) ProtoMessage() {}

func (x *CreateACMETaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateACMETaskResponse.ProtoReflect.Descriptor instead.
func (*CreateACMETaskResponse) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{6}
}

func (x *CreateACMETaskResponse) GetAcmeTaskId() int64 {
	if x != nil {
		return x.AcmeTaskId
	}
	return 0
}

// 修改任务
type UpdateACMETaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeTaskId    int64    `protobuf:"varint,1,opt,name=acmeTaskId,proto3" json:"acmeTaskId,omitempty"`
	AcmeUserId    int64    `protobuf:"varint,2,opt,name=acmeUserId,proto3" json:"acmeUserId,omitempty"`
	DnsProviderId int64    `protobuf:"varint,3,opt,name=dnsProviderId,proto3" json:"dnsProviderId,omitempty"`
	DnsDomain     string   `protobuf:"bytes,4,opt,name=dnsDomain,proto3" json:"dnsDomain,omitempty"`
	Domains       []string `protobuf:"bytes,5,rep,name=domains,proto3" json:"domains,omitempty"`
	AutoRenew     bool     `protobuf:"varint,6,opt,name=autoRenew,proto3" json:"autoRenew,omitempty"`
	AuthURL       string   `protobuf:"bytes,7,opt,name=authURL,proto3" json:"authURL,omitempty"`
}

func (x *UpdateACMETaskRequest) Reset() {
	*x = UpdateACMETaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateACMETaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateACMETaskRequest) ProtoMessage() {}

func (x *UpdateACMETaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateACMETaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateACMETaskRequest) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateACMETaskRequest) GetAcmeTaskId() int64 {
	if x != nil {
		return x.AcmeTaskId
	}
	return 0
}

func (x *UpdateACMETaskRequest) GetAcmeUserId() int64 {
	if x != nil {
		return x.AcmeUserId
	}
	return 0
}

func (x *UpdateACMETaskRequest) GetDnsProviderId() int64 {
	if x != nil {
		return x.DnsProviderId
	}
	return 0
}

func (x *UpdateACMETaskRequest) GetDnsDomain() string {
	if x != nil {
		return x.DnsDomain
	}
	return ""
}

func (x *UpdateACMETaskRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *UpdateACMETaskRequest) GetAutoRenew() bool {
	if x != nil {
		return x.AutoRenew
	}
	return false
}

func (x *UpdateACMETaskRequest) GetAuthURL() string {
	if x != nil {
		return x.AuthURL
	}
	return ""
}

// 删除任务
type DeleteACMETaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeTaskId int64 `protobuf:"varint,1,opt,name=acmeTaskId,proto3" json:"acmeTaskId,omitempty"`
}

func (x *DeleteACMETaskRequest) Reset() {
	*x = DeleteACMETaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACMETaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACMETaskRequest) ProtoMessage() {}

func (x *DeleteACMETaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACMETaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteACMETaskRequest) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteACMETaskRequest) GetAcmeTaskId() int64 {
	if x != nil {
		return x.AcmeTaskId
	}
	return 0
}

// 运行某个任务
type RunACMETaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeTaskId int64 `protobuf:"varint,1,opt,name=acmeTaskId,proto3" json:"acmeTaskId,omitempty"`
}

func (x *RunACMETaskRequest) Reset() {
	*x = RunACMETaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunACMETaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunACMETaskRequest) ProtoMessage() {}

func (x *RunACMETaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunACMETaskRequest.ProtoReflect.Descriptor instead.
func (*RunACMETaskRequest) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{9}
}

func (x *RunACMETaskRequest) GetAcmeTaskId() int64 {
	if x != nil {
		return x.AcmeTaskId
	}
	return 0
}

type RunACMETaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk      bool   `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SslCertId int64  `protobuf:"varint,3,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *RunACMETaskResponse) Reset() {
	*x = RunACMETaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunACMETaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunACMETaskResponse) ProtoMessage() {}

func (x *RunACMETaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunACMETaskResponse.ProtoReflect.Descriptor instead.
func (*RunACMETaskResponse) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{10}
}

func (x *RunACMETaskResponse) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *RunACMETaskResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RunACMETaskResponse) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

// 查找单个任务信息
type FindEnabledACMETaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeTaskId int64 `protobuf:"varint,1,opt,name=acmeTaskId,proto3" json:"acmeTaskId,omitempty"`
}

func (x *FindEnabledACMETaskRequest) Reset() {
	*x = FindEnabledACMETaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledACMETaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledACMETaskRequest) ProtoMessage() {}

func (x *FindEnabledACMETaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledACMETaskRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledACMETaskRequest) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{11}
}

func (x *FindEnabledACMETaskRequest) GetAcmeTaskId() int64 {
	if x != nil {
		return x.AcmeTaskId
	}
	return 0
}

type FindEnabledACMETaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeTask *ACMETask `protobuf:"bytes,1,opt,name=acmeTask,proto3" json:"acmeTask,omitempty"`
}

func (x *FindEnabledACMETaskResponse) Reset() {
	*x = FindEnabledACMETaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_acme_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledACMETaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledACMETaskResponse) ProtoMessage() {}

func (x *FindEnabledACMETaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_acme_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledACMETaskResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledACMETaskResponse) Descriptor() ([]byte, []int) {
	return file_service_acme_task_proto_rawDescGZIP(), []int{12}
}

func (x *FindEnabledACMETaskResponse) GetAcmeTask() *ACMETask {
	if x != nil {
		return x.AcmeTask
	}
	return nil
}

var File_service_acme_task_proto protoreflect.FileDescriptor

var file_service_acme_task_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x6d, 0x65, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x2d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x43, 0x4d, 0x45, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x2d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd1,
	0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x4a,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d,
	0x45, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x09, 0x61, 0x63, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x09, 0x61, 0x63, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x22, 0x38,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x6d, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63,
	0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xed, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x22, 0x37, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x34, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x6d,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x41, 0x43,
	0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x4f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c,
	0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x61, 0x63, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x43, 0x4d, 0x45, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x08, 0x61, 0x63, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x32, 0x84, 0x06,
	0x0a, 0x0f, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x71, 0x0a, 0x26, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x43, 0x4d, 0x45, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x43, 0x4d,
	0x45, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x26, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d,
	0x45, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4d, 0x45,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3b, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4d,
	0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0b,
	0x72, 0x75, 0x6e, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x75, 0x6e, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6e, 0x41, 0x43, 0x4d, 0x45,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13,
	0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x41, 0x43, 0x4d, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_acme_task_proto_rawDescOnce sync.Once
	file_service_acme_task_proto_rawDescData = file_service_acme_task_proto_rawDesc
)

func file_service_acme_task_proto_rawDescGZIP() []byte {
	file_service_acme_task_proto_rawDescOnce.Do(func() {
		file_service_acme_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_acme_task_proto_rawDescData)
	})
	return file_service_acme_task_proto_rawDescData
}

var file_service_acme_task_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_service_acme_task_proto_goTypes = []interface{}{
	(*CountAllEnabledACMETasksWithACMEUserIdRequest)(nil), // 0: pb.CountAllEnabledACMETasksWithACMEUserIdRequest
	(*CountEnabledACMETasksWithDNSProviderIdRequest)(nil), // 1: pb.CountEnabledACMETasksWithDNSProviderIdRequest
	(*CountAllEnabledACMETasksRequest)(nil),               // 2: pb.CountAllEnabledACMETasksRequest
	(*ListEnabledACMETasksRequest)(nil),                   // 3: pb.ListEnabledACMETasksRequest
	(*ListEnabledACMETasksResponse)(nil),                  // 4: pb.ListEnabledACMETasksResponse
	(*CreateACMETaskRequest)(nil),                         // 5: pb.CreateACMETaskRequest
	(*CreateACMETaskResponse)(nil),                        // 6: pb.CreateACMETaskResponse
	(*UpdateACMETaskRequest)(nil),                         // 7: pb.UpdateACMETaskRequest
	(*DeleteACMETaskRequest)(nil),                         // 8: pb.DeleteACMETaskRequest
	(*RunACMETaskRequest)(nil),                            // 9: pb.RunACMETaskRequest
	(*RunACMETaskResponse)(nil),                           // 10: pb.RunACMETaskResponse
	(*FindEnabledACMETaskRequest)(nil),                    // 11: pb.FindEnabledACMETaskRequest
	(*FindEnabledACMETaskResponse)(nil),                   // 12: pb.FindEnabledACMETaskResponse
	(*ACMETask)(nil),                                      // 13: pb.ACMETask
	(*RPCCountResponse)(nil),                              // 14: pb.RPCCountResponse
	(*RPCSuccess)(nil),                                    // 15: pb.RPCSuccess
}
var file_service_acme_task_proto_depIdxs = []int32{
	13, // 0: pb.ListEnabledACMETasksResponse.acmeTasks:type_name -> pb.ACMETask
	13, // 1: pb.FindEnabledACMETaskResponse.acmeTask:type_name -> pb.ACMETask
	0,  // 2: pb.ACMETaskService.countAllEnabledACMETasksWithACMEUserId:input_type -> pb.CountAllEnabledACMETasksWithACMEUserIdRequest
	1,  // 3: pb.ACMETaskService.countEnabledACMETasksWithDNSProviderId:input_type -> pb.CountEnabledACMETasksWithDNSProviderIdRequest
	2,  // 4: pb.ACMETaskService.countAllEnabledACMETasks:input_type -> pb.CountAllEnabledACMETasksRequest
	3,  // 5: pb.ACMETaskService.listEnabledACMETasks:input_type -> pb.ListEnabledACMETasksRequest
	5,  // 6: pb.ACMETaskService.createACMETask:input_type -> pb.CreateACMETaskRequest
	7,  // 7: pb.ACMETaskService.updateACMETask:input_type -> pb.UpdateACMETaskRequest
	8,  // 8: pb.ACMETaskService.deleteACMETask:input_type -> pb.DeleteACMETaskRequest
	9,  // 9: pb.ACMETaskService.runACMETask:input_type -> pb.RunACMETaskRequest
	11, // 10: pb.ACMETaskService.findEnabledACMETask:input_type -> pb.FindEnabledACMETaskRequest
	14, // 11: pb.ACMETaskService.countAllEnabledACMETasksWithACMEUserId:output_type -> pb.RPCCountResponse
	14, // 12: pb.ACMETaskService.countEnabledACMETasksWithDNSProviderId:output_type -> pb.RPCCountResponse
	14, // 13: pb.ACMETaskService.countAllEnabledACMETasks:output_type -> pb.RPCCountResponse
	4,  // 14: pb.ACMETaskService.listEnabledACMETasks:output_type -> pb.ListEnabledACMETasksResponse
	6,  // 15: pb.ACMETaskService.createACMETask:output_type -> pb.CreateACMETaskResponse
	15, // 16: pb.ACMETaskService.updateACMETask:output_type -> pb.RPCSuccess
	15, // 17: pb.ACMETaskService.deleteACMETask:output_type -> pb.RPCSuccess
	10, // 18: pb.ACMETaskService.runACMETask:output_type -> pb.RunACMETaskResponse
	12, // 19: pb.ACMETaskService.findEnabledACMETask:output_type -> pb.FindEnabledACMETaskResponse
	11, // [11:20] is the sub-list for method output_type
	2,  // [2:11] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_acme_task_proto_init() }
func file_service_acme_task_proto_init() {
	if File_service_acme_task_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_acme_task_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_acme_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledACMETasksWithACMEUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountEnabledACMETasksWithDNSProviderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledACMETasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledACMETasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledACMETasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateACMETaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateACMETaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateACMETaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACMETaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunACMETaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunACMETaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledACMETaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_acme_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledACMETaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_acme_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_acme_task_proto_goTypes,
		DependencyIndexes: file_service_acme_task_proto_depIdxs,
		MessageInfos:      file_service_acme_task_proto_msgTypes,
	}.Build()
	File_service_acme_task_proto = out.File
	file_service_acme_task_proto_rawDesc = nil
	file_service_acme_task_proto_goTypes = nil
	file_service_acme_task_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ACMETaskServiceClient is the client API for ACMETaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ACMETaskServiceClient interface {
	// 计算某个ACME用户相关的任务数量
	CountAllEnabledACMETasksWithACMEUserId(ctx context.Context, in *CountAllEnabledACMETasksWithACMEUserIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 计算跟某个DNS服务商相关的任务数量
	CountEnabledACMETasksWithDNSProviderId(ctx context.Context, in *CountEnabledACMETasksWithDNSProviderIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 计算所有任务数量
	CountAllEnabledACMETasks(ctx context.Context, in *CountAllEnabledACMETasksRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页任务
	ListEnabledACMETasks(ctx context.Context, in *ListEnabledACMETasksRequest, opts ...grpc.CallOption) (*ListEnabledACMETasksResponse, error)
	// 创建任务
	CreateACMETask(ctx context.Context, in *CreateACMETaskRequest, opts ...grpc.CallOption) (*CreateACMETaskResponse, error)
	// 修改任务
	UpdateACMETask(ctx context.Context, in *UpdateACMETaskRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除任务
	DeleteACMETask(ctx context.Context, in *DeleteACMETaskRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 运行某个任务
	RunACMETask(ctx context.Context, in *RunACMETaskRequest, opts ...grpc.CallOption) (*RunACMETaskResponse, error)
	// 查找单个任务信息
	FindEnabledACMETask(ctx context.Context, in *FindEnabledACMETaskRequest, opts ...grpc.CallOption) (*FindEnabledACMETaskResponse, error)
}

type aCMETaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewACMETaskServiceClient(cc grpc.ClientConnInterface) ACMETaskServiceClient {
	return &aCMETaskServiceClient{cc}
}

func (c *aCMETaskServiceClient) CountAllEnabledACMETasksWithACMEUserId(ctx context.Context, in *CountAllEnabledACMETasksWithACMEUserIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.ACMETaskService/countAllEnabledACMETasksWithACMEUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMETaskServiceClient) CountEnabledACMETasksWithDNSProviderId(ctx context.Context, in *CountEnabledACMETasksWithDNSProviderIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.ACMETaskService/countEnabledACMETasksWithDNSProviderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMETaskServiceClient) CountAllEnabledACMETasks(ctx context.Context, in *CountAllEnabledACMETasksRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.ACMETaskService/countAllEnabledACMETasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMETaskServiceClient) ListEnabledACMETasks(ctx context.Context, in *ListEnabledACMETasksRequest, opts ...grpc.CallOption) (*ListEnabledACMETasksResponse, error) {
	out := new(ListEnabledACMETasksResponse)
	err := c.cc.Invoke(ctx, "/pb.ACMETaskService/listEnabledACMETasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMETaskServiceClient) CreateACMETask(ctx context.Context, in *CreateACMETaskRequest, opts ...grpc.CallOption) (*CreateACMETaskResponse, error) {
	out := new(CreateACMETaskResponse)
	err := c.cc.Invoke(ctx, "/pb.ACMETaskService/createACMETask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMETaskServiceClient) UpdateACMETask(ctx context.Context, in *UpdateACMETaskRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ACMETaskService/updateACMETask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMETaskServiceClient) DeleteACMETask(ctx context.Context, in *DeleteACMETaskRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ACMETaskService/deleteACMETask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMETaskServiceClient) RunACMETask(ctx context.Context, in *RunACMETaskRequest, opts ...grpc.CallOption) (*RunACMETaskResponse, error) {
	out := new(RunACMETaskResponse)
	err := c.cc.Invoke(ctx, "/pb.ACMETaskService/runACMETask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMETaskServiceClient) FindEnabledACMETask(ctx context.Context, in *FindEnabledACMETaskRequest, opts ...grpc.CallOption) (*FindEnabledACMETaskResponse, error) {
	out := new(FindEnabledACMETaskResponse)
	err := c.cc.Invoke(ctx, "/pb.ACMETaskService/findEnabledACMETask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACMETaskServiceServer is the server API for ACMETaskService service.
type ACMETaskServiceServer interface {
	// 计算某个ACME用户相关的任务数量
	CountAllEnabledACMETasksWithACMEUserId(context.Context, *CountAllEnabledACMETasksWithACMEUserIdRequest) (*RPCCountResponse, error)
	// 计算跟某个DNS服务商相关的任务数量
	CountEnabledACMETasksWithDNSProviderId(context.Context, *CountEnabledACMETasksWithDNSProviderIdRequest) (*RPCCountResponse, error)
	// 计算所有任务数量
	CountAllEnabledACMETasks(context.Context, *CountAllEnabledACMETasksRequest) (*RPCCountResponse, error)
	// 列出单页任务
	ListEnabledACMETasks(context.Context, *ListEnabledACMETasksRequest) (*ListEnabledACMETasksResponse, error)
	// 创建任务
	CreateACMETask(context.Context, *CreateACMETaskRequest) (*CreateACMETaskResponse, error)
	// 修改任务
	UpdateACMETask(context.Context, *UpdateACMETaskRequest) (*RPCSuccess, error)
	// 删除任务
	DeleteACMETask(context.Context, *DeleteACMETaskRequest) (*RPCSuccess, error)
	// 运行某个任务
	RunACMETask(context.Context, *RunACMETaskRequest) (*RunACMETaskResponse, error)
	// 查找单个任务信息
	FindEnabledACMETask(context.Context, *FindEnabledACMETaskRequest) (*FindEnabledACMETaskResponse, error)
}

// UnimplementedACMETaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedACMETaskServiceServer struct {
}

func (*UnimplementedACMETaskServiceServer) CountAllEnabledACMETasksWithACMEUserId(context.Context, *CountAllEnabledACMETasksWithACMEUserIdRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledACMETasksWithACMEUserId not implemented")
}
func (*UnimplementedACMETaskServiceServer) CountEnabledACMETasksWithDNSProviderId(context.Context, *CountEnabledACMETasksWithDNSProviderIdRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountEnabledACMETasksWithDNSProviderId not implemented")
}
func (*UnimplementedACMETaskServiceServer) CountAllEnabledACMETasks(context.Context, *CountAllEnabledACMETasksRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledACMETasks not implemented")
}
func (*UnimplementedACMETaskServiceServer) ListEnabledACMETasks(context.Context, *ListEnabledACMETasksRequest) (*ListEnabledACMETasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledACMETasks not implemented")
}
func (*UnimplementedACMETaskServiceServer) CreateACMETask(context.Context, *CreateACMETaskRequest) (*CreateACMETaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateACMETask not implemented")
}
func (*UnimplementedACMETaskServiceServer) UpdateACMETask(context.Context, *UpdateACMETaskRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateACMETask not implemented")
}
func (*UnimplementedACMETaskServiceServer) DeleteACMETask(context.Context, *DeleteACMETaskRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteACMETask not implemented")
}
func (*UnimplementedACMETaskServiceServer) RunACMETask(context.Context, *RunACMETaskRequest) (*RunACMETaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunACMETask not implemented")
}
func (*UnimplementedACMETaskServiceServer) FindEnabledACMETask(context.Context, *FindEnabledACMETaskRequest) (*FindEnabledACMETaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledACMETask not implemented")
}

func RegisterACMETaskServiceServer(s *grpc.Server, srv ACMETaskServiceServer) {
	s.RegisterService(&_ACMETaskService_serviceDesc, srv)
}

func _ACMETaskService_CountAllEnabledACMETasksWithACMEUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledACMETasksWithACMEUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMETaskServiceServer).CountAllEnabledACMETasksWithACMEUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ACMETaskService/CountAllEnabledACMETasksWithACMEUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMETaskServiceServer).CountAllEnabledACMETasksWithACMEUserId(ctx, req.(*CountAllEnabledACMETasksWithACMEUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMETaskService_CountEnabledACMETasksWithDNSProviderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountEnabledACMETasksWithDNSProviderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMETaskServiceServer).CountEnabledACMETasksWithDNSProviderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ACMETaskService/CountEnabledACMETasksWithDNSProviderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMETaskServiceServer).CountEnabledACMETasksWithDNSProviderId(ctx, req.(*CountEnabledACMETasksWithDNSProviderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMETaskService_CountAllEnabledACMETasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledACMETasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMETaskServiceServer).CountAllEnabledACMETasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ACMETaskService/CountAllEnabledACMETasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMETaskServiceServer).CountAllEnabledACMETasks(ctx, req.(*CountAllEnabledACMETasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMETaskService_ListEnabledACMETasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledACMETasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMETaskServiceServer).ListEnabledACMETasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ACMETaskService/ListEnabledACMETasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMETaskServiceServer).ListEnabledACMETasks(ctx, req.(*ListEnabledACMETasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMETaskService_CreateACMETask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateACMETaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMETaskServiceServer).CreateACMETask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ACMETaskService/CreateACMETask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMETaskServiceServer).CreateACMETask(ctx, req.(*CreateACMETaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMETaskService_UpdateACMETask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateACMETaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMETaskServiceServer).UpdateACMETask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ACMETaskService/UpdateACMETask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMETaskServiceServer).UpdateACMETask(ctx, req.(*UpdateACMETaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMETaskService_DeleteACMETask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteACMETaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMETaskServiceServer).DeleteACMETask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ACMETaskService/DeleteACMETask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMETaskServiceServer).DeleteACMETask(ctx, req.(*DeleteACMETaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMETaskService_RunACMETask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunACMETaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMETaskServiceServer).RunACMETask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ACMETaskService/RunACMETask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMETaskServiceServer).RunACMETask(ctx, req.(*RunACMETaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMETaskService_FindEnabledACMETask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledACMETaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMETaskServiceServer).FindEnabledACMETask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ACMETaskService/FindEnabledACMETask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMETaskServiceServer).FindEnabledACMETask(ctx, req.(*FindEnabledACMETaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ACMETaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ACMETaskService",
	HandlerType: (*ACMETaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "countAllEnabledACMETasksWithACMEUserId",
			Handler:    _ACMETaskService_CountAllEnabledACMETasksWithACMEUserId_Handler,
		},
		{
			MethodName: "countEnabledACMETasksWithDNSProviderId",
			Handler:    _ACMETaskService_CountEnabledACMETasksWithDNSProviderId_Handler,
		},
		{
			MethodName: "countAllEnabledACMETasks",
			Handler:    _ACMETaskService_CountAllEnabledACMETasks_Handler,
		},
		{
			MethodName: "listEnabledACMETasks",
			Handler:    _ACMETaskService_ListEnabledACMETasks_Handler,
		},
		{
			MethodName: "createACMETask",
			Handler:    _ACMETaskService_CreateACMETask_Handler,
		},
		{
			MethodName: "updateACMETask",
			Handler:    _ACMETaskService_UpdateACMETask_Handler,
		},
		{
			MethodName: "deleteACMETask",
			Handler:    _ACMETaskService_DeleteACMETask_Handler,
		},
		{
			MethodName: "runACMETask",
			Handler:    _ACMETaskService_RunACMETask_Handler,
		},
		{
			MethodName: "findEnabledACMETask",
			Handler:    _ACMETaskService_FindEnabledACMETask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_acme_task.proto",
}
