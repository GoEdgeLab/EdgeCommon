// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_monitor_node.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建监控节点
type CreateMonitorNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsOn        bool   `protobuf:"varint,3,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *CreateMonitorNodeRequest) Reset() {
	*x = CreateMonitorNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorNodeRequest) ProtoMessage() {}

func (x *CreateMonitorNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateMonitorNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{0}
}

func (x *CreateMonitorNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateMonitorNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateMonitorNodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

type CreateMonitorNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorNodeId int64 `protobuf:"varint,1,opt,name=monitorNodeId,proto3" json:"monitorNodeId,omitempty"`
}

func (x *CreateMonitorNodeResponse) Reset() {
	*x = CreateMonitorNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMonitorNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMonitorNodeResponse) ProtoMessage() {}

func (x *CreateMonitorNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMonitorNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateMonitorNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMonitorNodeResponse) GetMonitorNodeId() int64 {
	if x != nil {
		return x.MonitorNodeId
	}
	return 0
}

// 修改监控节点
type UpdateMonitorNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorNodeId int64  `protobuf:"varint,1,opt,name=monitorNodeId,proto3" json:"monitorNodeId,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IsOn          bool   `protobuf:"varint,4,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateMonitorNodeRequest) Reset() {
	*x = UpdateMonitorNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorNodeRequest) ProtoMessage() {}

func (x *UpdateMonitorNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateMonitorNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateMonitorNodeRequest) GetMonitorNodeId() int64 {
	if x != nil {
		return x.MonitorNodeId
	}
	return 0
}

func (x *UpdateMonitorNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateMonitorNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateMonitorNodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除监控节点
type DeleteMonitorNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorNodeId int64 `protobuf:"varint,1,opt,name=monitorNodeId,proto3" json:"monitorNodeId,omitempty"`
}

func (x *DeleteMonitorNodeRequest) Reset() {
	*x = DeleteMonitorNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMonitorNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMonitorNodeRequest) ProtoMessage() {}

func (x *DeleteMonitorNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMonitorNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteMonitorNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteMonitorNodeRequest) GetMonitorNodeId() int64 {
	if x != nil {
		return x.MonitorNodeId
	}
	return 0
}

// 列出所有可用监控节点
type FindAllEnabledMonitorNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledMonitorNodesRequest) Reset() {
	*x = FindAllEnabledMonitorNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledMonitorNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledMonitorNodesRequest) ProtoMessage() {}

func (x *FindAllEnabledMonitorNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledMonitorNodesRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledMonitorNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{4}
}

type FindAllEnabledMonitorNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorNodes []*MonitorNode `protobuf:"bytes,1,rep,name=monitorNodes,proto3" json:"monitorNodes,omitempty"`
}

func (x *FindAllEnabledMonitorNodesResponse) Reset() {
	*x = FindAllEnabledMonitorNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledMonitorNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledMonitorNodesResponse) ProtoMessage() {}

func (x *FindAllEnabledMonitorNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledMonitorNodesResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledMonitorNodesResponse) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllEnabledMonitorNodesResponse) GetMonitorNodes() []*MonitorNode {
	if x != nil {
		return x.MonitorNodes
	}
	return nil
}

// 计算监控节点数量
type CountAllEnabledMonitorNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllEnabledMonitorNodesRequest) Reset() {
	*x = CountAllEnabledMonitorNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledMonitorNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledMonitorNodesRequest) ProtoMessage() {}

func (x *CountAllEnabledMonitorNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledMonitorNodesRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledMonitorNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{6}
}

// 列出单页的监控节点
type ListEnabledMonitorNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledMonitorNodesRequest) Reset() {
	*x = ListEnabledMonitorNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledMonitorNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledMonitorNodesRequest) ProtoMessage() {}

func (x *ListEnabledMonitorNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledMonitorNodesRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledMonitorNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{7}
}

func (x *ListEnabledMonitorNodesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledMonitorNodesRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledMonitorNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorNodes []*MonitorNode `protobuf:"bytes,1,rep,name=monitorNodes,proto3" json:"monitorNodes,omitempty"`
}

func (x *ListEnabledMonitorNodesResponse) Reset() {
	*x = ListEnabledMonitorNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledMonitorNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledMonitorNodesResponse) ProtoMessage() {}

func (x *ListEnabledMonitorNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledMonitorNodesResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledMonitorNodesResponse) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{8}
}

func (x *ListEnabledMonitorNodesResponse) GetMonitorNodes() []*MonitorNode {
	if x != nil {
		return x.MonitorNodes
	}
	return nil
}

// 根据ID查找节点
type FindEnabledMonitorNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorNodeId int64 `protobuf:"varint,1,opt,name=monitorNodeId,proto3" json:"monitorNodeId,omitempty"`
}

func (x *FindEnabledMonitorNodeRequest) Reset() {
	*x = FindEnabledMonitorNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledMonitorNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledMonitorNodeRequest) ProtoMessage() {}

func (x *FindEnabledMonitorNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledMonitorNodeRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledMonitorNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{9}
}

func (x *FindEnabledMonitorNodeRequest) GetMonitorNodeId() int64 {
	if x != nil {
		return x.MonitorNodeId
	}
	return 0
}

type FindEnabledMonitorNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorNode *MonitorNode `protobuf:"bytes,1,opt,name=monitorNode,proto3" json:"monitorNode,omitempty"`
}

func (x *FindEnabledMonitorNodeResponse) Reset() {
	*x = FindEnabledMonitorNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledMonitorNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledMonitorNodeResponse) ProtoMessage() {}

func (x *FindEnabledMonitorNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledMonitorNodeResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledMonitorNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{10}
}

func (x *FindEnabledMonitorNodeResponse) GetMonitorNode() *MonitorNode {
	if x != nil {
		return x.MonitorNode
	}
	return nil
}

// 获取当前监控节点
type FindCurrentMonitorNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindCurrentMonitorNodeRequest) Reset() {
	*x = FindCurrentMonitorNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentMonitorNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentMonitorNodeRequest) ProtoMessage() {}

func (x *FindCurrentMonitorNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentMonitorNodeRequest.ProtoReflect.Descriptor instead.
func (*FindCurrentMonitorNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{11}
}

type FindCurrentMonitorNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorNode *MonitorNode `protobuf:"bytes,1,opt,name=monitorNode,proto3" json:"monitorNode,omitempty"`
}

func (x *FindCurrentMonitorNodeResponse) Reset() {
	*x = FindCurrentMonitorNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentMonitorNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentMonitorNodeResponse) ProtoMessage() {}

func (x *FindCurrentMonitorNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentMonitorNodeResponse.ProtoReflect.Descriptor instead.
func (*FindCurrentMonitorNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{12}
}

func (x *FindCurrentMonitorNodeResponse) GetMonitorNode() *MonitorNode {
	if x != nil {
		return x.MonitorNode
	}
	return nil
}

// 更新监控状态
type UpdateMonitorNodeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorNodeId int64  `protobuf:"varint,1,opt,name=monitorNodeId,proto3" json:"monitorNodeId,omitempty"`
	StatusJSON    []byte `protobuf:"bytes,2,opt,name=statusJSON,proto3" json:"statusJSON,omitempty"`
}

func (x *UpdateMonitorNodeStatusRequest) Reset() {
	*x = UpdateMonitorNodeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_monitor_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonitorNodeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonitorNodeStatusRequest) ProtoMessage() {}

func (x *UpdateMonitorNodeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_monitor_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonitorNodeStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateMonitorNodeStatusRequest) Descriptor() ([]byte, []int) {
	return file_service_monitor_node_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateMonitorNodeStatusRequest) GetMonitorNodeId() int64 {
	if x != nil {
		return x.MonitorNodeId
	}
	return 0
}

func (x *UpdateMonitorNodeStatusRequest) GetStatusJSON() []byte {
	if x != nil {
		return x.StatusJSON
	}
	return nil
}

var File_service_monitor_node_proto protoreflect.FileDescriptor

var file_service_monitor_node_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x4f, 0x6e, 0x22, 0x41, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x4f, 0x6e, 0x22, 0x40, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x22, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x56, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x45, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x1f, 0x0a, 0x1d,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a,
	0x1e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x22, 0x66, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x32, 0xab, 0x06, 0x0a, 0x12, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x1b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x64,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x17, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_monitor_node_proto_rawDescOnce sync.Once
	file_service_monitor_node_proto_rawDescData = file_service_monitor_node_proto_rawDesc
)

func file_service_monitor_node_proto_rawDescGZIP() []byte {
	file_service_monitor_node_proto_rawDescOnce.Do(func() {
		file_service_monitor_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_monitor_node_proto_rawDescData)
	})
	return file_service_monitor_node_proto_rawDescData
}

var file_service_monitor_node_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_service_monitor_node_proto_goTypes = []interface{}{
	(*CreateMonitorNodeRequest)(nil),           // 0: pb.CreateMonitorNodeRequest
	(*CreateMonitorNodeResponse)(nil),          // 1: pb.CreateMonitorNodeResponse
	(*UpdateMonitorNodeRequest)(nil),           // 2: pb.UpdateMonitorNodeRequest
	(*DeleteMonitorNodeRequest)(nil),           // 3: pb.DeleteMonitorNodeRequest
	(*FindAllEnabledMonitorNodesRequest)(nil),  // 4: pb.FindAllEnabledMonitorNodesRequest
	(*FindAllEnabledMonitorNodesResponse)(nil), // 5: pb.FindAllEnabledMonitorNodesResponse
	(*CountAllEnabledMonitorNodesRequest)(nil), // 6: pb.CountAllEnabledMonitorNodesRequest
	(*ListEnabledMonitorNodesRequest)(nil),     // 7: pb.ListEnabledMonitorNodesRequest
	(*ListEnabledMonitorNodesResponse)(nil),    // 8: pb.ListEnabledMonitorNodesResponse
	(*FindEnabledMonitorNodeRequest)(nil),      // 9: pb.FindEnabledMonitorNodeRequest
	(*FindEnabledMonitorNodeResponse)(nil),     // 10: pb.FindEnabledMonitorNodeResponse
	(*FindCurrentMonitorNodeRequest)(nil),      // 11: pb.FindCurrentMonitorNodeRequest
	(*FindCurrentMonitorNodeResponse)(nil),     // 12: pb.FindCurrentMonitorNodeResponse
	(*UpdateMonitorNodeStatusRequest)(nil),     // 13: pb.UpdateMonitorNodeStatusRequest
	(*MonitorNode)(nil),                        // 14: pb.MonitorNode
	(*RPCSuccess)(nil),                         // 15: pb.RPCSuccess
	(*RPCCountResponse)(nil),                   // 16: pb.RPCCountResponse
}
var file_service_monitor_node_proto_depIdxs = []int32{
	14, // 0: pb.FindAllEnabledMonitorNodesResponse.monitorNodes:type_name -> pb.MonitorNode
	14, // 1: pb.ListEnabledMonitorNodesResponse.monitorNodes:type_name -> pb.MonitorNode
	14, // 2: pb.FindEnabledMonitorNodeResponse.monitorNode:type_name -> pb.MonitorNode
	14, // 3: pb.FindCurrentMonitorNodeResponse.monitorNode:type_name -> pb.MonitorNode
	0,  // 4: pb.MonitorNodeService.createMonitorNode:input_type -> pb.CreateMonitorNodeRequest
	2,  // 5: pb.MonitorNodeService.updateMonitorNode:input_type -> pb.UpdateMonitorNodeRequest
	3,  // 6: pb.MonitorNodeService.deleteMonitorNode:input_type -> pb.DeleteMonitorNodeRequest
	4,  // 7: pb.MonitorNodeService.findAllEnabledMonitorNodes:input_type -> pb.FindAllEnabledMonitorNodesRequest
	6,  // 8: pb.MonitorNodeService.countAllEnabledMonitorNodes:input_type -> pb.CountAllEnabledMonitorNodesRequest
	7,  // 9: pb.MonitorNodeService.listEnabledMonitorNodes:input_type -> pb.ListEnabledMonitorNodesRequest
	9,  // 10: pb.MonitorNodeService.findEnabledMonitorNode:input_type -> pb.FindEnabledMonitorNodeRequest
	11, // 11: pb.MonitorNodeService.findCurrentMonitorNode:input_type -> pb.FindCurrentMonitorNodeRequest
	13, // 12: pb.MonitorNodeService.updateMonitorNodeStatus:input_type -> pb.UpdateMonitorNodeStatusRequest
	1,  // 13: pb.MonitorNodeService.createMonitorNode:output_type -> pb.CreateMonitorNodeResponse
	15, // 14: pb.MonitorNodeService.updateMonitorNode:output_type -> pb.RPCSuccess
	15, // 15: pb.MonitorNodeService.deleteMonitorNode:output_type -> pb.RPCSuccess
	5,  // 16: pb.MonitorNodeService.findAllEnabledMonitorNodes:output_type -> pb.FindAllEnabledMonitorNodesResponse
	16, // 17: pb.MonitorNodeService.countAllEnabledMonitorNodes:output_type -> pb.RPCCountResponse
	8,  // 18: pb.MonitorNodeService.listEnabledMonitorNodes:output_type -> pb.ListEnabledMonitorNodesResponse
	10, // 19: pb.MonitorNodeService.findEnabledMonitorNode:output_type -> pb.FindEnabledMonitorNodeResponse
	12, // 20: pb.MonitorNodeService.findCurrentMonitorNode:output_type -> pb.FindCurrentMonitorNodeResponse
	15, // 21: pb.MonitorNodeService.updateMonitorNodeStatus:output_type -> pb.RPCSuccess
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_monitor_node_proto_init() }
func file_service_monitor_node_proto_init() {
	if File_service_monitor_node_proto != nil {
		return
	}
	file_models_model_monitor_node_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_monitor_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMonitorNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMonitorNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMonitorNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMonitorNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledMonitorNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledMonitorNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledMonitorNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledMonitorNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledMonitorNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledMonitorNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledMonitorNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentMonitorNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentMonitorNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_monitor_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMonitorNodeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_monitor_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_monitor_node_proto_goTypes,
		DependencyIndexes: file_service_monitor_node_proto_depIdxs,
		MessageInfos:      file_service_monitor_node_proto_msgTypes,
	}.Build()
	File_service_monitor_node_proto = out.File
	file_service_monitor_node_proto_rawDesc = nil
	file_service_monitor_node_proto_goTypes = nil
	file_service_monitor_node_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MonitorNodeServiceClient is the client API for MonitorNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorNodeServiceClient interface {
	// 创建监控节点
	CreateMonitorNode(ctx context.Context, in *CreateMonitorNodeRequest, opts ...grpc.CallOption) (*CreateMonitorNodeResponse, error)
	// 修改监控节点
	UpdateMonitorNode(ctx context.Context, in *UpdateMonitorNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除监控节点
	DeleteMonitorNode(ctx context.Context, in *DeleteMonitorNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 列出所有可用监控节点
	FindAllEnabledMonitorNodes(ctx context.Context, in *FindAllEnabledMonitorNodesRequest, opts ...grpc.CallOption) (*FindAllEnabledMonitorNodesResponse, error)
	// 计算监控节点数量
	CountAllEnabledMonitorNodes(ctx context.Context, in *CountAllEnabledMonitorNodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页的监控节点
	ListEnabledMonitorNodes(ctx context.Context, in *ListEnabledMonitorNodesRequest, opts ...grpc.CallOption) (*ListEnabledMonitorNodesResponse, error)
	// 根据ID查找节点
	FindEnabledMonitorNode(ctx context.Context, in *FindEnabledMonitorNodeRequest, opts ...grpc.CallOption) (*FindEnabledMonitorNodeResponse, error)
	// 获取当前监控节点信息
	FindCurrentMonitorNode(ctx context.Context, in *FindCurrentMonitorNodeRequest, opts ...grpc.CallOption) (*FindCurrentMonitorNodeResponse, error)
	// 更新节点状态
	UpdateMonitorNodeStatus(ctx context.Context, in *UpdateMonitorNodeStatusRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
}

type monitorNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorNodeServiceClient(cc grpc.ClientConnInterface) MonitorNodeServiceClient {
	return &monitorNodeServiceClient{cc}
}

func (c *monitorNodeServiceClient) CreateMonitorNode(ctx context.Context, in *CreateMonitorNodeRequest, opts ...grpc.CallOption) (*CreateMonitorNodeResponse, error) {
	out := new(CreateMonitorNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.MonitorNodeService/createMonitorNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorNodeServiceClient) UpdateMonitorNode(ctx context.Context, in *UpdateMonitorNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.MonitorNodeService/updateMonitorNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorNodeServiceClient) DeleteMonitorNode(ctx context.Context, in *DeleteMonitorNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.MonitorNodeService/deleteMonitorNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorNodeServiceClient) FindAllEnabledMonitorNodes(ctx context.Context, in *FindAllEnabledMonitorNodesRequest, opts ...grpc.CallOption) (*FindAllEnabledMonitorNodesResponse, error) {
	out := new(FindAllEnabledMonitorNodesResponse)
	err := c.cc.Invoke(ctx, "/pb.MonitorNodeService/findAllEnabledMonitorNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorNodeServiceClient) CountAllEnabledMonitorNodes(ctx context.Context, in *CountAllEnabledMonitorNodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.MonitorNodeService/countAllEnabledMonitorNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorNodeServiceClient) ListEnabledMonitorNodes(ctx context.Context, in *ListEnabledMonitorNodesRequest, opts ...grpc.CallOption) (*ListEnabledMonitorNodesResponse, error) {
	out := new(ListEnabledMonitorNodesResponse)
	err := c.cc.Invoke(ctx, "/pb.MonitorNodeService/listEnabledMonitorNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorNodeServiceClient) FindEnabledMonitorNode(ctx context.Context, in *FindEnabledMonitorNodeRequest, opts ...grpc.CallOption) (*FindEnabledMonitorNodeResponse, error) {
	out := new(FindEnabledMonitorNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.MonitorNodeService/findEnabledMonitorNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorNodeServiceClient) FindCurrentMonitorNode(ctx context.Context, in *FindCurrentMonitorNodeRequest, opts ...grpc.CallOption) (*FindCurrentMonitorNodeResponse, error) {
	out := new(FindCurrentMonitorNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.MonitorNodeService/findCurrentMonitorNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorNodeServiceClient) UpdateMonitorNodeStatus(ctx context.Context, in *UpdateMonitorNodeStatusRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.MonitorNodeService/updateMonitorNodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorNodeServiceServer is the server API for MonitorNodeService service.
type MonitorNodeServiceServer interface {
	// 创建监控节点
	CreateMonitorNode(context.Context, *CreateMonitorNodeRequest) (*CreateMonitorNodeResponse, error)
	// 修改监控节点
	UpdateMonitorNode(context.Context, *UpdateMonitorNodeRequest) (*RPCSuccess, error)
	// 删除监控节点
	DeleteMonitorNode(context.Context, *DeleteMonitorNodeRequest) (*RPCSuccess, error)
	// 列出所有可用监控节点
	FindAllEnabledMonitorNodes(context.Context, *FindAllEnabledMonitorNodesRequest) (*FindAllEnabledMonitorNodesResponse, error)
	// 计算监控节点数量
	CountAllEnabledMonitorNodes(context.Context, *CountAllEnabledMonitorNodesRequest) (*RPCCountResponse, error)
	// 列出单页的监控节点
	ListEnabledMonitorNodes(context.Context, *ListEnabledMonitorNodesRequest) (*ListEnabledMonitorNodesResponse, error)
	// 根据ID查找节点
	FindEnabledMonitorNode(context.Context, *FindEnabledMonitorNodeRequest) (*FindEnabledMonitorNodeResponse, error)
	// 获取当前监控节点信息
	FindCurrentMonitorNode(context.Context, *FindCurrentMonitorNodeRequest) (*FindCurrentMonitorNodeResponse, error)
	// 更新节点状态
	UpdateMonitorNodeStatus(context.Context, *UpdateMonitorNodeStatusRequest) (*RPCSuccess, error)
}

// UnimplementedMonitorNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorNodeServiceServer struct {
}

func (*UnimplementedMonitorNodeServiceServer) CreateMonitorNode(context.Context, *CreateMonitorNodeRequest) (*CreateMonitorNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorNode not implemented")
}
func (*UnimplementedMonitorNodeServiceServer) UpdateMonitorNode(context.Context, *UpdateMonitorNodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorNode not implemented")
}
func (*UnimplementedMonitorNodeServiceServer) DeleteMonitorNode(context.Context, *DeleteMonitorNodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitorNode not implemented")
}
func (*UnimplementedMonitorNodeServiceServer) FindAllEnabledMonitorNodes(context.Context, *FindAllEnabledMonitorNodesRequest) (*FindAllEnabledMonitorNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledMonitorNodes not implemented")
}
func (*UnimplementedMonitorNodeServiceServer) CountAllEnabledMonitorNodes(context.Context, *CountAllEnabledMonitorNodesRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledMonitorNodes not implemented")
}
func (*UnimplementedMonitorNodeServiceServer) ListEnabledMonitorNodes(context.Context, *ListEnabledMonitorNodesRequest) (*ListEnabledMonitorNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledMonitorNodes not implemented")
}
func (*UnimplementedMonitorNodeServiceServer) FindEnabledMonitorNode(context.Context, *FindEnabledMonitorNodeRequest) (*FindEnabledMonitorNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledMonitorNode not implemented")
}
func (*UnimplementedMonitorNodeServiceServer) FindCurrentMonitorNode(context.Context, *FindCurrentMonitorNodeRequest) (*FindCurrentMonitorNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCurrentMonitorNode not implemented")
}
func (*UnimplementedMonitorNodeServiceServer) UpdateMonitorNodeStatus(context.Context, *UpdateMonitorNodeStatusRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorNodeStatus not implemented")
}

func RegisterMonitorNodeServiceServer(s *grpc.Server, srv MonitorNodeServiceServer) {
	s.RegisterService(&_MonitorNodeService_serviceDesc, srv)
}

func _MonitorNodeService_CreateMonitorNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorNodeServiceServer).CreateMonitorNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MonitorNodeService/CreateMonitorNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorNodeServiceServer).CreateMonitorNode(ctx, req.(*CreateMonitorNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorNodeService_UpdateMonitorNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorNodeServiceServer).UpdateMonitorNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MonitorNodeService/UpdateMonitorNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorNodeServiceServer).UpdateMonitorNode(ctx, req.(*UpdateMonitorNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorNodeService_DeleteMonitorNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonitorNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorNodeServiceServer).DeleteMonitorNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MonitorNodeService/DeleteMonitorNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorNodeServiceServer).DeleteMonitorNode(ctx, req.(*DeleteMonitorNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorNodeService_FindAllEnabledMonitorNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledMonitorNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorNodeServiceServer).FindAllEnabledMonitorNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MonitorNodeService/FindAllEnabledMonitorNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorNodeServiceServer).FindAllEnabledMonitorNodes(ctx, req.(*FindAllEnabledMonitorNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorNodeService_CountAllEnabledMonitorNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledMonitorNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorNodeServiceServer).CountAllEnabledMonitorNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MonitorNodeService/CountAllEnabledMonitorNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorNodeServiceServer).CountAllEnabledMonitorNodes(ctx, req.(*CountAllEnabledMonitorNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorNodeService_ListEnabledMonitorNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledMonitorNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorNodeServiceServer).ListEnabledMonitorNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MonitorNodeService/ListEnabledMonitorNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorNodeServiceServer).ListEnabledMonitorNodes(ctx, req.(*ListEnabledMonitorNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorNodeService_FindEnabledMonitorNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledMonitorNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorNodeServiceServer).FindEnabledMonitorNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MonitorNodeService/FindEnabledMonitorNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorNodeServiceServer).FindEnabledMonitorNode(ctx, req.(*FindEnabledMonitorNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorNodeService_FindCurrentMonitorNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCurrentMonitorNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorNodeServiceServer).FindCurrentMonitorNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MonitorNodeService/FindCurrentMonitorNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorNodeServiceServer).FindCurrentMonitorNode(ctx, req.(*FindCurrentMonitorNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorNodeService_UpdateMonitorNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorNodeServiceServer).UpdateMonitorNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MonitorNodeService/UpdateMonitorNodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorNodeServiceServer).UpdateMonitorNodeStatus(ctx, req.(*UpdateMonitorNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitorNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MonitorNodeService",
	HandlerType: (*MonitorNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createMonitorNode",
			Handler:    _MonitorNodeService_CreateMonitorNode_Handler,
		},
		{
			MethodName: "updateMonitorNode",
			Handler:    _MonitorNodeService_UpdateMonitorNode_Handler,
		},
		{
			MethodName: "deleteMonitorNode",
			Handler:    _MonitorNodeService_DeleteMonitorNode_Handler,
		},
		{
			MethodName: "findAllEnabledMonitorNodes",
			Handler:    _MonitorNodeService_FindAllEnabledMonitorNodes_Handler,
		},
		{
			MethodName: "countAllEnabledMonitorNodes",
			Handler:    _MonitorNodeService_CountAllEnabledMonitorNodes_Handler,
		},
		{
			MethodName: "listEnabledMonitorNodes",
			Handler:    _MonitorNodeService_ListEnabledMonitorNodes_Handler,
		},
		{
			MethodName: "findEnabledMonitorNode",
			Handler:    _MonitorNodeService_FindEnabledMonitorNode_Handler,
		},
		{
			MethodName: "findCurrentMonitorNode",
			Handler:    _MonitorNodeService_FindCurrentMonitorNode_Handler,
		},
		{
			MethodName: "updateMonitorNodeStatus",
			Handler:    _MonitorNodeService_UpdateMonitorNodeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_monitor_node.proto",
}
