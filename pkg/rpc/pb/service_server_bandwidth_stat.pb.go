// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_server_bandwidth_stat.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 上传带宽统计
type UploadServerBandwidthStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerBandwidthStats []*ServerBandwidthStat `protobuf:"bytes,1,rep,name=serverBandwidthStats,proto3" json:"serverBandwidthStats,omitempty"`
}

func (x *UploadServerBandwidthStatsRequest) Reset() {
	*x = UploadServerBandwidthStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerBandwidthStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerBandwidthStatsRequest) ProtoMessage() {}

func (x *UploadServerBandwidthStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerBandwidthStatsRequest.ProtoReflect.Descriptor instead.
func (*UploadServerBandwidthStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{0}
}

func (x *UploadServerBandwidthStatsRequest) GetServerBandwidthStats() []*ServerBandwidthStat {
	if x != nil {
		return x.ServerBandwidthStats
	}
	return nil
}

// 获取服务的峰值带宽
type FindServerBandwidthStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"` // 服务ID
	Month    string `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`        // YYYYMM，month和day二选一
	Day      string `protobuf:"bytes,3,opt,name=day,proto3" json:"day,omitempty"`            // YYYYMMDD
	Algo     string `protobuf:"bytes,4,opt,name=algo,proto3" json:"algo,omitempty"`          // 带宽算法，目前支持secondly和avg
}

func (x *FindServerBandwidthStatsRequest) Reset() {
	*x = FindServerBandwidthStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerBandwidthStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerBandwidthStatsRequest) ProtoMessage() {}

func (x *FindServerBandwidthStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerBandwidthStatsRequest.ProtoReflect.Descriptor instead.
func (*FindServerBandwidthStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{1}
}

func (x *FindServerBandwidthStatsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FindServerBandwidthStatsRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *FindServerBandwidthStatsRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *FindServerBandwidthStatsRequest) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

type FindServerBandwidthStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerBandwidthStats []*ServerBandwidthStat `protobuf:"bytes,1,rep,name=serverBandwidthStats,proto3" json:"serverBandwidthStats,omitempty"`
}

func (x *FindServerBandwidthStatsResponse) Reset() {
	*x = FindServerBandwidthStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerBandwidthStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerBandwidthStatsResponse) ProtoMessage() {}

func (x *FindServerBandwidthStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerBandwidthStatsResponse.ProtoReflect.Descriptor instead.
func (*FindServerBandwidthStatsResponse) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{2}
}

func (x *FindServerBandwidthStatsResponse) GetServerBandwidthStats() []*ServerBandwidthStat {
	if x != nil {
		return x.ServerBandwidthStats
	}
	return nil
}

// 获取最近N小时峰值带宽
type FindHourlyServerBandwidthStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Hours    int32  `protobuf:"varint,2,opt,name=hours,proto3" json:"hours,omitempty"`
	Algo     string `protobuf:"bytes,3,opt,name=algo,proto3" json:"algo,omitempty"` // 带宽算法，目前支持secondly和avg
}

func (x *FindHourlyServerBandwidthStatsRequest) Reset() {
	*x = FindHourlyServerBandwidthStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHourlyServerBandwidthStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHourlyServerBandwidthStatsRequest) ProtoMessage() {}

func (x *FindHourlyServerBandwidthStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHourlyServerBandwidthStatsRequest.ProtoReflect.Descriptor instead.
func (*FindHourlyServerBandwidthStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{3}
}

func (x *FindHourlyServerBandwidthStatsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FindHourlyServerBandwidthStatsRequest) GetHours() int32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *FindHourlyServerBandwidthStatsRequest) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

type FindHourlyServerBandwidthStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats      []*FindHourlyServerBandwidthStatsResponse_Stat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	Percentile int32                                          `protobuf:"varint,2,opt,name=percentile,proto3" json:"percentile,omitempty"` // 百分位
	NthStat    *FindHourlyServerBandwidthStatsResponse_Stat   `protobuf:"bytes,3,opt,name=nthStat,proto3" json:"nthStat,omitempty"`        // 百分位统计数据
}

func (x *FindHourlyServerBandwidthStatsResponse) Reset() {
	*x = FindHourlyServerBandwidthStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHourlyServerBandwidthStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHourlyServerBandwidthStatsResponse) ProtoMessage() {}

func (x *FindHourlyServerBandwidthStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHourlyServerBandwidthStatsResponse.ProtoReflect.Descriptor instead.
func (*FindHourlyServerBandwidthStatsResponse) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{4}
}

func (x *FindHourlyServerBandwidthStatsResponse) GetStats() []*FindHourlyServerBandwidthStatsResponse_Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *FindHourlyServerBandwidthStatsResponse) GetPercentile() int32 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

func (x *FindHourlyServerBandwidthStatsResponse) GetNthStat() *FindHourlyServerBandwidthStatsResponse_Stat {
	if x != nil {
		return x.NthStat
	}
	return nil
}

// 获取最近N天峰值带宽
type FindDailyServerBandwidthStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Days     int32  `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
	Algo     string `protobuf:"bytes,3,opt,name=algo,proto3" json:"algo,omitempty"` // 带宽算法，目前支持secondly和avg
}

func (x *FindDailyServerBandwidthStatsRequest) Reset() {
	*x = FindDailyServerBandwidthStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDailyServerBandwidthStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDailyServerBandwidthStatsRequest) ProtoMessage() {}

func (x *FindDailyServerBandwidthStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDailyServerBandwidthStatsRequest.ProtoReflect.Descriptor instead.
func (*FindDailyServerBandwidthStatsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{5}
}

func (x *FindDailyServerBandwidthStatsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FindDailyServerBandwidthStatsRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *FindDailyServerBandwidthStatsRequest) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

type FindDailyServerBandwidthStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats      []*FindDailyServerBandwidthStatsResponse_Stat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	Percentile int32                                         `protobuf:"varint,2,opt,name=percentile,proto3" json:"percentile,omitempty"` // 百分位
	NthStat    *FindDailyServerBandwidthStatsResponse_Stat   `protobuf:"bytes,3,opt,name=nthStat,proto3" json:"nthStat,omitempty"`        // 百分位统计数据
}

func (x *FindDailyServerBandwidthStatsResponse) Reset() {
	*x = FindDailyServerBandwidthStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDailyServerBandwidthStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDailyServerBandwidthStatsResponse) ProtoMessage() {}

func (x *FindDailyServerBandwidthStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDailyServerBandwidthStatsResponse.ProtoReflect.Descriptor instead.
func (*FindDailyServerBandwidthStatsResponse) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{6}
}

func (x *FindDailyServerBandwidthStatsResponse) GetStats() []*FindDailyServerBandwidthStatsResponse_Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *FindDailyServerBandwidthStatsResponse) GetPercentile() int32 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

func (x *FindDailyServerBandwidthStatsResponse) GetNthStat() *FindDailyServerBandwidthStatsResponse_Stat {
	if x != nil {
		return x.NthStat
	}
	return nil
}

// 读取日期段内的带宽数据
type FindDailyServerBandwidthStatsBetweenDaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`             // 用户ID，和服务ID二选一
	ServerId     int64  `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`         // 服务ID，和用户ID二选一
	DayFrom      string `protobuf:"bytes,3,opt,name=dayFrom,proto3" json:"dayFrom,omitempty"`            // 开始日期 YYYYMMDD
	DayTo        string `protobuf:"bytes,4,opt,name=dayTo,proto3" json:"dayTo,omitempty"`                // 结束日期 YYYYMMDD
	Percentile   int32  `protobuf:"varint,5,opt,name=percentile,proto3" json:"percentile,omitempty"`     // 可选项，百分位（nth）带宽位置，0-100之间
	NodeRegionId int64  `protobuf:"varint,6,opt,name=nodeRegionId,proto3" json:"nodeRegionId,omitempty"` // 区域ID，可选项（目前只有用户整体统计支持区域ID）
	Algo         string `protobuf:"bytes,7,opt,name=algo,proto3" json:"algo,omitempty"`                  // 带宽算法，目前支持secondly和avg
}

func (x *FindDailyServerBandwidthStatsBetweenDaysRequest) Reset() {
	*x = FindDailyServerBandwidthStatsBetweenDaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDailyServerBandwidthStatsBetweenDaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDailyServerBandwidthStatsBetweenDaysRequest) ProtoMessage() {}

func (x *FindDailyServerBandwidthStatsBetweenDaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDailyServerBandwidthStatsBetweenDaysRequest.ProtoReflect.Descriptor instead.
func (*FindDailyServerBandwidthStatsBetweenDaysRequest) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{7}
}

func (x *FindDailyServerBandwidthStatsBetweenDaysRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FindDailyServerBandwidthStatsBetweenDaysRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FindDailyServerBandwidthStatsBetweenDaysRequest) GetDayFrom() string {
	if x != nil {
		return x.DayFrom
	}
	return ""
}

func (x *FindDailyServerBandwidthStatsBetweenDaysRequest) GetDayTo() string {
	if x != nil {
		return x.DayTo
	}
	return ""
}

func (x *FindDailyServerBandwidthStatsBetweenDaysRequest) GetPercentile() int32 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

func (x *FindDailyServerBandwidthStatsBetweenDaysRequest) GetNodeRegionId() int64 {
	if x != nil {
		return x.NodeRegionId
	}
	return 0
}

func (x *FindDailyServerBandwidthStatsBetweenDaysRequest) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

type FindDailyServerBandwidthStatsBetweenDaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats   []*FindDailyServerBandwidthStatsBetweenDaysResponse_Stat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	NthStat *FindDailyServerBandwidthStatsBetweenDaysResponse_Stat   `protobuf:"bytes,2,opt,name=nthStat,proto3" json:"nthStat,omitempty"`
}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse) Reset() {
	*x = FindDailyServerBandwidthStatsBetweenDaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDailyServerBandwidthStatsBetweenDaysResponse) ProtoMessage() {}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDailyServerBandwidthStatsBetweenDaysResponse.ProtoReflect.Descriptor instead.
func (*FindDailyServerBandwidthStatsBetweenDaysResponse) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{8}
}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse) GetStats() []*FindDailyServerBandwidthStatsBetweenDaysResponse_Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse) GetNthStat() *FindDailyServerBandwidthStatsBetweenDaysResponse_Stat {
	if x != nil {
		return x.NthStat
	}
	return nil
}

type FindHourlyServerBandwidthStatsResponse_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Hour  int32  `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	Bytes int64  `protobuf:"varint,3,opt,name=bytes,proto3" json:"bytes,omitempty"` // 峰值字节/秒
	Bits  int64  `protobuf:"varint,4,opt,name=bits,proto3" json:"bits,omitempty"`   // 峰值比特/秒
}

func (x *FindHourlyServerBandwidthStatsResponse_Stat) Reset() {
	*x = FindHourlyServerBandwidthStatsResponse_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindHourlyServerBandwidthStatsResponse_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindHourlyServerBandwidthStatsResponse_Stat) ProtoMessage() {}

func (x *FindHourlyServerBandwidthStatsResponse_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindHourlyServerBandwidthStatsResponse_Stat.ProtoReflect.Descriptor instead.
func (*FindHourlyServerBandwidthStatsResponse_Stat) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{4, 0}
}

func (x *FindHourlyServerBandwidthStatsResponse_Stat) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *FindHourlyServerBandwidthStatsResponse_Stat) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *FindHourlyServerBandwidthStatsResponse_Stat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *FindHourlyServerBandwidthStatsResponse_Stat) GetBits() int64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

type FindDailyServerBandwidthStatsResponse_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Bytes int64  `protobuf:"varint,3,opt,name=bytes,proto3" json:"bytes,omitempty"` // 峰值字节/秒
	Bits  int64  `protobuf:"varint,4,opt,name=bits,proto3" json:"bits,omitempty"`   // 峰值比特/秒
}

func (x *FindDailyServerBandwidthStatsResponse_Stat) Reset() {
	*x = FindDailyServerBandwidthStatsResponse_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDailyServerBandwidthStatsResponse_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDailyServerBandwidthStatsResponse_Stat) ProtoMessage() {}

func (x *FindDailyServerBandwidthStatsResponse_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDailyServerBandwidthStatsResponse_Stat.ProtoReflect.Descriptor instead.
func (*FindDailyServerBandwidthStatsResponse_Stat) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{6, 0}
}

func (x *FindDailyServerBandwidthStatsResponse_Stat) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *FindDailyServerBandwidthStatsResponse_Stat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *FindDailyServerBandwidthStatsResponse_Stat) GetBits() int64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

type FindDailyServerBandwidthStatsBetweenDaysResponse_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day    string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	TimeAt string `protobuf:"bytes,2,opt,name=timeAt,proto3" json:"timeAt,omitempty"`
	Bytes  int64  `protobuf:"varint,3,opt,name=bytes,proto3" json:"bytes,omitempty"` // 峰值字节/秒
	Bits   int64  `protobuf:"varint,4,opt,name=bits,proto3" json:"bits,omitempty"`   // 峰值比特/秒
}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse_Stat) Reset() {
	*x = FindDailyServerBandwidthStatsBetweenDaysResponse_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_bandwidth_stat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindDailyServerBandwidthStatsBetweenDaysResponse_Stat) ProtoMessage() {}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_bandwidth_stat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindDailyServerBandwidthStatsBetweenDaysResponse_Stat.ProtoReflect.Descriptor instead.
func (*FindDailyServerBandwidthStatsBetweenDaysResponse_Stat) Descriptor() ([]byte, []int) {
	return file_service_server_bandwidth_stat_proto_rawDescGZIP(), []int{8, 0}
}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse_Stat) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse_Stat) GetTimeAt() string {
	if x != nil {
		return x.TimeAt
	}
	return ""
}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse_Stat) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *FindDailyServerBandwidthStatsBetweenDaysResponse_Stat) GetBits() int64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

var File_service_server_bandwidth_stat_proto protoreflect.FileDescriptor

var file_service_server_bandwidth_stat_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70,
	0x0a, 0x21, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0x79, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x22, 0x6f, 0x0a, 0x20, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x25,
	0x46, 0x69, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x22, 0xb2, 0x02, 0x0a, 0x26,
	0x46, 0x69, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48,
	0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x49, 0x0a,
	0x07, 0x6e, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x07, 0x6e, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x1a, 0x56, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73,
	0x22, 0x6a, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x22, 0x9b, 0x02, 0x0a,
	0x25, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x07,
	0x6e, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x6e,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x1a, 0x42, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x2f, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x61, 0x79, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x79,
	0x54, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x22, 0xb4, 0x02, 0x0a, 0x30, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x53, 0x0a, 0x07, 0x6e, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x07, 0x6e, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x1a, 0x5a, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x69, 0x74,
	0x73, 0x32, 0xdf, 0x04, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x53, 0x0a, 0x1a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x1e,
	0x66, 0x69, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x28,
	0x66, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_service_server_bandwidth_stat_proto_rawDescOnce sync.Once
	file_service_server_bandwidth_stat_proto_rawDescData = file_service_server_bandwidth_stat_proto_rawDesc
)

func file_service_server_bandwidth_stat_proto_rawDescGZIP() []byte {
	file_service_server_bandwidth_stat_proto_rawDescOnce.Do(func() {
		file_service_server_bandwidth_stat_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_server_bandwidth_stat_proto_rawDescData)
	})
	return file_service_server_bandwidth_stat_proto_rawDescData
}

var file_service_server_bandwidth_stat_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_service_server_bandwidth_stat_proto_goTypes = []interface{}{
	(*UploadServerBandwidthStatsRequest)(nil),                     // 0: pb.UploadServerBandwidthStatsRequest
	(*FindServerBandwidthStatsRequest)(nil),                       // 1: pb.FindServerBandwidthStatsRequest
	(*FindServerBandwidthStatsResponse)(nil),                      // 2: pb.FindServerBandwidthStatsResponse
	(*FindHourlyServerBandwidthStatsRequest)(nil),                 // 3: pb.FindHourlyServerBandwidthStatsRequest
	(*FindHourlyServerBandwidthStatsResponse)(nil),                // 4: pb.FindHourlyServerBandwidthStatsResponse
	(*FindDailyServerBandwidthStatsRequest)(nil),                  // 5: pb.FindDailyServerBandwidthStatsRequest
	(*FindDailyServerBandwidthStatsResponse)(nil),                 // 6: pb.FindDailyServerBandwidthStatsResponse
	(*FindDailyServerBandwidthStatsBetweenDaysRequest)(nil),       // 7: pb.FindDailyServerBandwidthStatsBetweenDaysRequest
	(*FindDailyServerBandwidthStatsBetweenDaysResponse)(nil),      // 8: pb.FindDailyServerBandwidthStatsBetweenDaysResponse
	(*FindHourlyServerBandwidthStatsResponse_Stat)(nil),           // 9: pb.FindHourlyServerBandwidthStatsResponse.Stat
	(*FindDailyServerBandwidthStatsResponse_Stat)(nil),            // 10: pb.FindDailyServerBandwidthStatsResponse.Stat
	(*FindDailyServerBandwidthStatsBetweenDaysResponse_Stat)(nil), // 11: pb.FindDailyServerBandwidthStatsBetweenDaysResponse.Stat
	(*ServerBandwidthStat)(nil),                                   // 12: pb.ServerBandwidthStat
	(*RPCSuccess)(nil),                                            // 13: pb.RPCSuccess
}
var file_service_server_bandwidth_stat_proto_depIdxs = []int32{
	12, // 0: pb.UploadServerBandwidthStatsRequest.serverBandwidthStats:type_name -> pb.ServerBandwidthStat
	12, // 1: pb.FindServerBandwidthStatsResponse.serverBandwidthStats:type_name -> pb.ServerBandwidthStat
	9,  // 2: pb.FindHourlyServerBandwidthStatsResponse.stats:type_name -> pb.FindHourlyServerBandwidthStatsResponse.Stat
	9,  // 3: pb.FindHourlyServerBandwidthStatsResponse.nthStat:type_name -> pb.FindHourlyServerBandwidthStatsResponse.Stat
	10, // 4: pb.FindDailyServerBandwidthStatsResponse.stats:type_name -> pb.FindDailyServerBandwidthStatsResponse.Stat
	10, // 5: pb.FindDailyServerBandwidthStatsResponse.nthStat:type_name -> pb.FindDailyServerBandwidthStatsResponse.Stat
	11, // 6: pb.FindDailyServerBandwidthStatsBetweenDaysResponse.stats:type_name -> pb.FindDailyServerBandwidthStatsBetweenDaysResponse.Stat
	11, // 7: pb.FindDailyServerBandwidthStatsBetweenDaysResponse.nthStat:type_name -> pb.FindDailyServerBandwidthStatsBetweenDaysResponse.Stat
	0,  // 8: pb.ServerBandwidthStatService.uploadServerBandwidthStats:input_type -> pb.UploadServerBandwidthStatsRequest
	1,  // 9: pb.ServerBandwidthStatService.findServerBandwidthStats:input_type -> pb.FindServerBandwidthStatsRequest
	3,  // 10: pb.ServerBandwidthStatService.findHourlyServerBandwidthStats:input_type -> pb.FindHourlyServerBandwidthStatsRequest
	5,  // 11: pb.ServerBandwidthStatService.findDailyServerBandwidthStats:input_type -> pb.FindDailyServerBandwidthStatsRequest
	7,  // 12: pb.ServerBandwidthStatService.findDailyServerBandwidthStatsBetweenDays:input_type -> pb.FindDailyServerBandwidthStatsBetweenDaysRequest
	13, // 13: pb.ServerBandwidthStatService.uploadServerBandwidthStats:output_type -> pb.RPCSuccess
	2,  // 14: pb.ServerBandwidthStatService.findServerBandwidthStats:output_type -> pb.FindServerBandwidthStatsResponse
	4,  // 15: pb.ServerBandwidthStatService.findHourlyServerBandwidthStats:output_type -> pb.FindHourlyServerBandwidthStatsResponse
	6,  // 16: pb.ServerBandwidthStatService.findDailyServerBandwidthStats:output_type -> pb.FindDailyServerBandwidthStatsResponse
	8,  // 17: pb.ServerBandwidthStatService.findDailyServerBandwidthStatsBetweenDays:output_type -> pb.FindDailyServerBandwidthStatsBetweenDaysResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_service_server_bandwidth_stat_proto_init() }
func file_service_server_bandwidth_stat_proto_init() {
	if File_service_server_bandwidth_stat_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_server_bandwidth_stat_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_server_bandwidth_stat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerBandwidthStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerBandwidthStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerBandwidthStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHourlyServerBandwidthStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHourlyServerBandwidthStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDailyServerBandwidthStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDailyServerBandwidthStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDailyServerBandwidthStatsBetweenDaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDailyServerBandwidthStatsBetweenDaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindHourlyServerBandwidthStatsResponse_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDailyServerBandwidthStatsResponse_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_bandwidth_stat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindDailyServerBandwidthStatsBetweenDaysResponse_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_server_bandwidth_stat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_server_bandwidth_stat_proto_goTypes,
		DependencyIndexes: file_service_server_bandwidth_stat_proto_depIdxs,
		MessageInfos:      file_service_server_bandwidth_stat_proto_msgTypes,
	}.Build()
	File_service_server_bandwidth_stat_proto = out.File
	file_service_server_bandwidth_stat_proto_rawDesc = nil
	file_service_server_bandwidth_stat_proto_goTypes = nil
	file_service_server_bandwidth_stat_proto_depIdxs = nil
}
