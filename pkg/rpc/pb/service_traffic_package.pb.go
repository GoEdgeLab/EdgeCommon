// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_traffic_package.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建流量包
type CreateTrafficPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int32  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"` // 流量包尺寸
	Unit string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`  // 单位：gb, tb, pb
}

func (x *CreateTrafficPackageRequest) Reset() {
	*x = CreateTrafficPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_traffic_package_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrafficPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrafficPackageRequest) ProtoMessage() {}

func (x *CreateTrafficPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_traffic_package_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrafficPackageRequest.ProtoReflect.Descriptor instead.
func (*CreateTrafficPackageRequest) Descriptor() ([]byte, []int) {
	return file_service_traffic_package_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTrafficPackageRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateTrafficPackageRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type CreateTrafficPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPackageId int64 `protobuf:"varint,1,opt,name=trafficPackageId,proto3" json:"trafficPackageId,omitempty"`
}

func (x *CreateTrafficPackageResponse) Reset() {
	*x = CreateTrafficPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_traffic_package_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrafficPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrafficPackageResponse) ProtoMessage() {}

func (x *CreateTrafficPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_traffic_package_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrafficPackageResponse.ProtoReflect.Descriptor instead.
func (*CreateTrafficPackageResponse) Descriptor() ([]byte, []int) {
	return file_service_traffic_package_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTrafficPackageResponse) GetTrafficPackageId() int64 {
	if x != nil {
		return x.TrafficPackageId
	}
	return 0
}

// 修改流量包
type UpdateTrafficPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPackageId int64 `protobuf:"varint,1,opt,name=trafficPackageId,proto3" json:"trafficPackageId,omitempty"`
	IsOn             bool  `protobuf:"varint,2,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateTrafficPackageRequest) Reset() {
	*x = UpdateTrafficPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_traffic_package_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTrafficPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrafficPackageRequest) ProtoMessage() {}

func (x *UpdateTrafficPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_traffic_package_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrafficPackageRequest.ProtoReflect.Descriptor instead.
func (*UpdateTrafficPackageRequest) Descriptor() ([]byte, []int) {
	return file_service_traffic_package_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTrafficPackageRequest) GetTrafficPackageId() int64 {
	if x != nil {
		return x.TrafficPackageId
	}
	return 0
}

func (x *UpdateTrafficPackageRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除流量包
type DeleteTrafficPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPackageId int64 `protobuf:"varint,1,opt,name=trafficPackageId,proto3" json:"trafficPackageId,omitempty"`
}

func (x *DeleteTrafficPackageRequest) Reset() {
	*x = DeleteTrafficPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_traffic_package_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTrafficPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTrafficPackageRequest) ProtoMessage() {}

func (x *DeleteTrafficPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_traffic_package_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTrafficPackageRequest.ProtoReflect.Descriptor instead.
func (*DeleteTrafficPackageRequest) Descriptor() ([]byte, []int) {
	return file_service_traffic_package_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteTrafficPackageRequest) GetTrafficPackageId() int64 {
	if x != nil {
		return x.TrafficPackageId
	}
	return 0
}

// 查找流量包
type FindTrafficPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPackageId int64 `protobuf:"varint,1,opt,name=trafficPackageId,proto3" json:"trafficPackageId,omitempty"`
}

func (x *FindTrafficPackageRequest) Reset() {
	*x = FindTrafficPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_traffic_package_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTrafficPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTrafficPackageRequest) ProtoMessage() {}

func (x *FindTrafficPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_traffic_package_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTrafficPackageRequest.ProtoReflect.Descriptor instead.
func (*FindTrafficPackageRequest) Descriptor() ([]byte, []int) {
	return file_service_traffic_package_proto_rawDescGZIP(), []int{4}
}

func (x *FindTrafficPackageRequest) GetTrafficPackageId() int64 {
	if x != nil {
		return x.TrafficPackageId
	}
	return 0
}

type FindTrafficPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPackage *TrafficPackage `protobuf:"bytes,1,opt,name=trafficPackage,proto3" json:"trafficPackage,omitempty"`
}

func (x *FindTrafficPackageResponse) Reset() {
	*x = FindTrafficPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_traffic_package_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTrafficPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTrafficPackageResponse) ProtoMessage() {}

func (x *FindTrafficPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_traffic_package_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTrafficPackageResponse.ProtoReflect.Descriptor instead.
func (*FindTrafficPackageResponse) Descriptor() ([]byte, []int) {
	return file_service_traffic_package_proto_rawDescGZIP(), []int{5}
}

func (x *FindTrafficPackageResponse) GetTrafficPackage() *TrafficPackage {
	if x != nil {
		return x.TrafficPackage
	}
	return nil
}

// 查找所有流量包
type FindAllTrafficPackagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllTrafficPackagesRequest) Reset() {
	*x = FindAllTrafficPackagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_traffic_package_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllTrafficPackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllTrafficPackagesRequest) ProtoMessage() {}

func (x *FindAllTrafficPackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_traffic_package_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllTrafficPackagesRequest.ProtoReflect.Descriptor instead.
func (*FindAllTrafficPackagesRequest) Descriptor() ([]byte, []int) {
	return file_service_traffic_package_proto_rawDescGZIP(), []int{6}
}

type FindAllTrafficPackagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPackages []*TrafficPackage `protobuf:"bytes,1,rep,name=trafficPackages,proto3" json:"trafficPackages,omitempty"`
}

func (x *FindAllTrafficPackagesResponse) Reset() {
	*x = FindAllTrafficPackagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_traffic_package_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllTrafficPackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllTrafficPackagesResponse) ProtoMessage() {}

func (x *FindAllTrafficPackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_traffic_package_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllTrafficPackagesResponse.ProtoReflect.Descriptor instead.
func (*FindAllTrafficPackagesResponse) Descriptor() ([]byte, []int) {
	return file_service_traffic_package_proto_rawDescGZIP(), []int{7}
}

func (x *FindAllTrafficPackagesResponse) GetTrafficPackages() []*TrafficPackage {
	if x != nil {
		return x.TrafficPackages
	}
	return nil
}

// 查找所有可用流量包
type FindAllAvailableTrafficPackagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllAvailableTrafficPackagesRequest) Reset() {
	*x = FindAllAvailableTrafficPackagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_traffic_package_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllAvailableTrafficPackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllAvailableTrafficPackagesRequest) ProtoMessage() {}

func (x *FindAllAvailableTrafficPackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_traffic_package_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllAvailableTrafficPackagesRequest.ProtoReflect.Descriptor instead.
func (*FindAllAvailableTrafficPackagesRequest) Descriptor() ([]byte, []int) {
	return file_service_traffic_package_proto_rawDescGZIP(), []int{8}
}

type FindAllAvailableTrafficPackagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficPackages []*TrafficPackage `protobuf:"bytes,1,rep,name=trafficPackages,proto3" json:"trafficPackages,omitempty"`
}

func (x *FindAllAvailableTrafficPackagesResponse) Reset() {
	*x = FindAllAvailableTrafficPackagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_traffic_package_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllAvailableTrafficPackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllAvailableTrafficPackagesResponse) ProtoMessage() {}

func (x *FindAllAvailableTrafficPackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_traffic_package_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllAvailableTrafficPackagesResponse.ProtoReflect.Descriptor instead.
func (*FindAllAvailableTrafficPackagesResponse) Descriptor() ([]byte, []int) {
	return file_service_traffic_package_proto_rawDescGZIP(), []int{9}
}

func (x *FindAllAvailableTrafficPackagesResponse) GetTrafficPackages() []*TrafficPackage {
	if x != nil {
		return x.TrafficPackages
	}
	return nil
}

var File_service_traffic_package_proto protoreflect.FileDescriptor

var file_service_traffic_package_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x45, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x4a, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x69, 0x73, 0x4f, 0x6e, 0x22, 0x49, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x47, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x26, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a,
	0x27, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x32, 0xb6, 0x04, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a,
	0x12, 0x66, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1f, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_traffic_package_proto_rawDescOnce sync.Once
	file_service_traffic_package_proto_rawDescData = file_service_traffic_package_proto_rawDesc
)

func file_service_traffic_package_proto_rawDescGZIP() []byte {
	file_service_traffic_package_proto_rawDescOnce.Do(func() {
		file_service_traffic_package_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_traffic_package_proto_rawDescData)
	})
	return file_service_traffic_package_proto_rawDescData
}

var file_service_traffic_package_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_service_traffic_package_proto_goTypes = []interface{}{
	(*CreateTrafficPackageRequest)(nil),             // 0: pb.CreateTrafficPackageRequest
	(*CreateTrafficPackageResponse)(nil),            // 1: pb.CreateTrafficPackageResponse
	(*UpdateTrafficPackageRequest)(nil),             // 2: pb.UpdateTrafficPackageRequest
	(*DeleteTrafficPackageRequest)(nil),             // 3: pb.DeleteTrafficPackageRequest
	(*FindTrafficPackageRequest)(nil),               // 4: pb.FindTrafficPackageRequest
	(*FindTrafficPackageResponse)(nil),              // 5: pb.FindTrafficPackageResponse
	(*FindAllTrafficPackagesRequest)(nil),           // 6: pb.FindAllTrafficPackagesRequest
	(*FindAllTrafficPackagesResponse)(nil),          // 7: pb.FindAllTrafficPackagesResponse
	(*FindAllAvailableTrafficPackagesRequest)(nil),  // 8: pb.FindAllAvailableTrafficPackagesRequest
	(*FindAllAvailableTrafficPackagesResponse)(nil), // 9: pb.FindAllAvailableTrafficPackagesResponse
	(*TrafficPackage)(nil),                          // 10: pb.TrafficPackage
	(*RPCSuccess)(nil),                              // 11: pb.RPCSuccess
}
var file_service_traffic_package_proto_depIdxs = []int32{
	10, // 0: pb.FindTrafficPackageResponse.trafficPackage:type_name -> pb.TrafficPackage
	10, // 1: pb.FindAllTrafficPackagesResponse.trafficPackages:type_name -> pb.TrafficPackage
	10, // 2: pb.FindAllAvailableTrafficPackagesResponse.trafficPackages:type_name -> pb.TrafficPackage
	0,  // 3: pb.TrafficPackageService.createTrafficPackage:input_type -> pb.CreateTrafficPackageRequest
	2,  // 4: pb.TrafficPackageService.updateTrafficPackage:input_type -> pb.UpdateTrafficPackageRequest
	3,  // 5: pb.TrafficPackageService.deleteTrafficPackage:input_type -> pb.DeleteTrafficPackageRequest
	4,  // 6: pb.TrafficPackageService.findTrafficPackage:input_type -> pb.FindTrafficPackageRequest
	6,  // 7: pb.TrafficPackageService.findAllTrafficPackages:input_type -> pb.FindAllTrafficPackagesRequest
	8,  // 8: pb.TrafficPackageService.findAllAvailableTrafficPackages:input_type -> pb.FindAllAvailableTrafficPackagesRequest
	1,  // 9: pb.TrafficPackageService.createTrafficPackage:output_type -> pb.CreateTrafficPackageResponse
	11, // 10: pb.TrafficPackageService.updateTrafficPackage:output_type -> pb.RPCSuccess
	11, // 11: pb.TrafficPackageService.deleteTrafficPackage:output_type -> pb.RPCSuccess
	5,  // 12: pb.TrafficPackageService.findTrafficPackage:output_type -> pb.FindTrafficPackageResponse
	7,  // 13: pb.TrafficPackageService.findAllTrafficPackages:output_type -> pb.FindAllTrafficPackagesResponse
	9,  // 14: pb.TrafficPackageService.findAllAvailableTrafficPackages:output_type -> pb.FindAllAvailableTrafficPackagesResponse
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_traffic_package_proto_init() }
func file_service_traffic_package_proto_init() {
	if File_service_traffic_package_proto != nil {
		return
	}
	file_models_model_traffic_package_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_traffic_package_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrafficPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_traffic_package_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrafficPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_traffic_package_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTrafficPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_traffic_package_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTrafficPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_traffic_package_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTrafficPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_traffic_package_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTrafficPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_traffic_package_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllTrafficPackagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_traffic_package_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllTrafficPackagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_traffic_package_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllAvailableTrafficPackagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_traffic_package_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllAvailableTrafficPackagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_traffic_package_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_traffic_package_proto_goTypes,
		DependencyIndexes: file_service_traffic_package_proto_depIdxs,
		MessageInfos:      file_service_traffic_package_proto_msgTypes,
	}.Build()
	File_service_traffic_package_proto = out.File
	file_service_traffic_package_proto_rawDesc = nil
	file_service_traffic_package_proto_goTypes = nil
	file_service_traffic_package_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TrafficPackageServiceClient is the client API for TrafficPackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrafficPackageServiceClient interface {
	// 创建流量包
	CreateTrafficPackage(ctx context.Context, in *CreateTrafficPackageRequest, opts ...grpc.CallOption) (*CreateTrafficPackageResponse, error)
	// 修改流量包
	UpdateTrafficPackage(ctx context.Context, in *UpdateTrafficPackageRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除流量包
	DeleteTrafficPackage(ctx context.Context, in *DeleteTrafficPackageRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找流量包
	FindTrafficPackage(ctx context.Context, in *FindTrafficPackageRequest, opts ...grpc.CallOption) (*FindTrafficPackageResponse, error)
	// 查找所有流量包
	FindAllTrafficPackages(ctx context.Context, in *FindAllTrafficPackagesRequest, opts ...grpc.CallOption) (*FindAllTrafficPackagesResponse, error)
	// 查找所有可用流量包
	FindAllAvailableTrafficPackages(ctx context.Context, in *FindAllAvailableTrafficPackagesRequest, opts ...grpc.CallOption) (*FindAllAvailableTrafficPackagesResponse, error)
}

type trafficPackageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficPackageServiceClient(cc grpc.ClientConnInterface) TrafficPackageServiceClient {
	return &trafficPackageServiceClient{cc}
}

func (c *trafficPackageServiceClient) CreateTrafficPackage(ctx context.Context, in *CreateTrafficPackageRequest, opts ...grpc.CallOption) (*CreateTrafficPackageResponse, error) {
	out := new(CreateTrafficPackageResponse)
	err := c.cc.Invoke(ctx, "/pb.TrafficPackageService/createTrafficPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficPackageServiceClient) UpdateTrafficPackage(ctx context.Context, in *UpdateTrafficPackageRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.TrafficPackageService/updateTrafficPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficPackageServiceClient) DeleteTrafficPackage(ctx context.Context, in *DeleteTrafficPackageRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.TrafficPackageService/deleteTrafficPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficPackageServiceClient) FindTrafficPackage(ctx context.Context, in *FindTrafficPackageRequest, opts ...grpc.CallOption) (*FindTrafficPackageResponse, error) {
	out := new(FindTrafficPackageResponse)
	err := c.cc.Invoke(ctx, "/pb.TrafficPackageService/findTrafficPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficPackageServiceClient) FindAllTrafficPackages(ctx context.Context, in *FindAllTrafficPackagesRequest, opts ...grpc.CallOption) (*FindAllTrafficPackagesResponse, error) {
	out := new(FindAllTrafficPackagesResponse)
	err := c.cc.Invoke(ctx, "/pb.TrafficPackageService/findAllTrafficPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficPackageServiceClient) FindAllAvailableTrafficPackages(ctx context.Context, in *FindAllAvailableTrafficPackagesRequest, opts ...grpc.CallOption) (*FindAllAvailableTrafficPackagesResponse, error) {
	out := new(FindAllAvailableTrafficPackagesResponse)
	err := c.cc.Invoke(ctx, "/pb.TrafficPackageService/findAllAvailableTrafficPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrafficPackageServiceServer is the server API for TrafficPackageService service.
type TrafficPackageServiceServer interface {
	// 创建流量包
	CreateTrafficPackage(context.Context, *CreateTrafficPackageRequest) (*CreateTrafficPackageResponse, error)
	// 修改流量包
	UpdateTrafficPackage(context.Context, *UpdateTrafficPackageRequest) (*RPCSuccess, error)
	// 删除流量包
	DeleteTrafficPackage(context.Context, *DeleteTrafficPackageRequest) (*RPCSuccess, error)
	// 查找流量包
	FindTrafficPackage(context.Context, *FindTrafficPackageRequest) (*FindTrafficPackageResponse, error)
	// 查找所有流量包
	FindAllTrafficPackages(context.Context, *FindAllTrafficPackagesRequest) (*FindAllTrafficPackagesResponse, error)
	// 查找所有可用流量包
	FindAllAvailableTrafficPackages(context.Context, *FindAllAvailableTrafficPackagesRequest) (*FindAllAvailableTrafficPackagesResponse, error)
}

// UnimplementedTrafficPackageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTrafficPackageServiceServer struct {
}

func (*UnimplementedTrafficPackageServiceServer) CreateTrafficPackage(context.Context, *CreateTrafficPackageRequest) (*CreateTrafficPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrafficPackage not implemented")
}
func (*UnimplementedTrafficPackageServiceServer) UpdateTrafficPackage(context.Context, *UpdateTrafficPackageRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrafficPackage not implemented")
}
func (*UnimplementedTrafficPackageServiceServer) DeleteTrafficPackage(context.Context, *DeleteTrafficPackageRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrafficPackage not implemented")
}
func (*UnimplementedTrafficPackageServiceServer) FindTrafficPackage(context.Context, *FindTrafficPackageRequest) (*FindTrafficPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTrafficPackage not implemented")
}
func (*UnimplementedTrafficPackageServiceServer) FindAllTrafficPackages(context.Context, *FindAllTrafficPackagesRequest) (*FindAllTrafficPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTrafficPackages not implemented")
}
func (*UnimplementedTrafficPackageServiceServer) FindAllAvailableTrafficPackages(context.Context, *FindAllAvailableTrafficPackagesRequest) (*FindAllAvailableTrafficPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllAvailableTrafficPackages not implemented")
}

func RegisterTrafficPackageServiceServer(s *grpc.Server, srv TrafficPackageServiceServer) {
	s.RegisterService(&_TrafficPackageService_serviceDesc, srv)
}

func _TrafficPackageService_CreateTrafficPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrafficPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficPackageServiceServer).CreateTrafficPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TrafficPackageService/CreateTrafficPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficPackageServiceServer).CreateTrafficPackage(ctx, req.(*CreateTrafficPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficPackageService_UpdateTrafficPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrafficPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficPackageServiceServer).UpdateTrafficPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TrafficPackageService/UpdateTrafficPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficPackageServiceServer).UpdateTrafficPackage(ctx, req.(*UpdateTrafficPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficPackageService_DeleteTrafficPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficPackageServiceServer).DeleteTrafficPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TrafficPackageService/DeleteTrafficPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficPackageServiceServer).DeleteTrafficPackage(ctx, req.(*DeleteTrafficPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficPackageService_FindTrafficPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTrafficPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficPackageServiceServer).FindTrafficPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TrafficPackageService/FindTrafficPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficPackageServiceServer).FindTrafficPackage(ctx, req.(*FindTrafficPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficPackageService_FindAllTrafficPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllTrafficPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficPackageServiceServer).FindAllTrafficPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TrafficPackageService/FindAllTrafficPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficPackageServiceServer).FindAllTrafficPackages(ctx, req.(*FindAllTrafficPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficPackageService_FindAllAvailableTrafficPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllAvailableTrafficPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficPackageServiceServer).FindAllAvailableTrafficPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TrafficPackageService/FindAllAvailableTrafficPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficPackageServiceServer).FindAllAvailableTrafficPackages(ctx, req.(*FindAllAvailableTrafficPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrafficPackageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TrafficPackageService",
	HandlerType: (*TrafficPackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createTrafficPackage",
			Handler:    _TrafficPackageService_CreateTrafficPackage_Handler,
		},
		{
			MethodName: "updateTrafficPackage",
			Handler:    _TrafficPackageService_UpdateTrafficPackage_Handler,
		},
		{
			MethodName: "deleteTrafficPackage",
			Handler:    _TrafficPackageService_DeleteTrafficPackage_Handler,
		},
		{
			MethodName: "findTrafficPackage",
			Handler:    _TrafficPackageService_FindTrafficPackage_Handler,
		},
		{
			MethodName: "findAllTrafficPackages",
			Handler:    _TrafficPackageService_FindAllTrafficPackages_Handler,
		},
		{
			MethodName: "findAllAvailableTrafficPackages",
			Handler:    _TrafficPackageService_FindAllAvailableTrafficPackages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_traffic_package.proto",
}
