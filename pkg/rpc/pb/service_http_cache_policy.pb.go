// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_http_cache_policy.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 获取所有可用策略
type FindAllEnabledHTTPCachePoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledHTTPCachePoliciesRequest) Reset() {
	*x = FindAllEnabledHTTPCachePoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledHTTPCachePoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledHTTPCachePoliciesRequest) ProtoMessage() {}

func (x *FindAllEnabledHTTPCachePoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledHTTPCachePoliciesRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledHTTPCachePoliciesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{0}
}

type FindAllEnabledHTTPCachePoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CachePolicies []*HTTPCachePolicy `protobuf:"bytes,1,rep,name=cachePolicies,proto3" json:"cachePolicies,omitempty"`
}

func (x *FindAllEnabledHTTPCachePoliciesResponse) Reset() {
	*x = FindAllEnabledHTTPCachePoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledHTTPCachePoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledHTTPCachePoliciesResponse) ProtoMessage() {}

func (x *FindAllEnabledHTTPCachePoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledHTTPCachePoliciesResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledHTTPCachePoliciesResponse) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{1}
}

func (x *FindAllEnabledHTTPCachePoliciesResponse) GetCachePolicies() []*HTTPCachePolicy {
	if x != nil {
		return x.CachePolicies
	}
	return nil
}

// 创建缓存策略
type CreateHTTPCachePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOn                 bool   `protobuf:"varint,1,opt,name=isOn,proto3" json:"isOn,omitempty"`
	Name                 string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CapacityJSON         []byte `protobuf:"bytes,4,opt,name=capacityJSON,proto3" json:"capacityJSON,omitempty"`
	MaxSizeJSON          []byte `protobuf:"bytes,6,opt,name=maxSizeJSON,proto3" json:"maxSizeJSON,omitempty"`
	Type                 string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	OptionsJSON          []byte `protobuf:"bytes,8,opt,name=optionsJSON,proto3" json:"optionsJSON,omitempty"`
	SyncCompressionCache bool   `protobuf:"varint,9,opt,name=syncCompressionCache,proto3" json:"syncCompressionCache,omitempty"`
	FetchTimeoutJSON     []byte `protobuf:"bytes,10,opt,name=fetchTimeoutJSON,proto3" json:"fetchTimeoutJSON,omitempty"` // 预热超时时间
}

func (x *CreateHTTPCachePolicyRequest) Reset() {
	*x = CreateHTTPCachePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPCachePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPCachePolicyRequest) ProtoMessage() {}

func (x *CreateHTTPCachePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPCachePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateHTTPCachePolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{2}
}

func (x *CreateHTTPCachePolicyRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *CreateHTTPCachePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateHTTPCachePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateHTTPCachePolicyRequest) GetCapacityJSON() []byte {
	if x != nil {
		return x.CapacityJSON
	}
	return nil
}

func (x *CreateHTTPCachePolicyRequest) GetMaxSizeJSON() []byte {
	if x != nil {
		return x.MaxSizeJSON
	}
	return nil
}

func (x *CreateHTTPCachePolicyRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateHTTPCachePolicyRequest) GetOptionsJSON() []byte {
	if x != nil {
		return x.OptionsJSON
	}
	return nil
}

func (x *CreateHTTPCachePolicyRequest) GetSyncCompressionCache() bool {
	if x != nil {
		return x.SyncCompressionCache
	}
	return false
}

func (x *CreateHTTPCachePolicyRequest) GetFetchTimeoutJSON() []byte {
	if x != nil {
		return x.FetchTimeoutJSON
	}
	return nil
}

type CreateHTTPCachePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCachePolicyId int64 `protobuf:"varint,1,opt,name=httpCachePolicyId,proto3" json:"httpCachePolicyId,omitempty"`
}

func (x *CreateHTTPCachePolicyResponse) Reset() {
	*x = CreateHTTPCachePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHTTPCachePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHTTPCachePolicyResponse) ProtoMessage() {}

func (x *CreateHTTPCachePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHTTPCachePolicyResponse.ProtoReflect.Descriptor instead.
func (*CreateHTTPCachePolicyResponse) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{3}
}

func (x *CreateHTTPCachePolicyResponse) GetHttpCachePolicyId() int64 {
	if x != nil {
		return x.HttpCachePolicyId
	}
	return 0
}

// 修改缓存策略
type UpdateHTTPCachePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCachePolicyId    int64  `protobuf:"varint,1,opt,name=httpCachePolicyId,proto3" json:"httpCachePolicyId,omitempty"`
	IsOn                 bool   `protobuf:"varint,2,opt,name=isOn,proto3" json:"isOn,omitempty"`
	Name                 string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description          string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CapacityJSON         []byte `protobuf:"bytes,5,opt,name=capacityJSON,proto3" json:"capacityJSON,omitempty"`
	MaxSizeJSON          []byte `protobuf:"bytes,7,opt,name=maxSizeJSON,proto3" json:"maxSizeJSON,omitempty"`
	Type                 string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	OptionsJSON          []byte `protobuf:"bytes,9,opt,name=optionsJSON,proto3" json:"optionsJSON,omitempty"`
	SyncCompressionCache bool   `protobuf:"varint,10,opt,name=syncCompressionCache,proto3" json:"syncCompressionCache,omitempty"`
	FetchTimeoutJSON     []byte `protobuf:"bytes,11,opt,name=fetchTimeoutJSON,proto3" json:"fetchTimeoutJSON,omitempty"` // 预热超时时间
}

func (x *UpdateHTTPCachePolicyRequest) Reset() {
	*x = UpdateHTTPCachePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPCachePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPCachePolicyRequest) ProtoMessage() {}

func (x *UpdateHTTPCachePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPCachePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPCachePolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateHTTPCachePolicyRequest) GetHttpCachePolicyId() int64 {
	if x != nil {
		return x.HttpCachePolicyId
	}
	return 0
}

func (x *UpdateHTTPCachePolicyRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateHTTPCachePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateHTTPCachePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateHTTPCachePolicyRequest) GetCapacityJSON() []byte {
	if x != nil {
		return x.CapacityJSON
	}
	return nil
}

func (x *UpdateHTTPCachePolicyRequest) GetMaxSizeJSON() []byte {
	if x != nil {
		return x.MaxSizeJSON
	}
	return nil
}

func (x *UpdateHTTPCachePolicyRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateHTTPCachePolicyRequest) GetOptionsJSON() []byte {
	if x != nil {
		return x.OptionsJSON
	}
	return nil
}

func (x *UpdateHTTPCachePolicyRequest) GetSyncCompressionCache() bool {
	if x != nil {
		return x.SyncCompressionCache
	}
	return false
}

func (x *UpdateHTTPCachePolicyRequest) GetFetchTimeoutJSON() []byte {
	if x != nil {
		return x.FetchTimeoutJSON
	}
	return nil
}

// 删除缓存策略
type DeleteHTTPCachePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCachePolicyId int64 `protobuf:"varint,1,opt,name=httpCachePolicyId,proto3" json:"httpCachePolicyId,omitempty"`
}

func (x *DeleteHTTPCachePolicyRequest) Reset() {
	*x = DeleteHTTPCachePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHTTPCachePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHTTPCachePolicyRequest) ProtoMessage() {}

func (x *DeleteHTTPCachePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHTTPCachePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteHTTPCachePolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteHTTPCachePolicyRequest) GetHttpCachePolicyId() int64 {
	if x != nil {
		return x.HttpCachePolicyId
	}
	return 0
}

// 计算缓存策略数量
type CountAllEnabledHTTPCachePoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword       string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	NodeClusterId int64  `protobuf:"varint,2,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	Type          string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CountAllEnabledHTTPCachePoliciesRequest) Reset() {
	*x = CountAllEnabledHTTPCachePoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledHTTPCachePoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledHTTPCachePoliciesRequest) ProtoMessage() {}

func (x *CountAllEnabledHTTPCachePoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledHTTPCachePoliciesRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledHTTPCachePoliciesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{6}
}

func (x *CountAllEnabledHTTPCachePoliciesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CountAllEnabledHTTPCachePoliciesRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CountAllEnabledHTTPCachePoliciesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 列出单页的缓存策略
type ListEnabledHTTPCachePoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset        int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Keyword       string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	NodeClusterId int64  `protobuf:"varint,4,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	Type          string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListEnabledHTTPCachePoliciesRequest) Reset() {
	*x = ListEnabledHTTPCachePoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledHTTPCachePoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledHTTPCachePoliciesRequest) ProtoMessage() {}

func (x *ListEnabledHTTPCachePoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledHTTPCachePoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledHTTPCachePoliciesRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{7}
}

func (x *ListEnabledHTTPCachePoliciesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledHTTPCachePoliciesRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListEnabledHTTPCachePoliciesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListEnabledHTTPCachePoliciesRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *ListEnabledHTTPCachePoliciesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ListEnabledHTTPCachePoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCachePoliciesJSON []byte `protobuf:"bytes,1,opt,name=httpCachePoliciesJSON,proto3" json:"httpCachePoliciesJSON,omitempty"`
}

func (x *ListEnabledHTTPCachePoliciesResponse) Reset() {
	*x = ListEnabledHTTPCachePoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledHTTPCachePoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledHTTPCachePoliciesResponse) ProtoMessage() {}

func (x *ListEnabledHTTPCachePoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledHTTPCachePoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledHTTPCachePoliciesResponse) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{8}
}

func (x *ListEnabledHTTPCachePoliciesResponse) GetHttpCachePoliciesJSON() []byte {
	if x != nil {
		return x.HttpCachePoliciesJSON
	}
	return nil
}

// 查找单个缓存策略配置
type FindEnabledHTTPCachePolicyConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCachePolicyId int64 `protobuf:"varint,1,opt,name=httpCachePolicyId,proto3" json:"httpCachePolicyId,omitempty"`
}

func (x *FindEnabledHTTPCachePolicyConfigRequest) Reset() {
	*x = FindEnabledHTTPCachePolicyConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPCachePolicyConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPCachePolicyConfigRequest) ProtoMessage() {}

func (x *FindEnabledHTTPCachePolicyConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPCachePolicyConfigRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPCachePolicyConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{9}
}

func (x *FindEnabledHTTPCachePolicyConfigRequest) GetHttpCachePolicyId() int64 {
	if x != nil {
		return x.HttpCachePolicyId
	}
	return 0
}

type FindEnabledHTTPCachePolicyConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCachePolicyJSON []byte `protobuf:"bytes,1,opt,name=httpCachePolicyJSON,proto3" json:"httpCachePolicyJSON,omitempty"`
}

func (x *FindEnabledHTTPCachePolicyConfigResponse) Reset() {
	*x = FindEnabledHTTPCachePolicyConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPCachePolicyConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPCachePolicyConfigResponse) ProtoMessage() {}

func (x *FindEnabledHTTPCachePolicyConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPCachePolicyConfigResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPCachePolicyConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{10}
}

func (x *FindEnabledHTTPCachePolicyConfigResponse) GetHttpCachePolicyJSON() []byte {
	if x != nil {
		return x.HttpCachePolicyJSON
	}
	return nil
}

// 查找单个缓存策略信息
type FindEnabledHTTPCachePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCachePolicyId int64 `protobuf:"varint,1,opt,name=httpCachePolicyId,proto3" json:"httpCachePolicyId,omitempty"`
}

func (x *FindEnabledHTTPCachePolicyRequest) Reset() {
	*x = FindEnabledHTTPCachePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPCachePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPCachePolicyRequest) ProtoMessage() {}

func (x *FindEnabledHTTPCachePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPCachePolicyRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPCachePolicyRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{11}
}

func (x *FindEnabledHTTPCachePolicyRequest) GetHttpCachePolicyId() int64 {
	if x != nil {
		return x.HttpCachePolicyId
	}
	return 0
}

type FindEnabledHTTPCachePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCachePolicy *HTTPCachePolicy `protobuf:"bytes,1,opt,name=httpCachePolicy,proto3" json:"httpCachePolicy,omitempty"`
}

func (x *FindEnabledHTTPCachePolicyResponse) Reset() {
	*x = FindEnabledHTTPCachePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledHTTPCachePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledHTTPCachePolicyResponse) ProtoMessage() {}

func (x *FindEnabledHTTPCachePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledHTTPCachePolicyResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledHTTPCachePolicyResponse) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{12}
}

func (x *FindEnabledHTTPCachePolicyResponse) GetHttpCachePolicy() *HTTPCachePolicy {
	if x != nil {
		return x.HttpCachePolicy
	}
	return nil
}

// 设置缓存策略的默认条件
type UpdateHTTPCachePolicyRefsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpCachePolicyId int64  `protobuf:"varint,1,opt,name=httpCachePolicyId,proto3" json:"httpCachePolicyId,omitempty"`
	RefsJSON          []byte `protobuf:"bytes,2,opt,name=refsJSON,proto3" json:"refsJSON,omitempty"`
}

func (x *UpdateHTTPCachePolicyRefsRequest) Reset() {
	*x = UpdateHTTPCachePolicyRefsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_http_cache_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHTTPCachePolicyRefsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHTTPCachePolicyRefsRequest) ProtoMessage() {}

func (x *UpdateHTTPCachePolicyRefsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_http_cache_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHTTPCachePolicyRefsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHTTPCachePolicyRefsRequest) Descriptor() ([]byte, []int) {
	return file_service_http_cache_policy_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateHTTPCachePolicyRefsRequest) GetHttpCachePolicyId() int64 {
	if x != nil {
		return x.HttpCachePolicyId
	}
	return 0
}

func (x *UpdateHTTPCachePolicyRefsRequest) GetRefsJSON() []byte {
	if x != nil {
		return x.RefsJSON
	}
	return nil
}

var File_service_http_cache_policy_proto protoreflect.FileDescriptor

var file_service_http_cache_policy_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x26, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x64, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53,
	0x69, 0x7a, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x32, 0x0a,
	0x14, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4d, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0xf2, 0x02, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x4c, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x74,
	0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22,
	0x7d, 0x0a, 0x27, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa5,
	0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x68,
	0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x57, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0x5c, 0x0a,
	0x28, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x74, 0x74,
	0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x53, 0x4f, 0x4e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x51, 0x0a, 0x21, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x74, 0x74,
	0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0x63,
	0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0x6c, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x66, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x32, 0xa1, 0x07, 0x0a, 0x16, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x1f,
	0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54,
	0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54,
	0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x49, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x20,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54,
	0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48, 0x54, 0x54, 0x50, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x73, 0x12,
	0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x54, 0x54, 0x50, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_http_cache_policy_proto_rawDescOnce sync.Once
	file_service_http_cache_policy_proto_rawDescData = file_service_http_cache_policy_proto_rawDesc
)

func file_service_http_cache_policy_proto_rawDescGZIP() []byte {
	file_service_http_cache_policy_proto_rawDescOnce.Do(func() {
		file_service_http_cache_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_http_cache_policy_proto_rawDescData)
	})
	return file_service_http_cache_policy_proto_rawDescData
}

var file_service_http_cache_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_service_http_cache_policy_proto_goTypes = []interface{}{
	(*FindAllEnabledHTTPCachePoliciesRequest)(nil),   // 0: pb.FindAllEnabledHTTPCachePoliciesRequest
	(*FindAllEnabledHTTPCachePoliciesResponse)(nil),  // 1: pb.FindAllEnabledHTTPCachePoliciesResponse
	(*CreateHTTPCachePolicyRequest)(nil),             // 2: pb.CreateHTTPCachePolicyRequest
	(*CreateHTTPCachePolicyResponse)(nil),            // 3: pb.CreateHTTPCachePolicyResponse
	(*UpdateHTTPCachePolicyRequest)(nil),             // 4: pb.UpdateHTTPCachePolicyRequest
	(*DeleteHTTPCachePolicyRequest)(nil),             // 5: pb.DeleteHTTPCachePolicyRequest
	(*CountAllEnabledHTTPCachePoliciesRequest)(nil),  // 6: pb.CountAllEnabledHTTPCachePoliciesRequest
	(*ListEnabledHTTPCachePoliciesRequest)(nil),      // 7: pb.ListEnabledHTTPCachePoliciesRequest
	(*ListEnabledHTTPCachePoliciesResponse)(nil),     // 8: pb.ListEnabledHTTPCachePoliciesResponse
	(*FindEnabledHTTPCachePolicyConfigRequest)(nil),  // 9: pb.FindEnabledHTTPCachePolicyConfigRequest
	(*FindEnabledHTTPCachePolicyConfigResponse)(nil), // 10: pb.FindEnabledHTTPCachePolicyConfigResponse
	(*FindEnabledHTTPCachePolicyRequest)(nil),        // 11: pb.FindEnabledHTTPCachePolicyRequest
	(*FindEnabledHTTPCachePolicyResponse)(nil),       // 12: pb.FindEnabledHTTPCachePolicyResponse
	(*UpdateHTTPCachePolicyRefsRequest)(nil),         // 13: pb.UpdateHTTPCachePolicyRefsRequest
	(*HTTPCachePolicy)(nil),                          // 14: pb.HTTPCachePolicy
	(*RPCSuccess)(nil),                               // 15: pb.RPCSuccess
	(*RPCCountResponse)(nil),                         // 16: pb.RPCCountResponse
}
var file_service_http_cache_policy_proto_depIdxs = []int32{
	14, // 0: pb.FindAllEnabledHTTPCachePoliciesResponse.cachePolicies:type_name -> pb.HTTPCachePolicy
	14, // 1: pb.FindEnabledHTTPCachePolicyResponse.httpCachePolicy:type_name -> pb.HTTPCachePolicy
	0,  // 2: pb.HTTPCachePolicyService.findAllEnabledHTTPCachePolicies:input_type -> pb.FindAllEnabledHTTPCachePoliciesRequest
	2,  // 3: pb.HTTPCachePolicyService.createHTTPCachePolicy:input_type -> pb.CreateHTTPCachePolicyRequest
	4,  // 4: pb.HTTPCachePolicyService.updateHTTPCachePolicy:input_type -> pb.UpdateHTTPCachePolicyRequest
	5,  // 5: pb.HTTPCachePolicyService.deleteHTTPCachePolicy:input_type -> pb.DeleteHTTPCachePolicyRequest
	6,  // 6: pb.HTTPCachePolicyService.countAllEnabledHTTPCachePolicies:input_type -> pb.CountAllEnabledHTTPCachePoliciesRequest
	7,  // 7: pb.HTTPCachePolicyService.listEnabledHTTPCachePolicies:input_type -> pb.ListEnabledHTTPCachePoliciesRequest
	9,  // 8: pb.HTTPCachePolicyService.findEnabledHTTPCachePolicyConfig:input_type -> pb.FindEnabledHTTPCachePolicyConfigRequest
	11, // 9: pb.HTTPCachePolicyService.findEnabledHTTPCachePolicy:input_type -> pb.FindEnabledHTTPCachePolicyRequest
	13, // 10: pb.HTTPCachePolicyService.updateHTTPCachePolicyRefs:input_type -> pb.UpdateHTTPCachePolicyRefsRequest
	1,  // 11: pb.HTTPCachePolicyService.findAllEnabledHTTPCachePolicies:output_type -> pb.FindAllEnabledHTTPCachePoliciesResponse
	3,  // 12: pb.HTTPCachePolicyService.createHTTPCachePolicy:output_type -> pb.CreateHTTPCachePolicyResponse
	15, // 13: pb.HTTPCachePolicyService.updateHTTPCachePolicy:output_type -> pb.RPCSuccess
	15, // 14: pb.HTTPCachePolicyService.deleteHTTPCachePolicy:output_type -> pb.RPCSuccess
	16, // 15: pb.HTTPCachePolicyService.countAllEnabledHTTPCachePolicies:output_type -> pb.RPCCountResponse
	8,  // 16: pb.HTTPCachePolicyService.listEnabledHTTPCachePolicies:output_type -> pb.ListEnabledHTTPCachePoliciesResponse
	10, // 17: pb.HTTPCachePolicyService.findEnabledHTTPCachePolicyConfig:output_type -> pb.FindEnabledHTTPCachePolicyConfigResponse
	12, // 18: pb.HTTPCachePolicyService.findEnabledHTTPCachePolicy:output_type -> pb.FindEnabledHTTPCachePolicyResponse
	15, // 19: pb.HTTPCachePolicyService.updateHTTPCachePolicyRefs:output_type -> pb.RPCSuccess
	11, // [11:20] is the sub-list for method output_type
	2,  // [2:11] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_http_cache_policy_proto_init() }
func file_service_http_cache_policy_proto_init() {
	if File_service_http_cache_policy_proto != nil {
		return
	}
	file_models_model_http_cache_policy_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_http_cache_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledHTTPCachePoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledHTTPCachePoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPCachePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHTTPCachePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPCachePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHTTPCachePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledHTTPCachePoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledHTTPCachePoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledHTTPCachePoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPCachePolicyConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPCachePolicyConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPCachePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledHTTPCachePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_http_cache_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHTTPCachePolicyRefsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_http_cache_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_http_cache_policy_proto_goTypes,
		DependencyIndexes: file_service_http_cache_policy_proto_depIdxs,
		MessageInfos:      file_service_http_cache_policy_proto_msgTypes,
	}.Build()
	File_service_http_cache_policy_proto = out.File
	file_service_http_cache_policy_proto_rawDesc = nil
	file_service_http_cache_policy_proto_goTypes = nil
	file_service_http_cache_policy_proto_depIdxs = nil
}
