// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_user_node.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建用户节点
type CreateUserNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	HttpJSON        []byte `protobuf:"bytes,3,opt,name=httpJSON,proto3" json:"httpJSON,omitempty"`
	HttpsJSON       []byte `protobuf:"bytes,4,opt,name=httpsJSON,proto3" json:"httpsJSON,omitempty"`
	AccessAddrsJSON []byte `protobuf:"bytes,5,opt,name=accessAddrsJSON,proto3" json:"accessAddrsJSON,omitempty"`
	IsOn            bool   `protobuf:"varint,6,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *CreateUserNodeRequest) Reset() {
	*x = CreateUserNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserNodeRequest) ProtoMessage() {}

func (x *CreateUserNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateUserNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{0}
}

func (x *CreateUserNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateUserNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateUserNodeRequest) GetHttpJSON() []byte {
	if x != nil {
		return x.HttpJSON
	}
	return nil
}

func (x *CreateUserNodeRequest) GetHttpsJSON() []byte {
	if x != nil {
		return x.HttpsJSON
	}
	return nil
}

func (x *CreateUserNodeRequest) GetAccessAddrsJSON() []byte {
	if x != nil {
		return x.AccessAddrsJSON
	}
	return nil
}

func (x *CreateUserNodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

type CreateUserNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNodeId int64 `protobuf:"varint,1,opt,name=userNodeId,proto3" json:"userNodeId,omitempty"`
}

func (x *CreateUserNodeResponse) Reset() {
	*x = CreateUserNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserNodeResponse) ProtoMessage() {}

func (x *CreateUserNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateUserNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserNodeResponse) GetUserNodeId() int64 {
	if x != nil {
		return x.UserNodeId
	}
	return 0
}

// 修改用户节点
type UpdateUserNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNodeId      int64  `protobuf:"varint,1,opt,name=userNodeId,proto3" json:"userNodeId,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	HttpJSON        []byte `protobuf:"bytes,4,opt,name=httpJSON,proto3" json:"httpJSON,omitempty"`
	HttpsJSON       []byte `protobuf:"bytes,5,opt,name=httpsJSON,proto3" json:"httpsJSON,omitempty"`
	AccessAddrsJSON []byte `protobuf:"bytes,6,opt,name=accessAddrsJSON,proto3" json:"accessAddrsJSON,omitempty"`
	IsOn            bool   `protobuf:"varint,7,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateUserNodeRequest) Reset() {
	*x = UpdateUserNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserNodeRequest) ProtoMessage() {}

func (x *UpdateUserNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserNodeRequest) GetUserNodeId() int64 {
	if x != nil {
		return x.UserNodeId
	}
	return 0
}

func (x *UpdateUserNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateUserNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateUserNodeRequest) GetHttpJSON() []byte {
	if x != nil {
		return x.HttpJSON
	}
	return nil
}

func (x *UpdateUserNodeRequest) GetHttpsJSON() []byte {
	if x != nil {
		return x.HttpsJSON
	}
	return nil
}

func (x *UpdateUserNodeRequest) GetAccessAddrsJSON() []byte {
	if x != nil {
		return x.AccessAddrsJSON
	}
	return nil
}

func (x *UpdateUserNodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除用户节点
type DeleteUserNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNodeId int64 `protobuf:"varint,1,opt,name=userNodeId,proto3" json:"userNodeId,omitempty"`
}

func (x *DeleteUserNodeRequest) Reset() {
	*x = DeleteUserNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserNodeRequest) ProtoMessage() {}

func (x *DeleteUserNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteUserNodeRequest) GetUserNodeId() int64 {
	if x != nil {
		return x.UserNodeId
	}
	return 0
}

// 列出所有可用用户节点
type FindAllEnabledUserNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledUserNodesRequest) Reset() {
	*x = FindAllEnabledUserNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledUserNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledUserNodesRequest) ProtoMessage() {}

func (x *FindAllEnabledUserNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledUserNodesRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledUserNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{4}
}

type FindAllEnabledUserNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNodes []*UserNode `protobuf:"bytes,1,rep,name=userNodes,proto3" json:"userNodes,omitempty"`
}

func (x *FindAllEnabledUserNodesResponse) Reset() {
	*x = FindAllEnabledUserNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledUserNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledUserNodesResponse) ProtoMessage() {}

func (x *FindAllEnabledUserNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledUserNodesResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledUserNodesResponse) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllEnabledUserNodesResponse) GetUserNodes() []*UserNode {
	if x != nil {
		return x.UserNodes
	}
	return nil
}

// 计算用户节点数量
type CountAllEnabledUserNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllEnabledUserNodesRequest) Reset() {
	*x = CountAllEnabledUserNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledUserNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledUserNodesRequest) ProtoMessage() {}

func (x *CountAllEnabledUserNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledUserNodesRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledUserNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{6}
}

// 列出单页的用户节点
type ListEnabledUserNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledUserNodesRequest) Reset() {
	*x = ListEnabledUserNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledUserNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledUserNodesRequest) ProtoMessage() {}

func (x *ListEnabledUserNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledUserNodesRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledUserNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{7}
}

func (x *ListEnabledUserNodesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledUserNodesRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledUserNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNodes []*UserNode `protobuf:"bytes,1,rep,name=userNodes,proto3" json:"userNodes,omitempty"`
}

func (x *ListEnabledUserNodesResponse) Reset() {
	*x = ListEnabledUserNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledUserNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledUserNodesResponse) ProtoMessage() {}

func (x *ListEnabledUserNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledUserNodesResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledUserNodesResponse) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{8}
}

func (x *ListEnabledUserNodesResponse) GetUserNodes() []*UserNode {
	if x != nil {
		return x.UserNodes
	}
	return nil
}

// 根据ID查找节点
type FindEnabledUserNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNodeId int64 `protobuf:"varint,1,opt,name=userNodeId,proto3" json:"userNodeId,omitempty"`
}

func (x *FindEnabledUserNodeRequest) Reset() {
	*x = FindEnabledUserNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledUserNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledUserNodeRequest) ProtoMessage() {}

func (x *FindEnabledUserNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledUserNodeRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledUserNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{9}
}

func (x *FindEnabledUserNodeRequest) GetUserNodeId() int64 {
	if x != nil {
		return x.UserNodeId
	}
	return 0
}

type FindEnabledUserNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNode *UserNode `protobuf:"bytes,1,opt,name=userNode,proto3" json:"userNode,omitempty"`
}

func (x *FindEnabledUserNodeResponse) Reset() {
	*x = FindEnabledUserNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledUserNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledUserNodeResponse) ProtoMessage() {}

func (x *FindEnabledUserNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledUserNodeResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledUserNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{10}
}

func (x *FindEnabledUserNodeResponse) GetUserNode() *UserNode {
	if x != nil {
		return x.UserNode
	}
	return nil
}

// 获取当前用户节点
type FindCurrentUserNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindCurrentUserNodeRequest) Reset() {
	*x = FindCurrentUserNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentUserNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentUserNodeRequest) ProtoMessage() {}

func (x *FindCurrentUserNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentUserNodeRequest.ProtoReflect.Descriptor instead.
func (*FindCurrentUserNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{11}
}

type FindCurrentUserNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNode *UserNode `protobuf:"bytes,1,opt,name=userNode,proto3" json:"userNode,omitempty"`
}

func (x *FindCurrentUserNodeResponse) Reset() {
	*x = FindCurrentUserNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentUserNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentUserNodeResponse) ProtoMessage() {}

func (x *FindCurrentUserNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentUserNodeResponse.ProtoReflect.Descriptor instead.
func (*FindCurrentUserNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{12}
}

func (x *FindCurrentUserNodeResponse) GetUserNode() *UserNode {
	if x != nil {
		return x.UserNode
	}
	return nil
}

// 更新节点状态
type UpdateUserNodeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNodeId int64  `protobuf:"varint,1,opt,name=userNodeId,proto3" json:"userNodeId,omitempty"`
	StatusJSON []byte `protobuf:"bytes,2,opt,name=statusJSON,proto3" json:"statusJSON,omitempty"`
}

func (x *UpdateUserNodeStatusRequest) Reset() {
	*x = UpdateUserNodeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserNodeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserNodeStatusRequest) ProtoMessage() {}

func (x *UpdateUserNodeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserNodeStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserNodeStatusRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateUserNodeStatusRequest) GetUserNodeId() int64 {
	if x != nil {
		return x.UserNodeId
	}
	return 0
}

func (x *UpdateUserNodeStatusRequest) GetStatusJSON() []byte {
	if x != nil {
		return x.StatusJSON
	}
	return nil
}

// 计算使用某个SSL证书的用户节点数量
type CountAllEnabledUserNodesWithSSLCertIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *CountAllEnabledUserNodesWithSSLCertIdRequest) Reset() {
	*x = CountAllEnabledUserNodesWithSSLCertIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledUserNodesWithSSLCertIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledUserNodesWithSSLCertIdRequest) ProtoMessage() {}

func (x *CountAllEnabledUserNodesWithSSLCertIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledUserNodesWithSSLCertIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledUserNodesWithSSLCertIdRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{14}
}

func (x *CountAllEnabledUserNodesWithSSLCertIdRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

// 获取用户节点访问地址
type FindUserNodeAccessAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindUserNodeAccessAddrRequest) Reset() {
	*x = FindUserNodeAccessAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserNodeAccessAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserNodeAccessAddrRequest) ProtoMessage() {}

func (x *FindUserNodeAccessAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserNodeAccessAddrRequest.ProtoReflect.Descriptor instead.
func (*FindUserNodeAccessAddrRequest) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{15}
}

type FindUserNodeAccessAddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessAddr string `protobuf:"bytes,1,opt,name=accessAddr,proto3" json:"accessAddr,omitempty"`
}

func (x *FindUserNodeAccessAddrResponse) Reset() {
	*x = FindUserNodeAccessAddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserNodeAccessAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserNodeAccessAddrResponse) ProtoMessage() {}

func (x *FindUserNodeAccessAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserNodeAccessAddrResponse.ProtoReflect.Descriptor instead.
func (*FindUserNodeAccessAddrResponse) Descriptor() ([]byte, []int) {
	return file_service_user_node_proto_rawDescGZIP(), []int{16}
}

func (x *FindUserNodeAccessAddrResponse) GetAccessAddr() string {
	if x != nil {
		return x.AccessAddr
	}
	return ""
}

var File_service_user_node_proto protoreflect.FileDescriptor

var file_service_user_node_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a, 0x53,
	0x4f, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x73, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73,
	0x4f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x22, 0x38,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70,
	0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53,
	0x4f, 0x4e, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x73, 0x4f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e,
	0x22, 0x37, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x1f, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0x47, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x46,
	0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x1b, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x22, 0x5d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x4c, 0x0a, 0x2c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22,
	0x1f, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x40, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64,
	0x64, 0x72, 0x32, 0xb5, 0x07, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x66, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6f, 0x0a, 0x25, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x64,
	0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_user_node_proto_rawDescOnce sync.Once
	file_service_user_node_proto_rawDescData = file_service_user_node_proto_rawDesc
)

func file_service_user_node_proto_rawDescGZIP() []byte {
	file_service_user_node_proto_rawDescOnce.Do(func() {
		file_service_user_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_user_node_proto_rawDescData)
	})
	return file_service_user_node_proto_rawDescData
}

var file_service_user_node_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_service_user_node_proto_goTypes = []interface{}{
	(*CreateUserNodeRequest)(nil),                        // 0: pb.CreateUserNodeRequest
	(*CreateUserNodeResponse)(nil),                       // 1: pb.CreateUserNodeResponse
	(*UpdateUserNodeRequest)(nil),                        // 2: pb.UpdateUserNodeRequest
	(*DeleteUserNodeRequest)(nil),                        // 3: pb.DeleteUserNodeRequest
	(*FindAllEnabledUserNodesRequest)(nil),               // 4: pb.FindAllEnabledUserNodesRequest
	(*FindAllEnabledUserNodesResponse)(nil),              // 5: pb.FindAllEnabledUserNodesResponse
	(*CountAllEnabledUserNodesRequest)(nil),              // 6: pb.CountAllEnabledUserNodesRequest
	(*ListEnabledUserNodesRequest)(nil),                  // 7: pb.ListEnabledUserNodesRequest
	(*ListEnabledUserNodesResponse)(nil),                 // 8: pb.ListEnabledUserNodesResponse
	(*FindEnabledUserNodeRequest)(nil),                   // 9: pb.FindEnabledUserNodeRequest
	(*FindEnabledUserNodeResponse)(nil),                  // 10: pb.FindEnabledUserNodeResponse
	(*FindCurrentUserNodeRequest)(nil),                   // 11: pb.FindCurrentUserNodeRequest
	(*FindCurrentUserNodeResponse)(nil),                  // 12: pb.FindCurrentUserNodeResponse
	(*UpdateUserNodeStatusRequest)(nil),                  // 13: pb.UpdateUserNodeStatusRequest
	(*CountAllEnabledUserNodesWithSSLCertIdRequest)(nil), // 14: pb.CountAllEnabledUserNodesWithSSLCertIdRequest
	(*FindUserNodeAccessAddrRequest)(nil),                // 15: pb.FindUserNodeAccessAddrRequest
	(*FindUserNodeAccessAddrResponse)(nil),               // 16: pb.FindUserNodeAccessAddrResponse
	(*UserNode)(nil),                                     // 17: pb.UserNode
	(*RPCSuccess)(nil),                                   // 18: pb.RPCSuccess
	(*RPCCountResponse)(nil),                             // 19: pb.RPCCountResponse
}
var file_service_user_node_proto_depIdxs = []int32{
	17, // 0: pb.FindAllEnabledUserNodesResponse.userNodes:type_name -> pb.UserNode
	17, // 1: pb.ListEnabledUserNodesResponse.userNodes:type_name -> pb.UserNode
	17, // 2: pb.FindEnabledUserNodeResponse.userNode:type_name -> pb.UserNode
	17, // 3: pb.FindCurrentUserNodeResponse.userNode:type_name -> pb.UserNode
	0,  // 4: pb.UserNodeService.createUserNode:input_type -> pb.CreateUserNodeRequest
	2,  // 5: pb.UserNodeService.updateUserNode:input_type -> pb.UpdateUserNodeRequest
	3,  // 6: pb.UserNodeService.deleteUserNode:input_type -> pb.DeleteUserNodeRequest
	4,  // 7: pb.UserNodeService.findAllEnabledUserNodes:input_type -> pb.FindAllEnabledUserNodesRequest
	6,  // 8: pb.UserNodeService.countAllEnabledUserNodes:input_type -> pb.CountAllEnabledUserNodesRequest
	7,  // 9: pb.UserNodeService.listEnabledUserNodes:input_type -> pb.ListEnabledUserNodesRequest
	9,  // 10: pb.UserNodeService.findEnabledUserNode:input_type -> pb.FindEnabledUserNodeRequest
	11, // 11: pb.UserNodeService.findCurrentUserNode:input_type -> pb.FindCurrentUserNodeRequest
	13, // 12: pb.UserNodeService.updateUserNodeStatus:input_type -> pb.UpdateUserNodeStatusRequest
	14, // 13: pb.UserNodeService.countAllEnabledUserNodesWithSSLCertId:input_type -> pb.CountAllEnabledUserNodesWithSSLCertIdRequest
	15, // 14: pb.UserNodeService.findUserNodeAccessAddr:input_type -> pb.FindUserNodeAccessAddrRequest
	1,  // 15: pb.UserNodeService.createUserNode:output_type -> pb.CreateUserNodeResponse
	18, // 16: pb.UserNodeService.updateUserNode:output_type -> pb.RPCSuccess
	18, // 17: pb.UserNodeService.deleteUserNode:output_type -> pb.RPCSuccess
	5,  // 18: pb.UserNodeService.findAllEnabledUserNodes:output_type -> pb.FindAllEnabledUserNodesResponse
	19, // 19: pb.UserNodeService.countAllEnabledUserNodes:output_type -> pb.RPCCountResponse
	8,  // 20: pb.UserNodeService.listEnabledUserNodes:output_type -> pb.ListEnabledUserNodesResponse
	10, // 21: pb.UserNodeService.findEnabledUserNode:output_type -> pb.FindEnabledUserNodeResponse
	12, // 22: pb.UserNodeService.findCurrentUserNode:output_type -> pb.FindCurrentUserNodeResponse
	18, // 23: pb.UserNodeService.updateUserNodeStatus:output_type -> pb.RPCSuccess
	19, // 24: pb.UserNodeService.countAllEnabledUserNodesWithSSLCertId:output_type -> pb.RPCCountResponse
	16, // 25: pb.UserNodeService.findUserNodeAccessAddr:output_type -> pb.FindUserNodeAccessAddrResponse
	15, // [15:26] is the sub-list for method output_type
	4,  // [4:15] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_user_node_proto_init() }
func file_service_user_node_proto_init() {
	if File_service_user_node_proto != nil {
		return
	}
	file_models_model_user_node_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_user_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledUserNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledUserNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledUserNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledUserNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledUserNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledUserNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledUserNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentUserNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentUserNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserNodeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledUserNodesWithSSLCertIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserNodeAccessAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserNodeAccessAddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_user_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_user_node_proto_goTypes,
		DependencyIndexes: file_service_user_node_proto_depIdxs,
		MessageInfos:      file_service_user_node_proto_msgTypes,
	}.Build()
	File_service_user_node_proto = out.File
	file_service_user_node_proto_rawDesc = nil
	file_service_user_node_proto_goTypes = nil
	file_service_user_node_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserNodeServiceClient is the client API for UserNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserNodeServiceClient interface {
	// 创建用户节点
	CreateUserNode(ctx context.Context, in *CreateUserNodeRequest, opts ...grpc.CallOption) (*CreateUserNodeResponse, error)
	// 修改用户节点
	UpdateUserNode(ctx context.Context, in *UpdateUserNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除用户节点
	DeleteUserNode(ctx context.Context, in *DeleteUserNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 列出所有可用用户节点
	FindAllEnabledUserNodes(ctx context.Context, in *FindAllEnabledUserNodesRequest, opts ...grpc.CallOption) (*FindAllEnabledUserNodesResponse, error)
	// 计算用户节点数量
	CountAllEnabledUserNodes(ctx context.Context, in *CountAllEnabledUserNodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页的用户节点
	ListEnabledUserNodes(ctx context.Context, in *ListEnabledUserNodesRequest, opts ...grpc.CallOption) (*ListEnabledUserNodesResponse, error)
	// 根据ID查找节点
	FindEnabledUserNode(ctx context.Context, in *FindEnabledUserNodeRequest, opts ...grpc.CallOption) (*FindEnabledUserNodeResponse, error)
	// 获取当前用户节点信息
	FindCurrentUserNode(ctx context.Context, in *FindCurrentUserNodeRequest, opts ...grpc.CallOption) (*FindCurrentUserNodeResponse, error)
	// 更新节点状态
	UpdateUserNodeStatus(ctx context.Context, in *UpdateUserNodeStatusRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 计算使用某个SSL证书的用户节点数量
	CountAllEnabledUserNodesWithSSLCertId(ctx context.Context, in *CountAllEnabledUserNodesWithSSLCertIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 获取用户节点访问地址
	FindUserNodeAccessAddr(ctx context.Context, in *FindUserNodeAccessAddrRequest, opts ...grpc.CallOption) (*FindUserNodeAccessAddrResponse, error)
}

type userNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserNodeServiceClient(cc grpc.ClientConnInterface) UserNodeServiceClient {
	return &userNodeServiceClient{cc}
}

func (c *userNodeServiceClient) CreateUserNode(ctx context.Context, in *CreateUserNodeRequest, opts ...grpc.CallOption) (*CreateUserNodeResponse, error) {
	out := new(CreateUserNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/createUserNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNodeServiceClient) UpdateUserNode(ctx context.Context, in *UpdateUserNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/updateUserNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNodeServiceClient) DeleteUserNode(ctx context.Context, in *DeleteUserNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/deleteUserNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNodeServiceClient) FindAllEnabledUserNodes(ctx context.Context, in *FindAllEnabledUserNodesRequest, opts ...grpc.CallOption) (*FindAllEnabledUserNodesResponse, error) {
	out := new(FindAllEnabledUserNodesResponse)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/findAllEnabledUserNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNodeServiceClient) CountAllEnabledUserNodes(ctx context.Context, in *CountAllEnabledUserNodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/countAllEnabledUserNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNodeServiceClient) ListEnabledUserNodes(ctx context.Context, in *ListEnabledUserNodesRequest, opts ...grpc.CallOption) (*ListEnabledUserNodesResponse, error) {
	out := new(ListEnabledUserNodesResponse)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/listEnabledUserNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNodeServiceClient) FindEnabledUserNode(ctx context.Context, in *FindEnabledUserNodeRequest, opts ...grpc.CallOption) (*FindEnabledUserNodeResponse, error) {
	out := new(FindEnabledUserNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/findEnabledUserNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNodeServiceClient) FindCurrentUserNode(ctx context.Context, in *FindCurrentUserNodeRequest, opts ...grpc.CallOption) (*FindCurrentUserNodeResponse, error) {
	out := new(FindCurrentUserNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/findCurrentUserNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNodeServiceClient) UpdateUserNodeStatus(ctx context.Context, in *UpdateUserNodeStatusRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/updateUserNodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNodeServiceClient) CountAllEnabledUserNodesWithSSLCertId(ctx context.Context, in *CountAllEnabledUserNodesWithSSLCertIdRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/countAllEnabledUserNodesWithSSLCertId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNodeServiceClient) FindUserNodeAccessAddr(ctx context.Context, in *FindUserNodeAccessAddrRequest, opts ...grpc.CallOption) (*FindUserNodeAccessAddrResponse, error) {
	out := new(FindUserNodeAccessAddrResponse)
	err := c.cc.Invoke(ctx, "/pb.UserNodeService/findUserNodeAccessAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserNodeServiceServer is the server API for UserNodeService service.
type UserNodeServiceServer interface {
	// 创建用户节点
	CreateUserNode(context.Context, *CreateUserNodeRequest) (*CreateUserNodeResponse, error)
	// 修改用户节点
	UpdateUserNode(context.Context, *UpdateUserNodeRequest) (*RPCSuccess, error)
	// 删除用户节点
	DeleteUserNode(context.Context, *DeleteUserNodeRequest) (*RPCSuccess, error)
	// 列出所有可用用户节点
	FindAllEnabledUserNodes(context.Context, *FindAllEnabledUserNodesRequest) (*FindAllEnabledUserNodesResponse, error)
	// 计算用户节点数量
	CountAllEnabledUserNodes(context.Context, *CountAllEnabledUserNodesRequest) (*RPCCountResponse, error)
	// 列出单页的用户节点
	ListEnabledUserNodes(context.Context, *ListEnabledUserNodesRequest) (*ListEnabledUserNodesResponse, error)
	// 根据ID查找节点
	FindEnabledUserNode(context.Context, *FindEnabledUserNodeRequest) (*FindEnabledUserNodeResponse, error)
	// 获取当前用户节点信息
	FindCurrentUserNode(context.Context, *FindCurrentUserNodeRequest) (*FindCurrentUserNodeResponse, error)
	// 更新节点状态
	UpdateUserNodeStatus(context.Context, *UpdateUserNodeStatusRequest) (*RPCSuccess, error)
	// 计算使用某个SSL证书的用户节点数量
	CountAllEnabledUserNodesWithSSLCertId(context.Context, *CountAllEnabledUserNodesWithSSLCertIdRequest) (*RPCCountResponse, error)
	// 获取用户节点访问地址
	FindUserNodeAccessAddr(context.Context, *FindUserNodeAccessAddrRequest) (*FindUserNodeAccessAddrResponse, error)
}

// UnimplementedUserNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserNodeServiceServer struct {
}

func (*UnimplementedUserNodeServiceServer) CreateUserNode(context.Context, *CreateUserNodeRequest) (*CreateUserNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserNode not implemented")
}
func (*UnimplementedUserNodeServiceServer) UpdateUserNode(context.Context, *UpdateUserNodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNode not implemented")
}
func (*UnimplementedUserNodeServiceServer) DeleteUserNode(context.Context, *DeleteUserNodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserNode not implemented")
}
func (*UnimplementedUserNodeServiceServer) FindAllEnabledUserNodes(context.Context, *FindAllEnabledUserNodesRequest) (*FindAllEnabledUserNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledUserNodes not implemented")
}
func (*UnimplementedUserNodeServiceServer) CountAllEnabledUserNodes(context.Context, *CountAllEnabledUserNodesRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledUserNodes not implemented")
}
func (*UnimplementedUserNodeServiceServer) ListEnabledUserNodes(context.Context, *ListEnabledUserNodesRequest) (*ListEnabledUserNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledUserNodes not implemented")
}
func (*UnimplementedUserNodeServiceServer) FindEnabledUserNode(context.Context, *FindEnabledUserNodeRequest) (*FindEnabledUserNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledUserNode not implemented")
}
func (*UnimplementedUserNodeServiceServer) FindCurrentUserNode(context.Context, *FindCurrentUserNodeRequest) (*FindCurrentUserNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCurrentUserNode not implemented")
}
func (*UnimplementedUserNodeServiceServer) UpdateUserNodeStatus(context.Context, *UpdateUserNodeStatusRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNodeStatus not implemented")
}
func (*UnimplementedUserNodeServiceServer) CountAllEnabledUserNodesWithSSLCertId(context.Context, *CountAllEnabledUserNodesWithSSLCertIdRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledUserNodesWithSSLCertId not implemented")
}
func (*UnimplementedUserNodeServiceServer) FindUserNodeAccessAddr(context.Context, *FindUserNodeAccessAddrRequest) (*FindUserNodeAccessAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserNodeAccessAddr not implemented")
}

func RegisterUserNodeServiceServer(s *grpc.Server, srv UserNodeServiceServer) {
	s.RegisterService(&_UserNodeService_serviceDesc, srv)
}

func _UserNodeService_CreateUserNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).CreateUserNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/CreateUserNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).CreateUserNode(ctx, req.(*CreateUserNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNodeService_UpdateUserNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).UpdateUserNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/UpdateUserNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).UpdateUserNode(ctx, req.(*UpdateUserNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNodeService_DeleteUserNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).DeleteUserNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/DeleteUserNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).DeleteUserNode(ctx, req.(*DeleteUserNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNodeService_FindAllEnabledUserNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledUserNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).FindAllEnabledUserNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/FindAllEnabledUserNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).FindAllEnabledUserNodes(ctx, req.(*FindAllEnabledUserNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNodeService_CountAllEnabledUserNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledUserNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).CountAllEnabledUserNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/CountAllEnabledUserNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).CountAllEnabledUserNodes(ctx, req.(*CountAllEnabledUserNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNodeService_ListEnabledUserNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledUserNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).ListEnabledUserNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/ListEnabledUserNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).ListEnabledUserNodes(ctx, req.(*ListEnabledUserNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNodeService_FindEnabledUserNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledUserNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).FindEnabledUserNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/FindEnabledUserNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).FindEnabledUserNode(ctx, req.(*FindEnabledUserNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNodeService_FindCurrentUserNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCurrentUserNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).FindCurrentUserNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/FindCurrentUserNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).FindCurrentUserNode(ctx, req.(*FindCurrentUserNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNodeService_UpdateUserNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).UpdateUserNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/UpdateUserNodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).UpdateUserNodeStatus(ctx, req.(*UpdateUserNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNodeService_CountAllEnabledUserNodesWithSSLCertId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledUserNodesWithSSLCertIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).CountAllEnabledUserNodesWithSSLCertId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/CountAllEnabledUserNodesWithSSLCertId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).CountAllEnabledUserNodesWithSSLCertId(ctx, req.(*CountAllEnabledUserNodesWithSSLCertIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNodeService_FindUserNodeAccessAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserNodeAccessAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNodeServiceServer).FindUserNodeAccessAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserNodeService/FindUserNodeAccessAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNodeServiceServer).FindUserNodeAccessAddr(ctx, req.(*FindUserNodeAccessAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserNodeService",
	HandlerType: (*UserNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createUserNode",
			Handler:    _UserNodeService_CreateUserNode_Handler,
		},
		{
			MethodName: "updateUserNode",
			Handler:    _UserNodeService_UpdateUserNode_Handler,
		},
		{
			MethodName: "deleteUserNode",
			Handler:    _UserNodeService_DeleteUserNode_Handler,
		},
		{
			MethodName: "findAllEnabledUserNodes",
			Handler:    _UserNodeService_FindAllEnabledUserNodes_Handler,
		},
		{
			MethodName: "countAllEnabledUserNodes",
			Handler:    _UserNodeService_CountAllEnabledUserNodes_Handler,
		},
		{
			MethodName: "listEnabledUserNodes",
			Handler:    _UserNodeService_ListEnabledUserNodes_Handler,
		},
		{
			MethodName: "findEnabledUserNode",
			Handler:    _UserNodeService_FindEnabledUserNode_Handler,
		},
		{
			MethodName: "findCurrentUserNode",
			Handler:    _UserNodeService_FindCurrentUserNode_Handler,
		},
		{
			MethodName: "updateUserNodeStatus",
			Handler:    _UserNodeService_UpdateUserNodeStatus_Handler,
		},
		{
			MethodName: "countAllEnabledUserNodesWithSSLCertId",
			Handler:    _UserNodeService_CountAllEnabledUserNodesWithSSLCertId_Handler,
		},
		{
			MethodName: "findUserNodeAccessAddr",
			Handler:    _UserNodeService_FindUserNodeAccessAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_user_node.proto",
}
