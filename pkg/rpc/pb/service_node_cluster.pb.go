// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_node_cluster.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 获取所有集群的信息
type FindAllEnabledNodeClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledNodeClustersRequest) Reset() {
	*x = FindAllEnabledNodeClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNodeClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNodeClustersRequest) ProtoMessage() {}

func (x *FindAllEnabledNodeClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNodeClustersRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNodeClustersRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{0}
}

type FindAllEnabledNodeClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*NodeCluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *FindAllEnabledNodeClustersResponse) Reset() {
	*x = FindAllEnabledNodeClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNodeClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNodeClustersResponse) ProtoMessage() {}

func (x *FindAllEnabledNodeClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNodeClustersResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNodeClustersResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *FindAllEnabledNodeClustersResponse) GetClusters() []*NodeCluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// 获取变更的集群
type FindAllChangedNodeClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllChangedNodeClustersRequest) Reset() {
	*x = FindAllChangedNodeClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllChangedNodeClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllChangedNodeClustersRequest) ProtoMessage() {}

func (x *FindAllChangedNodeClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllChangedNodeClustersRequest.ProtoReflect.Descriptor instead.
func (*FindAllChangedNodeClustersRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{2}
}

type FindAllChangedNodeClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*NodeCluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *FindAllChangedNodeClustersResponse) Reset() {
	*x = FindAllChangedNodeClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllChangedNodeClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllChangedNodeClustersResponse) ProtoMessage() {}

func (x *FindAllChangedNodeClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllChangedNodeClustersResponse.ProtoReflect.Descriptor instead.
func (*FindAllChangedNodeClustersResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *FindAllChangedNodeClustersResponse) GetClusters() []*NodeCluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// 创建集群
type CreateNodeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GrantId    int64  `protobuf:"varint,2,opt,name=grantId,proto3" json:"grantId,omitempty"`
	InstallDir string `protobuf:"bytes,3,opt,name=installDir,proto3" json:"installDir,omitempty"`
}

func (x *CreateNodeClusterRequest) Reset() {
	*x = CreateNodeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeClusterRequest) ProtoMessage() {}

func (x *CreateNodeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeClusterRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNodeClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeClusterRequest) GetGrantId() int64 {
	if x != nil {
		return x.GrantId
	}
	return 0
}

func (x *CreateNodeClusterRequest) GetInstallDir() string {
	if x != nil {
		return x.InstallDir
	}
	return ""
}

type CreateNodeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId int64 `protobuf:"varint,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *CreateNodeClusterResponse) Reset() {
	*x = CreateNodeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeClusterResponse) ProtoMessage() {}

func (x *CreateNodeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeClusterResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *CreateNodeClusterResponse) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// 修改集群
type UpdateNodeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  int64  `protobuf:"varint,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GrantId    int64  `protobuf:"varint,3,opt,name=grantId,proto3" json:"grantId,omitempty"`
	InstallDir string `protobuf:"bytes,4,opt,name=installDir,proto3" json:"installDir,omitempty"`
}

func (x *UpdateNodeClusterRequest) Reset() {
	*x = UpdateNodeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeClusterRequest) ProtoMessage() {}

func (x *UpdateNodeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeClusterRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateNodeClusterRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateNodeClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNodeClusterRequest) GetGrantId() int64 {
	if x != nil {
		return x.GrantId
	}
	return 0
}

func (x *UpdateNodeClusterRequest) GetInstallDir() string {
	if x != nil {
		return x.InstallDir
	}
	return ""
}

// 禁用集群
type DisableNodeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId int64 `protobuf:"varint,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *DisableNodeClusterRequest) Reset() {
	*x = DisableNodeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableNodeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableNodeClusterRequest) ProtoMessage() {}

func (x *DisableNodeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableNodeClusterRequest.ProtoReflect.Descriptor instead.
func (*DisableNodeClusterRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *DisableNodeClusterRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type DisableNodeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableNodeClusterResponse) Reset() {
	*x = DisableNodeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableNodeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableNodeClusterResponse) ProtoMessage() {}

func (x *DisableNodeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableNodeClusterResponse.ProtoReflect.Descriptor instead.
func (*DisableNodeClusterResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{8}
}

// 查找单个集群信息
type FindEnabledNodeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId int64 `protobuf:"varint,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *FindEnabledNodeClusterRequest) Reset() {
	*x = FindEnabledNodeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNodeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNodeClusterRequest) ProtoMessage() {}

func (x *FindEnabledNodeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNodeClusterRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledNodeClusterRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *FindEnabledNodeClusterRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type FindEnabledNodeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *NodeCluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *FindEnabledNodeClusterResponse) Reset() {
	*x = FindEnabledNodeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledNodeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledNodeClusterResponse) ProtoMessage() {}

func (x *FindEnabledNodeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledNodeClusterResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledNodeClusterResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *FindEnabledNodeClusterResponse) GetCluster() *NodeCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// 查找集群的API节点信息
type FindAPINodesWithNodeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId int64 `protobuf:"varint,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *FindAPINodesWithNodeClusterRequest) Reset() {
	*x = FindAPINodesWithNodeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAPINodesWithNodeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAPINodesWithNodeClusterRequest) ProtoMessage() {}

func (x *FindAPINodesWithNodeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAPINodesWithNodeClusterRequest.ProtoReflect.Descriptor instead.
func (*FindAPINodesWithNodeClusterRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *FindAPINodesWithNodeClusterRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type FindAPINodesWithNodeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseAllAPINodes bool       `protobuf:"varint,1,opt,name=useAllAPINodes,proto3" json:"useAllAPINodes,omitempty"`
	ApiNodes       []*APINode `protobuf:"bytes,2,rep,name=apiNodes,proto3" json:"apiNodes,omitempty"`
}

func (x *FindAPINodesWithNodeClusterResponse) Reset() {
	*x = FindAPINodesWithNodeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAPINodesWithNodeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAPINodesWithNodeClusterResponse) ProtoMessage() {}

func (x *FindAPINodesWithNodeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAPINodesWithNodeClusterResponse.ProtoReflect.Descriptor instead.
func (*FindAPINodesWithNodeClusterResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *FindAPINodesWithNodeClusterResponse) GetUseAllAPINodes() bool {
	if x != nil {
		return x.UseAllAPINodes
	}
	return false
}

func (x *FindAPINodesWithNodeClusterResponse) GetApiNodes() []*APINode {
	if x != nil {
		return x.ApiNodes
	}
	return nil
}

// 计算所有集群数量
type CountAllEnabledNodeClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllEnabledNodeClustersRequest) Reset() {
	*x = CountAllEnabledNodeClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledNodeClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledNodeClustersRequest) ProtoMessage() {}

func (x *CountAllEnabledNodeClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledNodeClustersRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledNodeClustersRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{13}
}

type CountAllEnabledNodeClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountAllEnabledNodeClustersResponse) Reset() {
	*x = CountAllEnabledNodeClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledNodeClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledNodeClustersResponse) ProtoMessage() {}

func (x *CountAllEnabledNodeClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledNodeClustersResponse.ProtoReflect.Descriptor instead.
func (*CountAllEnabledNodeClustersResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *CountAllEnabledNodeClustersResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 列出单页集群
type ListEnabledNodeClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledNodeClustersRequest) Reset() {
	*x = ListEnabledNodeClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledNodeClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledNodeClustersRequest) ProtoMessage() {}

func (x *ListEnabledNodeClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledNodeClustersRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledNodeClustersRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *ListEnabledNodeClustersRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledNodeClustersRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledNodeClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*NodeCluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *ListEnabledNodeClustersResponse) Reset() {
	*x = ListEnabledNodeClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledNodeClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledNodeClustersResponse) ProtoMessage() {}

func (x *ListEnabledNodeClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledNodeClustersResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledNodeClustersResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *ListEnabledNodeClustersResponse) GetClusters() []*NodeCluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// 查找集群的健康检查配置
type FindNodeClusterHealthCheckConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId int64 `protobuf:"varint,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *FindNodeClusterHealthCheckConfigRequest) Reset() {
	*x = FindNodeClusterHealthCheckConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNodeClusterHealthCheckConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeClusterHealthCheckConfigRequest) ProtoMessage() {}

func (x *FindNodeClusterHealthCheckConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeClusterHealthCheckConfigRequest.ProtoReflect.Descriptor instead.
func (*FindNodeClusterHealthCheckConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *FindNodeClusterHealthCheckConfigRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type FindNodeClusterHealthCheckConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthCheckConfig []byte `protobuf:"bytes,1,opt,name=healthCheckConfig,proto3" json:"healthCheckConfig,omitempty"`
}

func (x *FindNodeClusterHealthCheckConfigResponse) Reset() {
	*x = FindNodeClusterHealthCheckConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNodeClusterHealthCheckConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeClusterHealthCheckConfigResponse) ProtoMessage() {}

func (x *FindNodeClusterHealthCheckConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeClusterHealthCheckConfigResponse.ProtoReflect.Descriptor instead.
func (*FindNodeClusterHealthCheckConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *FindNodeClusterHealthCheckConfigResponse) GetHealthCheckConfig() []byte {
	if x != nil {
		return x.HealthCheckConfig
	}
	return nil
}

// 修改集群健康检查设置
type UpdateNodeClusterHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       int64  `protobuf:"varint,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	HealthCheckJSON []byte `protobuf:"bytes,2,opt,name=healthCheckJSON,proto3" json:"healthCheckJSON,omitempty"`
}

func (x *UpdateNodeClusterHealthCheckRequest) Reset() {
	*x = UpdateNodeClusterHealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeClusterHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeClusterHealthCheckRequest) ProtoMessage() {}

func (x *UpdateNodeClusterHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeClusterHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeClusterHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateNodeClusterHealthCheckRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateNodeClusterHealthCheckRequest) GetHealthCheckJSON() []byte {
	if x != nil {
		return x.HealthCheckJSON
	}
	return nil
}

// 执行健康检查
type ExecuteNodeClusterHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId int64 `protobuf:"varint,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *ExecuteNodeClusterHealthCheckRequest) Reset() {
	*x = ExecuteNodeClusterHealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteNodeClusterHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteNodeClusterHealthCheckRequest) ProtoMessage() {}

func (x *ExecuteNodeClusterHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteNodeClusterHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*ExecuteNodeClusterHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *ExecuteNodeClusterHealthCheckRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type ExecuteNodeClusterHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ExecuteNodeClusterHealthCheckResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ExecuteNodeClusterHealthCheckResponse) Reset() {
	*x = ExecuteNodeClusterHealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteNodeClusterHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteNodeClusterHealthCheckResponse) ProtoMessage() {}

func (x *ExecuteNodeClusterHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteNodeClusterHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*ExecuteNodeClusterHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *ExecuteNodeClusterHealthCheckResponse) GetResults() []*ExecuteNodeClusterHealthCheckResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ExecuteNodeClusterHealthCheckResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node     *Node   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	NodeAddr string  `protobuf:"bytes,2,opt,name=nodeAddr,proto3" json:"nodeAddr,omitempty"`
	IsOk     bool    `protobuf:"varint,3,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Error    string  `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	CostMs   float32 `protobuf:"fixed32,5,opt,name=costMs,proto3" json:"costMs,omitempty"`
}

func (x *ExecuteNodeClusterHealthCheckResponse_Result) Reset() {
	*x = ExecuteNodeClusterHealthCheckResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_cluster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteNodeClusterHealthCheckResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteNodeClusterHealthCheckResponse_Result) ProtoMessage() {}

func (x *ExecuteNodeClusterHealthCheckResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_cluster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteNodeClusterHealthCheckResponse_Result.ProtoReflect.Descriptor instead.
func (*ExecuteNodeClusterHealthCheckResponse_Result) Descriptor() ([]byte, []int) {
	return file_service_node_cluster_proto_rawDescGZIP(), []int{21, 0}
}

func (x *ExecuteNodeClusterHealthCheckResponse_Result) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ExecuteNodeClusterHealthCheckResponse_Result) GetNodeAddr() string {
	if x != nil {
		return x.NodeAddr
	}
	return ""
}

func (x *ExecuteNodeClusterHealthCheckResponse_Result) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *ExecuteNodeClusterHealthCheckResponse_Result) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ExecuteNodeClusterHealthCheckResponse_Result) GetCostMs() float32 {
	if x != nil {
		return x.CostMs
	}
	return 0
}

var File_service_node_cluster_proto protoreflect.FileDescriptor

var file_service_node_cluster_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x18, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x22, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x23,
	0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x68, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x72,
	0x22, 0x39, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x44,
	0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x44, 0x69, 0x72, 0x22, 0x39, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x1c, 0x0a, 0x1a, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a,
	0x1d, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x22, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x76, 0x0a,
	0x23, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x41, 0x50,
	0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73,
	0x65, 0x41, 0x6c, 0x6c, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x08,
	0x61, 0x70, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x61, 0x70, 0x69,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x23, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x4e, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x47, 0x0a, 0x27, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6d, 0x0a, 0x23, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x44, 0x0a, 0x24, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfa,
	0x01, 0x0a, 0x25, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1c, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x32, 0xd7, 0x09, 0x0a, 0x12,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a,
	0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x50, 0x49, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x50, 0x49, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x1b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x17, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7d, 0x0a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5d, 0x0a, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x74, 0x0a, 0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_node_cluster_proto_rawDescOnce sync.Once
	file_service_node_cluster_proto_rawDescData = file_service_node_cluster_proto_rawDesc
)

func file_service_node_cluster_proto_rawDescGZIP() []byte {
	file_service_node_cluster_proto_rawDescOnce.Do(func() {
		file_service_node_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_node_cluster_proto_rawDescData)
	})
	return file_service_node_cluster_proto_rawDescData
}

var file_service_node_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_service_node_cluster_proto_goTypes = []interface{}{
	(*FindAllEnabledNodeClustersRequest)(nil),            // 0: pb.FindAllEnabledNodeClustersRequest
	(*FindAllEnabledNodeClustersResponse)(nil),           // 1: pb.FindAllEnabledNodeClustersResponse
	(*FindAllChangedNodeClustersRequest)(nil),            // 2: pb.FindAllChangedNodeClustersRequest
	(*FindAllChangedNodeClustersResponse)(nil),           // 3: pb.FindAllChangedNodeClustersResponse
	(*CreateNodeClusterRequest)(nil),                     // 4: pb.CreateNodeClusterRequest
	(*CreateNodeClusterResponse)(nil),                    // 5: pb.CreateNodeClusterResponse
	(*UpdateNodeClusterRequest)(nil),                     // 6: pb.UpdateNodeClusterRequest
	(*DisableNodeClusterRequest)(nil),                    // 7: pb.DisableNodeClusterRequest
	(*DisableNodeClusterResponse)(nil),                   // 8: pb.DisableNodeClusterResponse
	(*FindEnabledNodeClusterRequest)(nil),                // 9: pb.FindEnabledNodeClusterRequest
	(*FindEnabledNodeClusterResponse)(nil),               // 10: pb.FindEnabledNodeClusterResponse
	(*FindAPINodesWithNodeClusterRequest)(nil),           // 11: pb.FindAPINodesWithNodeClusterRequest
	(*FindAPINodesWithNodeClusterResponse)(nil),          // 12: pb.FindAPINodesWithNodeClusterResponse
	(*CountAllEnabledNodeClustersRequest)(nil),           // 13: pb.CountAllEnabledNodeClustersRequest
	(*CountAllEnabledNodeClustersResponse)(nil),          // 14: pb.CountAllEnabledNodeClustersResponse
	(*ListEnabledNodeClustersRequest)(nil),               // 15: pb.ListEnabledNodeClustersRequest
	(*ListEnabledNodeClustersResponse)(nil),              // 16: pb.ListEnabledNodeClustersResponse
	(*FindNodeClusterHealthCheckConfigRequest)(nil),      // 17: pb.FindNodeClusterHealthCheckConfigRequest
	(*FindNodeClusterHealthCheckConfigResponse)(nil),     // 18: pb.FindNodeClusterHealthCheckConfigResponse
	(*UpdateNodeClusterHealthCheckRequest)(nil),          // 19: pb.UpdateNodeClusterHealthCheckRequest
	(*ExecuteNodeClusterHealthCheckRequest)(nil),         // 20: pb.ExecuteNodeClusterHealthCheckRequest
	(*ExecuteNodeClusterHealthCheckResponse)(nil),        // 21: pb.ExecuteNodeClusterHealthCheckResponse
	(*ExecuteNodeClusterHealthCheckResponse_Result)(nil), // 22: pb.ExecuteNodeClusterHealthCheckResponse.Result
	(*NodeCluster)(nil),                                  // 23: pb.NodeCluster
	(*APINode)(nil),                                      // 24: pb.APINode
	(*Node)(nil),                                         // 25: pb.Node
	(*RPCUpdateSuccess)(nil),                             // 26: pb.RPCUpdateSuccess
}
var file_service_node_cluster_proto_depIdxs = []int32{
	23, // 0: pb.FindAllEnabledNodeClustersResponse.clusters:type_name -> pb.NodeCluster
	23, // 1: pb.FindAllChangedNodeClustersResponse.clusters:type_name -> pb.NodeCluster
	23, // 2: pb.FindEnabledNodeClusterResponse.cluster:type_name -> pb.NodeCluster
	24, // 3: pb.FindAPINodesWithNodeClusterResponse.apiNodes:type_name -> pb.APINode
	23, // 4: pb.ListEnabledNodeClustersResponse.clusters:type_name -> pb.NodeCluster
	22, // 5: pb.ExecuteNodeClusterHealthCheckResponse.results:type_name -> pb.ExecuteNodeClusterHealthCheckResponse.Result
	25, // 6: pb.ExecuteNodeClusterHealthCheckResponse.Result.node:type_name -> pb.Node
	4,  // 7: pb.NodeClusterService.createNodeCluster:input_type -> pb.CreateNodeClusterRequest
	6,  // 8: pb.NodeClusterService.updateNodeCluster:input_type -> pb.UpdateNodeClusterRequest
	7,  // 9: pb.NodeClusterService.disableNodeCluster:input_type -> pb.DisableNodeClusterRequest
	9,  // 10: pb.NodeClusterService.findEnabledNodeCluster:input_type -> pb.FindEnabledNodeClusterRequest
	11, // 11: pb.NodeClusterService.findAPINodesWithNodeCluster:input_type -> pb.FindAPINodesWithNodeClusterRequest
	0,  // 12: pb.NodeClusterService.findAllEnabledNodeClusters:input_type -> pb.FindAllEnabledNodeClustersRequest
	2,  // 13: pb.NodeClusterService.findAllChangedNodeClusters:input_type -> pb.FindAllChangedNodeClustersRequest
	13, // 14: pb.NodeClusterService.countAllEnabledNodeClusters:input_type -> pb.CountAllEnabledNodeClustersRequest
	15, // 15: pb.NodeClusterService.listEnabledNodeClusters:input_type -> pb.ListEnabledNodeClustersRequest
	17, // 16: pb.NodeClusterService.findNodeClusterHealthCheckConfig:input_type -> pb.FindNodeClusterHealthCheckConfigRequest
	19, // 17: pb.NodeClusterService.updateNodeClusterHealthCheck:input_type -> pb.UpdateNodeClusterHealthCheckRequest
	20, // 18: pb.NodeClusterService.executeNodeClusterHealthCheck:input_type -> pb.ExecuteNodeClusterHealthCheckRequest
	5,  // 19: pb.NodeClusterService.createNodeCluster:output_type -> pb.CreateNodeClusterResponse
	26, // 20: pb.NodeClusterService.updateNodeCluster:output_type -> pb.RPCUpdateSuccess
	8,  // 21: pb.NodeClusterService.disableNodeCluster:output_type -> pb.DisableNodeClusterResponse
	10, // 22: pb.NodeClusterService.findEnabledNodeCluster:output_type -> pb.FindEnabledNodeClusterResponse
	12, // 23: pb.NodeClusterService.findAPINodesWithNodeCluster:output_type -> pb.FindAPINodesWithNodeClusterResponse
	1,  // 24: pb.NodeClusterService.findAllEnabledNodeClusters:output_type -> pb.FindAllEnabledNodeClustersResponse
	3,  // 25: pb.NodeClusterService.findAllChangedNodeClusters:output_type -> pb.FindAllChangedNodeClustersResponse
	14, // 26: pb.NodeClusterService.countAllEnabledNodeClusters:output_type -> pb.CountAllEnabledNodeClustersResponse
	16, // 27: pb.NodeClusterService.listEnabledNodeClusters:output_type -> pb.ListEnabledNodeClustersResponse
	18, // 28: pb.NodeClusterService.findNodeClusterHealthCheckConfig:output_type -> pb.FindNodeClusterHealthCheckConfigResponse
	26, // 29: pb.NodeClusterService.updateNodeClusterHealthCheck:output_type -> pb.RPCUpdateSuccess
	21, // 30: pb.NodeClusterService.executeNodeClusterHealthCheck:output_type -> pb.ExecuteNodeClusterHealthCheckResponse
	19, // [19:31] is the sub-list for method output_type
	7,  // [7:19] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_service_node_cluster_proto_init() }
func file_service_node_cluster_proto_init() {
	if File_service_node_cluster_proto != nil {
		return
	}
	file_model_node_cluster_proto_init()
	file_model_api_node_proto_init()
	file_model_node_proto_init()
	file_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_node_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNodeClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNodeClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllChangedNodeClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllChangedNodeClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableNodeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableNodeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNodeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledNodeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAPINodesWithNodeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAPINodesWithNodeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledNodeClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledNodeClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledNodeClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledNodeClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNodeClusterHealthCheckConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNodeClusterHealthCheckConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeClusterHealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteNodeClusterHealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteNodeClusterHealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_cluster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteNodeClusterHealthCheckResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_node_cluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_node_cluster_proto_goTypes,
		DependencyIndexes: file_service_node_cluster_proto_depIdxs,
		MessageInfos:      file_service_node_cluster_proto_msgTypes,
	}.Build()
	File_service_node_cluster_proto = out.File
	file_service_node_cluster_proto_rawDesc = nil
	file_service_node_cluster_proto_goTypes = nil
	file_service_node_cluster_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeClusterServiceClient is the client API for NodeClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClusterServiceClient interface {
	// 创建集群
	CreateNodeCluster(ctx context.Context, in *CreateNodeClusterRequest, opts ...grpc.CallOption) (*CreateNodeClusterResponse, error)
	// 修改集群
	UpdateNodeCluster(ctx context.Context, in *UpdateNodeClusterRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 禁用集群
	DisableNodeCluster(ctx context.Context, in *DisableNodeClusterRequest, opts ...grpc.CallOption) (*DisableNodeClusterResponse, error)
	// 查找单个集群信息
	FindEnabledNodeCluster(ctx context.Context, in *FindEnabledNodeClusterRequest, opts ...grpc.CallOption) (*FindEnabledNodeClusterResponse, error)
	// 查找集群的API节点信息
	FindAPINodesWithNodeCluster(ctx context.Context, in *FindAPINodesWithNodeClusterRequest, opts ...grpc.CallOption) (*FindAPINodesWithNodeClusterResponse, error)
	// 获取所有可用集群
	FindAllEnabledNodeClusters(ctx context.Context, in *FindAllEnabledNodeClustersRequest, opts ...grpc.CallOption) (*FindAllEnabledNodeClustersResponse, error)
	// 获取变更的集群
	FindAllChangedNodeClusters(ctx context.Context, in *FindAllChangedNodeClustersRequest, opts ...grpc.CallOption) (*FindAllChangedNodeClustersResponse, error)
	// 计算所有集群数量
	CountAllEnabledNodeClusters(ctx context.Context, in *CountAllEnabledNodeClustersRequest, opts ...grpc.CallOption) (*CountAllEnabledNodeClustersResponse, error)
	// 列出单页集群
	ListEnabledNodeClusters(ctx context.Context, in *ListEnabledNodeClustersRequest, opts ...grpc.CallOption) (*ListEnabledNodeClustersResponse, error)
	// 查找集群的健康检查配置
	FindNodeClusterHealthCheckConfig(ctx context.Context, in *FindNodeClusterHealthCheckConfigRequest, opts ...grpc.CallOption) (*FindNodeClusterHealthCheckConfigResponse, error)
	// 修改集群健康检查设置
	UpdateNodeClusterHealthCheck(ctx context.Context, in *UpdateNodeClusterHealthCheckRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error)
	// 执行健康检查
	ExecuteNodeClusterHealthCheck(ctx context.Context, in *ExecuteNodeClusterHealthCheckRequest, opts ...grpc.CallOption) (*ExecuteNodeClusterHealthCheckResponse, error)
}

type nodeClusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClusterServiceClient(cc grpc.ClientConnInterface) NodeClusterServiceClient {
	return &nodeClusterServiceClient{cc}
}

func (c *nodeClusterServiceClient) CreateNodeCluster(ctx context.Context, in *CreateNodeClusterRequest, opts ...grpc.CallOption) (*CreateNodeClusterResponse, error) {
	out := new(CreateNodeClusterResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/createNodeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) UpdateNodeCluster(ctx context.Context, in *UpdateNodeClusterRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/updateNodeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) DisableNodeCluster(ctx context.Context, in *DisableNodeClusterRequest, opts ...grpc.CallOption) (*DisableNodeClusterResponse, error) {
	out := new(DisableNodeClusterResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/disableNodeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) FindEnabledNodeCluster(ctx context.Context, in *FindEnabledNodeClusterRequest, opts ...grpc.CallOption) (*FindEnabledNodeClusterResponse, error) {
	out := new(FindEnabledNodeClusterResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/findEnabledNodeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) FindAPINodesWithNodeCluster(ctx context.Context, in *FindAPINodesWithNodeClusterRequest, opts ...grpc.CallOption) (*FindAPINodesWithNodeClusterResponse, error) {
	out := new(FindAPINodesWithNodeClusterResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/findAPINodesWithNodeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) FindAllEnabledNodeClusters(ctx context.Context, in *FindAllEnabledNodeClustersRequest, opts ...grpc.CallOption) (*FindAllEnabledNodeClustersResponse, error) {
	out := new(FindAllEnabledNodeClustersResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/findAllEnabledNodeClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) FindAllChangedNodeClusters(ctx context.Context, in *FindAllChangedNodeClustersRequest, opts ...grpc.CallOption) (*FindAllChangedNodeClustersResponse, error) {
	out := new(FindAllChangedNodeClustersResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/findAllChangedNodeClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) CountAllEnabledNodeClusters(ctx context.Context, in *CountAllEnabledNodeClustersRequest, opts ...grpc.CallOption) (*CountAllEnabledNodeClustersResponse, error) {
	out := new(CountAllEnabledNodeClustersResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/countAllEnabledNodeClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) ListEnabledNodeClusters(ctx context.Context, in *ListEnabledNodeClustersRequest, opts ...grpc.CallOption) (*ListEnabledNodeClustersResponse, error) {
	out := new(ListEnabledNodeClustersResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/listEnabledNodeClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) FindNodeClusterHealthCheckConfig(ctx context.Context, in *FindNodeClusterHealthCheckConfigRequest, opts ...grpc.CallOption) (*FindNodeClusterHealthCheckConfigResponse, error) {
	out := new(FindNodeClusterHealthCheckConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/findNodeClusterHealthCheckConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) UpdateNodeClusterHealthCheck(ctx context.Context, in *UpdateNodeClusterHealthCheckRequest, opts ...grpc.CallOption) (*RPCUpdateSuccess, error) {
	out := new(RPCUpdateSuccess)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/updateNodeClusterHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClusterServiceClient) ExecuteNodeClusterHealthCheck(ctx context.Context, in *ExecuteNodeClusterHealthCheckRequest, opts ...grpc.CallOption) (*ExecuteNodeClusterHealthCheckResponse, error) {
	out := new(ExecuteNodeClusterHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeClusterService/executeNodeClusterHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeClusterServiceServer is the server API for NodeClusterService service.
type NodeClusterServiceServer interface {
	// 创建集群
	CreateNodeCluster(context.Context, *CreateNodeClusterRequest) (*CreateNodeClusterResponse, error)
	// 修改集群
	UpdateNodeCluster(context.Context, *UpdateNodeClusterRequest) (*RPCUpdateSuccess, error)
	// 禁用集群
	DisableNodeCluster(context.Context, *DisableNodeClusterRequest) (*DisableNodeClusterResponse, error)
	// 查找单个集群信息
	FindEnabledNodeCluster(context.Context, *FindEnabledNodeClusterRequest) (*FindEnabledNodeClusterResponse, error)
	// 查找集群的API节点信息
	FindAPINodesWithNodeCluster(context.Context, *FindAPINodesWithNodeClusterRequest) (*FindAPINodesWithNodeClusterResponse, error)
	// 获取所有可用集群
	FindAllEnabledNodeClusters(context.Context, *FindAllEnabledNodeClustersRequest) (*FindAllEnabledNodeClustersResponse, error)
	// 获取变更的集群
	FindAllChangedNodeClusters(context.Context, *FindAllChangedNodeClustersRequest) (*FindAllChangedNodeClustersResponse, error)
	// 计算所有集群数量
	CountAllEnabledNodeClusters(context.Context, *CountAllEnabledNodeClustersRequest) (*CountAllEnabledNodeClustersResponse, error)
	// 列出单页集群
	ListEnabledNodeClusters(context.Context, *ListEnabledNodeClustersRequest) (*ListEnabledNodeClustersResponse, error)
	// 查找集群的健康检查配置
	FindNodeClusterHealthCheckConfig(context.Context, *FindNodeClusterHealthCheckConfigRequest) (*FindNodeClusterHealthCheckConfigResponse, error)
	// 修改集群健康检查设置
	UpdateNodeClusterHealthCheck(context.Context, *UpdateNodeClusterHealthCheckRequest) (*RPCUpdateSuccess, error)
	// 执行健康检查
	ExecuteNodeClusterHealthCheck(context.Context, *ExecuteNodeClusterHealthCheckRequest) (*ExecuteNodeClusterHealthCheckResponse, error)
}

// UnimplementedNodeClusterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeClusterServiceServer struct {
}

func (*UnimplementedNodeClusterServiceServer) CreateNodeCluster(context.Context, *CreateNodeClusterRequest) (*CreateNodeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeCluster not implemented")
}
func (*UnimplementedNodeClusterServiceServer) UpdateNodeCluster(context.Context, *UpdateNodeClusterRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeCluster not implemented")
}
func (*UnimplementedNodeClusterServiceServer) DisableNodeCluster(context.Context, *DisableNodeClusterRequest) (*DisableNodeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableNodeCluster not implemented")
}
func (*UnimplementedNodeClusterServiceServer) FindEnabledNodeCluster(context.Context, *FindEnabledNodeClusterRequest) (*FindEnabledNodeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledNodeCluster not implemented")
}
func (*UnimplementedNodeClusterServiceServer) FindAPINodesWithNodeCluster(context.Context, *FindAPINodesWithNodeClusterRequest) (*FindAPINodesWithNodeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAPINodesWithNodeCluster not implemented")
}
func (*UnimplementedNodeClusterServiceServer) FindAllEnabledNodeClusters(context.Context, *FindAllEnabledNodeClustersRequest) (*FindAllEnabledNodeClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledNodeClusters not implemented")
}
func (*UnimplementedNodeClusterServiceServer) FindAllChangedNodeClusters(context.Context, *FindAllChangedNodeClustersRequest) (*FindAllChangedNodeClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllChangedNodeClusters not implemented")
}
func (*UnimplementedNodeClusterServiceServer) CountAllEnabledNodeClusters(context.Context, *CountAllEnabledNodeClustersRequest) (*CountAllEnabledNodeClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledNodeClusters not implemented")
}
func (*UnimplementedNodeClusterServiceServer) ListEnabledNodeClusters(context.Context, *ListEnabledNodeClustersRequest) (*ListEnabledNodeClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledNodeClusters not implemented")
}
func (*UnimplementedNodeClusterServiceServer) FindNodeClusterHealthCheckConfig(context.Context, *FindNodeClusterHealthCheckConfigRequest) (*FindNodeClusterHealthCheckConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNodeClusterHealthCheckConfig not implemented")
}
func (*UnimplementedNodeClusterServiceServer) UpdateNodeClusterHealthCheck(context.Context, *UpdateNodeClusterHealthCheckRequest) (*RPCUpdateSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeClusterHealthCheck not implemented")
}
func (*UnimplementedNodeClusterServiceServer) ExecuteNodeClusterHealthCheck(context.Context, *ExecuteNodeClusterHealthCheckRequest) (*ExecuteNodeClusterHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteNodeClusterHealthCheck not implemented")
}

func RegisterNodeClusterServiceServer(s *grpc.Server, srv NodeClusterServiceServer) {
	s.RegisterService(&_NodeClusterService_serviceDesc, srv)
}

func _NodeClusterService_CreateNodeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).CreateNodeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/CreateNodeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).CreateNodeCluster(ctx, req.(*CreateNodeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_UpdateNodeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).UpdateNodeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/UpdateNodeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).UpdateNodeCluster(ctx, req.(*UpdateNodeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_DisableNodeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableNodeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).DisableNodeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/DisableNodeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).DisableNodeCluster(ctx, req.(*DisableNodeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_FindEnabledNodeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledNodeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).FindEnabledNodeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/FindEnabledNodeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).FindEnabledNodeCluster(ctx, req.(*FindEnabledNodeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_FindAPINodesWithNodeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAPINodesWithNodeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).FindAPINodesWithNodeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/FindAPINodesWithNodeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).FindAPINodesWithNodeCluster(ctx, req.(*FindAPINodesWithNodeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_FindAllEnabledNodeClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledNodeClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).FindAllEnabledNodeClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/FindAllEnabledNodeClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).FindAllEnabledNodeClusters(ctx, req.(*FindAllEnabledNodeClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_FindAllChangedNodeClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllChangedNodeClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).FindAllChangedNodeClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/FindAllChangedNodeClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).FindAllChangedNodeClusters(ctx, req.(*FindAllChangedNodeClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_CountAllEnabledNodeClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledNodeClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).CountAllEnabledNodeClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/CountAllEnabledNodeClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).CountAllEnabledNodeClusters(ctx, req.(*CountAllEnabledNodeClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_ListEnabledNodeClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledNodeClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).ListEnabledNodeClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/ListEnabledNodeClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).ListEnabledNodeClusters(ctx, req.(*ListEnabledNodeClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_FindNodeClusterHealthCheckConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNodeClusterHealthCheckConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).FindNodeClusterHealthCheckConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/FindNodeClusterHealthCheckConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).FindNodeClusterHealthCheckConfig(ctx, req.(*FindNodeClusterHealthCheckConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_UpdateNodeClusterHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeClusterHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).UpdateNodeClusterHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/UpdateNodeClusterHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).UpdateNodeClusterHealthCheck(ctx, req.(*UpdateNodeClusterHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeClusterService_ExecuteNodeClusterHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteNodeClusterHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeClusterServiceServer).ExecuteNodeClusterHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeClusterService/ExecuteNodeClusterHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeClusterServiceServer).ExecuteNodeClusterHealthCheck(ctx, req.(*ExecuteNodeClusterHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NodeClusterService",
	HandlerType: (*NodeClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNodeCluster",
			Handler:    _NodeClusterService_CreateNodeCluster_Handler,
		},
		{
			MethodName: "updateNodeCluster",
			Handler:    _NodeClusterService_UpdateNodeCluster_Handler,
		},
		{
			MethodName: "disableNodeCluster",
			Handler:    _NodeClusterService_DisableNodeCluster_Handler,
		},
		{
			MethodName: "findEnabledNodeCluster",
			Handler:    _NodeClusterService_FindEnabledNodeCluster_Handler,
		},
		{
			MethodName: "findAPINodesWithNodeCluster",
			Handler:    _NodeClusterService_FindAPINodesWithNodeCluster_Handler,
		},
		{
			MethodName: "findAllEnabledNodeClusters",
			Handler:    _NodeClusterService_FindAllEnabledNodeClusters_Handler,
		},
		{
			MethodName: "findAllChangedNodeClusters",
			Handler:    _NodeClusterService_FindAllChangedNodeClusters_Handler,
		},
		{
			MethodName: "countAllEnabledNodeClusters",
			Handler:    _NodeClusterService_CountAllEnabledNodeClusters_Handler,
		},
		{
			MethodName: "listEnabledNodeClusters",
			Handler:    _NodeClusterService_ListEnabledNodeClusters_Handler,
		},
		{
			MethodName: "findNodeClusterHealthCheckConfig",
			Handler:    _NodeClusterService_FindNodeClusterHealthCheckConfig_Handler,
		},
		{
			MethodName: "updateNodeClusterHealthCheck",
			Handler:    _NodeClusterService_UpdateNodeClusterHealthCheck_Handler,
		},
		{
			MethodName: "executeNodeClusterHealthCheck",
			Handler:    _NodeClusterService_ExecuteNodeClusterHealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_node_cluster.proto",
}
