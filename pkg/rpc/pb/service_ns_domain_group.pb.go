// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: service_ns_domain_group.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建分组
type CreateNSDomainGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateNSDomainGroupRequest) Reset() {
	*x = CreateNSDomainGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSDomainGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSDomainGroupRequest) ProtoMessage() {}

func (x *CreateNSDomainGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSDomainGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateNSDomainGroupRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNSDomainGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateNSDomainGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainGroupId int64 `protobuf:"varint,1,opt,name=nsDomainGroupId,proto3" json:"nsDomainGroupId,omitempty"`
}

func (x *CreateNSDomainGroupResponse) Reset() {
	*x = CreateNSDomainGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSDomainGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSDomainGroupResponse) ProtoMessage() {}

func (x *CreateNSDomainGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSDomainGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateNSDomainGroupResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNSDomainGroupResponse) GetNsDomainGroupId() int64 {
	if x != nil {
		return x.NsDomainGroupId
	}
	return 0
}

// 修改分组
type UpdateNSDomainGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainGroupId int64  `protobuf:"varint,1,opt,name=nsDomainGroupId,proto3" json:"nsDomainGroupId,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsOn            bool   `protobuf:"varint,3,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateNSDomainGroupRequest) Reset() {
	*x = UpdateNSDomainGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSDomainGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSDomainGroupRequest) ProtoMessage() {}

func (x *UpdateNSDomainGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSDomainGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSDomainGroupRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNSDomainGroupRequest) GetNsDomainGroupId() int64 {
	if x != nil {
		return x.NsDomainGroupId
	}
	return 0
}

func (x *UpdateNSDomainGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNSDomainGroupRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除分组
type DeleteNSDomainGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainGroupId int64 `protobuf:"varint,1,opt,name=nsDomainGroupId,proto3" json:"nsDomainGroupId,omitempty"`
}

func (x *DeleteNSDomainGroupRequest) Reset() {
	*x = DeleteNSDomainGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNSDomainGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNSDomainGroupRequest) ProtoMessage() {}

func (x *DeleteNSDomainGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNSDomainGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteNSDomainGroupRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteNSDomainGroupRequest) GetNsDomainGroupId() int64 {
	if x != nil {
		return x.NsDomainGroupId
	}
	return 0
}

// 查询所有分组
type FindAllNSDomainGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindAllNSDomainGroupsRequest) Reset() {
	*x = FindAllNSDomainGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllNSDomainGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllNSDomainGroupsRequest) ProtoMessage() {}

func (x *FindAllNSDomainGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllNSDomainGroupsRequest.ProtoReflect.Descriptor instead.
func (*FindAllNSDomainGroupsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{4}
}

func (x *FindAllNSDomainGroupsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FindAllNSDomainGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainGroups []*NSDomainGroup `protobuf:"bytes,1,rep,name=nsDomainGroups,proto3" json:"nsDomainGroups,omitempty"`
}

func (x *FindAllNSDomainGroupsResponse) Reset() {
	*x = FindAllNSDomainGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllNSDomainGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllNSDomainGroupsResponse) ProtoMessage() {}

func (x *FindAllNSDomainGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllNSDomainGroupsResponse.ProtoReflect.Descriptor instead.
func (*FindAllNSDomainGroupsResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllNSDomainGroupsResponse) GetNsDomainGroups() []*NSDomainGroup {
	if x != nil {
		return x.NsDomainGroups
	}
	return nil
}

// 查询可用分组数量
type CountAllAvailableNSDomainGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CountAllAvailableNSDomainGroupsRequest) Reset() {
	*x = CountAllAvailableNSDomainGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllAvailableNSDomainGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllAvailableNSDomainGroupsRequest) ProtoMessage() {}

func (x *CountAllAvailableNSDomainGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllAvailableNSDomainGroupsRequest.ProtoReflect.Descriptor instead.
func (*CountAllAvailableNSDomainGroupsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{6}
}

func (x *CountAllAvailableNSDomainGroupsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 查询所有启用分组
type FindAllAvailableNSDomainGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindAllAvailableNSDomainGroupsRequest) Reset() {
	*x = FindAllAvailableNSDomainGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllAvailableNSDomainGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllAvailableNSDomainGroupsRequest) ProtoMessage() {}

func (x *FindAllAvailableNSDomainGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllAvailableNSDomainGroupsRequest.ProtoReflect.Descriptor instead.
func (*FindAllAvailableNSDomainGroupsRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{7}
}

func (x *FindAllAvailableNSDomainGroupsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FindAllAvailableNSDomainGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainGroups []*NSDomainGroup `protobuf:"bytes,1,rep,name=nsDomainGroups,proto3" json:"nsDomainGroups,omitempty"`
}

func (x *FindAllAvailableNSDomainGroupsResponse) Reset() {
	*x = FindAllAvailableNSDomainGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllAvailableNSDomainGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllAvailableNSDomainGroupsResponse) ProtoMessage() {}

func (x *FindAllAvailableNSDomainGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllAvailableNSDomainGroupsResponse.ProtoReflect.Descriptor instead.
func (*FindAllAvailableNSDomainGroupsResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{8}
}

func (x *FindAllAvailableNSDomainGroupsResponse) GetNsDomainGroups() []*NSDomainGroup {
	if x != nil {
		return x.NsDomainGroups
	}
	return nil
}

// 查找单个分组
type FindNSDomainGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainGroupId int64 `protobuf:"varint,1,opt,name=nsDomainGroupId,proto3" json:"nsDomainGroupId,omitempty"`
}

func (x *FindNSDomainGroupRequest) Reset() {
	*x = FindNSDomainGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSDomainGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSDomainGroupRequest) ProtoMessage() {}

func (x *FindNSDomainGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSDomainGroupRequest.ProtoReflect.Descriptor instead.
func (*FindNSDomainGroupRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{9}
}

func (x *FindNSDomainGroupRequest) GetNsDomainGroupId() int64 {
	if x != nil {
		return x.NsDomainGroupId
	}
	return 0
}

type FindNSDomainGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsDomainGroup *NSDomainGroup `protobuf:"bytes,1,opt,name=nsDomainGroup,proto3" json:"nsDomainGroup,omitempty"`
}

func (x *FindNSDomainGroupResponse) Reset() {
	*x = FindNSDomainGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_domain_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSDomainGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSDomainGroupResponse) ProtoMessage() {}

func (x *FindNSDomainGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_domain_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSDomainGroupResponse.ProtoReflect.Descriptor instead.
func (*FindNSDomainGroupResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_domain_group_proto_rawDescGZIP(), []int{10}
}

func (x *FindNSDomainGroupResponse) GetNsDomainGroup() *NSDomainGroup {
	if x != nil {
		return x.NsDomainGroup
	}
	return nil
}

var File_service_ns_domain_group_proto protoreflect.FileDescriptor

var file_service_ns_domain_group_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x22, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x30, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x6e, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x22, 0x46, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5a, 0x0a,
	0x1d, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0e, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x40, 0x0a, 0x26, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x25, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x26,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0e, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x44, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d,
	0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x8a, 0x05,
	0x0a, 0x14, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x15,
	0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x1f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64,
	0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_ns_domain_group_proto_rawDescOnce sync.Once
	file_service_ns_domain_group_proto_rawDescData = file_service_ns_domain_group_proto_rawDesc
)

func file_service_ns_domain_group_proto_rawDescGZIP() []byte {
	file_service_ns_domain_group_proto_rawDescOnce.Do(func() {
		file_service_ns_domain_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ns_domain_group_proto_rawDescData)
	})
	return file_service_ns_domain_group_proto_rawDescData
}

var file_service_ns_domain_group_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_service_ns_domain_group_proto_goTypes = []interface{}{
	(*CreateNSDomainGroupRequest)(nil),             // 0: pb.CreateNSDomainGroupRequest
	(*CreateNSDomainGroupResponse)(nil),            // 1: pb.CreateNSDomainGroupResponse
	(*UpdateNSDomainGroupRequest)(nil),             // 2: pb.UpdateNSDomainGroupRequest
	(*DeleteNSDomainGroupRequest)(nil),             // 3: pb.DeleteNSDomainGroupRequest
	(*FindAllNSDomainGroupsRequest)(nil),           // 4: pb.FindAllNSDomainGroupsRequest
	(*FindAllNSDomainGroupsResponse)(nil),          // 5: pb.FindAllNSDomainGroupsResponse
	(*CountAllAvailableNSDomainGroupsRequest)(nil), // 6: pb.CountAllAvailableNSDomainGroupsRequest
	(*FindAllAvailableNSDomainGroupsRequest)(nil),  // 7: pb.FindAllAvailableNSDomainGroupsRequest
	(*FindAllAvailableNSDomainGroupsResponse)(nil), // 8: pb.FindAllAvailableNSDomainGroupsResponse
	(*FindNSDomainGroupRequest)(nil),               // 9: pb.FindNSDomainGroupRequest
	(*FindNSDomainGroupResponse)(nil),              // 10: pb.FindNSDomainGroupResponse
	(*NSDomainGroup)(nil),                          // 11: pb.NSDomainGroup
	(*RPCSuccess)(nil),                             // 12: pb.RPCSuccess
	(*RPCCountResponse)(nil),                       // 13: pb.RPCCountResponse
}
var file_service_ns_domain_group_proto_depIdxs = []int32{
	11, // 0: pb.FindAllNSDomainGroupsResponse.nsDomainGroups:type_name -> pb.NSDomainGroup
	11, // 1: pb.FindAllAvailableNSDomainGroupsResponse.nsDomainGroups:type_name -> pb.NSDomainGroup
	11, // 2: pb.FindNSDomainGroupResponse.nsDomainGroup:type_name -> pb.NSDomainGroup
	0,  // 3: pb.NSDomainGroupService.createNSDomainGroup:input_type -> pb.CreateNSDomainGroupRequest
	2,  // 4: pb.NSDomainGroupService.updateNSDomainGroup:input_type -> pb.UpdateNSDomainGroupRequest
	3,  // 5: pb.NSDomainGroupService.deleteNSDomainGroup:input_type -> pb.DeleteNSDomainGroupRequest
	4,  // 6: pb.NSDomainGroupService.findAllNSDomainGroups:input_type -> pb.FindAllNSDomainGroupsRequest
	6,  // 7: pb.NSDomainGroupService.countAllAvailableNSDomainGroups:input_type -> pb.CountAllAvailableNSDomainGroupsRequest
	7,  // 8: pb.NSDomainGroupService.findAllAvailableNSDomainGroups:input_type -> pb.FindAllAvailableNSDomainGroupsRequest
	9,  // 9: pb.NSDomainGroupService.findNSDomainGroup:input_type -> pb.FindNSDomainGroupRequest
	1,  // 10: pb.NSDomainGroupService.createNSDomainGroup:output_type -> pb.CreateNSDomainGroupResponse
	12, // 11: pb.NSDomainGroupService.updateNSDomainGroup:output_type -> pb.RPCSuccess
	12, // 12: pb.NSDomainGroupService.deleteNSDomainGroup:output_type -> pb.RPCSuccess
	5,  // 13: pb.NSDomainGroupService.findAllNSDomainGroups:output_type -> pb.FindAllNSDomainGroupsResponse
	13, // 14: pb.NSDomainGroupService.countAllAvailableNSDomainGroups:output_type -> pb.RPCCountResponse
	8,  // 15: pb.NSDomainGroupService.findAllAvailableNSDomainGroups:output_type -> pb.FindAllAvailableNSDomainGroupsResponse
	10, // 16: pb.NSDomainGroupService.findNSDomainGroup:output_type -> pb.FindNSDomainGroupResponse
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_ns_domain_group_proto_init() }
func file_service_ns_domain_group_proto_init() {
	if File_service_ns_domain_group_proto != nil {
		return
	}
	file_models_model_ns_domain_group_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ns_domain_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSDomainGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSDomainGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSDomainGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNSDomainGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllNSDomainGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllNSDomainGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllAvailableNSDomainGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllAvailableNSDomainGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllAvailableNSDomainGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSDomainGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_domain_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSDomainGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ns_domain_group_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ns_domain_group_proto_goTypes,
		DependencyIndexes: file_service_ns_domain_group_proto_depIdxs,
		MessageInfos:      file_service_ns_domain_group_proto_msgTypes,
	}.Build()
	File_service_ns_domain_group_proto = out.File
	file_service_ns_domain_group_proto_rawDesc = nil
	file_service_ns_domain_group_proto_goTypes = nil
	file_service_ns_domain_group_proto_depIdxs = nil
}
