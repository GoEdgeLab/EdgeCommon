// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_node_task.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 获取单节点同步任务
type FindNodeTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"` // 上一次执行的版本
}

func (x *FindNodeTasksRequest) Reset() {
	*x = FindNodeTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNodeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeTasksRequest) ProtoMessage() {}

func (x *FindNodeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeTasksRequest.ProtoReflect.Descriptor instead.
func (*FindNodeTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{0}
}

func (x *FindNodeTasksRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type FindNodeTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeTasks []*NodeTask `protobuf:"bytes,1,rep,name=nodeTasks,proto3" json:"nodeTasks,omitempty"`
}

func (x *FindNodeTasksResponse) Reset() {
	*x = FindNodeTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNodeTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeTasksResponse) ProtoMessage() {}

func (x *FindNodeTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeTasksResponse.ProtoReflect.Descriptor instead.
func (*FindNodeTasksResponse) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{1}
}

func (x *FindNodeTasksResponse) GetNodeTasks() []*NodeTask {
	if x != nil {
		return x.NodeTasks
	}
	return nil
}

// 报告同步任务结果
type ReportNodeTaskDoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeTaskId int64  `protobuf:"varint,1,opt,name=nodeTaskId,proto3" json:"nodeTaskId,omitempty"`
	IsOk       bool   `protobuf:"varint,2,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Error      string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReportNodeTaskDoneRequest) Reset() {
	*x = ReportNodeTaskDoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportNodeTaskDoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportNodeTaskDoneRequest) ProtoMessage() {}

func (x *ReportNodeTaskDoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportNodeTaskDoneRequest.ProtoReflect.Descriptor instead.
func (*ReportNodeTaskDoneRequest) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{2}
}

func (x *ReportNodeTaskDoneRequest) GetNodeTaskId() int64 {
	if x != nil {
		return x.NodeTaskId
	}
	return 0
}

func (x *ReportNodeTaskDoneRequest) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *ReportNodeTaskDoneRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// 获取所有正在同步的集群信息
type FindNodeClusterTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindNodeClusterTasksRequest) Reset() {
	*x = FindNodeClusterTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNodeClusterTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeClusterTasksRequest) ProtoMessage() {}

func (x *FindNodeClusterTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeClusterTasksRequest.ProtoReflect.Descriptor instead.
func (*FindNodeClusterTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{3}
}

type FindNodeClusterTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterTasks []*ClusterTask `protobuf:"bytes,1,rep,name=clusterTasks,proto3" json:"clusterTasks,omitempty"`
}

func (x *FindNodeClusterTasksResponse) Reset() {
	*x = FindNodeClusterTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNodeClusterTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeClusterTasksResponse) ProtoMessage() {}

func (x *FindNodeClusterTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeClusterTasksResponse.ProtoReflect.Descriptor instead.
func (*FindNodeClusterTasksResponse) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{4}
}

func (x *FindNodeClusterTasksResponse) GetClusterTasks() []*ClusterTask {
	if x != nil {
		return x.ClusterTasks
	}
	return nil
}

type ClusterTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   int64       `protobuf:"varint,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	ClusterName string      `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	NodeTasks   []*NodeTask `protobuf:"bytes,3,rep,name=nodeTasks,proto3" json:"nodeTasks,omitempty"`
}

func (x *ClusterTask) Reset() {
	*x = ClusterTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTask) ProtoMessage() {}

func (x *ClusterTask) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTask.ProtoReflect.Descriptor instead.
func (*ClusterTask) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{5}
}

func (x *ClusterTask) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterTask) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterTask) GetNodeTasks() []*NodeTask {
	if x != nil {
		return x.NodeTasks
	}
	return nil
}

// 检查是否有正在执行的任务
type ExistsNodeTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcludeTypes []string `protobuf:"bytes,1,rep,name=excludeTypes,proto3" json:"excludeTypes,omitempty"`
}

func (x *ExistsNodeTasksRequest) Reset() {
	*x = ExistsNodeTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsNodeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsNodeTasksRequest) ProtoMessage() {}

func (x *ExistsNodeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsNodeTasksRequest.ProtoReflect.Descriptor instead.
func (*ExistsNodeTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{6}
}

func (x *ExistsNodeTasksRequest) GetExcludeTypes() []string {
	if x != nil {
		return x.ExcludeTypes
	}
	return nil
}

type ExistsNodeTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistTasks bool `protobuf:"varint,1,opt,name=existTasks,proto3" json:"existTasks,omitempty"`
	ExistError bool `protobuf:"varint,2,opt,name=existError,proto3" json:"existError,omitempty"`
}

func (x *ExistsNodeTasksResponse) Reset() {
	*x = ExistsNodeTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsNodeTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsNodeTasksResponse) ProtoMessage() {}

func (x *ExistsNodeTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsNodeTasksResponse.ProtoReflect.Descriptor instead.
func (*ExistsNodeTasksResponse) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{7}
}

func (x *ExistsNodeTasksResponse) GetExistTasks() bool {
	if x != nil {
		return x.ExistTasks
	}
	return false
}

func (x *ExistsNodeTasksResponse) GetExistError() bool {
	if x != nil {
		return x.ExistError
	}
	return false
}

// 删除任务
type DeleteNodeTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeTaskId int64 `protobuf:"varint,1,opt,name=nodeTaskId,proto3" json:"nodeTaskId,omitempty"`
}

func (x *DeleteNodeTaskRequest) Reset() {
	*x = DeleteNodeTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeTaskRequest) ProtoMessage() {}

func (x *DeleteNodeTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeTaskRequest) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteNodeTaskRequest) GetNodeTaskId() int64 {
	if x != nil {
		return x.NodeTaskId
	}
	return 0
}

// 批量删除任务
type DeleteNodeTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeTaskIds []int64 `protobuf:"varint,1,rep,packed,name=nodeTaskIds,proto3" json:"nodeTaskIds,omitempty"`
}

func (x *DeleteNodeTasksRequest) Reset() {
	*x = DeleteNodeTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeTasksRequest) ProtoMessage() {}

func (x *DeleteNodeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeTasksRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteNodeTasksRequest) GetNodeTaskIds() []int64 {
	if x != nil {
		return x.NodeTaskIds
	}
	return nil
}

// 计算正在执行的任务数量
type CountDoingNodeTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountDoingNodeTasksRequest) Reset() {
	*x = CountDoingNodeTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDoingNodeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDoingNodeTasksRequest) ProtoMessage() {}

func (x *CountDoingNodeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDoingNodeTasksRequest.ProtoReflect.Descriptor instead.
func (*CountDoingNodeTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{10}
}

// 查找需要通知的任务
type FindNotifyingNodeTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FindNotifyingNodeTasksRequest) Reset() {
	*x = FindNotifyingNodeTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNotifyingNodeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNotifyingNodeTasksRequest) ProtoMessage() {}

func (x *FindNotifyingNodeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNotifyingNodeTasksRequest.ProtoReflect.Descriptor instead.
func (*FindNotifyingNodeTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{11}
}

func (x *FindNotifyingNodeTasksRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FindNotifyingNodeTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeTasks []*NodeTask `protobuf:"bytes,1,rep,name=nodeTasks,proto3" json:"nodeTasks,omitempty"`
}

func (x *FindNotifyingNodeTasksResponse) Reset() {
	*x = FindNotifyingNodeTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNotifyingNodeTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNotifyingNodeTasksResponse) ProtoMessage() {}

func (x *FindNotifyingNodeTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNotifyingNodeTasksResponse.ProtoReflect.Descriptor instead.
func (*FindNotifyingNodeTasksResponse) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{12}
}

func (x *FindNotifyingNodeTasksResponse) GetNodeTasks() []*NodeTask {
	if x != nil {
		return x.NodeTasks
	}
	return nil
}

// 设置任务已通知
type UpdateNodeTasksNotifiedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeTaskIds []int64 `protobuf:"varint,1,rep,packed,name=nodeTaskIds,proto3" json:"nodeTaskIds,omitempty"`
}

func (x *UpdateNodeTasksNotifiedRequest) Reset() {
	*x = UpdateNodeTasksNotifiedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_node_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeTasksNotifiedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeTasksNotifiedRequest) ProtoMessage() {}

func (x *UpdateNodeTasksNotifiedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_node_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeTasksNotifiedRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeTasksNotifiedRequest) Descriptor() ([]byte, []int) {
	return file_service_node_task_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateNodeTasksNotifiedRequest) GetNodeTaskIds() []int64 {
	if x != nil {
		return x.NodeTaskIds
	}
	return nil
}

var File_service_node_task_proto protoreflect.FileDescriptor

var file_service_node_task_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x65, 0x0a,
	0x19, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73,
	0x4f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x1d, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x79, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0x3c, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x59, 0x0a, 0x17, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x65, 0x78, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x65, 0x78, 0x69, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x37, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x33, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0x4c, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x22, 0x42, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x32, 0xbc, 0x05, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1f, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_node_task_proto_rawDescOnce sync.Once
	file_service_node_task_proto_rawDescData = file_service_node_task_proto_rawDesc
)

func file_service_node_task_proto_rawDescGZIP() []byte {
	file_service_node_task_proto_rawDescOnce.Do(func() {
		file_service_node_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_node_task_proto_rawDescData)
	})
	return file_service_node_task_proto_rawDescData
}

var file_service_node_task_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_service_node_task_proto_goTypes = []interface{}{
	(*FindNodeTasksRequest)(nil),           // 0: pb.FindNodeTasksRequest
	(*FindNodeTasksResponse)(nil),          // 1: pb.FindNodeTasksResponse
	(*ReportNodeTaskDoneRequest)(nil),      // 2: pb.ReportNodeTaskDoneRequest
	(*FindNodeClusterTasksRequest)(nil),    // 3: pb.FindNodeClusterTasksRequest
	(*FindNodeClusterTasksResponse)(nil),   // 4: pb.FindNodeClusterTasksResponse
	(*ClusterTask)(nil),                    // 5: pb.ClusterTask
	(*ExistsNodeTasksRequest)(nil),         // 6: pb.ExistsNodeTasksRequest
	(*ExistsNodeTasksResponse)(nil),        // 7: pb.ExistsNodeTasksResponse
	(*DeleteNodeTaskRequest)(nil),          // 8: pb.DeleteNodeTaskRequest
	(*DeleteNodeTasksRequest)(nil),         // 9: pb.DeleteNodeTasksRequest
	(*CountDoingNodeTasksRequest)(nil),     // 10: pb.CountDoingNodeTasksRequest
	(*FindNotifyingNodeTasksRequest)(nil),  // 11: pb.FindNotifyingNodeTasksRequest
	(*FindNotifyingNodeTasksResponse)(nil), // 12: pb.FindNotifyingNodeTasksResponse
	(*UpdateNodeTasksNotifiedRequest)(nil), // 13: pb.UpdateNodeTasksNotifiedRequest
	(*NodeTask)(nil),                       // 14: pb.NodeTask
	(*RPCSuccess)(nil),                     // 15: pb.RPCSuccess
	(*RPCCountResponse)(nil),               // 16: pb.RPCCountResponse
}
var file_service_node_task_proto_depIdxs = []int32{
	14, // 0: pb.FindNodeTasksResponse.nodeTasks:type_name -> pb.NodeTask
	5,  // 1: pb.FindNodeClusterTasksResponse.clusterTasks:type_name -> pb.ClusterTask
	14, // 2: pb.ClusterTask.nodeTasks:type_name -> pb.NodeTask
	14, // 3: pb.FindNotifyingNodeTasksResponse.nodeTasks:type_name -> pb.NodeTask
	0,  // 4: pb.NodeTaskService.findNodeTasks:input_type -> pb.FindNodeTasksRequest
	2,  // 5: pb.NodeTaskService.reportNodeTaskDone:input_type -> pb.ReportNodeTaskDoneRequest
	3,  // 6: pb.NodeTaskService.findNodeClusterTasks:input_type -> pb.FindNodeClusterTasksRequest
	6,  // 7: pb.NodeTaskService.existsNodeTasks:input_type -> pb.ExistsNodeTasksRequest
	8,  // 8: pb.NodeTaskService.deleteNodeTask:input_type -> pb.DeleteNodeTaskRequest
	9,  // 9: pb.NodeTaskService.deleteNodeTasks:input_type -> pb.DeleteNodeTasksRequest
	10, // 10: pb.NodeTaskService.countDoingNodeTasks:input_type -> pb.CountDoingNodeTasksRequest
	11, // 11: pb.NodeTaskService.findNotifyingNodeTasks:input_type -> pb.FindNotifyingNodeTasksRequest
	13, // 12: pb.NodeTaskService.updateNodeTasksNotified:input_type -> pb.UpdateNodeTasksNotifiedRequest
	1,  // 13: pb.NodeTaskService.findNodeTasks:output_type -> pb.FindNodeTasksResponse
	15, // 14: pb.NodeTaskService.reportNodeTaskDone:output_type -> pb.RPCSuccess
	4,  // 15: pb.NodeTaskService.findNodeClusterTasks:output_type -> pb.FindNodeClusterTasksResponse
	7,  // 16: pb.NodeTaskService.existsNodeTasks:output_type -> pb.ExistsNodeTasksResponse
	15, // 17: pb.NodeTaskService.deleteNodeTask:output_type -> pb.RPCSuccess
	15, // 18: pb.NodeTaskService.deleteNodeTasks:output_type -> pb.RPCSuccess
	16, // 19: pb.NodeTaskService.countDoingNodeTasks:output_type -> pb.RPCCountResponse
	12, // 20: pb.NodeTaskService.findNotifyingNodeTasks:output_type -> pb.FindNotifyingNodeTasksResponse
	15, // 21: pb.NodeTaskService.updateNodeTasksNotified:output_type -> pb.RPCSuccess
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_node_task_proto_init() }
func file_service_node_task_proto_init() {
	if File_service_node_task_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_node_task_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_node_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNodeTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNodeTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportNodeTaskDoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNodeClusterTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNodeClusterTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsNodeTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsNodeTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDoingNodeTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNotifyingNodeTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNotifyingNodeTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_node_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeTasksNotifiedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_node_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_node_task_proto_goTypes,
		DependencyIndexes: file_service_node_task_proto_depIdxs,
		MessageInfos:      file_service_node_task_proto_msgTypes,
	}.Build()
	File_service_node_task_proto = out.File
	file_service_node_task_proto_rawDesc = nil
	file_service_node_task_proto_goTypes = nil
	file_service_node_task_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeTaskServiceClient is the client API for NodeTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeTaskServiceClient interface {
	// 获取单节点同步任务
	FindNodeTasks(ctx context.Context, in *FindNodeTasksRequest, opts ...grpc.CallOption) (*FindNodeTasksResponse, error)
	// 报告同步任务结果
	ReportNodeTaskDone(ctx context.Context, in *ReportNodeTaskDoneRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 获取所有正在同步的集群信息
	FindNodeClusterTasks(ctx context.Context, in *FindNodeClusterTasksRequest, opts ...grpc.CallOption) (*FindNodeClusterTasksResponse, error)
	// 检查是否有正在执行的任务
	ExistsNodeTasks(ctx context.Context, in *ExistsNodeTasksRequest, opts ...grpc.CallOption) (*ExistsNodeTasksResponse, error)
	// 删除任务
	DeleteNodeTask(ctx context.Context, in *DeleteNodeTaskRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 批量删除任务
	DeleteNodeTasks(ctx context.Context, in *DeleteNodeTasksRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 计算正在执行的任务数量
	CountDoingNodeTasks(ctx context.Context, in *CountDoingNodeTasksRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 查找需要通知的任务
	FindNotifyingNodeTasks(ctx context.Context, in *FindNotifyingNodeTasksRequest, opts ...grpc.CallOption) (*FindNotifyingNodeTasksResponse, error)
	// 设置任务已通知
	UpdateNodeTasksNotified(ctx context.Context, in *UpdateNodeTasksNotifiedRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
}

type nodeTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeTaskServiceClient(cc grpc.ClientConnInterface) NodeTaskServiceClient {
	return &nodeTaskServiceClient{cc}
}

func (c *nodeTaskServiceClient) FindNodeTasks(ctx context.Context, in *FindNodeTasksRequest, opts ...grpc.CallOption) (*FindNodeTasksResponse, error) {
	out := new(FindNodeTasksResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeTaskService/findNodeTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTaskServiceClient) ReportNodeTaskDone(ctx context.Context, in *ReportNodeTaskDoneRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NodeTaskService/reportNodeTaskDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTaskServiceClient) FindNodeClusterTasks(ctx context.Context, in *FindNodeClusterTasksRequest, opts ...grpc.CallOption) (*FindNodeClusterTasksResponse, error) {
	out := new(FindNodeClusterTasksResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeTaskService/findNodeClusterTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTaskServiceClient) ExistsNodeTasks(ctx context.Context, in *ExistsNodeTasksRequest, opts ...grpc.CallOption) (*ExistsNodeTasksResponse, error) {
	out := new(ExistsNodeTasksResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeTaskService/existsNodeTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTaskServiceClient) DeleteNodeTask(ctx context.Context, in *DeleteNodeTaskRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NodeTaskService/deleteNodeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTaskServiceClient) DeleteNodeTasks(ctx context.Context, in *DeleteNodeTasksRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NodeTaskService/deleteNodeTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTaskServiceClient) CountDoingNodeTasks(ctx context.Context, in *CountDoingNodeTasksRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeTaskService/countDoingNodeTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTaskServiceClient) FindNotifyingNodeTasks(ctx context.Context, in *FindNotifyingNodeTasksRequest, opts ...grpc.CallOption) (*FindNotifyingNodeTasksResponse, error) {
	out := new(FindNotifyingNodeTasksResponse)
	err := c.cc.Invoke(ctx, "/pb.NodeTaskService/findNotifyingNodeTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTaskServiceClient) UpdateNodeTasksNotified(ctx context.Context, in *UpdateNodeTasksNotifiedRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NodeTaskService/updateNodeTasksNotified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeTaskServiceServer is the server API for NodeTaskService service.
type NodeTaskServiceServer interface {
	// 获取单节点同步任务
	FindNodeTasks(context.Context, *FindNodeTasksRequest) (*FindNodeTasksResponse, error)
	// 报告同步任务结果
	ReportNodeTaskDone(context.Context, *ReportNodeTaskDoneRequest) (*RPCSuccess, error)
	// 获取所有正在同步的集群信息
	FindNodeClusterTasks(context.Context, *FindNodeClusterTasksRequest) (*FindNodeClusterTasksResponse, error)
	// 检查是否有正在执行的任务
	ExistsNodeTasks(context.Context, *ExistsNodeTasksRequest) (*ExistsNodeTasksResponse, error)
	// 删除任务
	DeleteNodeTask(context.Context, *DeleteNodeTaskRequest) (*RPCSuccess, error)
	// 批量删除任务
	DeleteNodeTasks(context.Context, *DeleteNodeTasksRequest) (*RPCSuccess, error)
	// 计算正在执行的任务数量
	CountDoingNodeTasks(context.Context, *CountDoingNodeTasksRequest) (*RPCCountResponse, error)
	// 查找需要通知的任务
	FindNotifyingNodeTasks(context.Context, *FindNotifyingNodeTasksRequest) (*FindNotifyingNodeTasksResponse, error)
	// 设置任务已通知
	UpdateNodeTasksNotified(context.Context, *UpdateNodeTasksNotifiedRequest) (*RPCSuccess, error)
}

// UnimplementedNodeTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeTaskServiceServer struct {
}

func (*UnimplementedNodeTaskServiceServer) FindNodeTasks(context.Context, *FindNodeTasksRequest) (*FindNodeTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNodeTasks not implemented")
}
func (*UnimplementedNodeTaskServiceServer) ReportNodeTaskDone(context.Context, *ReportNodeTaskDoneRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportNodeTaskDone not implemented")
}
func (*UnimplementedNodeTaskServiceServer) FindNodeClusterTasks(context.Context, *FindNodeClusterTasksRequest) (*FindNodeClusterTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNodeClusterTasks not implemented")
}
func (*UnimplementedNodeTaskServiceServer) ExistsNodeTasks(context.Context, *ExistsNodeTasksRequest) (*ExistsNodeTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsNodeTasks not implemented")
}
func (*UnimplementedNodeTaskServiceServer) DeleteNodeTask(context.Context, *DeleteNodeTaskRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeTask not implemented")
}
func (*UnimplementedNodeTaskServiceServer) DeleteNodeTasks(context.Context, *DeleteNodeTasksRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeTasks not implemented")
}
func (*UnimplementedNodeTaskServiceServer) CountDoingNodeTasks(context.Context, *CountDoingNodeTasksRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDoingNodeTasks not implemented")
}
func (*UnimplementedNodeTaskServiceServer) FindNotifyingNodeTasks(context.Context, *FindNotifyingNodeTasksRequest) (*FindNotifyingNodeTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNotifyingNodeTasks not implemented")
}
func (*UnimplementedNodeTaskServiceServer) UpdateNodeTasksNotified(context.Context, *UpdateNodeTasksNotifiedRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeTasksNotified not implemented")
}

func RegisterNodeTaskServiceServer(s *grpc.Server, srv NodeTaskServiceServer) {
	s.RegisterService(&_NodeTaskService_serviceDesc, srv)
}

func _NodeTaskService_FindNodeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNodeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTaskServiceServer).FindNodeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeTaskService/FindNodeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTaskServiceServer).FindNodeTasks(ctx, req.(*FindNodeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTaskService_ReportNodeTaskDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportNodeTaskDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTaskServiceServer).ReportNodeTaskDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeTaskService/ReportNodeTaskDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTaskServiceServer).ReportNodeTaskDone(ctx, req.(*ReportNodeTaskDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTaskService_FindNodeClusterTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNodeClusterTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTaskServiceServer).FindNodeClusterTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeTaskService/FindNodeClusterTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTaskServiceServer).FindNodeClusterTasks(ctx, req.(*FindNodeClusterTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTaskService_ExistsNodeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsNodeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTaskServiceServer).ExistsNodeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeTaskService/ExistsNodeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTaskServiceServer).ExistsNodeTasks(ctx, req.(*ExistsNodeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTaskService_DeleteNodeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTaskServiceServer).DeleteNodeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeTaskService/DeleteNodeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTaskServiceServer).DeleteNodeTask(ctx, req.(*DeleteNodeTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTaskService_DeleteNodeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTaskServiceServer).DeleteNodeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeTaskService/DeleteNodeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTaskServiceServer).DeleteNodeTasks(ctx, req.(*DeleteNodeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTaskService_CountDoingNodeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDoingNodeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTaskServiceServer).CountDoingNodeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeTaskService/CountDoingNodeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTaskServiceServer).CountDoingNodeTasks(ctx, req.(*CountDoingNodeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTaskService_FindNotifyingNodeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNotifyingNodeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTaskServiceServer).FindNotifyingNodeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeTaskService/FindNotifyingNodeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTaskServiceServer).FindNotifyingNodeTasks(ctx, req.(*FindNotifyingNodeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTaskService_UpdateNodeTasksNotified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeTasksNotifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTaskServiceServer).UpdateNodeTasksNotified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NodeTaskService/UpdateNodeTasksNotified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTaskServiceServer).UpdateNodeTasksNotified(ctx, req.(*UpdateNodeTasksNotifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NodeTaskService",
	HandlerType: (*NodeTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findNodeTasks",
			Handler:    _NodeTaskService_FindNodeTasks_Handler,
		},
		{
			MethodName: "reportNodeTaskDone",
			Handler:    _NodeTaskService_ReportNodeTaskDone_Handler,
		},
		{
			MethodName: "findNodeClusterTasks",
			Handler:    _NodeTaskService_FindNodeClusterTasks_Handler,
		},
		{
			MethodName: "existsNodeTasks",
			Handler:    _NodeTaskService_ExistsNodeTasks_Handler,
		},
		{
			MethodName: "deleteNodeTask",
			Handler:    _NodeTaskService_DeleteNodeTask_Handler,
		},
		{
			MethodName: "deleteNodeTasks",
			Handler:    _NodeTaskService_DeleteNodeTasks_Handler,
		},
		{
			MethodName: "countDoingNodeTasks",
			Handler:    _NodeTaskService_CountDoingNodeTasks_Handler,
		},
		{
			MethodName: "findNotifyingNodeTasks",
			Handler:    _NodeTaskService_FindNotifyingNodeTasks_Handler,
		},
		{
			MethodName: "updateNodeTasksNotified",
			Handler:    _NodeTaskService_UpdateNodeTasksNotified_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_node_task.proto",
}
