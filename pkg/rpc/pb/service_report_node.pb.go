// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_report_node.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 添加终端
type CreateReportNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location           string   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Isp                string   `protobuf:"bytes,3,opt,name=isp,proto3" json:"isp,omitempty"`
	AllowIPs           []string `protobuf:"bytes,4,rep,name=allowIPs,proto3" json:"allowIPs,omitempty"`
	ReportNodeGroupIds []int64  `protobuf:"varint,5,rep,packed,name=reportNodeGroupIds,proto3" json:"reportNodeGroupIds,omitempty"`
}

func (x *CreateReportNodeRequest) Reset() {
	*x = CreateReportNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReportNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReportNodeRequest) ProtoMessage() {}

func (x *CreateReportNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReportNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateReportNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{0}
}

func (x *CreateReportNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateReportNodeRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateReportNodeRequest) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *CreateReportNodeRequest) GetAllowIPs() []string {
	if x != nil {
		return x.AllowIPs
	}
	return nil
}

func (x *CreateReportNodeRequest) GetReportNodeGroupIds() []int64 {
	if x != nil {
		return x.ReportNodeGroupIds
	}
	return nil
}

type CreateReportNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeId int64 `protobuf:"varint,1,opt,name=reportNodeId,proto3" json:"reportNodeId,omitempty"`
}

func (x *CreateReportNodeResponse) Reset() {
	*x = CreateReportNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReportNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReportNodeResponse) ProtoMessage() {}

func (x *CreateReportNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReportNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateReportNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{1}
}

func (x *CreateReportNodeResponse) GetReportNodeId() int64 {
	if x != nil {
		return x.ReportNodeId
	}
	return 0
}

// 删除终端
type DeleteReportNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeId int64 `protobuf:"varint,1,opt,name=reportNodeId,proto3" json:"reportNodeId,omitempty"`
}

func (x *DeleteReportNodeRequest) Reset() {
	*x = DeleteReportNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReportNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReportNodeRequest) ProtoMessage() {}

func (x *DeleteReportNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReportNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteReportNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteReportNodeRequest) GetReportNodeId() int64 {
	if x != nil {
		return x.ReportNodeId
	}
	return 0
}

// 修改终端
type UpdateReportNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeId       int64    `protobuf:"varint,1,opt,name=reportNodeId,proto3" json:"reportNodeId,omitempty"`
	Name               string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Location           string   `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Isp                string   `protobuf:"bytes,4,opt,name=isp,proto3" json:"isp,omitempty"`
	AllowIPs           []string `protobuf:"bytes,5,rep,name=allowIPs,proto3" json:"allowIPs,omitempty"`
	IsOn               bool     `protobuf:"varint,6,opt,name=isOn,proto3" json:"isOn,omitempty"`
	ReportNodeGroupIds []int64  `protobuf:"varint,7,rep,packed,name=reportNodeGroupIds,proto3" json:"reportNodeGroupIds,omitempty"`
}

func (x *UpdateReportNodeRequest) Reset() {
	*x = UpdateReportNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReportNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReportNodeRequest) ProtoMessage() {}

func (x *UpdateReportNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReportNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateReportNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateReportNodeRequest) GetReportNodeId() int64 {
	if x != nil {
		return x.ReportNodeId
	}
	return 0
}

func (x *UpdateReportNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateReportNodeRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UpdateReportNodeRequest) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *UpdateReportNodeRequest) GetAllowIPs() []string {
	if x != nil {
		return x.AllowIPs
	}
	return nil
}

func (x *UpdateReportNodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateReportNodeRequest) GetReportNodeGroupIds() []int64 {
	if x != nil {
		return x.ReportNodeGroupIds
	}
	return nil
}

// 计算终端数量
type CountAllEnabledReportNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword           string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	ReportNodeGroupId int64  `protobuf:"varint,2,opt,name=reportNodeGroupId,proto3" json:"reportNodeGroupId,omitempty"`
}

func (x *CountAllEnabledReportNodesRequest) Reset() {
	*x = CountAllEnabledReportNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledReportNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledReportNodesRequest) ProtoMessage() {}

func (x *CountAllEnabledReportNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledReportNodesRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledReportNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{4}
}

func (x *CountAllEnabledReportNodesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CountAllEnabledReportNodesRequest) GetReportNodeGroupId() int64 {
	if x != nil {
		return x.ReportNodeGroupId
	}
	return 0
}

// 列出单页终端
type ListEnabledReportNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword           string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	ReportNodeGroupId int64  `protobuf:"varint,4,opt,name=reportNodeGroupId,proto3" json:"reportNodeGroupId,omitempty"`
	Offset            int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size              int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledReportNodesRequest) Reset() {
	*x = ListEnabledReportNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledReportNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledReportNodesRequest) ProtoMessage() {}

func (x *ListEnabledReportNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledReportNodesRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledReportNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{5}
}

func (x *ListEnabledReportNodesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListEnabledReportNodesRequest) GetReportNodeGroupId() int64 {
	if x != nil {
		return x.ReportNodeGroupId
	}
	return 0
}

func (x *ListEnabledReportNodesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledReportNodesRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledReportNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodes []*ReportNode `protobuf:"bytes,1,rep,name=reportNodes,proto3" json:"reportNodes,omitempty"`
}

func (x *ListEnabledReportNodesResponse) Reset() {
	*x = ListEnabledReportNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledReportNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledReportNodesResponse) ProtoMessage() {}

func (x *ListEnabledReportNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledReportNodesResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledReportNodesResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{6}
}

func (x *ListEnabledReportNodesResponse) GetReportNodes() []*ReportNode {
	if x != nil {
		return x.ReportNodes
	}
	return nil
}

// 查找单个终端
type FindEnabledReportNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeId int64 `protobuf:"varint,1,opt,name=reportNodeId,proto3" json:"reportNodeId,omitempty"`
}

func (x *FindEnabledReportNodeRequest) Reset() {
	*x = FindEnabledReportNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledReportNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledReportNodeRequest) ProtoMessage() {}

func (x *FindEnabledReportNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledReportNodeRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledReportNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{7}
}

func (x *FindEnabledReportNodeRequest) GetReportNodeId() int64 {
	if x != nil {
		return x.ReportNodeId
	}
	return 0
}

type FindEnabledReportNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNode *ReportNode `protobuf:"bytes,1,opt,name=reportNode,proto3" json:"reportNode,omitempty"`
}

func (x *FindEnabledReportNodeResponse) Reset() {
	*x = FindEnabledReportNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledReportNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledReportNodeResponse) ProtoMessage() {}

func (x *FindEnabledReportNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledReportNodeResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledReportNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{8}
}

func (x *FindEnabledReportNodeResponse) GetReportNode() *ReportNode {
	if x != nil {
		return x.ReportNode
	}
	return nil
}

// 终端stream
type ReportNodeStreamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeId   int64  `protobuf:"varint,1,opt,name=reportNodeId,proto3" json:"reportNodeId,omitempty"`
	RequestId      int64  `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	TimeoutSeconds int32  `protobuf:"varint,3,opt,name=timeoutSeconds,proto3" json:"timeoutSeconds,omitempty"`
	Code           string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	DataJSON       []byte `protobuf:"bytes,5,opt,name=dataJSON,proto3" json:"dataJSON,omitempty"`
	IsOk           bool   `protobuf:"varint,6,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Message        string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ReportNodeStreamMessage) Reset() {
	*x = ReportNodeStreamMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportNodeStreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportNodeStreamMessage) ProtoMessage() {}

func (x *ReportNodeStreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportNodeStreamMessage.ProtoReflect.Descriptor instead.
func (*ReportNodeStreamMessage) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{9}
}

func (x *ReportNodeStreamMessage) GetReportNodeId() int64 {
	if x != nil {
		return x.ReportNodeId
	}
	return 0
}

func (x *ReportNodeStreamMessage) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ReportNodeStreamMessage) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *ReportNodeStreamMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ReportNodeStreamMessage) GetDataJSON() []byte {
	if x != nil {
		return x.DataJSON
	}
	return nil
}

func (x *ReportNodeStreamMessage) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *ReportNodeStreamMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 更新节点状态
type UpdateReportNodeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusJSON []byte `protobuf:"bytes,1,opt,name=statusJSON,proto3" json:"statusJSON,omitempty"`
}

func (x *UpdateReportNodeStatusRequest) Reset() {
	*x = UpdateReportNodeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReportNodeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReportNodeStatusRequest) ProtoMessage() {}

func (x *UpdateReportNodeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReportNodeStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateReportNodeStatusRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateReportNodeStatusRequest) GetStatusJSON() []byte {
	if x != nil {
		return x.StatusJSON
	}
	return nil
}

// 获取当前节点信息
type FindCurrentReportNodeConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindCurrentReportNodeConfigRequest) Reset() {
	*x = FindCurrentReportNodeConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentReportNodeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentReportNodeConfigRequest) ProtoMessage() {}

func (x *FindCurrentReportNodeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentReportNodeConfigRequest.ProtoReflect.Descriptor instead.
func (*FindCurrentReportNodeConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{11}
}

type FindCurrentReportNodeConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportNodeJSON []byte `protobuf:"bytes,1,opt,name=reportNodeJSON,proto3" json:"reportNodeJSON,omitempty"`
}

func (x *FindCurrentReportNodeConfigResponse) Reset() {
	*x = FindCurrentReportNodeConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentReportNodeConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentReportNodeConfigResponse) ProtoMessage() {}

func (x *FindCurrentReportNodeConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentReportNodeConfigResponse.ProtoReflect.Descriptor instead.
func (*FindCurrentReportNodeConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{12}
}

func (x *FindCurrentReportNodeConfigResponse) GetReportNodeJSON() []byte {
	if x != nil {
		return x.ReportNodeJSON
	}
	return nil
}

// 读取任务
type FindReportNodeTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindReportNodeTasksRequest) Reset() {
	*x = FindReportNodeTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindReportNodeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindReportNodeTasksRequest) ProtoMessage() {}

func (x *FindReportNodeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindReportNodeTasksRequest.ProtoReflect.Descriptor instead.
func (*FindReportNodeTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{13}
}

type FindReportNodeTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddrTasksJSON []byte `protobuf:"bytes,1,opt,name=ipAddrTasksJSON,proto3" json:"ipAddrTasksJSON,omitempty"`
}

func (x *FindReportNodeTasksResponse) Reset() {
	*x = FindReportNodeTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindReportNodeTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindReportNodeTasksResponse) ProtoMessage() {}

func (x *FindReportNodeTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindReportNodeTasksResponse.ProtoReflect.Descriptor instead.
func (*FindReportNodeTasksResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{14}
}

func (x *FindReportNodeTasksResponse) GetIpAddrTasksJSON() []byte {
	if x != nil {
		return x.IpAddrTasksJSON
	}
	return nil
}

// 取得最新的版本号
type FindLatestReportNodeVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindLatestReportNodeVersionRequest) Reset() {
	*x = FindLatestReportNodeVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestReportNodeVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestReportNodeVersionRequest) ProtoMessage() {}

func (x *FindLatestReportNodeVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestReportNodeVersionRequest.ProtoReflect.Descriptor instead.
func (*FindLatestReportNodeVersionRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{15}
}

type FindLatestReportNodeVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *FindLatestReportNodeVersionResponse) Reset() {
	*x = FindLatestReportNodeVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestReportNodeVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestReportNodeVersionResponse) ProtoMessage() {}

func (x *FindLatestReportNodeVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestReportNodeVersionResponse.ProtoReflect.Descriptor instead.
func (*FindLatestReportNodeVersionResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{16}
}

func (x *FindLatestReportNodeVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// 计算任务数量
type CountAllReportNodeTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role          string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	NodeClusterId int64  `protobuf:"varint,2,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	Type          string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CountAllReportNodeTasksRequest) Reset() {
	*x = CountAllReportNodeTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllReportNodeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllReportNodeTasksRequest) ProtoMessage() {}

func (x *CountAllReportNodeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllReportNodeTasksRequest.ProtoReflect.Descriptor instead.
func (*CountAllReportNodeTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{17}
}

func (x *CountAllReportNodeTasksRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CountAllReportNodeTasksRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CountAllReportNodeTasksRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 列出单页任务
type ListReportNodeTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role          string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	NodeClusterId int64  `protobuf:"varint,2,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	Type          string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Offset        int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListReportNodeTasksRequest) Reset() {
	*x = ListReportNodeTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportNodeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportNodeTasksRequest) ProtoMessage() {}

func (x *ListReportNodeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportNodeTasksRequest.ProtoReflect.Descriptor instead.
func (*ListReportNodeTasksRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{18}
}

func (x *ListReportNodeTasksRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ListReportNodeTasksRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *ListReportNodeTasksRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListReportNodeTasksRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListReportNodeTasksRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListReportNodeTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddrReportTasks []*IPAddrReportTask `protobuf:"bytes,1,rep,name=ipAddrReportTasks,proto3" json:"ipAddrReportTasks,omitempty"`
}

func (x *ListReportNodeTasksResponse) Reset() {
	*x = ListReportNodeTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportNodeTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportNodeTasksResponse) ProtoMessage() {}

func (x *ListReportNodeTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportNodeTasksResponse.ProtoReflect.Descriptor instead.
func (*ListReportNodeTasksResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{19}
}

func (x *ListReportNodeTasksResponse) GetIpAddrReportTasks() []*IPAddrReportTask {
	if x != nil {
		return x.IpAddrReportTasks
	}
	return nil
}

// 修改全局设置
type UpdateReportNodeGlobalSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingJSON []byte `protobuf:"bytes,1,opt,name=settingJSON,proto3" json:"settingJSON,omitempty"`
}

func (x *UpdateReportNodeGlobalSetting) Reset() {
	*x = UpdateReportNodeGlobalSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReportNodeGlobalSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReportNodeGlobalSetting) ProtoMessage() {}

func (x *UpdateReportNodeGlobalSetting) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReportNodeGlobalSetting.ProtoReflect.Descriptor instead.
func (*UpdateReportNodeGlobalSetting) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateReportNodeGlobalSetting) GetSettingJSON() []byte {
	if x != nil {
		return x.SettingJSON
	}
	return nil
}

// 读取全局设置
type ReadReportNodeGlobalSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadReportNodeGlobalSettingRequest) Reset() {
	*x = ReadReportNodeGlobalSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReportNodeGlobalSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReportNodeGlobalSettingRequest) ProtoMessage() {}

func (x *ReadReportNodeGlobalSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReportNodeGlobalSettingRequest.ProtoReflect.Descriptor instead.
func (*ReadReportNodeGlobalSettingRequest) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{21}
}

type ReadReportNodeGlobalSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingJSON []byte `protobuf:"bytes,1,opt,name=settingJSON,proto3" json:"settingJSON,omitempty"`
}

func (x *ReadReportNodeGlobalSettingResponse) Reset() {
	*x = ReadReportNodeGlobalSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_report_node_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReportNodeGlobalSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReportNodeGlobalSettingResponse) ProtoMessage() {}

func (x *ReadReportNodeGlobalSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_report_node_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReportNodeGlobalSettingResponse.ProtoReflect.Descriptor instead.
func (*ReadReportNodeGlobalSettingResponse) Descriptor() ([]byte, []int) {
	return file_service_report_node_proto_rawDescGZIP(), []int{22}
}

func (x *ReadReportNodeGlobalSettingResponse) GetSettingJSON() []byte {
	if x != nil {
		return x.SettingJSON
	}
	return nil
}

var File_service_report_node_proto protoreflect.FileDescriptor

var file_service_report_node_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a,
	0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x49, 0x50, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x49, 0x50, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x22, 0x3e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x50,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x50,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x21, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x52, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x1c,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0x4f, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x24, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x23,
	0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x1c, 0x0a, 0x1a, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x1b, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4a, 0x53,
	0x4f, 0x4e, 0x22, 0x24, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x1e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x61, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x11, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x11, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x41, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47,
	0x0a, 0x23, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x32, 0xc6, 0x0a, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a,
	0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59,
	0x0a, 0x1a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x6c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x66, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x16, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x6e, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6e, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x17, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x1d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x6e, 0x0a, 0x1b, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x26, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_report_node_proto_rawDescOnce sync.Once
	file_service_report_node_proto_rawDescData = file_service_report_node_proto_rawDesc
)

func file_service_report_node_proto_rawDescGZIP() []byte {
	file_service_report_node_proto_rawDescOnce.Do(func() {
		file_service_report_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_report_node_proto_rawDescData)
	})
	return file_service_report_node_proto_rawDescData
}

var file_service_report_node_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_service_report_node_proto_goTypes = []interface{}{
	(*CreateReportNodeRequest)(nil),             // 0: pb.CreateReportNodeRequest
	(*CreateReportNodeResponse)(nil),            // 1: pb.CreateReportNodeResponse
	(*DeleteReportNodeRequest)(nil),             // 2: pb.DeleteReportNodeRequest
	(*UpdateReportNodeRequest)(nil),             // 3: pb.UpdateReportNodeRequest
	(*CountAllEnabledReportNodesRequest)(nil),   // 4: pb.CountAllEnabledReportNodesRequest
	(*ListEnabledReportNodesRequest)(nil),       // 5: pb.ListEnabledReportNodesRequest
	(*ListEnabledReportNodesResponse)(nil),      // 6: pb.ListEnabledReportNodesResponse
	(*FindEnabledReportNodeRequest)(nil),        // 7: pb.FindEnabledReportNodeRequest
	(*FindEnabledReportNodeResponse)(nil),       // 8: pb.FindEnabledReportNodeResponse
	(*ReportNodeStreamMessage)(nil),             // 9: pb.ReportNodeStreamMessage
	(*UpdateReportNodeStatusRequest)(nil),       // 10: pb.UpdateReportNodeStatusRequest
	(*FindCurrentReportNodeConfigRequest)(nil),  // 11: pb.FindCurrentReportNodeConfigRequest
	(*FindCurrentReportNodeConfigResponse)(nil), // 12: pb.FindCurrentReportNodeConfigResponse
	(*FindReportNodeTasksRequest)(nil),          // 13: pb.FindReportNodeTasksRequest
	(*FindReportNodeTasksResponse)(nil),         // 14: pb.FindReportNodeTasksResponse
	(*FindLatestReportNodeVersionRequest)(nil),  // 15: pb.FindLatestReportNodeVersionRequest
	(*FindLatestReportNodeVersionResponse)(nil), // 16: pb.FindLatestReportNodeVersionResponse
	(*CountAllReportNodeTasksRequest)(nil),      // 17: pb.CountAllReportNodeTasksRequest
	(*ListReportNodeTasksRequest)(nil),          // 18: pb.ListReportNodeTasksRequest
	(*ListReportNodeTasksResponse)(nil),         // 19: pb.ListReportNodeTasksResponse
	(*UpdateReportNodeGlobalSetting)(nil),       // 20: pb.UpdateReportNodeGlobalSetting
	(*ReadReportNodeGlobalSettingRequest)(nil),  // 21: pb.ReadReportNodeGlobalSettingRequest
	(*ReadReportNodeGlobalSettingResponse)(nil), // 22: pb.ReadReportNodeGlobalSettingResponse
	(*ReportNode)(nil),                          // 23: pb.ReportNode
	(*IPAddrReportTask)(nil),                    // 24: pb.IPAddrReportTask
	(*RPCSuccess)(nil),                          // 25: pb.RPCSuccess
	(*RPCCountResponse)(nil),                    // 26: pb.RPCCountResponse
}
var file_service_report_node_proto_depIdxs = []int32{
	23, // 0: pb.ListEnabledReportNodesResponse.reportNodes:type_name -> pb.ReportNode
	23, // 1: pb.FindEnabledReportNodeResponse.reportNode:type_name -> pb.ReportNode
	24, // 2: pb.ListReportNodeTasksResponse.ipAddrReportTasks:type_name -> pb.IPAddrReportTask
	0,  // 3: pb.ReportNodeService.createReportNode:input_type -> pb.CreateReportNodeRequest
	2,  // 4: pb.ReportNodeService.deleteReportNode:input_type -> pb.DeleteReportNodeRequest
	3,  // 5: pb.ReportNodeService.updateReportNode:input_type -> pb.UpdateReportNodeRequest
	4,  // 6: pb.ReportNodeService.countAllEnabledReportNodes:input_type -> pb.CountAllEnabledReportNodesRequest
	5,  // 7: pb.ReportNodeService.listEnabledReportNodes:input_type -> pb.ListEnabledReportNodesRequest
	7,  // 8: pb.ReportNodeService.findEnabledReportNode:input_type -> pb.FindEnabledReportNodeRequest
	9,  // 9: pb.ReportNodeService.reportNodeStream:input_type -> pb.ReportNodeStreamMessage
	10, // 10: pb.ReportNodeService.updateReportNodeStatus:input_type -> pb.UpdateReportNodeStatusRequest
	11, // 11: pb.ReportNodeService.findCurrentReportNodeConfig:input_type -> pb.FindCurrentReportNodeConfigRequest
	13, // 12: pb.ReportNodeService.findReportNodeTasks:input_type -> pb.FindReportNodeTasksRequest
	15, // 13: pb.ReportNodeService.findLatestReportNodeVersion:input_type -> pb.FindLatestReportNodeVersionRequest
	17, // 14: pb.ReportNodeService.countAllReportNodeTasks:input_type -> pb.CountAllReportNodeTasksRequest
	18, // 15: pb.ReportNodeService.listReportNodeTasks:input_type -> pb.ListReportNodeTasksRequest
	20, // 16: pb.ReportNodeService.updateReportNodeGlobalSetting:input_type -> pb.UpdateReportNodeGlobalSetting
	21, // 17: pb.ReportNodeService.readReportNodeGlobalSetting:input_type -> pb.ReadReportNodeGlobalSettingRequest
	1,  // 18: pb.ReportNodeService.createReportNode:output_type -> pb.CreateReportNodeResponse
	25, // 19: pb.ReportNodeService.deleteReportNode:output_type -> pb.RPCSuccess
	25, // 20: pb.ReportNodeService.updateReportNode:output_type -> pb.RPCSuccess
	26, // 21: pb.ReportNodeService.countAllEnabledReportNodes:output_type -> pb.RPCCountResponse
	6,  // 22: pb.ReportNodeService.listEnabledReportNodes:output_type -> pb.ListEnabledReportNodesResponse
	8,  // 23: pb.ReportNodeService.findEnabledReportNode:output_type -> pb.FindEnabledReportNodeResponse
	9,  // 24: pb.ReportNodeService.reportNodeStream:output_type -> pb.ReportNodeStreamMessage
	25, // 25: pb.ReportNodeService.updateReportNodeStatus:output_type -> pb.RPCSuccess
	12, // 26: pb.ReportNodeService.findCurrentReportNodeConfig:output_type -> pb.FindCurrentReportNodeConfigResponse
	14, // 27: pb.ReportNodeService.findReportNodeTasks:output_type -> pb.FindReportNodeTasksResponse
	16, // 28: pb.ReportNodeService.findLatestReportNodeVersion:output_type -> pb.FindLatestReportNodeVersionResponse
	26, // 29: pb.ReportNodeService.countAllReportNodeTasks:output_type -> pb.RPCCountResponse
	19, // 30: pb.ReportNodeService.listReportNodeTasks:output_type -> pb.ListReportNodeTasksResponse
	25, // 31: pb.ReportNodeService.updateReportNodeGlobalSetting:output_type -> pb.RPCSuccess
	22, // 32: pb.ReportNodeService.readReportNodeGlobalSetting:output_type -> pb.ReadReportNodeGlobalSettingResponse
	18, // [18:33] is the sub-list for method output_type
	3,  // [3:18] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_report_node_proto_init() }
func file_service_report_node_proto_init() {
	if File_service_report_node_proto != nil {
		return
	}
	file_models_model_report_node_proto_init()
	file_models_model_report_task_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_report_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReportNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReportNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReportNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReportNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledReportNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledReportNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledReportNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledReportNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledReportNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportNodeStreamMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReportNodeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentReportNodeConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentReportNodeConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindReportNodeTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindReportNodeTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestReportNodeVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestReportNodeVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllReportNodeTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportNodeTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportNodeTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReportNodeGlobalSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReportNodeGlobalSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_report_node_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReportNodeGlobalSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_report_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_report_node_proto_goTypes,
		DependencyIndexes: file_service_report_node_proto_depIdxs,
		MessageInfos:      file_service_report_node_proto_msgTypes,
	}.Build()
	File_service_report_node_proto = out.File
	file_service_report_node_proto_rawDesc = nil
	file_service_report_node_proto_goTypes = nil
	file_service_report_node_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportNodeServiceClient is the client API for ReportNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportNodeServiceClient interface {
	// 添加终端
	CreateReportNode(ctx context.Context, in *CreateReportNodeRequest, opts ...grpc.CallOption) (*CreateReportNodeResponse, error)
	// 删除终端
	DeleteReportNode(ctx context.Context, in *DeleteReportNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改终端
	UpdateReportNode(ctx context.Context, in *UpdateReportNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 计算终端数量
	CountAllEnabledReportNodes(ctx context.Context, in *CountAllEnabledReportNodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页终端
	ListEnabledReportNodes(ctx context.Context, in *ListEnabledReportNodesRequest, opts ...grpc.CallOption) (*ListEnabledReportNodesResponse, error)
	// 查找单个终端
	FindEnabledReportNode(ctx context.Context, in *FindEnabledReportNodeRequest, opts ...grpc.CallOption) (*FindEnabledReportNodeResponse, error)
	// 终端stream
	ReportNodeStream(ctx context.Context, opts ...grpc.CallOption) (ReportNodeService_ReportNodeStreamClient, error)
	// 更新节点状态
	UpdateReportNodeStatus(ctx context.Context, in *UpdateReportNodeStatusRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 获取当前节点信息
	FindCurrentReportNodeConfig(ctx context.Context, in *FindCurrentReportNodeConfigRequest, opts ...grpc.CallOption) (*FindCurrentReportNodeConfigResponse, error)
	// 读取任务
	FindReportNodeTasks(ctx context.Context, in *FindReportNodeTasksRequest, opts ...grpc.CallOption) (*FindReportNodeTasksResponse, error)
	// 取得最新的版本号
	FindLatestReportNodeVersion(ctx context.Context, in *FindLatestReportNodeVersionRequest, opts ...grpc.CallOption) (*FindLatestReportNodeVersionResponse, error)
	// 计算任务数量
	CountAllReportNodeTasks(ctx context.Context, in *CountAllReportNodeTasksRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页任务
	ListReportNodeTasks(ctx context.Context, in *ListReportNodeTasksRequest, opts ...grpc.CallOption) (*ListReportNodeTasksResponse, error)
	// 修改全局设置
	UpdateReportNodeGlobalSetting(ctx context.Context, in *UpdateReportNodeGlobalSetting, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 读取全局设置
	ReadReportNodeGlobalSetting(ctx context.Context, in *ReadReportNodeGlobalSettingRequest, opts ...grpc.CallOption) (*ReadReportNodeGlobalSettingResponse, error)
}

type reportNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportNodeServiceClient(cc grpc.ClientConnInterface) ReportNodeServiceClient {
	return &reportNodeServiceClient{cc}
}

func (c *reportNodeServiceClient) CreateReportNode(ctx context.Context, in *CreateReportNodeRequest, opts ...grpc.CallOption) (*CreateReportNodeResponse, error) {
	out := new(CreateReportNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/createReportNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) DeleteReportNode(ctx context.Context, in *DeleteReportNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/deleteReportNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) UpdateReportNode(ctx context.Context, in *UpdateReportNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/updateReportNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) CountAllEnabledReportNodes(ctx context.Context, in *CountAllEnabledReportNodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/countAllEnabledReportNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) ListEnabledReportNodes(ctx context.Context, in *ListEnabledReportNodesRequest, opts ...grpc.CallOption) (*ListEnabledReportNodesResponse, error) {
	out := new(ListEnabledReportNodesResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/listEnabledReportNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) FindEnabledReportNode(ctx context.Context, in *FindEnabledReportNodeRequest, opts ...grpc.CallOption) (*FindEnabledReportNodeResponse, error) {
	out := new(FindEnabledReportNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/findEnabledReportNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) ReportNodeStream(ctx context.Context, opts ...grpc.CallOption) (ReportNodeService_ReportNodeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReportNodeService_serviceDesc.Streams[0], "/pb.ReportNodeService/reportNodeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportNodeServiceReportNodeStreamClient{stream}
	return x, nil
}

type ReportNodeService_ReportNodeStreamClient interface {
	Send(*ReportNodeStreamMessage) error
	Recv() (*ReportNodeStreamMessage, error)
	grpc.ClientStream
}

type reportNodeServiceReportNodeStreamClient struct {
	grpc.ClientStream
}

func (x *reportNodeServiceReportNodeStreamClient) Send(m *ReportNodeStreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reportNodeServiceReportNodeStreamClient) Recv() (*ReportNodeStreamMessage, error) {
	m := new(ReportNodeStreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportNodeServiceClient) UpdateReportNodeStatus(ctx context.Context, in *UpdateReportNodeStatusRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/updateReportNodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) FindCurrentReportNodeConfig(ctx context.Context, in *FindCurrentReportNodeConfigRequest, opts ...grpc.CallOption) (*FindCurrentReportNodeConfigResponse, error) {
	out := new(FindCurrentReportNodeConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/findCurrentReportNodeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) FindReportNodeTasks(ctx context.Context, in *FindReportNodeTasksRequest, opts ...grpc.CallOption) (*FindReportNodeTasksResponse, error) {
	out := new(FindReportNodeTasksResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/findReportNodeTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) FindLatestReportNodeVersion(ctx context.Context, in *FindLatestReportNodeVersionRequest, opts ...grpc.CallOption) (*FindLatestReportNodeVersionResponse, error) {
	out := new(FindLatestReportNodeVersionResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/findLatestReportNodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) CountAllReportNodeTasks(ctx context.Context, in *CountAllReportNodeTasksRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/countAllReportNodeTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) ListReportNodeTasks(ctx context.Context, in *ListReportNodeTasksRequest, opts ...grpc.CallOption) (*ListReportNodeTasksResponse, error) {
	out := new(ListReportNodeTasksResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/listReportNodeTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) UpdateReportNodeGlobalSetting(ctx context.Context, in *UpdateReportNodeGlobalSetting, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/updateReportNodeGlobalSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportNodeServiceClient) ReadReportNodeGlobalSetting(ctx context.Context, in *ReadReportNodeGlobalSettingRequest, opts ...grpc.CallOption) (*ReadReportNodeGlobalSettingResponse, error) {
	out := new(ReadReportNodeGlobalSettingResponse)
	err := c.cc.Invoke(ctx, "/pb.ReportNodeService/readReportNodeGlobalSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportNodeServiceServer is the server API for ReportNodeService service.
type ReportNodeServiceServer interface {
	// 添加终端
	CreateReportNode(context.Context, *CreateReportNodeRequest) (*CreateReportNodeResponse, error)
	// 删除终端
	DeleteReportNode(context.Context, *DeleteReportNodeRequest) (*RPCSuccess, error)
	// 修改终端
	UpdateReportNode(context.Context, *UpdateReportNodeRequest) (*RPCSuccess, error)
	// 计算终端数量
	CountAllEnabledReportNodes(context.Context, *CountAllEnabledReportNodesRequest) (*RPCCountResponse, error)
	// 列出单页终端
	ListEnabledReportNodes(context.Context, *ListEnabledReportNodesRequest) (*ListEnabledReportNodesResponse, error)
	// 查找单个终端
	FindEnabledReportNode(context.Context, *FindEnabledReportNodeRequest) (*FindEnabledReportNodeResponse, error)
	// 终端stream
	ReportNodeStream(ReportNodeService_ReportNodeStreamServer) error
	// 更新节点状态
	UpdateReportNodeStatus(context.Context, *UpdateReportNodeStatusRequest) (*RPCSuccess, error)
	// 获取当前节点信息
	FindCurrentReportNodeConfig(context.Context, *FindCurrentReportNodeConfigRequest) (*FindCurrentReportNodeConfigResponse, error)
	// 读取任务
	FindReportNodeTasks(context.Context, *FindReportNodeTasksRequest) (*FindReportNodeTasksResponse, error)
	// 取得最新的版本号
	FindLatestReportNodeVersion(context.Context, *FindLatestReportNodeVersionRequest) (*FindLatestReportNodeVersionResponse, error)
	// 计算任务数量
	CountAllReportNodeTasks(context.Context, *CountAllReportNodeTasksRequest) (*RPCCountResponse, error)
	// 列出单页任务
	ListReportNodeTasks(context.Context, *ListReportNodeTasksRequest) (*ListReportNodeTasksResponse, error)
	// 修改全局设置
	UpdateReportNodeGlobalSetting(context.Context, *UpdateReportNodeGlobalSetting) (*RPCSuccess, error)
	// 读取全局设置
	ReadReportNodeGlobalSetting(context.Context, *ReadReportNodeGlobalSettingRequest) (*ReadReportNodeGlobalSettingResponse, error)
}

// UnimplementedReportNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportNodeServiceServer struct {
}

func (*UnimplementedReportNodeServiceServer) CreateReportNode(context.Context, *CreateReportNodeRequest) (*CreateReportNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReportNode not implemented")
}
func (*UnimplementedReportNodeServiceServer) DeleteReportNode(context.Context, *DeleteReportNodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReportNode not implemented")
}
func (*UnimplementedReportNodeServiceServer) UpdateReportNode(context.Context, *UpdateReportNodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportNode not implemented")
}
func (*UnimplementedReportNodeServiceServer) CountAllEnabledReportNodes(context.Context, *CountAllEnabledReportNodesRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledReportNodes not implemented")
}
func (*UnimplementedReportNodeServiceServer) ListEnabledReportNodes(context.Context, *ListEnabledReportNodesRequest) (*ListEnabledReportNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledReportNodes not implemented")
}
func (*UnimplementedReportNodeServiceServer) FindEnabledReportNode(context.Context, *FindEnabledReportNodeRequest) (*FindEnabledReportNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledReportNode not implemented")
}
func (*UnimplementedReportNodeServiceServer) ReportNodeStream(ReportNodeService_ReportNodeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportNodeStream not implemented")
}
func (*UnimplementedReportNodeServiceServer) UpdateReportNodeStatus(context.Context, *UpdateReportNodeStatusRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportNodeStatus not implemented")
}
func (*UnimplementedReportNodeServiceServer) FindCurrentReportNodeConfig(context.Context, *FindCurrentReportNodeConfigRequest) (*FindCurrentReportNodeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCurrentReportNodeConfig not implemented")
}
func (*UnimplementedReportNodeServiceServer) FindReportNodeTasks(context.Context, *FindReportNodeTasksRequest) (*FindReportNodeTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindReportNodeTasks not implemented")
}
func (*UnimplementedReportNodeServiceServer) FindLatestReportNodeVersion(context.Context, *FindLatestReportNodeVersionRequest) (*FindLatestReportNodeVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLatestReportNodeVersion not implemented")
}
func (*UnimplementedReportNodeServiceServer) CountAllReportNodeTasks(context.Context, *CountAllReportNodeTasksRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllReportNodeTasks not implemented")
}
func (*UnimplementedReportNodeServiceServer) ListReportNodeTasks(context.Context, *ListReportNodeTasksRequest) (*ListReportNodeTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportNodeTasks not implemented")
}
func (*UnimplementedReportNodeServiceServer) UpdateReportNodeGlobalSetting(context.Context, *UpdateReportNodeGlobalSetting) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportNodeGlobalSetting not implemented")
}
func (*UnimplementedReportNodeServiceServer) ReadReportNodeGlobalSetting(context.Context, *ReadReportNodeGlobalSettingRequest) (*ReadReportNodeGlobalSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadReportNodeGlobalSetting not implemented")
}

func RegisterReportNodeServiceServer(s *grpc.Server, srv ReportNodeServiceServer) {
	s.RegisterService(&_ReportNodeService_serviceDesc, srv)
}

func _ReportNodeService_CreateReportNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).CreateReportNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/CreateReportNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).CreateReportNode(ctx, req.(*CreateReportNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_DeleteReportNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).DeleteReportNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/DeleteReportNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).DeleteReportNode(ctx, req.(*DeleteReportNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_UpdateReportNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).UpdateReportNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/UpdateReportNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).UpdateReportNode(ctx, req.(*UpdateReportNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_CountAllEnabledReportNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledReportNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).CountAllEnabledReportNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/CountAllEnabledReportNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).CountAllEnabledReportNodes(ctx, req.(*CountAllEnabledReportNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_ListEnabledReportNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledReportNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).ListEnabledReportNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/ListEnabledReportNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).ListEnabledReportNodes(ctx, req.(*ListEnabledReportNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_FindEnabledReportNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledReportNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).FindEnabledReportNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/FindEnabledReportNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).FindEnabledReportNode(ctx, req.(*FindEnabledReportNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_ReportNodeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReportNodeServiceServer).ReportNodeStream(&reportNodeServiceReportNodeStreamServer{stream})
}

type ReportNodeService_ReportNodeStreamServer interface {
	Send(*ReportNodeStreamMessage) error
	Recv() (*ReportNodeStreamMessage, error)
	grpc.ServerStream
}

type reportNodeServiceReportNodeStreamServer struct {
	grpc.ServerStream
}

func (x *reportNodeServiceReportNodeStreamServer) Send(m *ReportNodeStreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reportNodeServiceReportNodeStreamServer) Recv() (*ReportNodeStreamMessage, error) {
	m := new(ReportNodeStreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReportNodeService_UpdateReportNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).UpdateReportNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/UpdateReportNodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).UpdateReportNodeStatus(ctx, req.(*UpdateReportNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_FindCurrentReportNodeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCurrentReportNodeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).FindCurrentReportNodeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/FindCurrentReportNodeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).FindCurrentReportNodeConfig(ctx, req.(*FindCurrentReportNodeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_FindReportNodeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindReportNodeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).FindReportNodeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/FindReportNodeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).FindReportNodeTasks(ctx, req.(*FindReportNodeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_FindLatestReportNodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLatestReportNodeVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).FindLatestReportNodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/FindLatestReportNodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).FindLatestReportNodeVersion(ctx, req.(*FindLatestReportNodeVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_CountAllReportNodeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllReportNodeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).CountAllReportNodeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/CountAllReportNodeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).CountAllReportNodeTasks(ctx, req.(*CountAllReportNodeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_ListReportNodeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportNodeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).ListReportNodeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/ListReportNodeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).ListReportNodeTasks(ctx, req.(*ListReportNodeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_UpdateReportNodeGlobalSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportNodeGlobalSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).UpdateReportNodeGlobalSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/UpdateReportNodeGlobalSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).UpdateReportNodeGlobalSetting(ctx, req.(*UpdateReportNodeGlobalSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportNodeService_ReadReportNodeGlobalSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReportNodeGlobalSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportNodeServiceServer).ReadReportNodeGlobalSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReportNodeService/ReadReportNodeGlobalSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportNodeServiceServer).ReadReportNodeGlobalSetting(ctx, req.(*ReadReportNodeGlobalSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ReportNodeService",
	HandlerType: (*ReportNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createReportNode",
			Handler:    _ReportNodeService_CreateReportNode_Handler,
		},
		{
			MethodName: "deleteReportNode",
			Handler:    _ReportNodeService_DeleteReportNode_Handler,
		},
		{
			MethodName: "updateReportNode",
			Handler:    _ReportNodeService_UpdateReportNode_Handler,
		},
		{
			MethodName: "countAllEnabledReportNodes",
			Handler:    _ReportNodeService_CountAllEnabledReportNodes_Handler,
		},
		{
			MethodName: "listEnabledReportNodes",
			Handler:    _ReportNodeService_ListEnabledReportNodes_Handler,
		},
		{
			MethodName: "findEnabledReportNode",
			Handler:    _ReportNodeService_FindEnabledReportNode_Handler,
		},
		{
			MethodName: "updateReportNodeStatus",
			Handler:    _ReportNodeService_UpdateReportNodeStatus_Handler,
		},
		{
			MethodName: "findCurrentReportNodeConfig",
			Handler:    _ReportNodeService_FindCurrentReportNodeConfig_Handler,
		},
		{
			MethodName: "findReportNodeTasks",
			Handler:    _ReportNodeService_FindReportNodeTasks_Handler,
		},
		{
			MethodName: "findLatestReportNodeVersion",
			Handler:    _ReportNodeService_FindLatestReportNodeVersion_Handler,
		},
		{
			MethodName: "countAllReportNodeTasks",
			Handler:    _ReportNodeService_CountAllReportNodeTasks_Handler,
		},
		{
			MethodName: "listReportNodeTasks",
			Handler:    _ReportNodeService_ListReportNodeTasks_Handler,
		},
		{
			MethodName: "updateReportNodeGlobalSetting",
			Handler:    _ReportNodeService_UpdateReportNodeGlobalSetting_Handler,
		},
		{
			MethodName: "readReportNodeGlobalSetting",
			Handler:    _ReportNodeService_ReadReportNodeGlobalSetting_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "reportNodeStream",
			Handler:       _ReportNodeService_ReportNodeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service_report_node.proto",
}
