// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_ns_plan.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建DNS套餐
type CreateNSPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MonthlyPrice float32 `protobuf:"fixed32,2,opt,name=monthlyPrice,proto3" json:"monthlyPrice,omitempty"`
	YearlyPrice  float32 `protobuf:"fixed32,3,opt,name=yearlyPrice,proto3" json:"yearlyPrice,omitempty"`
	ConfigJSON   []byte  `protobuf:"bytes,4,opt,name=configJSON,proto3" json:"configJSON,omitempty"`
}

func (x *CreateNSPlanRequest) Reset() {
	*x = CreateNSPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSPlanRequest) ProtoMessage() {}

func (x *CreateNSPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSPlanRequest.ProtoReflect.Descriptor instead.
func (*CreateNSPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNSPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNSPlanRequest) GetMonthlyPrice() float32 {
	if x != nil {
		return x.MonthlyPrice
	}
	return 0
}

func (x *CreateNSPlanRequest) GetYearlyPrice() float32 {
	if x != nil {
		return x.YearlyPrice
	}
	return 0
}

func (x *CreateNSPlanRequest) GetConfigJSON() []byte {
	if x != nil {
		return x.ConfigJSON
	}
	return nil
}

type CreateNSPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsPlanId int64 `protobuf:"varint,1,opt,name=nsPlanId,proto3" json:"nsPlanId,omitempty"`
}

func (x *CreateNSPlanResponse) Reset() {
	*x = CreateNSPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSPlanResponse) ProtoMessage() {}

func (x *CreateNSPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSPlanResponse.ProtoReflect.Descriptor instead.
func (*CreateNSPlanResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNSPlanResponse) GetNsPlanId() int64 {
	if x != nil {
		return x.NsPlanId
	}
	return 0
}

// 修改DNS套餐
type UpdateNSPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsPlanId     int64   `protobuf:"varint,1,opt,name=nsPlanId,proto3" json:"nsPlanId,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsOn         bool    `protobuf:"varint,3,opt,name=isOn,proto3" json:"isOn,omitempty"`
	MonthlyPrice float32 `protobuf:"fixed32,4,opt,name=monthlyPrice,proto3" json:"monthlyPrice,omitempty"`
	YearlyPrice  float32 `protobuf:"fixed32,5,opt,name=yearlyPrice,proto3" json:"yearlyPrice,omitempty"`
	ConfigJSON   []byte  `protobuf:"bytes,6,opt,name=configJSON,proto3" json:"configJSON,omitempty"`
}

func (x *UpdateNSPlanRequest) Reset() {
	*x = UpdateNSPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSPlanRequest) ProtoMessage() {}

func (x *UpdateNSPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSPlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNSPlanRequest) GetNsPlanId() int64 {
	if x != nil {
		return x.NsPlanId
	}
	return 0
}

func (x *UpdateNSPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNSPlanRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateNSPlanRequest) GetMonthlyPrice() float32 {
	if x != nil {
		return x.MonthlyPrice
	}
	return 0
}

func (x *UpdateNSPlanRequest) GetYearlyPrice() float32 {
	if x != nil {
		return x.YearlyPrice
	}
	return 0
}

func (x *UpdateNSPlanRequest) GetConfigJSON() []byte {
	if x != nil {
		return x.ConfigJSON
	}
	return nil
}

// 修改DNS套餐顺序
type SortNSPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsPlanIds []int64 `protobuf:"varint,1,rep,packed,name=nsPlanIds,proto3" json:"nsPlanIds,omitempty"`
}

func (x *SortNSPlansRequest) Reset() {
	*x = SortNSPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortNSPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortNSPlansRequest) ProtoMessage() {}

func (x *SortNSPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortNSPlansRequest.ProtoReflect.Descriptor instead.
func (*SortNSPlansRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{3}
}

func (x *SortNSPlansRequest) GetNsPlanIds() []int64 {
	if x != nil {
		return x.NsPlanIds
	}
	return nil
}

// 查找所有DNS套餐
type FindAllNSPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllNSPlansRequest) Reset() {
	*x = FindAllNSPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllNSPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllNSPlansRequest) ProtoMessage() {}

func (x *FindAllNSPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllNSPlansRequest.ProtoReflect.Descriptor instead.
func (*FindAllNSPlansRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{4}
}

type FindAllNSPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsPlans []*NSPlan `protobuf:"bytes,1,rep,name=nsPlans,proto3" json:"nsPlans,omitempty"`
}

func (x *FindAllNSPlansResponse) Reset() {
	*x = FindAllNSPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllNSPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllNSPlansResponse) ProtoMessage() {}

func (x *FindAllNSPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllNSPlansResponse.ProtoReflect.Descriptor instead.
func (*FindAllNSPlansResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllNSPlansResponse) GetNsPlans() []*NSPlan {
	if x != nil {
		return x.NsPlans
	}
	return nil
}

// 查找所有可用DNS套餐
type FindAllEnabledNSPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledNSPlansRequest) Reset() {
	*x = FindAllEnabledNSPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNSPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNSPlansRequest) ProtoMessage() {}

func (x *FindAllEnabledNSPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNSPlansRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNSPlansRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{6}
}

type FindAllEnabledNSPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsPlans []*NSPlan `protobuf:"bytes,1,rep,name=nsPlans,proto3" json:"nsPlans,omitempty"`
}

func (x *FindAllEnabledNSPlansResponse) Reset() {
	*x = FindAllEnabledNSPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledNSPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledNSPlansResponse) ProtoMessage() {}

func (x *FindAllEnabledNSPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledNSPlansResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledNSPlansResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{7}
}

func (x *FindAllEnabledNSPlansResponse) GetNsPlans() []*NSPlan {
	if x != nil {
		return x.NsPlans
	}
	return nil
}

// 查找DNS套餐
type FindNSPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsPlanId int64 `protobuf:"varint,1,opt,name=nsPlanId,proto3" json:"nsPlanId,omitempty"`
}

func (x *FindNSPlanRequest) Reset() {
	*x = FindNSPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSPlanRequest) ProtoMessage() {}

func (x *FindNSPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSPlanRequest.ProtoReflect.Descriptor instead.
func (*FindNSPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{8}
}

func (x *FindNSPlanRequest) GetNsPlanId() int64 {
	if x != nil {
		return x.NsPlanId
	}
	return 0
}

type FindNSPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsPlan *NSPlan `protobuf:"bytes,1,opt,name=nsPlan,proto3" json:"nsPlan,omitempty"`
}

func (x *FindNSPlanResponse) Reset() {
	*x = FindNSPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSPlanResponse) ProtoMessage() {}

func (x *FindNSPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSPlanResponse.ProtoReflect.Descriptor instead.
func (*FindNSPlanResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{9}
}

func (x *FindNSPlanResponse) GetNsPlan() *NSPlan {
	if x != nil {
		return x.NsPlan
	}
	return nil
}

// 删除DNS套餐
type DeleteNSPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsPlanId int64 `protobuf:"varint,1,opt,name=nsPlanId,proto3" json:"nsPlanId,omitempty"`
}

func (x *DeleteNSPlanRequest) Reset() {
	*x = DeleteNSPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_plan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNSPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNSPlanRequest) ProtoMessage() {}

func (x *DeleteNSPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_plan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNSPlanRequest.ProtoReflect.Descriptor instead.
func (*DeleteNSPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_plan_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteNSPlanRequest) GetNsPlanId() int64 {
	if x != nil {
		return x.NsPlanId
	}
	return 0
}

var File_service_ns_plan_proto protoreflect.FileDescriptor

var file_service_ns_plan_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x79, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x79, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x32, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x69, 0x73, 0x4f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x79, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x79,
	0x65, 0x61, 0x72, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x32, 0x0a, 0x12, 0x53, 0x6f,
	0x72, 0x74, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x17,
	0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x07, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07,
	0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x6e, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x53, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x2f,
	0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22,
	0x38, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x06, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x31, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x32, 0xe4, 0x03, 0x0a,
	0x0d, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x17,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x10, 0x73, 0x6f,
	0x72, 0x74, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x53,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_service_ns_plan_proto_rawDescOnce sync.Once
	file_service_ns_plan_proto_rawDescData = file_service_ns_plan_proto_rawDesc
)

func file_service_ns_plan_proto_rawDescGZIP() []byte {
	file_service_ns_plan_proto_rawDescOnce.Do(func() {
		file_service_ns_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ns_plan_proto_rawDescData)
	})
	return file_service_ns_plan_proto_rawDescData
}

var file_service_ns_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_service_ns_plan_proto_goTypes = []interface{}{
	(*CreateNSPlanRequest)(nil),           // 0: pb.CreateNSPlanRequest
	(*CreateNSPlanResponse)(nil),          // 1: pb.CreateNSPlanResponse
	(*UpdateNSPlanRequest)(nil),           // 2: pb.UpdateNSPlanRequest
	(*SortNSPlansRequest)(nil),            // 3: pb.SortNSPlansRequest
	(*FindAllNSPlansRequest)(nil),         // 4: pb.FindAllNSPlansRequest
	(*FindAllNSPlansResponse)(nil),        // 5: pb.FindAllNSPlansResponse
	(*FindAllEnabledNSPlansRequest)(nil),  // 6: pb.FindAllEnabledNSPlansRequest
	(*FindAllEnabledNSPlansResponse)(nil), // 7: pb.FindAllEnabledNSPlansResponse
	(*FindNSPlanRequest)(nil),             // 8: pb.FindNSPlanRequest
	(*FindNSPlanResponse)(nil),            // 9: pb.FindNSPlanResponse
	(*DeleteNSPlanRequest)(nil),           // 10: pb.DeleteNSPlanRequest
	(*NSPlan)(nil),                        // 11: pb.NSPlan
	(*RPCSuccess)(nil),                    // 12: pb.RPCSuccess
}
var file_service_ns_plan_proto_depIdxs = []int32{
	11, // 0: pb.FindAllNSPlansResponse.nsPlans:type_name -> pb.NSPlan
	11, // 1: pb.FindAllEnabledNSPlansResponse.nsPlans:type_name -> pb.NSPlan
	11, // 2: pb.FindNSPlanResponse.nsPlan:type_name -> pb.NSPlan
	0,  // 3: pb.NSPlanService.createNSPlan:input_type -> pb.CreateNSPlanRequest
	2,  // 4: pb.NSPlanService.updateNSPlan:input_type -> pb.UpdateNSPlanRequest
	3,  // 5: pb.NSPlanService.sortNSPlanOrders:input_type -> pb.SortNSPlansRequest
	4,  // 6: pb.NSPlanService.findAllNSPlans:input_type -> pb.FindAllNSPlansRequest
	6,  // 7: pb.NSPlanService.findAllEnabledNSPlans:input_type -> pb.FindAllEnabledNSPlansRequest
	8,  // 8: pb.NSPlanService.findNSPlan:input_type -> pb.FindNSPlanRequest
	10, // 9: pb.NSPlanService.deleteNSPlan:input_type -> pb.DeleteNSPlanRequest
	1,  // 10: pb.NSPlanService.createNSPlan:output_type -> pb.CreateNSPlanResponse
	12, // 11: pb.NSPlanService.updateNSPlan:output_type -> pb.RPCSuccess
	12, // 12: pb.NSPlanService.sortNSPlanOrders:output_type -> pb.RPCSuccess
	5,  // 13: pb.NSPlanService.findAllNSPlans:output_type -> pb.FindAllNSPlansResponse
	7,  // 14: pb.NSPlanService.findAllEnabledNSPlans:output_type -> pb.FindAllEnabledNSPlansResponse
	9,  // 15: pb.NSPlanService.findNSPlan:output_type -> pb.FindNSPlanResponse
	12, // 16: pb.NSPlanService.deleteNSPlan:output_type -> pb.RPCSuccess
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_ns_plan_proto_init() }
func file_service_ns_plan_proto_init() {
	if File_service_ns_plan_proto != nil {
		return
	}
	file_models_model_ns_plan_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ns_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortNSPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllNSPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllNSPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNSPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledNSPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_plan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_plan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_plan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNSPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ns_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ns_plan_proto_goTypes,
		DependencyIndexes: file_service_ns_plan_proto_depIdxs,
		MessageInfos:      file_service_ns_plan_proto_msgTypes,
	}.Build()
	File_service_ns_plan_proto = out.File
	file_service_ns_plan_proto_rawDesc = nil
	file_service_ns_plan_proto_goTypes = nil
	file_service_ns_plan_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NSPlanServiceClient is the client API for NSPlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NSPlanServiceClient interface {
	// 创建DNS套餐
	CreateNSPlan(ctx context.Context, in *CreateNSPlanRequest, opts ...grpc.CallOption) (*CreateNSPlanResponse, error)
	// 修改DNS套餐
	UpdateNSPlan(ctx context.Context, in *UpdateNSPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 修改DNS套餐顺序
	SortNSPlanOrders(ctx context.Context, in *SortNSPlansRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找所有DNS套餐
	FindAllNSPlans(ctx context.Context, in *FindAllNSPlansRequest, opts ...grpc.CallOption) (*FindAllNSPlansResponse, error)
	// 查找所有可用DNS套餐
	FindAllEnabledNSPlans(ctx context.Context, in *FindAllEnabledNSPlansRequest, opts ...grpc.CallOption) (*FindAllEnabledNSPlansResponse, error)
	// 查找DNS套餐
	FindNSPlan(ctx context.Context, in *FindNSPlanRequest, opts ...grpc.CallOption) (*FindNSPlanResponse, error)
	// 删除DNS套餐
	DeleteNSPlan(ctx context.Context, in *DeleteNSPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
}

type nSPlanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNSPlanServiceClient(cc grpc.ClientConnInterface) NSPlanServiceClient {
	return &nSPlanServiceClient{cc}
}

func (c *nSPlanServiceClient) CreateNSPlan(ctx context.Context, in *CreateNSPlanRequest, opts ...grpc.CallOption) (*CreateNSPlanResponse, error) {
	out := new(CreateNSPlanResponse)
	err := c.cc.Invoke(ctx, "/pb.NSPlanService/createNSPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSPlanServiceClient) UpdateNSPlan(ctx context.Context, in *UpdateNSPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSPlanService/updateNSPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSPlanServiceClient) SortNSPlanOrders(ctx context.Context, in *SortNSPlansRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSPlanService/sortNSPlanOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSPlanServiceClient) FindAllNSPlans(ctx context.Context, in *FindAllNSPlansRequest, opts ...grpc.CallOption) (*FindAllNSPlansResponse, error) {
	out := new(FindAllNSPlansResponse)
	err := c.cc.Invoke(ctx, "/pb.NSPlanService/findAllNSPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSPlanServiceClient) FindAllEnabledNSPlans(ctx context.Context, in *FindAllEnabledNSPlansRequest, opts ...grpc.CallOption) (*FindAllEnabledNSPlansResponse, error) {
	out := new(FindAllEnabledNSPlansResponse)
	err := c.cc.Invoke(ctx, "/pb.NSPlanService/findAllEnabledNSPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSPlanServiceClient) FindNSPlan(ctx context.Context, in *FindNSPlanRequest, opts ...grpc.CallOption) (*FindNSPlanResponse, error) {
	out := new(FindNSPlanResponse)
	err := c.cc.Invoke(ctx, "/pb.NSPlanService/findNSPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSPlanServiceClient) DeleteNSPlan(ctx context.Context, in *DeleteNSPlanRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSPlanService/deleteNSPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSPlanServiceServer is the server API for NSPlanService service.
type NSPlanServiceServer interface {
	// 创建DNS套餐
	CreateNSPlan(context.Context, *CreateNSPlanRequest) (*CreateNSPlanResponse, error)
	// 修改DNS套餐
	UpdateNSPlan(context.Context, *UpdateNSPlanRequest) (*RPCSuccess, error)
	// 修改DNS套餐顺序
	SortNSPlanOrders(context.Context, *SortNSPlansRequest) (*RPCSuccess, error)
	// 查找所有DNS套餐
	FindAllNSPlans(context.Context, *FindAllNSPlansRequest) (*FindAllNSPlansResponse, error)
	// 查找所有可用DNS套餐
	FindAllEnabledNSPlans(context.Context, *FindAllEnabledNSPlansRequest) (*FindAllEnabledNSPlansResponse, error)
	// 查找DNS套餐
	FindNSPlan(context.Context, *FindNSPlanRequest) (*FindNSPlanResponse, error)
	// 删除DNS套餐
	DeleteNSPlan(context.Context, *DeleteNSPlanRequest) (*RPCSuccess, error)
}

// UnimplementedNSPlanServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNSPlanServiceServer struct {
}

func (*UnimplementedNSPlanServiceServer) CreateNSPlan(context.Context, *CreateNSPlanRequest) (*CreateNSPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNSPlan not implemented")
}
func (*UnimplementedNSPlanServiceServer) UpdateNSPlan(context.Context, *UpdateNSPlanRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNSPlan not implemented")
}
func (*UnimplementedNSPlanServiceServer) SortNSPlanOrders(context.Context, *SortNSPlansRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortNSPlanOrders not implemented")
}
func (*UnimplementedNSPlanServiceServer) FindAllNSPlans(context.Context, *FindAllNSPlansRequest) (*FindAllNSPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllNSPlans not implemented")
}
func (*UnimplementedNSPlanServiceServer) FindAllEnabledNSPlans(context.Context, *FindAllEnabledNSPlansRequest) (*FindAllEnabledNSPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledNSPlans not implemented")
}
func (*UnimplementedNSPlanServiceServer) FindNSPlan(context.Context, *FindNSPlanRequest) (*FindNSPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNSPlan not implemented")
}
func (*UnimplementedNSPlanServiceServer) DeleteNSPlan(context.Context, *DeleteNSPlanRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNSPlan not implemented")
}

func RegisterNSPlanServiceServer(s *grpc.Server, srv NSPlanServiceServer) {
	s.RegisterService(&_NSPlanService_serviceDesc, srv)
}

func _NSPlanService_CreateNSPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNSPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSPlanServiceServer).CreateNSPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSPlanService/CreateNSPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSPlanServiceServer).CreateNSPlan(ctx, req.(*CreateNSPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSPlanService_UpdateNSPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNSPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSPlanServiceServer).UpdateNSPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSPlanService/UpdateNSPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSPlanServiceServer).UpdateNSPlan(ctx, req.(*UpdateNSPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSPlanService_SortNSPlanOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortNSPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSPlanServiceServer).SortNSPlanOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSPlanService/SortNSPlanOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSPlanServiceServer).SortNSPlanOrders(ctx, req.(*SortNSPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSPlanService_FindAllNSPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllNSPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSPlanServiceServer).FindAllNSPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSPlanService/FindAllNSPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSPlanServiceServer).FindAllNSPlans(ctx, req.(*FindAllNSPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSPlanService_FindAllEnabledNSPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledNSPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSPlanServiceServer).FindAllEnabledNSPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSPlanService/FindAllEnabledNSPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSPlanServiceServer).FindAllEnabledNSPlans(ctx, req.(*FindAllEnabledNSPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSPlanService_FindNSPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNSPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSPlanServiceServer).FindNSPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSPlanService/FindNSPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSPlanServiceServer).FindNSPlan(ctx, req.(*FindNSPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSPlanService_DeleteNSPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNSPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSPlanServiceServer).DeleteNSPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSPlanService/DeleteNSPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSPlanServiceServer).DeleteNSPlan(ctx, req.(*DeleteNSPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NSPlanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NSPlanService",
	HandlerType: (*NSPlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNSPlan",
			Handler:    _NSPlanService_CreateNSPlan_Handler,
		},
		{
			MethodName: "updateNSPlan",
			Handler:    _NSPlanService_UpdateNSPlan_Handler,
		},
		{
			MethodName: "sortNSPlanOrders",
			Handler:    _NSPlanService_SortNSPlanOrders_Handler,
		},
		{
			MethodName: "findAllNSPlans",
			Handler:    _NSPlanService_FindAllNSPlans_Handler,
		},
		{
			MethodName: "findAllEnabledNSPlans",
			Handler:    _NSPlanService_FindAllEnabledNSPlans_Handler,
		},
		{
			MethodName: "findNSPlan",
			Handler:    _NSPlanService_FindNSPlan_Handler,
		},
		{
			MethodName: "deleteNSPlan",
			Handler:    _NSPlanService_DeleteNSPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ns_plan.proto",
}
