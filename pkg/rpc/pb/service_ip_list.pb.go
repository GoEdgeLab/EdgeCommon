// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_ip_list.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建IP列表
type CreateIPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code        string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	TimeoutJSON []byte `protobuf:"bytes,4,opt,name=timeoutJSON,proto3" json:"timeoutJSON,omitempty"`
	IsPublic    bool   `protobuf:"varint,5,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	IsGlobal    bool   `protobuf:"varint,7,opt,name=isGlobal,proto3" json:"isGlobal,omitempty"`
	ServerId    int64  `protobuf:"varint,8,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *CreateIPListRequest) Reset() {
	*x = CreateIPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIPListRequest) ProtoMessage() {}

func (x *CreateIPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIPListRequest.ProtoReflect.Descriptor instead.
func (*CreateIPListRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIPListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateIPListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateIPListRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateIPListRequest) GetTimeoutJSON() []byte {
	if x != nil {
		return x.TimeoutJSON
	}
	return nil
}

func (x *CreateIPListRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *CreateIPListRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateIPListRequest) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

func (x *CreateIPListRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type CreateIPListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpListId int64 `protobuf:"varint,1,opt,name=ipListId,proto3" json:"ipListId,omitempty"`
}

func (x *CreateIPListResponse) Reset() {
	*x = CreateIPListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIPListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIPListResponse) ProtoMessage() {}

func (x *CreateIPListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIPListResponse.ProtoReflect.Descriptor instead.
func (*CreateIPListResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIPListResponse) GetIpListId() int64 {
	if x != nil {
		return x.IpListId
	}
	return 0
}

// 修改IP列表
type UpdateIPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpListId    int64  `protobuf:"varint,1,opt,name=ipListId,proto3" json:"ipListId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code        string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	TimeoutJSON []byte `protobuf:"bytes,4,opt,name=timeoutJSON,proto3" json:"timeoutJSON,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateIPListRequest) Reset() {
	*x = UpdateIPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIPListRequest) ProtoMessage() {}

func (x *UpdateIPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIPListRequest.ProtoReflect.Descriptor instead.
func (*UpdateIPListRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateIPListRequest) GetIpListId() int64 {
	if x != nil {
		return x.IpListId
	}
	return 0
}

func (x *UpdateIPListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateIPListRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateIPListRequest) GetTimeoutJSON() []byte {
	if x != nil {
		return x.TimeoutJSON
	}
	return nil
}

func (x *UpdateIPListRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 查找IP列表信息
type FindEnabledIPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpListId int64 `protobuf:"varint,1,opt,name=ipListId,proto3" json:"ipListId,omitempty"`
}

func (x *FindEnabledIPListRequest) Reset() {
	*x = FindEnabledIPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledIPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledIPListRequest) ProtoMessage() {}

func (x *FindEnabledIPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledIPListRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledIPListRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledIPListRequest) GetIpListId() int64 {
	if x != nil {
		return x.IpListId
	}
	return 0
}

type FindEnabledIPListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpList *IPList `protobuf:"bytes,1,opt,name=ipList,proto3" json:"ipList,omitempty"`
}

func (x *FindEnabledIPListResponse) Reset() {
	*x = FindEnabledIPListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledIPListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledIPListResponse) ProtoMessage() {}

func (x *FindEnabledIPListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledIPListResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledIPListResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{4}
}

func (x *FindEnabledIPListResponse) GetIpList() *IPList {
	if x != nil {
		return x.IpList
	}
	return nil
}

// 计算名单数量
type CountAllEnabledIPListsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	IsPublic bool   `protobuf:"varint,2,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Keyword  string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *CountAllEnabledIPListsRequest) Reset() {
	*x = CountAllEnabledIPListsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledIPListsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledIPListsRequest) ProtoMessage() {}

func (x *CountAllEnabledIPListsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledIPListsRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledIPListsRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{5}
}

func (x *CountAllEnabledIPListsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CountAllEnabledIPListsRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *CountAllEnabledIPListsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

// 列出单页名单
type ListEnabledIPListsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	IsPublic bool   `protobuf:"varint,2,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	Keyword  string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Offset   int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Size     int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledIPListsRequest) Reset() {
	*x = ListEnabledIPListsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledIPListsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledIPListsRequest) ProtoMessage() {}

func (x *ListEnabledIPListsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledIPListsRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledIPListsRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{6}
}

func (x *ListEnabledIPListsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListEnabledIPListsRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ListEnabledIPListsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListEnabledIPListsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledIPListsRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledIPListsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLists []*IPList `protobuf:"bytes,1,rep,name=ipLists,proto3" json:"ipLists,omitempty"`
}

func (x *ListEnabledIPListsResponse) Reset() {
	*x = ListEnabledIPListsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledIPListsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledIPListsResponse) ProtoMessage() {}

func (x *ListEnabledIPListsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledIPListsResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledIPListsResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{7}
}

func (x *ListEnabledIPListsResponse) GetIpLists() []*IPList {
	if x != nil {
		return x.IpLists
	}
	return nil
}

// 删除IP名单
type DeleteIPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpListId int64 `protobuf:"varint,1,opt,name=ipListId,proto3" json:"ipListId,omitempty"`
}

func (x *DeleteIPListRequest) Reset() {
	*x = DeleteIPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIPListRequest) ProtoMessage() {}

func (x *DeleteIPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIPListRequest.ProtoReflect.Descriptor instead.
func (*DeleteIPListRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteIPListRequest) GetIpListId() int64 {
	if x != nil {
		return x.IpListId
	}
	return 0
}

// 检查IPList是否存在
type ExistsEnabledIPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpListId int64 `protobuf:"varint,1,opt,name=ipListId,proto3" json:"ipListId,omitempty"`
}

func (x *ExistsEnabledIPListRequest) Reset() {
	*x = ExistsEnabledIPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsEnabledIPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsEnabledIPListRequest) ProtoMessage() {}

func (x *ExistsEnabledIPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsEnabledIPListRequest.ProtoReflect.Descriptor instead.
func (*ExistsEnabledIPListRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{9}
}

func (x *ExistsEnabledIPListRequest) GetIpListId() int64 {
	if x != nil {
		return x.IpListId
	}
	return 0
}

type ExistsEnabledIPListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ExistsEnabledIPListResponse) Reset() {
	*x = ExistsEnabledIPListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsEnabledIPListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsEnabledIPListResponse) ProtoMessage() {}

func (x *ExistsEnabledIPListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsEnabledIPListResponse.ProtoReflect.Descriptor instead.
func (*ExistsEnabledIPListResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{10}
}

func (x *ExistsEnabledIPListResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

// 根据IP来搜索IP名单
type FindEnabledIPListContainsIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *FindEnabledIPListContainsIPRequest) Reset() {
	*x = FindEnabledIPListContainsIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledIPListContainsIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledIPListContainsIPRequest) ProtoMessage() {}

func (x *FindEnabledIPListContainsIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledIPListContainsIPRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledIPListContainsIPRequest) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{11}
}

func (x *FindEnabledIPListContainsIPRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type FindEnabledIPListContainsIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpLists []*IPList `protobuf:"bytes,1,rep,name=ipLists,proto3" json:"ipLists,omitempty"`
}

func (x *FindEnabledIPListContainsIPResponse) Reset() {
	*x = FindEnabledIPListContainsIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ip_list_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledIPListContainsIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledIPListContainsIPResponse) ProtoMessage() {}

func (x *FindEnabledIPListContainsIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ip_list_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledIPListContainsIPResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledIPListContainsIPResponse) Descriptor() ([]byte, []int) {
	return file_service_ip_list_proto_rawDescGZIP(), []int{12}
}

func (x *FindEnabledIPListContainsIPResponse) GetIpLists() []*IPList {
	if x != nil {
		return x.IpLists
	}
	return nil
}

var File_service_ip_list_proto protoreflect.FileDescriptor

var file_service_ip_list_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x53, 0x4f, 0x4e,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x19, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x1d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x42, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x69, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x31,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x38, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x1b, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x34, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x49,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x4b, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x07, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x69, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x32, 0x86, 0x05, 0x0a, 0x0d, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x21, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1d,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x13, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e,
	0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x49, 0x50, 0x12, 0x26, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x49, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06,
	0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_ip_list_proto_rawDescOnce sync.Once
	file_service_ip_list_proto_rawDescData = file_service_ip_list_proto_rawDesc
)

func file_service_ip_list_proto_rawDescGZIP() []byte {
	file_service_ip_list_proto_rawDescOnce.Do(func() {
		file_service_ip_list_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ip_list_proto_rawDescData)
	})
	return file_service_ip_list_proto_rawDescData
}

var file_service_ip_list_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_service_ip_list_proto_goTypes = []interface{}{
	(*CreateIPListRequest)(nil),                 // 0: pb.CreateIPListRequest
	(*CreateIPListResponse)(nil),                // 1: pb.CreateIPListResponse
	(*UpdateIPListRequest)(nil),                 // 2: pb.UpdateIPListRequest
	(*FindEnabledIPListRequest)(nil),            // 3: pb.FindEnabledIPListRequest
	(*FindEnabledIPListResponse)(nil),           // 4: pb.FindEnabledIPListResponse
	(*CountAllEnabledIPListsRequest)(nil),       // 5: pb.CountAllEnabledIPListsRequest
	(*ListEnabledIPListsRequest)(nil),           // 6: pb.ListEnabledIPListsRequest
	(*ListEnabledIPListsResponse)(nil),          // 7: pb.ListEnabledIPListsResponse
	(*DeleteIPListRequest)(nil),                 // 8: pb.DeleteIPListRequest
	(*ExistsEnabledIPListRequest)(nil),          // 9: pb.ExistsEnabledIPListRequest
	(*ExistsEnabledIPListResponse)(nil),         // 10: pb.ExistsEnabledIPListResponse
	(*FindEnabledIPListContainsIPRequest)(nil),  // 11: pb.FindEnabledIPListContainsIPRequest
	(*FindEnabledIPListContainsIPResponse)(nil), // 12: pb.FindEnabledIPListContainsIPResponse
	(*IPList)(nil),                              // 13: pb.IPList
	(*RPCSuccess)(nil),                          // 14: pb.RPCSuccess
	(*RPCCountResponse)(nil),                    // 15: pb.RPCCountResponse
}
var file_service_ip_list_proto_depIdxs = []int32{
	13, // 0: pb.FindEnabledIPListResponse.ipList:type_name -> pb.IPList
	13, // 1: pb.ListEnabledIPListsResponse.ipLists:type_name -> pb.IPList
	13, // 2: pb.FindEnabledIPListContainsIPResponse.ipLists:type_name -> pb.IPList
	0,  // 3: pb.IPListService.createIPList:input_type -> pb.CreateIPListRequest
	2,  // 4: pb.IPListService.updateIPList:input_type -> pb.UpdateIPListRequest
	3,  // 5: pb.IPListService.findEnabledIPList:input_type -> pb.FindEnabledIPListRequest
	5,  // 6: pb.IPListService.countAllEnabledIPLists:input_type -> pb.CountAllEnabledIPListsRequest
	6,  // 7: pb.IPListService.listEnabledIPLists:input_type -> pb.ListEnabledIPListsRequest
	8,  // 8: pb.IPListService.deleteIPList:input_type -> pb.DeleteIPListRequest
	9,  // 9: pb.IPListService.existsEnabledIPList:input_type -> pb.ExistsEnabledIPListRequest
	11, // 10: pb.IPListService.findEnabledIPListContainsIP:input_type -> pb.FindEnabledIPListContainsIPRequest
	1,  // 11: pb.IPListService.createIPList:output_type -> pb.CreateIPListResponse
	14, // 12: pb.IPListService.updateIPList:output_type -> pb.RPCSuccess
	4,  // 13: pb.IPListService.findEnabledIPList:output_type -> pb.FindEnabledIPListResponse
	15, // 14: pb.IPListService.countAllEnabledIPLists:output_type -> pb.RPCCountResponse
	7,  // 15: pb.IPListService.listEnabledIPLists:output_type -> pb.ListEnabledIPListsResponse
	14, // 16: pb.IPListService.deleteIPList:output_type -> pb.RPCSuccess
	10, // 17: pb.IPListService.existsEnabledIPList:output_type -> pb.ExistsEnabledIPListResponse
	12, // 18: pb.IPListService.findEnabledIPListContainsIP:output_type -> pb.FindEnabledIPListContainsIPResponse
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_ip_list_proto_init() }
func file_service_ip_list_proto_init() {
	if File_service_ip_list_proto != nil {
		return
	}
	file_models_rpc_messages_proto_init()
	file_models_model_ip_list_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ip_list_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIPListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledIPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledIPListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledIPListsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledIPListsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledIPListsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsEnabledIPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsEnabledIPListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledIPListContainsIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ip_list_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledIPListContainsIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ip_list_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ip_list_proto_goTypes,
		DependencyIndexes: file_service_ip_list_proto_depIdxs,
		MessageInfos:      file_service_ip_list_proto_msgTypes,
	}.Build()
	File_service_ip_list_proto = out.File
	file_service_ip_list_proto_rawDesc = nil
	file_service_ip_list_proto_goTypes = nil
	file_service_ip_list_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IPListServiceClient is the client API for IPListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPListServiceClient interface {
	// 创建IP列表
	CreateIPList(ctx context.Context, in *CreateIPListRequest, opts ...grpc.CallOption) (*CreateIPListResponse, error)
	// 修改IP列表
	UpdateIPList(ctx context.Context, in *UpdateIPListRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 查找IP列表信息
	FindEnabledIPList(ctx context.Context, in *FindEnabledIPListRequest, opts ...grpc.CallOption) (*FindEnabledIPListResponse, error)
	// 计算名单数量
	CountAllEnabledIPLists(ctx context.Context, in *CountAllEnabledIPListsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页名单
	ListEnabledIPLists(ctx context.Context, in *ListEnabledIPListsRequest, opts ...grpc.CallOption) (*ListEnabledIPListsResponse, error)
	// 删除IP名单
	DeleteIPList(ctx context.Context, in *DeleteIPListRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 检查IPList是否存在
	ExistsEnabledIPList(ctx context.Context, in *ExistsEnabledIPListRequest, opts ...grpc.CallOption) (*ExistsEnabledIPListResponse, error)
	// 根据IP来搜索IP名单
	FindEnabledIPListContainsIP(ctx context.Context, in *FindEnabledIPListContainsIPRequest, opts ...grpc.CallOption) (*FindEnabledIPListContainsIPResponse, error)
}

type iPListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPListServiceClient(cc grpc.ClientConnInterface) IPListServiceClient {
	return &iPListServiceClient{cc}
}

func (c *iPListServiceClient) CreateIPList(ctx context.Context, in *CreateIPListRequest, opts ...grpc.CallOption) (*CreateIPListResponse, error) {
	out := new(CreateIPListResponse)
	err := c.cc.Invoke(ctx, "/pb.IPListService/createIPList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPListServiceClient) UpdateIPList(ctx context.Context, in *UpdateIPListRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.IPListService/updateIPList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPListServiceClient) FindEnabledIPList(ctx context.Context, in *FindEnabledIPListRequest, opts ...grpc.CallOption) (*FindEnabledIPListResponse, error) {
	out := new(FindEnabledIPListResponse)
	err := c.cc.Invoke(ctx, "/pb.IPListService/findEnabledIPList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPListServiceClient) CountAllEnabledIPLists(ctx context.Context, in *CountAllEnabledIPListsRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.IPListService/countAllEnabledIPLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPListServiceClient) ListEnabledIPLists(ctx context.Context, in *ListEnabledIPListsRequest, opts ...grpc.CallOption) (*ListEnabledIPListsResponse, error) {
	out := new(ListEnabledIPListsResponse)
	err := c.cc.Invoke(ctx, "/pb.IPListService/listEnabledIPLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPListServiceClient) DeleteIPList(ctx context.Context, in *DeleteIPListRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.IPListService/deleteIPList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPListServiceClient) ExistsEnabledIPList(ctx context.Context, in *ExistsEnabledIPListRequest, opts ...grpc.CallOption) (*ExistsEnabledIPListResponse, error) {
	out := new(ExistsEnabledIPListResponse)
	err := c.cc.Invoke(ctx, "/pb.IPListService/existsEnabledIPList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPListServiceClient) FindEnabledIPListContainsIP(ctx context.Context, in *FindEnabledIPListContainsIPRequest, opts ...grpc.CallOption) (*FindEnabledIPListContainsIPResponse, error) {
	out := new(FindEnabledIPListContainsIPResponse)
	err := c.cc.Invoke(ctx, "/pb.IPListService/findEnabledIPListContainsIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPListServiceServer is the server API for IPListService service.
type IPListServiceServer interface {
	// 创建IP列表
	CreateIPList(context.Context, *CreateIPListRequest) (*CreateIPListResponse, error)
	// 修改IP列表
	UpdateIPList(context.Context, *UpdateIPListRequest) (*RPCSuccess, error)
	// 查找IP列表信息
	FindEnabledIPList(context.Context, *FindEnabledIPListRequest) (*FindEnabledIPListResponse, error)
	// 计算名单数量
	CountAllEnabledIPLists(context.Context, *CountAllEnabledIPListsRequest) (*RPCCountResponse, error)
	// 列出单页名单
	ListEnabledIPLists(context.Context, *ListEnabledIPListsRequest) (*ListEnabledIPListsResponse, error)
	// 删除IP名单
	DeleteIPList(context.Context, *DeleteIPListRequest) (*RPCSuccess, error)
	// 检查IPList是否存在
	ExistsEnabledIPList(context.Context, *ExistsEnabledIPListRequest) (*ExistsEnabledIPListResponse, error)
	// 根据IP来搜索IP名单
	FindEnabledIPListContainsIP(context.Context, *FindEnabledIPListContainsIPRequest) (*FindEnabledIPListContainsIPResponse, error)
}

// UnimplementedIPListServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIPListServiceServer struct {
}

func (*UnimplementedIPListServiceServer) CreateIPList(context.Context, *CreateIPListRequest) (*CreateIPListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIPList not implemented")
}
func (*UnimplementedIPListServiceServer) UpdateIPList(context.Context, *UpdateIPListRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPList not implemented")
}
func (*UnimplementedIPListServiceServer) FindEnabledIPList(context.Context, *FindEnabledIPListRequest) (*FindEnabledIPListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledIPList not implemented")
}
func (*UnimplementedIPListServiceServer) CountAllEnabledIPLists(context.Context, *CountAllEnabledIPListsRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledIPLists not implemented")
}
func (*UnimplementedIPListServiceServer) ListEnabledIPLists(context.Context, *ListEnabledIPListsRequest) (*ListEnabledIPListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledIPLists not implemented")
}
func (*UnimplementedIPListServiceServer) DeleteIPList(context.Context, *DeleteIPListRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPList not implemented")
}
func (*UnimplementedIPListServiceServer) ExistsEnabledIPList(context.Context, *ExistsEnabledIPListRequest) (*ExistsEnabledIPListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsEnabledIPList not implemented")
}
func (*UnimplementedIPListServiceServer) FindEnabledIPListContainsIP(context.Context, *FindEnabledIPListContainsIPRequest) (*FindEnabledIPListContainsIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledIPListContainsIP not implemented")
}

func RegisterIPListServiceServer(s *grpc.Server, srv IPListServiceServer) {
	s.RegisterService(&_IPListService_serviceDesc, srv)
}

func _IPListService_CreateIPList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIPListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).CreateIPList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IPListService/CreateIPList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).CreateIPList(ctx, req.(*CreateIPListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPListService_UpdateIPList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIPListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).UpdateIPList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IPListService/UpdateIPList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).UpdateIPList(ctx, req.(*UpdateIPListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPListService_FindEnabledIPList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledIPListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).FindEnabledIPList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IPListService/FindEnabledIPList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).FindEnabledIPList(ctx, req.(*FindEnabledIPListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPListService_CountAllEnabledIPLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledIPListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).CountAllEnabledIPLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IPListService/CountAllEnabledIPLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).CountAllEnabledIPLists(ctx, req.(*CountAllEnabledIPListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPListService_ListEnabledIPLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledIPListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).ListEnabledIPLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IPListService/ListEnabledIPLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).ListEnabledIPLists(ctx, req.(*ListEnabledIPListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPListService_DeleteIPList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIPListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).DeleteIPList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IPListService/DeleteIPList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).DeleteIPList(ctx, req.(*DeleteIPListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPListService_ExistsEnabledIPList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsEnabledIPListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).ExistsEnabledIPList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IPListService/ExistsEnabledIPList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).ExistsEnabledIPList(ctx, req.(*ExistsEnabledIPListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPListService_FindEnabledIPListContainsIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledIPListContainsIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).FindEnabledIPListContainsIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IPListService/FindEnabledIPListContainsIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).FindEnabledIPListContainsIP(ctx, req.(*FindEnabledIPListContainsIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPListService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.IPListService",
	HandlerType: (*IPListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createIPList",
			Handler:    _IPListService_CreateIPList_Handler,
		},
		{
			MethodName: "updateIPList",
			Handler:    _IPListService_UpdateIPList_Handler,
		},
		{
			MethodName: "findEnabledIPList",
			Handler:    _IPListService_FindEnabledIPList_Handler,
		},
		{
			MethodName: "countAllEnabledIPLists",
			Handler:    _IPListService_CountAllEnabledIPLists_Handler,
		},
		{
			MethodName: "listEnabledIPLists",
			Handler:    _IPListService_ListEnabledIPLists_Handler,
		},
		{
			MethodName: "deleteIPList",
			Handler:    _IPListService_DeleteIPList_Handler,
		},
		{
			MethodName: "existsEnabledIPList",
			Handler:    _IPListService_ExistsEnabledIPList_Handler,
		},
		{
			MethodName: "findEnabledIPListContainsIP",
			Handler:    _IPListService_FindEnabledIPListContainsIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ip_list.proto",
}
