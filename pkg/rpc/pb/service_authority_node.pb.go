// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_authority_node.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建认证节点
type CreateAuthorityNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsOn        bool   `protobuf:"varint,3,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *CreateAuthorityNodeRequest) Reset() {
	*x = CreateAuthorityNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAuthorityNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuthorityNodeRequest) ProtoMessage() {}

func (x *CreateAuthorityNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuthorityNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateAuthorityNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAuthorityNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAuthorityNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateAuthorityNodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

type CreateAuthorityNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityNodeId int64 `protobuf:"varint,1,opt,name=authorityNodeId,proto3" json:"authorityNodeId,omitempty"`
}

func (x *CreateAuthorityNodeResponse) Reset() {
	*x = CreateAuthorityNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAuthorityNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuthorityNodeResponse) ProtoMessage() {}

func (x *CreateAuthorityNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuthorityNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateAuthorityNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAuthorityNodeResponse) GetAuthorityNodeId() int64 {
	if x != nil {
		return x.AuthorityNodeId
	}
	return 0
}

// 修改认证节点
type UpdateAuthorityNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityNodeId int64  `protobuf:"varint,1,opt,name=authorityNodeId,proto3" json:"authorityNodeId,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IsOn            bool   `protobuf:"varint,4,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateAuthorityNodeRequest) Reset() {
	*x = UpdateAuthorityNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAuthorityNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuthorityNodeRequest) ProtoMessage() {}

func (x *UpdateAuthorityNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuthorityNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateAuthorityNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAuthorityNodeRequest) GetAuthorityNodeId() int64 {
	if x != nil {
		return x.AuthorityNodeId
	}
	return 0
}

func (x *UpdateAuthorityNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAuthorityNodeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateAuthorityNodeRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除认证节点
type DeleteAuthorityNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityNodeId int64 `protobuf:"varint,1,opt,name=authorityNodeId,proto3" json:"authorityNodeId,omitempty"`
}

func (x *DeleteAuthorityNodeRequest) Reset() {
	*x = DeleteAuthorityNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuthorityNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuthorityNodeRequest) ProtoMessage() {}

func (x *DeleteAuthorityNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuthorityNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteAuthorityNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteAuthorityNodeRequest) GetAuthorityNodeId() int64 {
	if x != nil {
		return x.AuthorityNodeId
	}
	return 0
}

// 列出所有可用认证节点
type FindAllEnabledAuthorityNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledAuthorityNodesRequest) Reset() {
	*x = FindAllEnabledAuthorityNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledAuthorityNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledAuthorityNodesRequest) ProtoMessage() {}

func (x *FindAllEnabledAuthorityNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledAuthorityNodesRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledAuthorityNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{4}
}

type FindAllEnabledAuthorityNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityNodes []*AuthorityNode `protobuf:"bytes,1,rep,name=authorityNodes,proto3" json:"authorityNodes,omitempty"`
}

func (x *FindAllEnabledAuthorityNodesResponse) Reset() {
	*x = FindAllEnabledAuthorityNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledAuthorityNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledAuthorityNodesResponse) ProtoMessage() {}

func (x *FindAllEnabledAuthorityNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledAuthorityNodesResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledAuthorityNodesResponse) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllEnabledAuthorityNodesResponse) GetAuthorityNodes() []*AuthorityNode {
	if x != nil {
		return x.AuthorityNodes
	}
	return nil
}

// 计算认证节点数量
type CountAllEnabledAuthorityNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAllEnabledAuthorityNodesRequest) Reset() {
	*x = CountAllEnabledAuthorityNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledAuthorityNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledAuthorityNodesRequest) ProtoMessage() {}

func (x *CountAllEnabledAuthorityNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledAuthorityNodesRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledAuthorityNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{6}
}

// 列出单页的认证节点
type ListEnabledAuthorityNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListEnabledAuthorityNodesRequest) Reset() {
	*x = ListEnabledAuthorityNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledAuthorityNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledAuthorityNodesRequest) ProtoMessage() {}

func (x *ListEnabledAuthorityNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledAuthorityNodesRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledAuthorityNodesRequest) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{7}
}

func (x *ListEnabledAuthorityNodesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledAuthorityNodesRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListEnabledAuthorityNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityNodes []*AuthorityNode `protobuf:"bytes,1,rep,name=authorityNodes,proto3" json:"authorityNodes,omitempty"`
}

func (x *ListEnabledAuthorityNodesResponse) Reset() {
	*x = ListEnabledAuthorityNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledAuthorityNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledAuthorityNodesResponse) ProtoMessage() {}

func (x *ListEnabledAuthorityNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledAuthorityNodesResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledAuthorityNodesResponse) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{8}
}

func (x *ListEnabledAuthorityNodesResponse) GetAuthorityNodes() []*AuthorityNode {
	if x != nil {
		return x.AuthorityNodes
	}
	return nil
}

// 根据ID查找节点
type FindEnabledAuthorityNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityNodeId int64 `protobuf:"varint,1,opt,name=authorityNodeId,proto3" json:"authorityNodeId,omitempty"`
}

func (x *FindEnabledAuthorityNodeRequest) Reset() {
	*x = FindEnabledAuthorityNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledAuthorityNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledAuthorityNodeRequest) ProtoMessage() {}

func (x *FindEnabledAuthorityNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledAuthorityNodeRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledAuthorityNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{9}
}

func (x *FindEnabledAuthorityNodeRequest) GetAuthorityNodeId() int64 {
	if x != nil {
		return x.AuthorityNodeId
	}
	return 0
}

type FindEnabledAuthorityNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityNode *AuthorityNode `protobuf:"bytes,1,opt,name=authorityNode,proto3" json:"authorityNode,omitempty"`
}

func (x *FindEnabledAuthorityNodeResponse) Reset() {
	*x = FindEnabledAuthorityNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledAuthorityNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledAuthorityNodeResponse) ProtoMessage() {}

func (x *FindEnabledAuthorityNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledAuthorityNodeResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledAuthorityNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{10}
}

func (x *FindEnabledAuthorityNodeResponse) GetAuthorityNode() *AuthorityNode {
	if x != nil {
		return x.AuthorityNode
	}
	return nil
}

// 获取当前认证节点
type FindCurrentAuthorityNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindCurrentAuthorityNodeRequest) Reset() {
	*x = FindCurrentAuthorityNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentAuthorityNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentAuthorityNodeRequest) ProtoMessage() {}

func (x *FindCurrentAuthorityNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentAuthorityNodeRequest.ProtoReflect.Descriptor instead.
func (*FindCurrentAuthorityNodeRequest) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{11}
}

type FindCurrentAuthorityNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityNode *AuthorityNode `protobuf:"bytes,1,opt,name=authorityNode,proto3" json:"authorityNode,omitempty"`
}

func (x *FindCurrentAuthorityNodeResponse) Reset() {
	*x = FindCurrentAuthorityNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCurrentAuthorityNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCurrentAuthorityNodeResponse) ProtoMessage() {}

func (x *FindCurrentAuthorityNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCurrentAuthorityNodeResponse.ProtoReflect.Descriptor instead.
func (*FindCurrentAuthorityNodeResponse) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{12}
}

func (x *FindCurrentAuthorityNodeResponse) GetAuthorityNode() *AuthorityNode {
	if x != nil {
		return x.AuthorityNode
	}
	return nil
}

// 更新认证状态
type UpdateAuthorityNodeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityNodeId int64  `protobuf:"varint,1,opt,name=authorityNodeId,proto3" json:"authorityNodeId,omitempty"`
	StatusJSON      []byte `protobuf:"bytes,2,opt,name=statusJSON,proto3" json:"statusJSON,omitempty"`
}

func (x *UpdateAuthorityNodeStatusRequest) Reset() {
	*x = UpdateAuthorityNodeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_authority_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAuthorityNodeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuthorityNodeStatusRequest) ProtoMessage() {}

func (x *UpdateAuthorityNodeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_authority_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuthorityNodeStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateAuthorityNodeStatusRequest) Descriptor() ([]byte, []int) {
	return file_service_authority_node_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateAuthorityNodeStatusRequest) GetAuthorityNodeId() int64 {
	if x != nil {
		return x.AuthorityNodeId
	}
	return 0
}

func (x *UpdateAuthorityNodeStatusRequest) GetStatusJSON() []byte {
	if x != nil {
		return x.StatusJSON
	}
	return nil
}

var File_service_authority_node_proto protoreflect.FileDescriptor

var file_service_authority_node_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x21, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70,
	0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x66, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x22, 0x47, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x69, 0x73, 0x4f, 0x6e, 0x22, 0x46, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x23,
	0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x5e,
	0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x4b,
	0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x20, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x20, 0x46,
	0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x32, 0xdb, 0x06, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x56, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x45,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x71, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x1d, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x6c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69,
	0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_authority_node_proto_rawDescOnce sync.Once
	file_service_authority_node_proto_rawDescData = file_service_authority_node_proto_rawDesc
)

func file_service_authority_node_proto_rawDescGZIP() []byte {
	file_service_authority_node_proto_rawDescOnce.Do(func() {
		file_service_authority_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_authority_node_proto_rawDescData)
	})
	return file_service_authority_node_proto_rawDescData
}

var file_service_authority_node_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_service_authority_node_proto_goTypes = []interface{}{
	(*CreateAuthorityNodeRequest)(nil),           // 0: pb.CreateAuthorityNodeRequest
	(*CreateAuthorityNodeResponse)(nil),          // 1: pb.CreateAuthorityNodeResponse
	(*UpdateAuthorityNodeRequest)(nil),           // 2: pb.UpdateAuthorityNodeRequest
	(*DeleteAuthorityNodeRequest)(nil),           // 3: pb.DeleteAuthorityNodeRequest
	(*FindAllEnabledAuthorityNodesRequest)(nil),  // 4: pb.FindAllEnabledAuthorityNodesRequest
	(*FindAllEnabledAuthorityNodesResponse)(nil), // 5: pb.FindAllEnabledAuthorityNodesResponse
	(*CountAllEnabledAuthorityNodesRequest)(nil), // 6: pb.CountAllEnabledAuthorityNodesRequest
	(*ListEnabledAuthorityNodesRequest)(nil),     // 7: pb.ListEnabledAuthorityNodesRequest
	(*ListEnabledAuthorityNodesResponse)(nil),    // 8: pb.ListEnabledAuthorityNodesResponse
	(*FindEnabledAuthorityNodeRequest)(nil),      // 9: pb.FindEnabledAuthorityNodeRequest
	(*FindEnabledAuthorityNodeResponse)(nil),     // 10: pb.FindEnabledAuthorityNodeResponse
	(*FindCurrentAuthorityNodeRequest)(nil),      // 11: pb.FindCurrentAuthorityNodeRequest
	(*FindCurrentAuthorityNodeResponse)(nil),     // 12: pb.FindCurrentAuthorityNodeResponse
	(*UpdateAuthorityNodeStatusRequest)(nil),     // 13: pb.UpdateAuthorityNodeStatusRequest
	(*AuthorityNode)(nil),                        // 14: pb.AuthorityNode
	(*RPCSuccess)(nil),                           // 15: pb.RPCSuccess
	(*RPCCountResponse)(nil),                     // 16: pb.RPCCountResponse
}
var file_service_authority_node_proto_depIdxs = []int32{
	14, // 0: pb.FindAllEnabledAuthorityNodesResponse.authorityNodes:type_name -> pb.AuthorityNode
	14, // 1: pb.ListEnabledAuthorityNodesResponse.authorityNodes:type_name -> pb.AuthorityNode
	14, // 2: pb.FindEnabledAuthorityNodeResponse.authorityNode:type_name -> pb.AuthorityNode
	14, // 3: pb.FindCurrentAuthorityNodeResponse.authorityNode:type_name -> pb.AuthorityNode
	0,  // 4: pb.AuthorityNodeService.createAuthorityNode:input_type -> pb.CreateAuthorityNodeRequest
	2,  // 5: pb.AuthorityNodeService.updateAuthorityNode:input_type -> pb.UpdateAuthorityNodeRequest
	3,  // 6: pb.AuthorityNodeService.deleteAuthorityNode:input_type -> pb.DeleteAuthorityNodeRequest
	4,  // 7: pb.AuthorityNodeService.findAllEnabledAuthorityNodes:input_type -> pb.FindAllEnabledAuthorityNodesRequest
	6,  // 8: pb.AuthorityNodeService.countAllEnabledAuthorityNodes:input_type -> pb.CountAllEnabledAuthorityNodesRequest
	7,  // 9: pb.AuthorityNodeService.listEnabledAuthorityNodes:input_type -> pb.ListEnabledAuthorityNodesRequest
	9,  // 10: pb.AuthorityNodeService.findEnabledAuthorityNode:input_type -> pb.FindEnabledAuthorityNodeRequest
	11, // 11: pb.AuthorityNodeService.findCurrentAuthorityNode:input_type -> pb.FindCurrentAuthorityNodeRequest
	13, // 12: pb.AuthorityNodeService.updateAuthorityNodeStatus:input_type -> pb.UpdateAuthorityNodeStatusRequest
	1,  // 13: pb.AuthorityNodeService.createAuthorityNode:output_type -> pb.CreateAuthorityNodeResponse
	15, // 14: pb.AuthorityNodeService.updateAuthorityNode:output_type -> pb.RPCSuccess
	15, // 15: pb.AuthorityNodeService.deleteAuthorityNode:output_type -> pb.RPCSuccess
	5,  // 16: pb.AuthorityNodeService.findAllEnabledAuthorityNodes:output_type -> pb.FindAllEnabledAuthorityNodesResponse
	16, // 17: pb.AuthorityNodeService.countAllEnabledAuthorityNodes:output_type -> pb.RPCCountResponse
	8,  // 18: pb.AuthorityNodeService.listEnabledAuthorityNodes:output_type -> pb.ListEnabledAuthorityNodesResponse
	10, // 19: pb.AuthorityNodeService.findEnabledAuthorityNode:output_type -> pb.FindEnabledAuthorityNodeResponse
	12, // 20: pb.AuthorityNodeService.findCurrentAuthorityNode:output_type -> pb.FindCurrentAuthorityNodeResponse
	15, // 21: pb.AuthorityNodeService.updateAuthorityNodeStatus:output_type -> pb.RPCSuccess
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_authority_node_proto_init() }
func file_service_authority_node_proto_init() {
	if File_service_authority_node_proto != nil {
		return
	}
	file_models_model_authority_node_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_authority_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuthorityNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuthorityNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuthorityNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuthorityNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledAuthorityNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledAuthorityNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledAuthorityNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledAuthorityNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledAuthorityNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledAuthorityNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledAuthorityNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentAuthorityNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCurrentAuthorityNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_authority_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuthorityNodeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_authority_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_authority_node_proto_goTypes,
		DependencyIndexes: file_service_authority_node_proto_depIdxs,
		MessageInfos:      file_service_authority_node_proto_msgTypes,
	}.Build()
	File_service_authority_node_proto = out.File
	file_service_authority_node_proto_rawDesc = nil
	file_service_authority_node_proto_goTypes = nil
	file_service_authority_node_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthorityNodeServiceClient is the client API for AuthorityNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorityNodeServiceClient interface {
	// 创建认证节点
	CreateAuthorityNode(ctx context.Context, in *CreateAuthorityNodeRequest, opts ...grpc.CallOption) (*CreateAuthorityNodeResponse, error)
	// 修改认证节点
	UpdateAuthorityNode(ctx context.Context, in *UpdateAuthorityNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除认证节点
	DeleteAuthorityNode(ctx context.Context, in *DeleteAuthorityNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 列出所有可用认证节点
	FindAllEnabledAuthorityNodes(ctx context.Context, in *FindAllEnabledAuthorityNodesRequest, opts ...grpc.CallOption) (*FindAllEnabledAuthorityNodesResponse, error)
	// 计算认证节点数量
	CountAllEnabledAuthorityNodes(ctx context.Context, in *CountAllEnabledAuthorityNodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 列出单页的认证节点
	ListEnabledAuthorityNodes(ctx context.Context, in *ListEnabledAuthorityNodesRequest, opts ...grpc.CallOption) (*ListEnabledAuthorityNodesResponse, error)
	// 根据ID查找节点
	FindEnabledAuthorityNode(ctx context.Context, in *FindEnabledAuthorityNodeRequest, opts ...grpc.CallOption) (*FindEnabledAuthorityNodeResponse, error)
	// 获取当前认证节点信息
	FindCurrentAuthorityNode(ctx context.Context, in *FindCurrentAuthorityNodeRequest, opts ...grpc.CallOption) (*FindCurrentAuthorityNodeResponse, error)
	// 更新节点状态
	UpdateAuthorityNodeStatus(ctx context.Context, in *UpdateAuthorityNodeStatusRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
}

type authorityNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityNodeServiceClient(cc grpc.ClientConnInterface) AuthorityNodeServiceClient {
	return &authorityNodeServiceClient{cc}
}

func (c *authorityNodeServiceClient) CreateAuthorityNode(ctx context.Context, in *CreateAuthorityNodeRequest, opts ...grpc.CallOption) (*CreateAuthorityNodeResponse, error) {
	out := new(CreateAuthorityNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthorityNodeService/createAuthorityNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityNodeServiceClient) UpdateAuthorityNode(ctx context.Context, in *UpdateAuthorityNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.AuthorityNodeService/updateAuthorityNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityNodeServiceClient) DeleteAuthorityNode(ctx context.Context, in *DeleteAuthorityNodeRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.AuthorityNodeService/deleteAuthorityNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityNodeServiceClient) FindAllEnabledAuthorityNodes(ctx context.Context, in *FindAllEnabledAuthorityNodesRequest, opts ...grpc.CallOption) (*FindAllEnabledAuthorityNodesResponse, error) {
	out := new(FindAllEnabledAuthorityNodesResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthorityNodeService/findAllEnabledAuthorityNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityNodeServiceClient) CountAllEnabledAuthorityNodes(ctx context.Context, in *CountAllEnabledAuthorityNodesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthorityNodeService/countAllEnabledAuthorityNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityNodeServiceClient) ListEnabledAuthorityNodes(ctx context.Context, in *ListEnabledAuthorityNodesRequest, opts ...grpc.CallOption) (*ListEnabledAuthorityNodesResponse, error) {
	out := new(ListEnabledAuthorityNodesResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthorityNodeService/listEnabledAuthorityNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityNodeServiceClient) FindEnabledAuthorityNode(ctx context.Context, in *FindEnabledAuthorityNodeRequest, opts ...grpc.CallOption) (*FindEnabledAuthorityNodeResponse, error) {
	out := new(FindEnabledAuthorityNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthorityNodeService/findEnabledAuthorityNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityNodeServiceClient) FindCurrentAuthorityNode(ctx context.Context, in *FindCurrentAuthorityNodeRequest, opts ...grpc.CallOption) (*FindCurrentAuthorityNodeResponse, error) {
	out := new(FindCurrentAuthorityNodeResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthorityNodeService/findCurrentAuthorityNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityNodeServiceClient) UpdateAuthorityNodeStatus(ctx context.Context, in *UpdateAuthorityNodeStatusRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.AuthorityNodeService/updateAuthorityNodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityNodeServiceServer is the server API for AuthorityNodeService service.
type AuthorityNodeServiceServer interface {
	// 创建认证节点
	CreateAuthorityNode(context.Context, *CreateAuthorityNodeRequest) (*CreateAuthorityNodeResponse, error)
	// 修改认证节点
	UpdateAuthorityNode(context.Context, *UpdateAuthorityNodeRequest) (*RPCSuccess, error)
	// 删除认证节点
	DeleteAuthorityNode(context.Context, *DeleteAuthorityNodeRequest) (*RPCSuccess, error)
	// 列出所有可用认证节点
	FindAllEnabledAuthorityNodes(context.Context, *FindAllEnabledAuthorityNodesRequest) (*FindAllEnabledAuthorityNodesResponse, error)
	// 计算认证节点数量
	CountAllEnabledAuthorityNodes(context.Context, *CountAllEnabledAuthorityNodesRequest) (*RPCCountResponse, error)
	// 列出单页的认证节点
	ListEnabledAuthorityNodes(context.Context, *ListEnabledAuthorityNodesRequest) (*ListEnabledAuthorityNodesResponse, error)
	// 根据ID查找节点
	FindEnabledAuthorityNode(context.Context, *FindEnabledAuthorityNodeRequest) (*FindEnabledAuthorityNodeResponse, error)
	// 获取当前认证节点信息
	FindCurrentAuthorityNode(context.Context, *FindCurrentAuthorityNodeRequest) (*FindCurrentAuthorityNodeResponse, error)
	// 更新节点状态
	UpdateAuthorityNodeStatus(context.Context, *UpdateAuthorityNodeStatusRequest) (*RPCSuccess, error)
}

// UnimplementedAuthorityNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthorityNodeServiceServer struct {
}

func (*UnimplementedAuthorityNodeServiceServer) CreateAuthorityNode(context.Context, *CreateAuthorityNodeRequest) (*CreateAuthorityNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthorityNode not implemented")
}
func (*UnimplementedAuthorityNodeServiceServer) UpdateAuthorityNode(context.Context, *UpdateAuthorityNodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthorityNode not implemented")
}
func (*UnimplementedAuthorityNodeServiceServer) DeleteAuthorityNode(context.Context, *DeleteAuthorityNodeRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorityNode not implemented")
}
func (*UnimplementedAuthorityNodeServiceServer) FindAllEnabledAuthorityNodes(context.Context, *FindAllEnabledAuthorityNodesRequest) (*FindAllEnabledAuthorityNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledAuthorityNodes not implemented")
}
func (*UnimplementedAuthorityNodeServiceServer) CountAllEnabledAuthorityNodes(context.Context, *CountAllEnabledAuthorityNodesRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllEnabledAuthorityNodes not implemented")
}
func (*UnimplementedAuthorityNodeServiceServer) ListEnabledAuthorityNodes(context.Context, *ListEnabledAuthorityNodesRequest) (*ListEnabledAuthorityNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnabledAuthorityNodes not implemented")
}
func (*UnimplementedAuthorityNodeServiceServer) FindEnabledAuthorityNode(context.Context, *FindEnabledAuthorityNodeRequest) (*FindEnabledAuthorityNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledAuthorityNode not implemented")
}
func (*UnimplementedAuthorityNodeServiceServer) FindCurrentAuthorityNode(context.Context, *FindCurrentAuthorityNodeRequest) (*FindCurrentAuthorityNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCurrentAuthorityNode not implemented")
}
func (*UnimplementedAuthorityNodeServiceServer) UpdateAuthorityNodeStatus(context.Context, *UpdateAuthorityNodeStatusRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthorityNodeStatus not implemented")
}

func RegisterAuthorityNodeServiceServer(s *grpc.Server, srv AuthorityNodeServiceServer) {
	s.RegisterService(&_AuthorityNodeService_serviceDesc, srv)
}

func _AuthorityNodeService_CreateAuthorityNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorityNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityNodeServiceServer).CreateAuthorityNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityNodeService/CreateAuthorityNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityNodeServiceServer).CreateAuthorityNode(ctx, req.(*CreateAuthorityNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityNodeService_UpdateAuthorityNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorityNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityNodeServiceServer).UpdateAuthorityNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityNodeService/UpdateAuthorityNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityNodeServiceServer).UpdateAuthorityNode(ctx, req.(*UpdateAuthorityNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityNodeService_DeleteAuthorityNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthorityNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityNodeServiceServer).DeleteAuthorityNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityNodeService/DeleteAuthorityNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityNodeServiceServer).DeleteAuthorityNode(ctx, req.(*DeleteAuthorityNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityNodeService_FindAllEnabledAuthorityNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledAuthorityNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityNodeServiceServer).FindAllEnabledAuthorityNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityNodeService/FindAllEnabledAuthorityNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityNodeServiceServer).FindAllEnabledAuthorityNodes(ctx, req.(*FindAllEnabledAuthorityNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityNodeService_CountAllEnabledAuthorityNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllEnabledAuthorityNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityNodeServiceServer).CountAllEnabledAuthorityNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityNodeService/CountAllEnabledAuthorityNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityNodeServiceServer).CountAllEnabledAuthorityNodes(ctx, req.(*CountAllEnabledAuthorityNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityNodeService_ListEnabledAuthorityNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnabledAuthorityNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityNodeServiceServer).ListEnabledAuthorityNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityNodeService/ListEnabledAuthorityNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityNodeServiceServer).ListEnabledAuthorityNodes(ctx, req.(*ListEnabledAuthorityNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityNodeService_FindEnabledAuthorityNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledAuthorityNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityNodeServiceServer).FindEnabledAuthorityNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityNodeService/FindEnabledAuthorityNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityNodeServiceServer).FindEnabledAuthorityNode(ctx, req.(*FindEnabledAuthorityNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityNodeService_FindCurrentAuthorityNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCurrentAuthorityNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityNodeServiceServer).FindCurrentAuthorityNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityNodeService/FindCurrentAuthorityNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityNodeServiceServer).FindCurrentAuthorityNode(ctx, req.(*FindCurrentAuthorityNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityNodeService_UpdateAuthorityNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorityNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityNodeServiceServer).UpdateAuthorityNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthorityNodeService/UpdateAuthorityNodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityNodeServiceServer).UpdateAuthorityNodeStatus(ctx, req.(*UpdateAuthorityNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthorityNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthorityNodeService",
	HandlerType: (*AuthorityNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createAuthorityNode",
			Handler:    _AuthorityNodeService_CreateAuthorityNode_Handler,
		},
		{
			MethodName: "updateAuthorityNode",
			Handler:    _AuthorityNodeService_UpdateAuthorityNode_Handler,
		},
		{
			MethodName: "deleteAuthorityNode",
			Handler:    _AuthorityNodeService_DeleteAuthorityNode_Handler,
		},
		{
			MethodName: "findAllEnabledAuthorityNodes",
			Handler:    _AuthorityNodeService_FindAllEnabledAuthorityNodes_Handler,
		},
		{
			MethodName: "countAllEnabledAuthorityNodes",
			Handler:    _AuthorityNodeService_CountAllEnabledAuthorityNodes_Handler,
		},
		{
			MethodName: "listEnabledAuthorityNodes",
			Handler:    _AuthorityNodeService_ListEnabledAuthorityNodes_Handler,
		},
		{
			MethodName: "findEnabledAuthorityNode",
			Handler:    _AuthorityNodeService_FindEnabledAuthorityNode_Handler,
		},
		{
			MethodName: "findCurrentAuthorityNode",
			Handler:    _AuthorityNodeService_FindCurrentAuthorityNode_Handler,
		},
		{
			MethodName: "updateAuthorityNodeStatus",
			Handler:    _AuthorityNodeService_UpdateAuthorityNodeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_authority_node.proto",
}
