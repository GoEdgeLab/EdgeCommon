// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_region_country.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 查找所有的国家/地区列表
type FindAllEnabledRegionCountriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledRegionCountriesRequest) Reset() {
	*x = FindAllEnabledRegionCountriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledRegionCountriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledRegionCountriesRequest) ProtoMessage() {}

func (x *FindAllEnabledRegionCountriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledRegionCountriesRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledRegionCountriesRequest) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{0}
}

type FindAllEnabledRegionCountriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCountries []*RegionCountry `protobuf:"bytes,1,rep,name=regionCountries,proto3" json:"regionCountries,omitempty"`
}

func (x *FindAllEnabledRegionCountriesResponse) Reset() {
	*x = FindAllEnabledRegionCountriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledRegionCountriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledRegionCountriesResponse) ProtoMessage() {}

func (x *FindAllEnabledRegionCountriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledRegionCountriesResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledRegionCountriesResponse) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{1}
}

func (x *FindAllEnabledRegionCountriesResponse) GetRegionCountries() []*RegionCountry {
	if x != nil {
		return x.RegionCountries
	}
	return nil
}

// 查找单个国家/地区信息
type FindEnabledRegionCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCountryId int64 `protobuf:"varint,1,opt,name=regionCountryId,proto3" json:"regionCountryId,omitempty"`
}

func (x *FindEnabledRegionCountryRequest) Reset() {
	*x = FindEnabledRegionCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledRegionCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledRegionCountryRequest) ProtoMessage() {}

func (x *FindEnabledRegionCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledRegionCountryRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledRegionCountryRequest) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{2}
}

func (x *FindEnabledRegionCountryRequest) GetRegionCountryId() int64 {
	if x != nil {
		return x.RegionCountryId
	}
	return 0
}

type FindEnabledRegionCountryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCountry *RegionCountry `protobuf:"bytes,1,opt,name=regionCountry,proto3" json:"regionCountry,omitempty"`
}

func (x *FindEnabledRegionCountryResponse) Reset() {
	*x = FindEnabledRegionCountryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledRegionCountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledRegionCountryResponse) ProtoMessage() {}

func (x *FindEnabledRegionCountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledRegionCountryResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledRegionCountryResponse) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledRegionCountryResponse) GetRegionCountry() *RegionCountry {
	if x != nil {
		return x.RegionCountry
	}
	return nil
}

// 查找所有的国家/地区列表
type FindAllRegionCountriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllRegionCountriesRequest) Reset() {
	*x = FindAllRegionCountriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllRegionCountriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllRegionCountriesRequest) ProtoMessage() {}

func (x *FindAllRegionCountriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllRegionCountriesRequest.ProtoReflect.Descriptor instead.
func (*FindAllRegionCountriesRequest) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{4}
}

type FindAllRegionCountriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCountries []*RegionCountry `protobuf:"bytes,1,rep,name=regionCountries,proto3" json:"regionCountries,omitempty"`
}

func (x *FindAllRegionCountriesResponse) Reset() {
	*x = FindAllRegionCountriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllRegionCountriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllRegionCountriesResponse) ProtoMessage() {}

func (x *FindAllRegionCountriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllRegionCountriesResponse.ProtoReflect.Descriptor instead.
func (*FindAllRegionCountriesResponse) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{5}
}

func (x *FindAllRegionCountriesResponse) GetRegionCountries() []*RegionCountry {
	if x != nil {
		return x.RegionCountries
	}
	return nil
}

// 查找单个国家/地区信息
type FindRegionCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCountryId int64 `protobuf:"varint,1,opt,name=regionCountryId,proto3" json:"regionCountryId,omitempty"`
}

func (x *FindRegionCountryRequest) Reset() {
	*x = FindRegionCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRegionCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRegionCountryRequest) ProtoMessage() {}

func (x *FindRegionCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRegionCountryRequest.ProtoReflect.Descriptor instead.
func (*FindRegionCountryRequest) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{6}
}

func (x *FindRegionCountryRequest) GetRegionCountryId() int64 {
	if x != nil {
		return x.RegionCountryId
	}
	return 0
}

type FindRegionCountryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCountry *RegionCountry `protobuf:"bytes,1,opt,name=regionCountry,proto3" json:"regionCountry,omitempty"`
}

func (x *FindRegionCountryResponse) Reset() {
	*x = FindRegionCountryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRegionCountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRegionCountryResponse) ProtoMessage() {}

func (x *FindRegionCountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRegionCountryResponse.ProtoReflect.Descriptor instead.
func (*FindRegionCountryResponse) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{7}
}

func (x *FindRegionCountryResponse) GetRegionCountry() *RegionCountry {
	if x != nil {
		return x.RegionCountry
	}
	return nil
}

// 修改国家/地区定制信息
type UpdateRegionCountryCustomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCountryId int64    `protobuf:"varint,1,opt,name=regionCountryId,proto3" json:"regionCountryId,omitempty"`
	CustomName      string   `protobuf:"bytes,2,opt,name=customName,proto3" json:"customName,omitempty"`
	CustomCodes     []string `protobuf:"bytes,3,rep,name=customCodes,proto3" json:"customCodes,omitempty"`
}

func (x *UpdateRegionCountryCustomRequest) Reset() {
	*x = UpdateRegionCountryCustomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegionCountryCustomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegionCountryCustomRequest) ProtoMessage() {}

func (x *UpdateRegionCountryCustomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegionCountryCustomRequest.ProtoReflect.Descriptor instead.
func (*UpdateRegionCountryCustomRequest) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRegionCountryCustomRequest) GetRegionCountryId() int64 {
	if x != nil {
		return x.RegionCountryId
	}
	return 0
}

func (x *UpdateRegionCountryCustomRequest) GetCustomName() string {
	if x != nil {
		return x.CustomName
	}
	return ""
}

func (x *UpdateRegionCountryCustomRequest) GetCustomCodes() []string {
	if x != nil {
		return x.CustomCodes
	}
	return nil
}

var File_service_region_country_proto protoreflect.FileDescriptor

var file_service_region_country_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x21, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70,
	0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x26, 0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4b,
	0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x20, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x1e, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x54,
	0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x83, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79,
	0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x28, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x6a, 0x0a, 0x18, 0x66, 0x69, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_region_country_proto_rawDescOnce sync.Once
	file_service_region_country_proto_rawDescData = file_service_region_country_proto_rawDesc
)

func file_service_region_country_proto_rawDescGZIP() []byte {
	file_service_region_country_proto_rawDescOnce.Do(func() {
		file_service_region_country_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_region_country_proto_rawDescData)
	})
	return file_service_region_country_proto_rawDescData
}

var file_service_region_country_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_region_country_proto_goTypes = []interface{}{
	(*FindAllEnabledRegionCountriesRequest)(nil),  // 0: pb.FindAllEnabledRegionCountriesRequest
	(*FindAllEnabledRegionCountriesResponse)(nil), // 1: pb.FindAllEnabledRegionCountriesResponse
	(*FindEnabledRegionCountryRequest)(nil),       // 2: pb.FindEnabledRegionCountryRequest
	(*FindEnabledRegionCountryResponse)(nil),      // 3: pb.FindEnabledRegionCountryResponse
	(*FindAllRegionCountriesRequest)(nil),         // 4: pb.FindAllRegionCountriesRequest
	(*FindAllRegionCountriesResponse)(nil),        // 5: pb.FindAllRegionCountriesResponse
	(*FindRegionCountryRequest)(nil),              // 6: pb.FindRegionCountryRequest
	(*FindRegionCountryResponse)(nil),             // 7: pb.FindRegionCountryResponse
	(*UpdateRegionCountryCustomRequest)(nil),      // 8: pb.UpdateRegionCountryCustomRequest
	(*RegionCountry)(nil),                         // 9: pb.RegionCountry
	(*RPCSuccess)(nil),                            // 10: pb.RPCSuccess
}
var file_service_region_country_proto_depIdxs = []int32{
	9,  // 0: pb.FindAllEnabledRegionCountriesResponse.regionCountries:type_name -> pb.RegionCountry
	9,  // 1: pb.FindEnabledRegionCountryResponse.regionCountry:type_name -> pb.RegionCountry
	9,  // 2: pb.FindAllRegionCountriesResponse.regionCountries:type_name -> pb.RegionCountry
	9,  // 3: pb.FindRegionCountryResponse.regionCountry:type_name -> pb.RegionCountry
	0,  // 4: pb.RegionCountryService.findAllEnabledRegionCountries:input_type -> pb.FindAllEnabledRegionCountriesRequest
	2,  // 5: pb.RegionCountryService.findEnabledRegionCountry:input_type -> pb.FindEnabledRegionCountryRequest
	4,  // 6: pb.RegionCountryService.findAllRegionCountries:input_type -> pb.FindAllRegionCountriesRequest
	6,  // 7: pb.RegionCountryService.findRegionCountry:input_type -> pb.FindRegionCountryRequest
	8,  // 8: pb.RegionCountryService.updateRegionCountryCustom:input_type -> pb.UpdateRegionCountryCustomRequest
	1,  // 9: pb.RegionCountryService.findAllEnabledRegionCountries:output_type -> pb.FindAllEnabledRegionCountriesResponse
	3,  // 10: pb.RegionCountryService.findEnabledRegionCountry:output_type -> pb.FindEnabledRegionCountryResponse
	5,  // 11: pb.RegionCountryService.findAllRegionCountries:output_type -> pb.FindAllRegionCountriesResponse
	7,  // 12: pb.RegionCountryService.findRegionCountry:output_type -> pb.FindRegionCountryResponse
	10, // 13: pb.RegionCountryService.updateRegionCountryCustom:output_type -> pb.RPCSuccess
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_region_country_proto_init() }
func file_service_region_country_proto_init() {
	if File_service_region_country_proto != nil {
		return
	}
	file_models_model_region_country_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_region_country_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledRegionCountriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledRegionCountriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledRegionCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledRegionCountryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllRegionCountriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllRegionCountriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRegionCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRegionCountryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegionCountryCustomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_region_country_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_region_country_proto_goTypes,
		DependencyIndexes: file_service_region_country_proto_depIdxs,
		MessageInfos:      file_service_region_country_proto_msgTypes,
	}.Build()
	File_service_region_country_proto = out.File
	file_service_region_country_proto_rawDesc = nil
	file_service_region_country_proto_goTypes = nil
	file_service_region_country_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegionCountryServiceClient is the client API for RegionCountryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegionCountryServiceClient interface {
	// Deprecated: Do not use.
	// 查找所有的国家/地区列表
	FindAllEnabledRegionCountries(ctx context.Context, in *FindAllEnabledRegionCountriesRequest, opts ...grpc.CallOption) (*FindAllEnabledRegionCountriesResponse, error)
	// Deprecated: Do not use.
	// 查找单个国家/地区信息
	FindEnabledRegionCountry(ctx context.Context, in *FindEnabledRegionCountryRequest, opts ...grpc.CallOption) (*FindEnabledRegionCountryResponse, error)
	// 查找所有的国家/地区列表
	FindAllRegionCountries(ctx context.Context, in *FindAllRegionCountriesRequest, opts ...grpc.CallOption) (*FindAllRegionCountriesResponse, error)
	// 查找单个国家/地区信息
	FindRegionCountry(ctx context.Context, in *FindRegionCountryRequest, opts ...grpc.CallOption) (*FindRegionCountryResponse, error)
	// 修改国家/地区定制信息
	UpdateRegionCountryCustom(ctx context.Context, in *UpdateRegionCountryCustomRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
}

type regionCountryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionCountryServiceClient(cc grpc.ClientConnInterface) RegionCountryServiceClient {
	return &regionCountryServiceClient{cc}
}

// Deprecated: Do not use.
func (c *regionCountryServiceClient) FindAllEnabledRegionCountries(ctx context.Context, in *FindAllEnabledRegionCountriesRequest, opts ...grpc.CallOption) (*FindAllEnabledRegionCountriesResponse, error) {
	out := new(FindAllEnabledRegionCountriesResponse)
	err := c.cc.Invoke(ctx, "/pb.RegionCountryService/findAllEnabledRegionCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *regionCountryServiceClient) FindEnabledRegionCountry(ctx context.Context, in *FindEnabledRegionCountryRequest, opts ...grpc.CallOption) (*FindEnabledRegionCountryResponse, error) {
	out := new(FindEnabledRegionCountryResponse)
	err := c.cc.Invoke(ctx, "/pb.RegionCountryService/findEnabledRegionCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionCountryServiceClient) FindAllRegionCountries(ctx context.Context, in *FindAllRegionCountriesRequest, opts ...grpc.CallOption) (*FindAllRegionCountriesResponse, error) {
	out := new(FindAllRegionCountriesResponse)
	err := c.cc.Invoke(ctx, "/pb.RegionCountryService/findAllRegionCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionCountryServiceClient) FindRegionCountry(ctx context.Context, in *FindRegionCountryRequest, opts ...grpc.CallOption) (*FindRegionCountryResponse, error) {
	out := new(FindRegionCountryResponse)
	err := c.cc.Invoke(ctx, "/pb.RegionCountryService/findRegionCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionCountryServiceClient) UpdateRegionCountryCustom(ctx context.Context, in *UpdateRegionCountryCustomRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.RegionCountryService/updateRegionCountryCustom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionCountryServiceServer is the server API for RegionCountryService service.
type RegionCountryServiceServer interface {
	// Deprecated: Do not use.
	// 查找所有的国家/地区列表
	FindAllEnabledRegionCountries(context.Context, *FindAllEnabledRegionCountriesRequest) (*FindAllEnabledRegionCountriesResponse, error)
	// Deprecated: Do not use.
	// 查找单个国家/地区信息
	FindEnabledRegionCountry(context.Context, *FindEnabledRegionCountryRequest) (*FindEnabledRegionCountryResponse, error)
	// 查找所有的国家/地区列表
	FindAllRegionCountries(context.Context, *FindAllRegionCountriesRequest) (*FindAllRegionCountriesResponse, error)
	// 查找单个国家/地区信息
	FindRegionCountry(context.Context, *FindRegionCountryRequest) (*FindRegionCountryResponse, error)
	// 修改国家/地区定制信息
	UpdateRegionCountryCustom(context.Context, *UpdateRegionCountryCustomRequest) (*RPCSuccess, error)
}

// UnimplementedRegionCountryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegionCountryServiceServer struct {
}

func (*UnimplementedRegionCountryServiceServer) FindAllEnabledRegionCountries(context.Context, *FindAllEnabledRegionCountriesRequest) (*FindAllEnabledRegionCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledRegionCountries not implemented")
}
func (*UnimplementedRegionCountryServiceServer) FindEnabledRegionCountry(context.Context, *FindEnabledRegionCountryRequest) (*FindEnabledRegionCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledRegionCountry not implemented")
}
func (*UnimplementedRegionCountryServiceServer) FindAllRegionCountries(context.Context, *FindAllRegionCountriesRequest) (*FindAllRegionCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllRegionCountries not implemented")
}
func (*UnimplementedRegionCountryServiceServer) FindRegionCountry(context.Context, *FindRegionCountryRequest) (*FindRegionCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRegionCountry not implemented")
}
func (*UnimplementedRegionCountryServiceServer) UpdateRegionCountryCustom(context.Context, *UpdateRegionCountryCustomRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegionCountryCustom not implemented")
}

func RegisterRegionCountryServiceServer(s *grpc.Server, srv RegionCountryServiceServer) {
	s.RegisterService(&_RegionCountryService_serviceDesc, srv)
}

func _RegionCountryService_FindAllEnabledRegionCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledRegionCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionCountryServiceServer).FindAllEnabledRegionCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionCountryService/FindAllEnabledRegionCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionCountryServiceServer).FindAllEnabledRegionCountries(ctx, req.(*FindAllEnabledRegionCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionCountryService_FindEnabledRegionCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledRegionCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionCountryServiceServer).FindEnabledRegionCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionCountryService/FindEnabledRegionCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionCountryServiceServer).FindEnabledRegionCountry(ctx, req.(*FindEnabledRegionCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionCountryService_FindAllRegionCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllRegionCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionCountryServiceServer).FindAllRegionCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionCountryService/FindAllRegionCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionCountryServiceServer).FindAllRegionCountries(ctx, req.(*FindAllRegionCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionCountryService_FindRegionCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRegionCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionCountryServiceServer).FindRegionCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionCountryService/FindRegionCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionCountryServiceServer).FindRegionCountry(ctx, req.(*FindRegionCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionCountryService_UpdateRegionCountryCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegionCountryCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionCountryServiceServer).UpdateRegionCountryCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionCountryService/UpdateRegionCountryCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionCountryServiceServer).UpdateRegionCountryCustom(ctx, req.(*UpdateRegionCountryCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegionCountryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RegionCountryService",
	HandlerType: (*RegionCountryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findAllEnabledRegionCountries",
			Handler:    _RegionCountryService_FindAllEnabledRegionCountries_Handler,
		},
		{
			MethodName: "findEnabledRegionCountry",
			Handler:    _RegionCountryService_FindEnabledRegionCountry_Handler,
		},
		{
			MethodName: "findAllRegionCountries",
			Handler:    _RegionCountryService_FindAllRegionCountries_Handler,
		},
		{
			MethodName: "findRegionCountry",
			Handler:    _RegionCountryService_FindRegionCountry_Handler,
		},
		{
			MethodName: "updateRegionCountryCustom",
			Handler:    _RegionCountryService_UpdateRegionCountryCustom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_region_country.proto",
}
