// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: service_region_country.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 查找所有的国家列表
type FindAllEnabledRegionCountriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllEnabledRegionCountriesRequest) Reset() {
	*x = FindAllEnabledRegionCountriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledRegionCountriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledRegionCountriesRequest) ProtoMessage() {}

func (x *FindAllEnabledRegionCountriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledRegionCountriesRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledRegionCountriesRequest) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{0}
}

type FindAllEnabledRegionCountriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Countries []*RegionCountry `protobuf:"bytes,1,rep,name=countries,proto3" json:"countries,omitempty"`
}

func (x *FindAllEnabledRegionCountriesResponse) Reset() {
	*x = FindAllEnabledRegionCountriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledRegionCountriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledRegionCountriesResponse) ProtoMessage() {}

func (x *FindAllEnabledRegionCountriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledRegionCountriesResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledRegionCountriesResponse) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{1}
}

func (x *FindAllEnabledRegionCountriesResponse) GetCountries() []*RegionCountry {
	if x != nil {
		return x.Countries
	}
	return nil
}

// 查找单个国家信息
type FindEnabledRegionCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryId int64 `protobuf:"varint,1,opt,name=countryId,proto3" json:"countryId,omitempty"`
}

func (x *FindEnabledRegionCountryRequest) Reset() {
	*x = FindEnabledRegionCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledRegionCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledRegionCountryRequest) ProtoMessage() {}

func (x *FindEnabledRegionCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledRegionCountryRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledRegionCountryRequest) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{2}
}

func (x *FindEnabledRegionCountryRequest) GetCountryId() int64 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

type FindEnabledRegionCountryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country *RegionCountry `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *FindEnabledRegionCountryResponse) Reset() {
	*x = FindEnabledRegionCountryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_region_country_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledRegionCountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledRegionCountryResponse) ProtoMessage() {}

func (x *FindEnabledRegionCountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_region_country_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledRegionCountryResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledRegionCountryResponse) Descriptor() ([]byte, []int) {
	return file_service_region_country_proto_rawDescGZIP(), []int{3}
}

func (x *FindEnabledRegionCountryResponse) GetCountry() *RegionCountry {
	if x != nil {
		return x.Country
	}
	return nil
}

var File_service_region_country_proto protoreflect.FileDescriptor

var file_service_region_country_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x1a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26,
	0x0a, 0x24, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x3f, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x22, 0x4f, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x32, 0xf3, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x66,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_region_country_proto_rawDescOnce sync.Once
	file_service_region_country_proto_rawDescData = file_service_region_country_proto_rawDesc
)

func file_service_region_country_proto_rawDescGZIP() []byte {
	file_service_region_country_proto_rawDescOnce.Do(func() {
		file_service_region_country_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_region_country_proto_rawDescData)
	})
	return file_service_region_country_proto_rawDescData
}

var file_service_region_country_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_service_region_country_proto_goTypes = []interface{}{
	(*FindAllEnabledRegionCountriesRequest)(nil),  // 0: pb.FindAllEnabledRegionCountriesRequest
	(*FindAllEnabledRegionCountriesResponse)(nil), // 1: pb.FindAllEnabledRegionCountriesResponse
	(*FindEnabledRegionCountryRequest)(nil),       // 2: pb.FindEnabledRegionCountryRequest
	(*FindEnabledRegionCountryResponse)(nil),      // 3: pb.FindEnabledRegionCountryResponse
	(*RegionCountry)(nil),                         // 4: pb.RegionCountry
}
var file_service_region_country_proto_depIdxs = []int32{
	4, // 0: pb.FindAllEnabledRegionCountriesResponse.countries:type_name -> pb.RegionCountry
	4, // 1: pb.FindEnabledRegionCountryResponse.country:type_name -> pb.RegionCountry
	0, // 2: pb.RegionCountryService.findAllEnabledRegionCountries:input_type -> pb.FindAllEnabledRegionCountriesRequest
	2, // 3: pb.RegionCountryService.findEnabledRegionCountry:input_type -> pb.FindEnabledRegionCountryRequest
	1, // 4: pb.RegionCountryService.findAllEnabledRegionCountries:output_type -> pb.FindAllEnabledRegionCountriesResponse
	3, // 5: pb.RegionCountryService.findEnabledRegionCountry:output_type -> pb.FindEnabledRegionCountryResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_service_region_country_proto_init() }
func file_service_region_country_proto_init() {
	if File_service_region_country_proto != nil {
		return
	}
	file_model_region_country_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_region_country_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledRegionCountriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledRegionCountriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledRegionCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_region_country_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledRegionCountryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_region_country_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_region_country_proto_goTypes,
		DependencyIndexes: file_service_region_country_proto_depIdxs,
		MessageInfos:      file_service_region_country_proto_msgTypes,
	}.Build()
	File_service_region_country_proto = out.File
	file_service_region_country_proto_rawDesc = nil
	file_service_region_country_proto_goTypes = nil
	file_service_region_country_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegionCountryServiceClient is the client API for RegionCountryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegionCountryServiceClient interface {
	// 查找所有的国家列表
	FindAllEnabledRegionCountries(ctx context.Context, in *FindAllEnabledRegionCountriesRequest, opts ...grpc.CallOption) (*FindAllEnabledRegionCountriesResponse, error)
	// 查找单个国家信息
	FindEnabledRegionCountry(ctx context.Context, in *FindEnabledRegionCountryRequest, opts ...grpc.CallOption) (*FindEnabledRegionCountryResponse, error)
}

type regionCountryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionCountryServiceClient(cc grpc.ClientConnInterface) RegionCountryServiceClient {
	return &regionCountryServiceClient{cc}
}

func (c *regionCountryServiceClient) FindAllEnabledRegionCountries(ctx context.Context, in *FindAllEnabledRegionCountriesRequest, opts ...grpc.CallOption) (*FindAllEnabledRegionCountriesResponse, error) {
	out := new(FindAllEnabledRegionCountriesResponse)
	err := c.cc.Invoke(ctx, "/pb.RegionCountryService/findAllEnabledRegionCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionCountryServiceClient) FindEnabledRegionCountry(ctx context.Context, in *FindEnabledRegionCountryRequest, opts ...grpc.CallOption) (*FindEnabledRegionCountryResponse, error) {
	out := new(FindEnabledRegionCountryResponse)
	err := c.cc.Invoke(ctx, "/pb.RegionCountryService/findEnabledRegionCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionCountryServiceServer is the server API for RegionCountryService service.
type RegionCountryServiceServer interface {
	// 查找所有的国家列表
	FindAllEnabledRegionCountries(context.Context, *FindAllEnabledRegionCountriesRequest) (*FindAllEnabledRegionCountriesResponse, error)
	// 查找单个国家信息
	FindEnabledRegionCountry(context.Context, *FindEnabledRegionCountryRequest) (*FindEnabledRegionCountryResponse, error)
}

// UnimplementedRegionCountryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegionCountryServiceServer struct {
}

func (*UnimplementedRegionCountryServiceServer) FindAllEnabledRegionCountries(context.Context, *FindAllEnabledRegionCountriesRequest) (*FindAllEnabledRegionCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllEnabledRegionCountries not implemented")
}
func (*UnimplementedRegionCountryServiceServer) FindEnabledRegionCountry(context.Context, *FindEnabledRegionCountryRequest) (*FindEnabledRegionCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledRegionCountry not implemented")
}

func RegisterRegionCountryServiceServer(s *grpc.Server, srv RegionCountryServiceServer) {
	s.RegisterService(&_RegionCountryService_serviceDesc, srv)
}

func _RegionCountryService_FindAllEnabledRegionCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllEnabledRegionCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionCountryServiceServer).FindAllEnabledRegionCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionCountryService/FindAllEnabledRegionCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionCountryServiceServer).FindAllEnabledRegionCountries(ctx, req.(*FindAllEnabledRegionCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionCountryService_FindEnabledRegionCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledRegionCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionCountryServiceServer).FindEnabledRegionCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegionCountryService/FindEnabledRegionCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionCountryServiceServer).FindEnabledRegionCountry(ctx, req.(*FindEnabledRegionCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegionCountryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RegionCountryService",
	HandlerType: (*RegionCountryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findAllEnabledRegionCountries",
			Handler:    _RegionCountryService_FindAllEnabledRegionCountries_Handler,
		},
		{
			MethodName: "findEnabledRegionCountry",
			Handler:    _RegionCountryService_FindEnabledRegionCountry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_region_country.proto",
}
