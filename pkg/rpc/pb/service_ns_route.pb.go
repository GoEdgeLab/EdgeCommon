// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.4
// source: service_ns_route.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 创建自定义线路
type CreateNSRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsClusterId       int64  `protobuf:"varint,1,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	NsDomainId        int64  `protobuf:"varint,2,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	UserId            int64  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Name              string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	RangesJSON        []byte `protobuf:"bytes,5,opt,name=rangesJSON,proto3" json:"rangesJSON,omitempty"`
	IsPublic          bool   `protobuf:"varint,6,opt,name=isPublic,proto3" json:"isPublic,omitempty"`                   // 是否公用
	NsRouteCategoryId int64  `protobuf:"varint,7,opt,name=nsRouteCategoryId,proto3" json:"nsRouteCategoryId,omitempty"` // 分类ID
	Priority          int32  `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`                   // 优先级
}

func (x *CreateNSRouteRequest) Reset() {
	*x = CreateNSRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSRouteRequest) ProtoMessage() {}

func (x *CreateNSRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSRouteRequest.ProtoReflect.Descriptor instead.
func (*CreateNSRouteRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNSRouteRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *CreateNSRouteRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *CreateNSRouteRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateNSRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNSRouteRequest) GetRangesJSON() []byte {
	if x != nil {
		return x.RangesJSON
	}
	return nil
}

func (x *CreateNSRouteRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *CreateNSRouteRequest) GetNsRouteCategoryId() int64 {
	if x != nil {
		return x.NsRouteCategoryId
	}
	return 0
}

func (x *CreateNSRouteRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type CreateNSRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRouteId int64 `protobuf:"varint,1,opt,name=nsRouteId,proto3" json:"nsRouteId,omitempty"`
}

func (x *CreateNSRouteResponse) Reset() {
	*x = CreateNSRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNSRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNSRouteResponse) ProtoMessage() {}

func (x *CreateNSRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNSRouteResponse.ProtoReflect.Descriptor instead.
func (*CreateNSRouteResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNSRouteResponse) GetNsRouteId() int64 {
	if x != nil {
		return x.NsRouteId
	}
	return 0
}

// 修改自定义线路
type UpdateNSRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRouteId         int64  `protobuf:"varint,1,opt,name=nsRouteId,proto3" json:"nsRouteId,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RangesJSON        []byte `protobuf:"bytes,3,opt,name=rangesJSON,proto3" json:"rangesJSON,omitempty"`
	IsPublic          bool   `protobuf:"varint,4,opt,name=isPublic,proto3" json:"isPublic,omitempty"`                   // 是否公用
	NsRouteCategoryId int64  `protobuf:"varint,5,opt,name=nsRouteCategoryId,proto3" json:"nsRouteCategoryId,omitempty"` // 分类ID
	Priority          int32  `protobuf:"varint,7,opt,name=priority,proto3" json:"priority,omitempty"`                   // 优先级
	IsOn              bool   `protobuf:"varint,6,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateNSRouteRequest) Reset() {
	*x = UpdateNSRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSRouteRequest) ProtoMessage() {}

func (x *UpdateNSRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSRouteRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSRouteRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNSRouteRequest) GetNsRouteId() int64 {
	if x != nil {
		return x.NsRouteId
	}
	return 0
}

func (x *UpdateNSRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNSRouteRequest) GetRangesJSON() []byte {
	if x != nil {
		return x.RangesJSON
	}
	return nil
}

func (x *UpdateNSRouteRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *UpdateNSRouteRequest) GetNsRouteCategoryId() int64 {
	if x != nil {
		return x.NsRouteCategoryId
	}
	return 0
}

func (x *UpdateNSRouteRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *UpdateNSRouteRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 删除自定义线路
type DeleteNSRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRouteId int64 `protobuf:"varint,1,opt,name=nsRouteId,proto3" json:"nsRouteId,omitempty"`
}

func (x *DeleteNSRouteRequest) Reset() {
	*x = DeleteNSRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNSRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNSRouteRequest) ProtoMessage() {}

func (x *DeleteNSRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNSRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteNSRouteRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteNSRouteRequest) GetNsRouteId() int64 {
	if x != nil {
		return x.NsRouteId
	}
	return 0
}

// 获取单个自定义路线信息
type FindNSRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRouteId int64 `protobuf:"varint,1,opt,name=nsRouteId,proto3" json:"nsRouteId,omitempty"`
}

func (x *FindNSRouteRequest) Reset() {
	*x = FindNSRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSRouteRequest) ProtoMessage() {}

func (x *FindNSRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSRouteRequest.ProtoReflect.Descriptor instead.
func (*FindNSRouteRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{4}
}

func (x *FindNSRouteRequest) GetNsRouteId() int64 {
	if x != nil {
		return x.NsRouteId
	}
	return 0
}

type FindNSRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRoute *NSRoute `protobuf:"bytes,1,opt,name=nsRoute,proto3" json:"nsRoute,omitempty"`
}

func (x *FindNSRouteResponse) Reset() {
	*x = FindNSRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNSRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNSRouteResponse) ProtoMessage() {}

func (x *FindNSRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNSRouteResponse.ProtoReflect.Descriptor instead.
func (*FindNSRouteResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{5}
}

func (x *FindNSRouteResponse) GetNsRoute() *NSRoute {
	if x != nil {
		return x.NsRoute
	}
	return nil
}

// 查询自定义线路数量
type CountAllNSRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsClusterId int64 `protobuf:"varint,1,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`
	NsDomainId  int64 `protobuf:"varint,2,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`
	UserId      int64 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CountAllNSRoutesRequest) Reset() {
	*x = CountAllNSRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllNSRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllNSRoutesRequest) ProtoMessage() {}

func (x *CountAllNSRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllNSRoutesRequest.ProtoReflect.Descriptor instead.
func (*CountAllNSRoutesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{6}
}

func (x *CountAllNSRoutesRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *CountAllNSRoutesRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *CountAllNSRoutesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 读取所有自定义线路
type FindAllNSRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsClusterId       int64 `protobuf:"varint,1,opt,name=nsClusterId,proto3" json:"nsClusterId,omitempty"`             // 集群ID
	NsDomainId        int64 `protobuf:"varint,2,opt,name=nsDomainId,proto3" json:"nsDomainId,omitempty"`               // 域名ID
	UserId            int64 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`                       // 用户ID
	NsRouteCategoryId int64 `protobuf:"varint,4,opt,name=nsRouteCategoryId,proto3" json:"nsRouteCategoryId,omitempty"` // 线路分类ID
}

func (x *FindAllNSRoutesRequest) Reset() {
	*x = FindAllNSRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllNSRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllNSRoutesRequest) ProtoMessage() {}

func (x *FindAllNSRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllNSRoutesRequest.ProtoReflect.Descriptor instead.
func (*FindAllNSRoutesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{7}
}

func (x *FindAllNSRoutesRequest) GetNsClusterId() int64 {
	if x != nil {
		return x.NsClusterId
	}
	return 0
}

func (x *FindAllNSRoutesRequest) GetNsDomainId() int64 {
	if x != nil {
		return x.NsDomainId
	}
	return 0
}

func (x *FindAllNSRoutesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FindAllNSRoutesRequest) GetNsRouteCategoryId() int64 {
	if x != nil {
		return x.NsRouteCategoryId
	}
	return 0
}

type FindAllNSRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRoutes []*NSRoute `protobuf:"bytes,1,rep,name=nsRoutes,proto3" json:"nsRoutes,omitempty"`
}

func (x *FindAllNSRoutesResponse) Reset() {
	*x = FindAllNSRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllNSRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllNSRoutesResponse) ProtoMessage() {}

func (x *FindAllNSRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllNSRoutesResponse.ProtoReflect.Descriptor instead.
func (*FindAllNSRoutesResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{8}
}

func (x *FindAllNSRoutesResponse) GetNsRoutes() []*NSRoute {
	if x != nil {
		return x.NsRoutes
	}
	return nil
}

// 读取所有公用的自定义线路
type FindAllPublicRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllPublicRoutesRequest) Reset() {
	*x = FindAllPublicRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllPublicRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllPublicRoutesRequest) ProtoMessage() {}

func (x *FindAllPublicRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllPublicRoutesRequest.ProtoReflect.Descriptor instead.
func (*FindAllPublicRoutesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{9}
}

type FindAllPublicRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRoutes []*NSRoute `protobuf:"bytes,1,rep,name=nsRoutes,proto3" json:"nsRoutes,omitempty"`
}

func (x *FindAllPublicRoutesResponse) Reset() {
	*x = FindAllPublicRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllPublicRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllPublicRoutesResponse) ProtoMessage() {}

func (x *FindAllPublicRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllPublicRoutesResponse.ProtoReflect.Descriptor instead.
func (*FindAllPublicRoutesResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{10}
}

func (x *FindAllPublicRoutesResponse) GetNsRoutes() []*NSRoute {
	if x != nil {
		return x.NsRoutes
	}
	return nil
}

// 设置自定义线路排序
type UpdateNSRouteOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRouteIds []int64 `protobuf:"varint,1,rep,packed,name=nsRouteIds,proto3" json:"nsRouteIds,omitempty"`
}

func (x *UpdateNSRouteOrdersRequest) Reset() {
	*x = UpdateNSRouteOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNSRouteOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNSRouteOrdersRequest) ProtoMessage() {}

func (x *UpdateNSRouteOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNSRouteOrdersRequest.ProtoReflect.Descriptor instead.
func (*UpdateNSRouteOrdersRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateNSRouteOrdersRequest) GetNsRouteIds() []int64 {
	if x != nil {
		return x.NsRouteIds
	}
	return nil
}

// 根据版本列出一组自定义线路
type ListNSRoutesAfterVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Size    int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListNSRoutesAfterVersionRequest) Reset() {
	*x = ListNSRoutesAfterVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSRoutesAfterVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSRoutesAfterVersionRequest) ProtoMessage() {}

func (x *ListNSRoutesAfterVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSRoutesAfterVersionRequest.ProtoReflect.Descriptor instead.
func (*ListNSRoutesAfterVersionRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{12}
}

func (x *ListNSRoutesAfterVersionRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListNSRoutesAfterVersionRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListNSRoutesAfterVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRoutes []*NSRoute `protobuf:"bytes,1,rep,name=nsRoutes,proto3" json:"nsRoutes,omitempty"`
}

func (x *ListNSRoutesAfterVersionResponse) Reset() {
	*x = ListNSRoutesAfterVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNSRoutesAfterVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNSRoutesAfterVersionResponse) ProtoMessage() {}

func (x *ListNSRoutesAfterVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNSRoutesAfterVersionResponse.ProtoReflect.Descriptor instead.
func (*ListNSRoutesAfterVersionResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{13}
}

func (x *ListNSRoutesAfterVersionResponse) GetNsRoutes() []*NSRoute {
	if x != nil {
		return x.NsRoutes
	}
	return nil
}

// 查找默认的世界区域线路
type FindAllDefaultWorldRegionRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllDefaultWorldRegionRoutesRequest) Reset() {
	*x = FindAllDefaultWorldRegionRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDefaultWorldRegionRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDefaultWorldRegionRoutesRequest) ProtoMessage() {}

func (x *FindAllDefaultWorldRegionRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDefaultWorldRegionRoutesRequest.ProtoReflect.Descriptor instead.
func (*FindAllDefaultWorldRegionRoutesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{14}
}

type FindAllDefaultWorldRegionRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRoutes []*NSRoute `protobuf:"bytes,1,rep,name=nsRoutes,proto3" json:"nsRoutes,omitempty"`
}

func (x *FindAllDefaultWorldRegionRoutesResponse) Reset() {
	*x = FindAllDefaultWorldRegionRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDefaultWorldRegionRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDefaultWorldRegionRoutesResponse) ProtoMessage() {}

func (x *FindAllDefaultWorldRegionRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDefaultWorldRegionRoutesResponse.ProtoReflect.Descriptor instead.
func (*FindAllDefaultWorldRegionRoutesResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{15}
}

func (x *FindAllDefaultWorldRegionRoutesResponse) GetNsRoutes() []*NSRoute {
	if x != nil {
		return x.NsRoutes
	}
	return nil
}

// 查找默认的中国省份线路
type FindAllDefaultChinaProvinceRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllDefaultChinaProvinceRoutesRequest) Reset() {
	*x = FindAllDefaultChinaProvinceRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDefaultChinaProvinceRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDefaultChinaProvinceRoutesRequest) ProtoMessage() {}

func (x *FindAllDefaultChinaProvinceRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDefaultChinaProvinceRoutesRequest.ProtoReflect.Descriptor instead.
func (*FindAllDefaultChinaProvinceRoutesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{16}
}

type FindAllDefaultChinaProvinceRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRoutes []*NSRoute `protobuf:"bytes,1,rep,name=nsRoutes,proto3" json:"nsRoutes,omitempty"`
}

func (x *FindAllDefaultChinaProvinceRoutesResponse) Reset() {
	*x = FindAllDefaultChinaProvinceRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDefaultChinaProvinceRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDefaultChinaProvinceRoutesResponse) ProtoMessage() {}

func (x *FindAllDefaultChinaProvinceRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDefaultChinaProvinceRoutesResponse.ProtoReflect.Descriptor instead.
func (*FindAllDefaultChinaProvinceRoutesResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{17}
}

func (x *FindAllDefaultChinaProvinceRoutesResponse) GetNsRoutes() []*NSRoute {
	if x != nil {
		return x.NsRoutes
	}
	return nil
}

// 查找默认的ISP线路
type FindAllDefaultISPRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllDefaultISPRoutesRequest) Reset() {
	*x = FindAllDefaultISPRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDefaultISPRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDefaultISPRoutesRequest) ProtoMessage() {}

func (x *FindAllDefaultISPRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDefaultISPRoutesRequest.ProtoReflect.Descriptor instead.
func (*FindAllDefaultISPRoutesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{18}
}

type FindAllDefaultISPRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRoutes []*NSRoute `protobuf:"bytes,1,rep,name=nsRoutes,proto3" json:"nsRoutes,omitempty"`
}

func (x *FindAllDefaultISPRoutesResponse) Reset() {
	*x = FindAllDefaultISPRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllDefaultISPRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllDefaultISPRoutesResponse) ProtoMessage() {}

func (x *FindAllDefaultISPRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllDefaultISPRoutesResponse.ProtoReflect.Descriptor instead.
func (*FindAllDefaultISPRoutesResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{19}
}

func (x *FindAllDefaultISPRoutesResponse) GetNsRoutes() []*NSRoute {
	if x != nil {
		return x.NsRoutes
	}
	return nil
}

// 查找默认的搜索引擎线路
type FindAllAgentNSRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAllAgentNSRoutesRequest) Reset() {
	*x = FindAllAgentNSRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllAgentNSRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllAgentNSRoutesRequest) ProtoMessage() {}

func (x *FindAllAgentNSRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllAgentNSRoutesRequest.ProtoReflect.Descriptor instead.
func (*FindAllAgentNSRoutesRequest) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{20}
}

type FindAllAgentNSRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsRoutes []*NSRoute `protobuf:"bytes,1,rep,name=nsRoutes,proto3" json:"nsRoutes,omitempty"`
}

func (x *FindAllAgentNSRoutesResponse) Reset() {
	*x = FindAllAgentNSRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_ns_route_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllAgentNSRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllAgentNSRoutesResponse) ProtoMessage() {}

func (x *FindAllAgentNSRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_ns_route_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllAgentNSRoutesResponse.ProtoReflect.Descriptor instead.
func (*FindAllAgentNSRoutesResponse) Descriptor() ([]byte, []int) {
	return file_service_ns_route_proto_rawDescGZIP(), []int{21}
}

func (x *FindAllAgentNSRoutesResponse) GetNsRoutes() []*NSRoute {
	if x != nil {
		return x.NsRoutes
	}
	return nil
}

var File_service_ns_route_proto protoreflect.FileDescriptor

var file_service_ns_route_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x73, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4a,
	0x53, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x2c, 0x0a, 0x11, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x22, 0x34, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x73, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x4e,
	0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x07, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x07, 0x6e, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x73, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x42, 0x0a,
	0x17, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e,
	0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x46, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x08, 0x6e,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x49, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x4b, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x26, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a,
	0x27, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e,
	0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x2a, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a,
	0x29, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x68, 0x69, 0x6e, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x53, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x53, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e,
	0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x47, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x08, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x08, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x32, 0xe5, 0x08, 0x0a, 0x0e, 0x4e, 0x53,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x18,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x64,
	0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4e,
	0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4e, 0x53, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x66,
	0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x53, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x65, 0x0a, 0x18,
	0x6c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1f, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x80, 0x01, 0x0a, 0x21, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x53, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x53, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x53, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4e, 0x53, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_service_ns_route_proto_rawDescOnce sync.Once
	file_service_ns_route_proto_rawDescData = file_service_ns_route_proto_rawDesc
)

func file_service_ns_route_proto_rawDescGZIP() []byte {
	file_service_ns_route_proto_rawDescOnce.Do(func() {
		file_service_ns_route_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_ns_route_proto_rawDescData)
	})
	return file_service_ns_route_proto_rawDescData
}

var file_service_ns_route_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_service_ns_route_proto_goTypes = []interface{}{
	(*CreateNSRouteRequest)(nil),                      // 0: pb.CreateNSRouteRequest
	(*CreateNSRouteResponse)(nil),                     // 1: pb.CreateNSRouteResponse
	(*UpdateNSRouteRequest)(nil),                      // 2: pb.UpdateNSRouteRequest
	(*DeleteNSRouteRequest)(nil),                      // 3: pb.DeleteNSRouteRequest
	(*FindNSRouteRequest)(nil),                        // 4: pb.FindNSRouteRequest
	(*FindNSRouteResponse)(nil),                       // 5: pb.FindNSRouteResponse
	(*CountAllNSRoutesRequest)(nil),                   // 6: pb.CountAllNSRoutesRequest
	(*FindAllNSRoutesRequest)(nil),                    // 7: pb.FindAllNSRoutesRequest
	(*FindAllNSRoutesResponse)(nil),                   // 8: pb.FindAllNSRoutesResponse
	(*FindAllPublicRoutesRequest)(nil),                // 9: pb.FindAllPublicRoutesRequest
	(*FindAllPublicRoutesResponse)(nil),               // 10: pb.FindAllPublicRoutesResponse
	(*UpdateNSRouteOrdersRequest)(nil),                // 11: pb.UpdateNSRouteOrdersRequest
	(*ListNSRoutesAfterVersionRequest)(nil),           // 12: pb.ListNSRoutesAfterVersionRequest
	(*ListNSRoutesAfterVersionResponse)(nil),          // 13: pb.ListNSRoutesAfterVersionResponse
	(*FindAllDefaultWorldRegionRoutesRequest)(nil),    // 14: pb.FindAllDefaultWorldRegionRoutesRequest
	(*FindAllDefaultWorldRegionRoutesResponse)(nil),   // 15: pb.FindAllDefaultWorldRegionRoutesResponse
	(*FindAllDefaultChinaProvinceRoutesRequest)(nil),  // 16: pb.FindAllDefaultChinaProvinceRoutesRequest
	(*FindAllDefaultChinaProvinceRoutesResponse)(nil), // 17: pb.FindAllDefaultChinaProvinceRoutesResponse
	(*FindAllDefaultISPRoutesRequest)(nil),            // 18: pb.FindAllDefaultISPRoutesRequest
	(*FindAllDefaultISPRoutesResponse)(nil),           // 19: pb.FindAllDefaultISPRoutesResponse
	(*FindAllAgentNSRoutesRequest)(nil),               // 20: pb.FindAllAgentNSRoutesRequest
	(*FindAllAgentNSRoutesResponse)(nil),              // 21: pb.FindAllAgentNSRoutesResponse
	(*NSRoute)(nil),                                   // 22: pb.NSRoute
	(*RPCSuccess)(nil),                                // 23: pb.RPCSuccess
	(*RPCCountResponse)(nil),                          // 24: pb.RPCCountResponse
}
var file_service_ns_route_proto_depIdxs = []int32{
	22, // 0: pb.FindNSRouteResponse.nsRoute:type_name -> pb.NSRoute
	22, // 1: pb.FindAllNSRoutesResponse.nsRoutes:type_name -> pb.NSRoute
	22, // 2: pb.FindAllPublicRoutesResponse.nsRoutes:type_name -> pb.NSRoute
	22, // 3: pb.ListNSRoutesAfterVersionResponse.nsRoutes:type_name -> pb.NSRoute
	22, // 4: pb.FindAllDefaultWorldRegionRoutesResponse.nsRoutes:type_name -> pb.NSRoute
	22, // 5: pb.FindAllDefaultChinaProvinceRoutesResponse.nsRoutes:type_name -> pb.NSRoute
	22, // 6: pb.FindAllDefaultISPRoutesResponse.nsRoutes:type_name -> pb.NSRoute
	22, // 7: pb.FindAllAgentNSRoutesResponse.nsRoutes:type_name -> pb.NSRoute
	0,  // 8: pb.NSRouteService.createNSRoute:input_type -> pb.CreateNSRouteRequest
	2,  // 9: pb.NSRouteService.updateNSRoute:input_type -> pb.UpdateNSRouteRequest
	3,  // 10: pb.NSRouteService.deleteNSRoute:input_type -> pb.DeleteNSRouteRequest
	4,  // 11: pb.NSRouteService.findNSRoute:input_type -> pb.FindNSRouteRequest
	6,  // 12: pb.NSRouteService.countAllNSRoutes:input_type -> pb.CountAllNSRoutesRequest
	7,  // 13: pb.NSRouteService.findAllNSRoutes:input_type -> pb.FindAllNSRoutesRequest
	9,  // 14: pb.NSRouteService.findAllPublicNSRoutes:input_type -> pb.FindAllPublicRoutesRequest
	11, // 15: pb.NSRouteService.updateNSRouteOrders:input_type -> pb.UpdateNSRouteOrdersRequest
	12, // 16: pb.NSRouteService.listNSRoutesAfterVersion:input_type -> pb.ListNSRoutesAfterVersionRequest
	14, // 17: pb.NSRouteService.findAllDefaultWorldRegionRoutes:input_type -> pb.FindAllDefaultWorldRegionRoutesRequest
	16, // 18: pb.NSRouteService.findAllDefaultChinaProvinceRoutes:input_type -> pb.FindAllDefaultChinaProvinceRoutesRequest
	18, // 19: pb.NSRouteService.findAllDefaultISPRoutes:input_type -> pb.FindAllDefaultISPRoutesRequest
	20, // 20: pb.NSRouteService.findAllAgentNSRoutes:input_type -> pb.FindAllAgentNSRoutesRequest
	1,  // 21: pb.NSRouteService.createNSRoute:output_type -> pb.CreateNSRouteResponse
	23, // 22: pb.NSRouteService.updateNSRoute:output_type -> pb.RPCSuccess
	23, // 23: pb.NSRouteService.deleteNSRoute:output_type -> pb.RPCSuccess
	5,  // 24: pb.NSRouteService.findNSRoute:output_type -> pb.FindNSRouteResponse
	24, // 25: pb.NSRouteService.countAllNSRoutes:output_type -> pb.RPCCountResponse
	8,  // 26: pb.NSRouteService.findAllNSRoutes:output_type -> pb.FindAllNSRoutesResponse
	10, // 27: pb.NSRouteService.findAllPublicNSRoutes:output_type -> pb.FindAllPublicRoutesResponse
	23, // 28: pb.NSRouteService.updateNSRouteOrders:output_type -> pb.RPCSuccess
	13, // 29: pb.NSRouteService.listNSRoutesAfterVersion:output_type -> pb.ListNSRoutesAfterVersionResponse
	15, // 30: pb.NSRouteService.findAllDefaultWorldRegionRoutes:output_type -> pb.FindAllDefaultWorldRegionRoutesResponse
	17, // 31: pb.NSRouteService.findAllDefaultChinaProvinceRoutes:output_type -> pb.FindAllDefaultChinaProvinceRoutesResponse
	19, // 32: pb.NSRouteService.findAllDefaultISPRoutes:output_type -> pb.FindAllDefaultISPRoutesResponse
	21, // 33: pb.NSRouteService.findAllAgentNSRoutes:output_type -> pb.FindAllAgentNSRoutesResponse
	21, // [21:34] is the sub-list for method output_type
	8,  // [8:21] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_service_ns_route_proto_init() }
func file_service_ns_route_proto_init() {
	if File_service_ns_route_proto != nil {
		return
	}
	file_models_model_ns_route_proto_init()
	file_models_rpc_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_ns_route_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNSRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNSRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNSRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllNSRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllNSRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllNSRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllPublicRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllPublicRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNSRouteOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSRoutesAfterVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNSRoutesAfterVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDefaultWorldRegionRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDefaultWorldRegionRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDefaultChinaProvinceRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDefaultChinaProvinceRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDefaultISPRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllDefaultISPRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllAgentNSRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_ns_route_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllAgentNSRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_ns_route_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_ns_route_proto_goTypes,
		DependencyIndexes: file_service_ns_route_proto_depIdxs,
		MessageInfos:      file_service_ns_route_proto_msgTypes,
	}.Build()
	File_service_ns_route_proto = out.File
	file_service_ns_route_proto_rawDesc = nil
	file_service_ns_route_proto_goTypes = nil
	file_service_ns_route_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NSRouteServiceClient is the client API for NSRouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NSRouteServiceClient interface {
	// 创建自定义线路
	CreateNSRoute(ctx context.Context, in *CreateNSRouteRequest, opts ...grpc.CallOption) (*CreateNSRouteResponse, error)
	// 修改自定义线路
	UpdateNSRoute(ctx context.Context, in *UpdateNSRouteRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 删除自定义线路
	DeleteNSRoute(ctx context.Context, in *DeleteNSRouteRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 获取单个自定义路线信息
	FindNSRoute(ctx context.Context, in *FindNSRouteRequest, opts ...grpc.CallOption) (*FindNSRouteResponse, error)
	// 查询自定义线路数量
	CountAllNSRoutes(ctx context.Context, in *CountAllNSRoutesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 读取所有自定义线路
	FindAllNSRoutes(ctx context.Context, in *FindAllNSRoutesRequest, opts ...grpc.CallOption) (*FindAllNSRoutesResponse, error)
	// 读取所有公用的自定义线路
	// 目前只允许读取系统管理员设置的公用自定义线路
	FindAllPublicNSRoutes(ctx context.Context, in *FindAllPublicRoutesRequest, opts ...grpc.CallOption) (*FindAllPublicRoutesResponse, error)
	// 设置自定义线路排序
	UpdateNSRouteOrders(ctx context.Context, in *UpdateNSRouteOrdersRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 根据版本列出一组自定义线路
	ListNSRoutesAfterVersion(ctx context.Context, in *ListNSRoutesAfterVersionRequest, opts ...grpc.CallOption) (*ListNSRoutesAfterVersionResponse, error)
	// 查找默认的世界区域线路
	FindAllDefaultWorldRegionRoutes(ctx context.Context, in *FindAllDefaultWorldRegionRoutesRequest, opts ...grpc.CallOption) (*FindAllDefaultWorldRegionRoutesResponse, error)
	// 查找默认的中国省份线路
	FindAllDefaultChinaProvinceRoutes(ctx context.Context, in *FindAllDefaultChinaProvinceRoutesRequest, opts ...grpc.CallOption) (*FindAllDefaultChinaProvinceRoutesResponse, error)
	// 查找默认的ISP线路
	FindAllDefaultISPRoutes(ctx context.Context, in *FindAllDefaultISPRoutesRequest, opts ...grpc.CallOption) (*FindAllDefaultISPRoutesResponse, error)
	// 查找默认的搜索引擎线路
	FindAllAgentNSRoutes(ctx context.Context, in *FindAllAgentNSRoutesRequest, opts ...grpc.CallOption) (*FindAllAgentNSRoutesResponse, error)
}

type nSRouteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNSRouteServiceClient(cc grpc.ClientConnInterface) NSRouteServiceClient {
	return &nSRouteServiceClient{cc}
}

func (c *nSRouteServiceClient) CreateNSRoute(ctx context.Context, in *CreateNSRouteRequest, opts ...grpc.CallOption) (*CreateNSRouteResponse, error) {
	out := new(CreateNSRouteResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/createNSRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) UpdateNSRoute(ctx context.Context, in *UpdateNSRouteRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/updateNSRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) DeleteNSRoute(ctx context.Context, in *DeleteNSRouteRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/deleteNSRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) FindNSRoute(ctx context.Context, in *FindNSRouteRequest, opts ...grpc.CallOption) (*FindNSRouteResponse, error) {
	out := new(FindNSRouteResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/findNSRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) CountAllNSRoutes(ctx context.Context, in *CountAllNSRoutesRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/countAllNSRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) FindAllNSRoutes(ctx context.Context, in *FindAllNSRoutesRequest, opts ...grpc.CallOption) (*FindAllNSRoutesResponse, error) {
	out := new(FindAllNSRoutesResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/findAllNSRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) FindAllPublicNSRoutes(ctx context.Context, in *FindAllPublicRoutesRequest, opts ...grpc.CallOption) (*FindAllPublicRoutesResponse, error) {
	out := new(FindAllPublicRoutesResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/findAllPublicNSRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) UpdateNSRouteOrders(ctx context.Context, in *UpdateNSRouteOrdersRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/updateNSRouteOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) ListNSRoutesAfterVersion(ctx context.Context, in *ListNSRoutesAfterVersionRequest, opts ...grpc.CallOption) (*ListNSRoutesAfterVersionResponse, error) {
	out := new(ListNSRoutesAfterVersionResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/listNSRoutesAfterVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) FindAllDefaultWorldRegionRoutes(ctx context.Context, in *FindAllDefaultWorldRegionRoutesRequest, opts ...grpc.CallOption) (*FindAllDefaultWorldRegionRoutesResponse, error) {
	out := new(FindAllDefaultWorldRegionRoutesResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/findAllDefaultWorldRegionRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) FindAllDefaultChinaProvinceRoutes(ctx context.Context, in *FindAllDefaultChinaProvinceRoutesRequest, opts ...grpc.CallOption) (*FindAllDefaultChinaProvinceRoutesResponse, error) {
	out := new(FindAllDefaultChinaProvinceRoutesResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/findAllDefaultChinaProvinceRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) FindAllDefaultISPRoutes(ctx context.Context, in *FindAllDefaultISPRoutesRequest, opts ...grpc.CallOption) (*FindAllDefaultISPRoutesResponse, error) {
	out := new(FindAllDefaultISPRoutesResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/findAllDefaultISPRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSRouteServiceClient) FindAllAgentNSRoutes(ctx context.Context, in *FindAllAgentNSRoutesRequest, opts ...grpc.CallOption) (*FindAllAgentNSRoutesResponse, error) {
	out := new(FindAllAgentNSRoutesResponse)
	err := c.cc.Invoke(ctx, "/pb.NSRouteService/findAllAgentNSRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSRouteServiceServer is the server API for NSRouteService service.
type NSRouteServiceServer interface {
	// 创建自定义线路
	CreateNSRoute(context.Context, *CreateNSRouteRequest) (*CreateNSRouteResponse, error)
	// 修改自定义线路
	UpdateNSRoute(context.Context, *UpdateNSRouteRequest) (*RPCSuccess, error)
	// 删除自定义线路
	DeleteNSRoute(context.Context, *DeleteNSRouteRequest) (*RPCSuccess, error)
	// 获取单个自定义路线信息
	FindNSRoute(context.Context, *FindNSRouteRequest) (*FindNSRouteResponse, error)
	// 查询自定义线路数量
	CountAllNSRoutes(context.Context, *CountAllNSRoutesRequest) (*RPCCountResponse, error)
	// 读取所有自定义线路
	FindAllNSRoutes(context.Context, *FindAllNSRoutesRequest) (*FindAllNSRoutesResponse, error)
	// 读取所有公用的自定义线路
	// 目前只允许读取系统管理员设置的公用自定义线路
	FindAllPublicNSRoutes(context.Context, *FindAllPublicRoutesRequest) (*FindAllPublicRoutesResponse, error)
	// 设置自定义线路排序
	UpdateNSRouteOrders(context.Context, *UpdateNSRouteOrdersRequest) (*RPCSuccess, error)
	// 根据版本列出一组自定义线路
	ListNSRoutesAfterVersion(context.Context, *ListNSRoutesAfterVersionRequest) (*ListNSRoutesAfterVersionResponse, error)
	// 查找默认的世界区域线路
	FindAllDefaultWorldRegionRoutes(context.Context, *FindAllDefaultWorldRegionRoutesRequest) (*FindAllDefaultWorldRegionRoutesResponse, error)
	// 查找默认的中国省份线路
	FindAllDefaultChinaProvinceRoutes(context.Context, *FindAllDefaultChinaProvinceRoutesRequest) (*FindAllDefaultChinaProvinceRoutesResponse, error)
	// 查找默认的ISP线路
	FindAllDefaultISPRoutes(context.Context, *FindAllDefaultISPRoutesRequest) (*FindAllDefaultISPRoutesResponse, error)
	// 查找默认的搜索引擎线路
	FindAllAgentNSRoutes(context.Context, *FindAllAgentNSRoutesRequest) (*FindAllAgentNSRoutesResponse, error)
}

// UnimplementedNSRouteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNSRouteServiceServer struct {
}

func (*UnimplementedNSRouteServiceServer) CreateNSRoute(context.Context, *CreateNSRouteRequest) (*CreateNSRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNSRoute not implemented")
}
func (*UnimplementedNSRouteServiceServer) UpdateNSRoute(context.Context, *UpdateNSRouteRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNSRoute not implemented")
}
func (*UnimplementedNSRouteServiceServer) DeleteNSRoute(context.Context, *DeleteNSRouteRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNSRoute not implemented")
}
func (*UnimplementedNSRouteServiceServer) FindNSRoute(context.Context, *FindNSRouteRequest) (*FindNSRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNSRoute not implemented")
}
func (*UnimplementedNSRouteServiceServer) CountAllNSRoutes(context.Context, *CountAllNSRoutesRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllNSRoutes not implemented")
}
func (*UnimplementedNSRouteServiceServer) FindAllNSRoutes(context.Context, *FindAllNSRoutesRequest) (*FindAllNSRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllNSRoutes not implemented")
}
func (*UnimplementedNSRouteServiceServer) FindAllPublicNSRoutes(context.Context, *FindAllPublicRoutesRequest) (*FindAllPublicRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllPublicNSRoutes not implemented")
}
func (*UnimplementedNSRouteServiceServer) UpdateNSRouteOrders(context.Context, *UpdateNSRouteOrdersRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNSRouteOrders not implemented")
}
func (*UnimplementedNSRouteServiceServer) ListNSRoutesAfterVersion(context.Context, *ListNSRoutesAfterVersionRequest) (*ListNSRoutesAfterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNSRoutesAfterVersion not implemented")
}
func (*UnimplementedNSRouteServiceServer) FindAllDefaultWorldRegionRoutes(context.Context, *FindAllDefaultWorldRegionRoutesRequest) (*FindAllDefaultWorldRegionRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllDefaultWorldRegionRoutes not implemented")
}
func (*UnimplementedNSRouteServiceServer) FindAllDefaultChinaProvinceRoutes(context.Context, *FindAllDefaultChinaProvinceRoutesRequest) (*FindAllDefaultChinaProvinceRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllDefaultChinaProvinceRoutes not implemented")
}
func (*UnimplementedNSRouteServiceServer) FindAllDefaultISPRoutes(context.Context, *FindAllDefaultISPRoutesRequest) (*FindAllDefaultISPRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllDefaultISPRoutes not implemented")
}
func (*UnimplementedNSRouteServiceServer) FindAllAgentNSRoutes(context.Context, *FindAllAgentNSRoutesRequest) (*FindAllAgentNSRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllAgentNSRoutes not implemented")
}

func RegisterNSRouteServiceServer(s *grpc.Server, srv NSRouteServiceServer) {
	s.RegisterService(&_NSRouteService_serviceDesc, srv)
}

func _NSRouteService_CreateNSRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNSRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).CreateNSRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/CreateNSRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).CreateNSRoute(ctx, req.(*CreateNSRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_UpdateNSRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNSRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).UpdateNSRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/UpdateNSRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).UpdateNSRoute(ctx, req.(*UpdateNSRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_DeleteNSRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNSRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).DeleteNSRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/DeleteNSRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).DeleteNSRoute(ctx, req.(*DeleteNSRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_FindNSRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNSRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).FindNSRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/FindNSRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).FindNSRoute(ctx, req.(*FindNSRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_CountAllNSRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllNSRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).CountAllNSRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/CountAllNSRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).CountAllNSRoutes(ctx, req.(*CountAllNSRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_FindAllNSRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllNSRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).FindAllNSRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/FindAllNSRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).FindAllNSRoutes(ctx, req.(*FindAllNSRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_FindAllPublicNSRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllPublicRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).FindAllPublicNSRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/FindAllPublicNSRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).FindAllPublicNSRoutes(ctx, req.(*FindAllPublicRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_UpdateNSRouteOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNSRouteOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).UpdateNSRouteOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/UpdateNSRouteOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).UpdateNSRouteOrders(ctx, req.(*UpdateNSRouteOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_ListNSRoutesAfterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNSRoutesAfterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).ListNSRoutesAfterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/ListNSRoutesAfterVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).ListNSRoutesAfterVersion(ctx, req.(*ListNSRoutesAfterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_FindAllDefaultWorldRegionRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllDefaultWorldRegionRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).FindAllDefaultWorldRegionRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/FindAllDefaultWorldRegionRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).FindAllDefaultWorldRegionRoutes(ctx, req.(*FindAllDefaultWorldRegionRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_FindAllDefaultChinaProvinceRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllDefaultChinaProvinceRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).FindAllDefaultChinaProvinceRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/FindAllDefaultChinaProvinceRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).FindAllDefaultChinaProvinceRoutes(ctx, req.(*FindAllDefaultChinaProvinceRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_FindAllDefaultISPRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllDefaultISPRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).FindAllDefaultISPRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/FindAllDefaultISPRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).FindAllDefaultISPRoutes(ctx, req.(*FindAllDefaultISPRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NSRouteService_FindAllAgentNSRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllAgentNSRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSRouteServiceServer).FindAllAgentNSRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NSRouteService/FindAllAgentNSRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSRouteServiceServer).FindAllAgentNSRoutes(ctx, req.(*FindAllAgentNSRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NSRouteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NSRouteService",
	HandlerType: (*NSRouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNSRoute",
			Handler:    _NSRouteService_CreateNSRoute_Handler,
		},
		{
			MethodName: "updateNSRoute",
			Handler:    _NSRouteService_UpdateNSRoute_Handler,
		},
		{
			MethodName: "deleteNSRoute",
			Handler:    _NSRouteService_DeleteNSRoute_Handler,
		},
		{
			MethodName: "findNSRoute",
			Handler:    _NSRouteService_FindNSRoute_Handler,
		},
		{
			MethodName: "countAllNSRoutes",
			Handler:    _NSRouteService_CountAllNSRoutes_Handler,
		},
		{
			MethodName: "findAllNSRoutes",
			Handler:    _NSRouteService_FindAllNSRoutes_Handler,
		},
		{
			MethodName: "findAllPublicNSRoutes",
			Handler:    _NSRouteService_FindAllPublicNSRoutes_Handler,
		},
		{
			MethodName: "updateNSRouteOrders",
			Handler:    _NSRouteService_UpdateNSRouteOrders_Handler,
		},
		{
			MethodName: "listNSRoutesAfterVersion",
			Handler:    _NSRouteService_ListNSRoutesAfterVersion_Handler,
		},
		{
			MethodName: "findAllDefaultWorldRegionRoutes",
			Handler:    _NSRouteService_FindAllDefaultWorldRegionRoutes_Handler,
		},
		{
			MethodName: "findAllDefaultChinaProvinceRoutes",
			Handler:    _NSRouteService_FindAllDefaultChinaProvinceRoutes_Handler,
		},
		{
			MethodName: "findAllDefaultISPRoutes",
			Handler:    _NSRouteService_FindAllDefaultISPRoutes_Handler,
		},
		{
			MethodName: "findAllAgentNSRoutes",
			Handler:    _NSRouteService_FindAllAgentNSRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ns_route.proto",
}
