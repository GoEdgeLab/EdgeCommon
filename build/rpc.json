{
  "services": [
    {
      "name": "APIMethodStatService",
      "methods": [
        {
          "name": "findAPIMethodStatsWithDay",
          "requestMessageName": "FindAPIMethodStatsWithDayRequest",
          "responseMessageName": "FindAPIMethodStatsWithDayResponse",
          "code": "rpc findAPIMethodStatsWithDay(FindAPIMethodStatsWithDayRequest) returns (FindAPIMethodStatsWithDayResponse);",
          "doc": "查找某天的统计",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAPIMethodStatsWithDay",
          "requestMessageName": "CountAPIMethodStatsWithDayRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAPIMethodStatsWithDay(CountAPIMethodStatsWithDayRequest) returns (RPCCountResponse);",
          "doc": "检查是否有统计数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "api_method_stat_service.proto",
      "doc": "API方法统计服务"
    },
    {
      "name": "ACMEAuthenticationService",
      "methods": [
        {
          "name": "findACMEAuthenticationKeyWithToken",
          "requestMessageName": "FindACMEAuthenticationKeyWithTokenRequest",
          "responseMessageName": "FindACMEAuthenticationKeyWithTokenResponse",
          "code": "rpc findACMEAuthenticationKeyWithToken (FindACMEAuthenticationKeyWithTokenRequest) returns (FindACMEAuthenticationKeyWithTokenResponse);",
          "doc": "获取Key",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_acme_authentication.proto",
      "doc": "ACME认证相关信息"
    },
    {
      "name": "ACMEProviderService",
      "methods": [
        {
          "name": "findAllACMEProviders",
          "requestMessageName": "FindAllACMEProvidersRequest",
          "responseMessageName": "FindAllACMEProvidersResponse",
          "code": "rpc findAllACMEProviders(FindAllACMEProvidersRequest) returns (FindAllACMEProvidersResponse);",
          "doc": "查找所有的服务商",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findACMEProviderWithCode",
          "requestMessageName": "FindACMEProviderWithCodeRequest",
          "responseMessageName": "FindACMEProviderWithCodeResponse",
          "code": "rpc findACMEProviderWithCode(FindACMEProviderWithCodeRequest) returns (FindACMEProviderWithCodeResponse);",
          "doc": "根据代号查找服务商",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_acme_provider.proto",
      "doc": "ACME服务商"
    },
    {
      "name": "ACMEProviderAccountService",
      "methods": [
        {
          "name": "createACMEProviderAccount",
          "requestMessageName": "CreateACMEProviderAccountRequest",
          "responseMessageName": "CreateACMEProviderAccountResponse",
          "code": "rpc createACMEProviderAccount(CreateACMEProviderAccountRequest) returns (CreateACMEProviderAccountResponse);",
          "doc": "创建服务商账号",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllACMEProviderAccountsWithProviderCode",
          "requestMessageName": "FindAllACMEProviderAccountsWithProviderCodeRequest",
          "responseMessageName": "FindAllACMEProviderAccountsWithProviderCodeResponse",
          "code": "rpc findAllACMEProviderAccountsWithProviderCode(FindAllACMEProviderAccountsWithProviderCodeRequest) returns (FindAllACMEProviderAccountsWithProviderCodeResponse);",
          "doc": "使用代号查找服务商账号",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateACMEProviderAccount",
          "requestMessageName": "UpdateACMEProviderAccountRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateACMEProviderAccount(UpdateACMEProviderAccountRequest) returns (RPCSuccess);",
          "doc": "修改服务商账号",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteACMEProviderAccount",
          "requestMessageName": "DeleteACMEProviderAccountRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteACMEProviderAccount(DeleteACMEProviderAccountRequest) returns (RPCSuccess);",
          "doc": "删除服务商账号",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledACMEProviderAccount",
          "requestMessageName": "FindEnabledACMEProviderAccountRequest",
          "responseMessageName": "FindEnabledACMEProviderAccountResponse",
          "code": "rpc findEnabledACMEProviderAccount(FindEnabledACMEProviderAccountRequest) returns (FindEnabledACMEProviderAccountResponse);",
          "doc": "查找单个服务商账号",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledACMEProviderAccounts",
          "requestMessageName": "CountAllEnabledACMEProviderAccountsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledACMEProviderAccounts(CountAllEnabledACMEProviderAccountsRequest) returns (RPCCountResponse);",
          "doc": "计算所有服务商账号数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledACMEProviderAccounts",
          "requestMessageName": "ListEnabledACMEProviderAccountsRequest",
          "responseMessageName": "ListEnabledACMEProviderAccountsResponse",
          "code": "rpc listEnabledACMEProviderAccounts(ListEnabledACMEProviderAccountsRequest) returns (ListEnabledACMEProviderAccountsResponse);",
          "doc": "列出单页服务商账号",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_acme_provider_acount.proto",
      "doc": "ACME服务商账号"
    },
    {
      "name": "ACMETaskService",
      "methods": [
        {
          "name": "countAllEnabledACMETasksWithACMEUserId",
          "requestMessageName": "CountAllEnabledACMETasksWithACMEUserIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledACMETasksWithACMEUserId (CountAllEnabledACMETasksWithACMEUserIdRequest) returns (RPCCountResponse);",
          "doc": "计算某个ACME用户相关的任务数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countEnabledACMETasksWithDNSProviderId",
          "requestMessageName": "CountEnabledACMETasksWithDNSProviderIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countEnabledACMETasksWithDNSProviderId (CountEnabledACMETasksWithDNSProviderIdRequest) returns (RPCCountResponse);",
          "doc": "计算跟某个DNS服务商相关的任务数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledACMETasks",
          "requestMessageName": "CountAllEnabledACMETasksRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledACMETasks (CountAllEnabledACMETasksRequest) returns (RPCCountResponse);",
          "doc": "计算所有任务数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledACMETasks",
          "requestMessageName": "ListEnabledACMETasksRequest",
          "responseMessageName": "ListEnabledACMETasksResponse",
          "code": "rpc listEnabledACMETasks (ListEnabledACMETasksRequest) returns (ListEnabledACMETasksResponse);",
          "doc": "列出单页任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createACMETask",
          "requestMessageName": "CreateACMETaskRequest",
          "responseMessageName": "CreateACMETaskResponse",
          "code": "rpc createACMETask (CreateACMETaskRequest) returns (CreateACMETaskResponse);",
          "doc": "创建任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateACMETask",
          "requestMessageName": "UpdateACMETaskRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateACMETask (UpdateACMETaskRequest) returns (RPCSuccess);",
          "doc": "修改任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteACMETask",
          "requestMessageName": "DeleteACMETaskRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteACMETask (DeleteACMETaskRequest) returns (RPCSuccess);",
          "doc": "删除任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "runACMETask",
          "requestMessageName": "RunACMETaskRequest",
          "responseMessageName": "RunACMETaskResponse",
          "code": "rpc runACMETask (RunACMETaskRequest) returns (RunACMETaskResponse);",
          "doc": "运行某个任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledACMETask",
          "requestMessageName": "FindEnabledACMETaskRequest",
          "responseMessageName": "FindEnabledACMETaskResponse",
          "code": "rpc findEnabledACMETask (FindEnabledACMETaskRequest) returns (FindEnabledACMETaskResponse);",
          "doc": "查找单个任务信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findACMETaskUser",
          "requestMessageName": "FindACMETaskUserRequest",
          "responseMessageName": "FindACMETaskUserResponse",
          "code": "rpc findACMETaskUser(FindACMETaskUserRequest) returns (FindACMETaskUserResponse);",
          "doc": "查找任务所属用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_acme_task.proto",
      "doc": "ACME任务相关服务"
    },
    {
      "name": "ACMEUserService",
      "methods": [
        {
          "name": "createACMEUser",
          "requestMessageName": "CreateACMEUserRequest",
          "responseMessageName": "CreateACMEUserResponse",
          "code": "rpc createACMEUser (CreateACMEUserRequest) returns (CreateACMEUserResponse);",
          "doc": "创建用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateACMEUser",
          "requestMessageName": "UpdateACMEUserRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateACMEUser (UpdateACMEUserRequest) returns (RPCSuccess);",
          "doc": "修改用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteACMEUser",
          "requestMessageName": "DeleteACMEUserRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteACMEUser (DeleteACMEUserRequest) returns (RPCSuccess);",
          "doc": "删除用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countACMEUsers",
          "requestMessageName": "CountAcmeUsersRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countACMEUsers (CountAcmeUsersRequest) returns (RPCCountResponse);",
          "doc": "计算用户数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listACMEUsers",
          "requestMessageName": "ListACMEUsersRequest",
          "responseMessageName": "ListACMEUsersResponse",
          "code": "rpc listACMEUsers (ListACMEUsersRequest) returns (ListACMEUsersResponse);",
          "doc": "列出单页用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledACMEUser",
          "requestMessageName": "FindEnabledACMEUserRequest",
          "responseMessageName": "FindEnabledACMEUserResponse",
          "code": "rpc findEnabledACMEUser (FindEnabledACMEUserRequest) returns (FindEnabledACMEUserResponse);",
          "doc": "查找单个用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllACMEUsers",
          "requestMessageName": "FindAllACMEUsersRequest",
          "responseMessageName": "FindAllACMEUsersResponse",
          "code": "rpc findAllACMEUsers (FindAllACMEUsersRequest) returns (FindAllACMEUsersResponse);",
          "doc": "查找所有用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_acme_user.proto",
      "doc": "ACME用户相关服务"
    },
    {
      "name": "ADNetworkService",
      "methods": [
        {
          "name": "createADNetwork",
          "requestMessageName": "CreateADNetworkRequest",
          "responseMessageName": "CreateADNetworkResponse",
          "code": "rpc createADNetwork(CreateADNetworkRequest) returns (CreateADNetworkResponse);",
          "doc": "创建线路",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateADNetwork",
          "requestMessageName": "UpdateADNetworkRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateADNetwork(UpdateADNetworkRequest) returns (RPCSuccess);",
          "doc": "修改线路",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findADNetwork",
          "requestMessageName": "FindADNetworkRequest",
          "responseMessageName": "FindADNetworkResponse",
          "code": "rpc findADNetwork(FindADNetworkRequest) returns (FindADNetworkResponse);",
          "doc": "查找单个线路",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllADNetworks",
          "requestMessageName": "FindAllADNetworkRequest",
          "responseMessageName": "FindAllADNetworkResponse",
          "code": "rpc findAllADNetworks(FindAllADNetworkRequest) returns (FindAllADNetworkResponse);",
          "doc": "列出所有线路",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAvailableADNetworks",
          "requestMessageName": "FindAllAvailableADNetworksRequest",
          "responseMessageName": "FindAllAvailableADNetworksResponse",
          "code": "rpc findAllAvailableADNetworks(FindAllAvailableADNetworksRequest) returns (FindAllAvailableADNetworksResponse);",
          "doc": "列出所有可用的线路",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteADNetwork",
          "requestMessageName": "DeleteADNetworkRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteADNetwork(DeleteADNetworkRequest) returns (RPCSuccess);",
          "doc": "删除线路",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ad_network.proto",
      "doc": "高防线路服务"
    },
    {
      "name": "ADPackageService",
      "methods": [
        {
          "name": "createADPackage",
          "requestMessageName": "CreateADPackageRequest",
          "responseMessageName": "CreateADPackageResponse",
          "code": "rpc createADPackage(CreateADPackageRequest) returns (CreateADPackageResponse);",
          "doc": "创建高防产品",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateADPackage",
          "requestMessageName": "UpdateADPackageRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateADPackage(UpdateADPackageRequest) returns (RPCSuccess);",
          "doc": "修改高防产品",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findADPackage",
          "requestMessageName": "FindADPackageRequest",
          "responseMessageName": "FindADPackageResponse",
          "code": "rpc findADPackage(FindADPackageRequest) returns (FindADPackageResponse);",
          "doc": "查找单个高防产品",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countADPackages",
          "requestMessageName": "CountADPackagesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countADPackages(CountADPackagesRequest) returns (RPCCountResponse);",
          "doc": "查询高防产品数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllIdleADPackages",
          "requestMessageName": "CountAllIdleADPackages",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllIdleADPackages(CountAllIdleADPackages) returns (RPCCountResponse);",
          "doc": "查询可用的产品数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listADPackages",
          "requestMessageName": "ListADPackagesRequest",
          "responseMessageName": "ListADPackagesResponse",
          "code": "rpc listADPackages(ListADPackagesRequest) returns (ListADPackagesResponse);",
          "doc": "列出单页高防产品",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllIdleADPackages",
          "requestMessageName": "FindAllIdleADPackagesRequest",
          "responseMessageName": "FindAllIdleADPackagesResponse",
          "code": "rpc findAllIdleADPackages(FindAllIdleADPackagesRequest) returns (FindAllIdleADPackagesResponse);",
          "doc": "列出所有可用的高防产品",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteADPackage",
          "requestMessageName": "DeleteADPackageRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteADPackage(DeleteADPackageRequest) returns (RPCSuccess);",
          "doc": "删除高防产品",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ad_package.proto",
      "doc": "高防产品服务"
    },
    {
      "name": "ADPackageInstanceService",
      "methods": [
        {
          "name": "createADPackageInstance",
          "requestMessageName": "CreateADPackageInstanceRequest",
          "responseMessageName": "CreateADPackageInstanceResponse",
          "code": "rpc createADPackageInstance(CreateADPackageInstanceRequest) returns (CreateADPackageInstanceResponse);",
          "doc": "创建实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateADPackageInstance",
          "requestMessageName": "UpdateADPackageInstanceRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateADPackageInstance(UpdateADPackageInstanceRequest) returns (RPCSuccess);",
          "doc": "修改实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findADPackageInstance",
          "requestMessageName": "FindADPackageInstanceRequest",
          "responseMessageName": "FindADPackageInstanceResponse",
          "code": "rpc findADPackageInstance(FindADPackageInstanceRequest) returns (FindADPackageInstanceResponse);",
          "doc": "查找单个实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllADPackageInstances",
          "requestMessageName": "FindAllADPackageInstancesRequest",
          "responseMessageName": "FindAllADPackageInstancesResponse",
          "code": "rpc findAllADPackageInstances(FindAllADPackageInstancesRequest) returns (FindAllADPackageInstancesResponse);",
          "doc": "列出单个高防产品所有实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteADPackageInstance",
          "requestMessageName": "DeleteADPackageInstanceRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteADPackageInstance(DeleteADPackageInstanceRequest) returns (RPCSuccess);",
          "doc": "删除实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countIdleADPackageInstances",
          "requestMessageName": "CountIdleADPackageInstancesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countIdleADPackageInstances(CountIdleADPackageInstancesRequest) returns (RPCCountResponse);",
          "doc": "计算可购的实例数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countADPackageInstances",
          "requestMessageName": "CountADPackageInstancesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countADPackageInstances(CountADPackageInstancesRequest) returns (RPCCountResponse);",
          "doc": "计算实例数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listADPackageInstances",
          "requestMessageName": "ListADPackageInstancesRequest",
          "responseMessageName": "ListADPackageInstancesResponse",
          "code": "rpc listADPackageInstances(ListADPackageInstancesRequest) returns (ListADPackageInstancesResponse);",
          "doc": "列出单页实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ad_package_instance.proto",
      "doc": "高防实例服务"
    },
    {
      "name": "ADPackagePeriodService",
      "methods": [
        {
          "name": "createADPackagePeriod",
          "requestMessageName": "CreateADPackagePeriodRequest",
          "responseMessageName": "CreateADPackagePeriodResponse",
          "code": "rpc createADPackagePeriod(CreateADPackagePeriodRequest) returns (CreateADPackagePeriodResponse);",
          "doc": "创建有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateADPackagePeriod",
          "requestMessageName": "UpdateADPackagePeriodRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateADPackagePeriod(UpdateADPackagePeriodRequest) returns (RPCSuccess);",
          "doc": "修改有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteADPackagePeriod",
          "requestMessageName": "DeleteADPackagePeriodRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteADPackagePeriod(DeleteADPackagePeriodRequest) returns (RPCSuccess);",
          "doc": "删除有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findADPackagePeriod",
          "requestMessageName": "FindADPackagePeriodRequest",
          "responseMessageName": "FindADPackagePeriodResponse",
          "code": "rpc findADPackagePeriod(FindADPackagePeriodRequest) returns (FindADPackagePeriodResponse);",
          "doc": "查找有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllADPackagePeriods",
          "requestMessageName": "FindAllADPackagePeriodsRequest",
          "responseMessageName": "FindAllADPackagePeriodsResponse",
          "code": "rpc findAllADPackagePeriods(FindAllADPackagePeriodsRequest) returns (FindAllADPackagePeriodsResponse);",
          "doc": "列出所有有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAvailableADPackagePeriods",
          "requestMessageName": "FindAllAvailableADPackagePeriodsRequest",
          "responseMessageName": "FindAllAvailableADPackagePeriodsResponse",
          "code": "rpc findAllAvailableADPackagePeriods(FindAllAvailableADPackagePeriodsRequest) returns (FindAllAvailableADPackagePeriodsResponse);",
          "doc": "列出所有可用有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ad_package_period.proto",
      "doc": "高防实例有效期服务"
    },
    {
      "name": "ADPackagePriceService",
      "methods": [
        {
          "name": "updateADPackagePrice",
          "requestMessageName": "UpdateADPackagePriceRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateADPackagePrice(UpdateADPackagePriceRequest) returns (RPCSuccess);",
          "doc": "设置高防产品价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findADPackagePrice",
          "requestMessageName": "FindADPackagePriceRequest",
          "responseMessageName": "FindADPackagePriceResponse",
          "code": "rpc findADPackagePrice(FindADPackagePriceRequest) returns (FindADPackagePriceResponse);",
          "doc": "获取单个高防产品具体价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countADPackagePrices",
          "requestMessageName": "CountADPackagePricesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countADPackagePrices(CountADPackagePricesRequest) returns (RPCCountResponse);",
          "doc": "计算高防产品价格项数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findADPackagePrices",
          "requestMessageName": "FindADPackagePricesRequest",
          "responseMessageName": "FindADPackagePricesResponse",
          "code": "rpc findADPackagePrices(FindADPackagePricesRequest) returns (FindADPackagePricesResponse);",
          "doc": "查找高防产品价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllADPackagePrices",
          "requestMessageName": "FindAllADPackagePricesRequest",
          "responseMessageName": "FindAllADPackagePricesResponse",
          "code": "rpc findAllADPackagePrices(FindAllADPackagePricesRequest) returns (FindAllADPackagePricesResponse);",
          "doc": "查找所有高防产品价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ad_package_price.proto",
      "doc": "高防产品价格服务"
    },
    {
      "name": "AdminService",
      "methods": [
        {
          "name": "loginAdmin",
          "requestMessageName": "LoginAdminRequest",
          "responseMessageName": "LoginAdminResponse",
          "code": "rpc loginAdmin (LoginAdminRequest) returns (LoginAdminResponse);",
          "doc": "登录",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "checkAdminExists",
          "requestMessageName": "CheckAdminExistsRequest",
          "responseMessageName": "CheckAdminExistsResponse",
          "code": "rpc checkAdminExists (CheckAdminExistsRequest) returns (CheckAdminExistsResponse);",
          "doc": "检查管理员是否存在",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkAdminUsername",
          "requestMessageName": "CheckAdminUsernameRequest",
          "responseMessageName": "CheckAdminUsernameResponse",
          "code": "rpc checkAdminUsername (CheckAdminUsernameRequest) returns (CheckAdminUsernameResponse);",
          "doc": "检查用户名是否存在",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAdminFullname",
          "requestMessageName": "FindAdminFullnameRequest",
          "responseMessageName": "FindAdminFullnameResponse",
          "code": "rpc findAdminFullname (FindAdminFullnameRequest) returns (FindAdminFullnameResponse);",
          "doc": "获取管理员名称",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledAdmin",
          "requestMessageName": "FindEnabledAdminRequest",
          "responseMessageName": "FindEnabledAdminResponse",
          "code": "rpc findEnabledAdmin (FindEnabledAdminRequest) returns (FindEnabledAdminResponse);",
          "doc": "获取管理员信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createOrUpdateAdmin",
          "requestMessageName": "CreateOrUpdateAdminRequest",
          "responseMessageName": "CreateOrUpdateAdminResponse",
          "code": "rpc createOrUpdateAdmin (CreateOrUpdateAdminRequest) returns (CreateOrUpdateAdminResponse);",
          "doc": "创建或修改管理员",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateAdminInfo",
          "requestMessageName": "UpdateAdminInfoRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateAdminInfo (UpdateAdminInfoRequest) returns (RPCSuccess);",
          "doc": "修改管理员信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateAdminLogin",
          "requestMessageName": "UpdateAdminLoginRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateAdminLogin (UpdateAdminLoginRequest) returns (RPCSuccess);",
          "doc": "修改管理员登录信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAdminModules",
          "requestMessageName": "FindAllAdminModulesRequest",
          "responseMessageName": "FindAllAdminModulesResponse",
          "code": "rpc findAllAdminModules (FindAllAdminModulesRequest) returns (FindAllAdminModulesResponse);",
          "doc": "获取所有管理员的权限列表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createAdmin",
          "requestMessageName": "CreateAdminRequest",
          "responseMessageName": "CreateAdminResponse",
          "code": "rpc createAdmin (CreateAdminRequest) returns (CreateAdminResponse);",
          "doc": "创建管理员",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateAdmin",
          "requestMessageName": "UpdateAdminRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateAdmin (UpdateAdminRequest) returns (RPCSuccess);",
          "doc": "修改管理员",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledAdmins",
          "requestMessageName": "CountAllEnabledAdminsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledAdmins (CountAllEnabledAdminsRequest) returns (RPCCountResponse);",
          "doc": "计算管理员数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledAdmins",
          "requestMessageName": "ListEnabledAdminsRequest",
          "responseMessageName": "ListEnabledAdminsResponse",
          "code": "rpc listEnabledAdmins (ListEnabledAdminsRequest) returns (ListEnabledAdminsResponse);",
          "doc": "列出单页的管理员",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteAdmin",
          "requestMessageName": "DeleteAdminRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteAdmin (DeleteAdminRequest) returns (RPCSuccess);",
          "doc": "删除管理员",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkAdminOTPWithUsername",
          "requestMessageName": "CheckAdminOTPWithUsernameRequest",
          "responseMessageName": "CheckAdminOTPWithUsernameResponse",
          "code": "rpc checkAdminOTPWithUsername (CheckAdminOTPWithUsernameRequest) returns (CheckAdminOTPWithUsernameResponse);",
          "doc": "根据用户名检查是否需要输入OTP",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "composeAdminDashboard",
          "requestMessageName": "ComposeAdminDashboardRequest",
          "responseMessageName": "ComposeAdminDashboardResponse",
          "code": "rpc composeAdminDashboard (ComposeAdminDashboardRequest) returns (ComposeAdminDashboardResponse);",
          "doc": "取得管理员Dashboard数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateAdminTheme",
          "requestMessageName": "UpdateAdminThemeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateAdminTheme (UpdateAdminThemeRequest) returns (RPCSuccess);",
          "doc": "修改管理员使用的界面风格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_admin.proto",
      "doc": "管理员服务"
    },
    {
      "name": "APIAccessTokenService",
      "methods": [
        {
          "name": "GetAPIAccessToken",
          "requestMessageName": "GetAPIAccessTokenRequest",
          "responseMessageName": "GetAPIAccessTokenResponse",
          "code": "rpc GetAPIAccessToken (GetAPIAccessTokenRequest) returns (GetAPIAccessTokenResponse);",
          "doc": "获取AccessToken",
          "roles": [],
          "isDeprecated": false
        }
      ],
      "filename": "service_api_access_token.proto",
      "doc": "AccessToken相关服务"
    },
    {
      "name": "APINodeService",
      "methods": [
        {
          "name": "createAPINode",
          "requestMessageName": "CreateAPINodeRequest",
          "responseMessageName": "CreateAPINodeResponse",
          "code": "rpc createAPINode (CreateAPINodeRequest) returns (CreateAPINodeResponse);",
          "doc": "创建API节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateAPINode",
          "requestMessageName": "UpdateAPINodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateAPINode (UpdateAPINodeRequest) returns (RPCSuccess);",
          "doc": "修改API节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteAPINode",
          "requestMessageName": "DeleteAPINodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteAPINode (DeleteAPINodeRequest) returns (RPCSuccess);",
          "doc": "删除API节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledAPINodes",
          "requestMessageName": "FindAllEnabledAPINodesRequest",
          "responseMessageName": "FindAllEnabledAPINodesResponse",
          "code": "rpc findAllEnabledAPINodes (FindAllEnabledAPINodesRequest) returns (FindAllEnabledAPINodesResponse);",
          "doc": "列出所有可用API节点",
          "roles": [
            "dns",
            "user",
            "node",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledAPINodes",
          "requestMessageName": "CountAllEnabledAPINodesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledAPINodes (CountAllEnabledAPINodesRequest) returns (RPCCountResponse);",
          "doc": "计算API节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledAndOnAPINodes",
          "requestMessageName": "CountAllEnabledAndOnAPINodesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledAndOnAPINodes (CountAllEnabledAndOnAPINodesRequest) returns (RPCCountResponse);",
          "doc": "计算启用的API节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledAPINodes",
          "requestMessageName": "ListEnabledAPINodesRequest",
          "responseMessageName": "ListEnabledAPINodesResponse",
          "code": "rpc listEnabledAPINodes (ListEnabledAPINodesRequest) returns (ListEnabledAPINodesResponse);",
          "doc": "列出单页的API节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledAPINode",
          "requestMessageName": "FindEnabledAPINodeRequest",
          "responseMessageName": "FindEnabledAPINodeResponse",
          "code": "rpc findEnabledAPINode (FindEnabledAPINodeRequest) returns (FindEnabledAPINodeResponse);",
          "doc": "根据ID查找节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findCurrentAPINodeVersion",
          "requestMessageName": "FindCurrentAPINodeVersionRequest",
          "responseMessageName": "FindCurrentAPINodeVersionResponse",
          "code": "rpc findCurrentAPINodeVersion (FindCurrentAPINodeVersionRequest) returns (FindCurrentAPINodeVersionResponse);",
          "doc": "获取当前API节点的版本",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findCurrentAPINode",
          "requestMessageName": "FindCurrentAPINodeRequest",
          "responseMessageName": "FindCurrentAPINodeResponse",
          "code": "rpc findCurrentAPINode(FindCurrentAPINodeRequest) returns (FindCurrentAPINodeResponse);",
          "doc": "获取当前API节点的信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledAPINodesWithSSLCertId",
          "requestMessageName": "CountAllEnabledAPINodesWithSSLCertIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledAPINodesWithSSLCertId (CountAllEnabledAPINodesWithSSLCertIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个SSL证书的API节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "debugAPINode",
          "requestMessageName": "DebugAPINodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc debugAPINode(DebugAPINodeRequest) returns (RPCSuccess);",
          "doc": "修改调试模式状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "uploadAPINodeFile",
          "requestMessageName": "UploadAPINodeFileRequest",
          "responseMessageName": "UploadAPINodeFileResponse",
          "code": "rpc uploadAPINodeFile(UploadAPINodeFileRequest) returns (UploadAPINodeFileResponse);",
          "doc": "上传新版API节点文件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "uploadDeployFileToAPINode",
          "requestMessageName": "UploadDeployFileToAPINodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc uploadDeployFileToAPINode(UploadDeployFileToAPINodeRequest) returns (RPCSuccess);",
          "doc": "上传节点安装文件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findLatestDeployFiles",
          "requestMessageName": "FindLatestDeployFilesRequest",
          "responseMessageName": "FindLatestDeployFilesResponse",
          "code": "rpc findLatestDeployFiles(FindLatestDeployFilesRequest) returns (FindLatestDeployFilesResponse);",
          "doc": "查找已有节点安装文件信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_api_node.proto",
      "doc": "API节点服务"
    },
    {
      "name": "APITokenService",
      "methods": [
        {
          "name": "findAllEnabledAPITokens",
          "requestMessageName": "FindAllEnabledAPITokensRequest",
          "responseMessageName": "FindAllEnabledAPITokensResponse",
          "code": "rpc findAllEnabledAPITokens (FindAllEnabledAPITokensRequest) returns (FindAllEnabledAPITokensResponse);",
          "doc": "获取API令牌",
          "roles": [],
          "isDeprecated": false
        }
      ],
      "filename": "service_api_token.proto",
      "doc": "API令牌服务"
    },
    {
      "name": "ClientAgentService",
      "methods": [
        {
          "name": "findAllClientAgents",
          "requestMessageName": "FindAllClientAgentsRequest",
          "responseMessageName": "FindAllClientAgentsResponse",
          "code": "rpc findAllClientAgents(FindAllClientAgentsRequest) returns (FindAllClientAgentsResponse);",
          "doc": "查找所有Agent",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_client_agent.proto",
      "doc": "Agent服务"
    },
    {
      "name": "ClientAgentIPService",
      "methods": [
        {
          "name": "createClientAgentIPs",
          "requestMessageName": "CreateClientAgentIPsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc createClientAgentIPs(CreateClientAgentIPsRequest) returns (RPCSuccess);",
          "doc": "创建一组IP",
          "roles": [
            "dns",
            "node",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listClientAgentIPsAfterId",
          "requestMessageName": "ListClientAgentIPsAfterIdRequest",
          "responseMessageName": "ListClientAgentIPsAfterIdResponse",
          "code": "rpc listClientAgentIPsAfterId(ListClientAgentIPsAfterIdRequest) returns (ListClientAgentIPsAfterIdResponse);",
          "doc": "查询最新的IP",
          "roles": [
            "dns",
            "node",
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_client_agent_ip.proto",
      "doc": "Agent IP服务"
    },
    {
      "name": "DBService",
      "methods": [
        {
          "name": "findAllDBTables",
          "requestMessageName": "FindAllDBTablesRequest",
          "responseMessageName": "FindAllDBTablesResponse",
          "code": "rpc findAllDBTables (FindAllDBTablesRequest) returns (FindAllDBTablesResponse);",
          "doc": "获取所有表信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteDBTable",
          "requestMessageName": "DeleteDBTableRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteDBTable (DeleteDBTableRequest) returns (RPCSuccess);",
          "doc": "删除表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "truncateDBTable",
          "requestMessageName": "TruncateDBTableRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc truncateDBTable (TruncateDBTableRequest) returns (RPCSuccess);",
          "doc": "清空表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_db.proto",
      "doc": "数据库相关服务"
    },
    {
      "name": "DBNodeService",
      "methods": [
        {
          "name": "createDBNode",
          "requestMessageName": "CreateDBNodeRequest",
          "responseMessageName": "CreateDBNodeResponse",
          "code": "rpc createDBNode (CreateDBNodeRequest) returns (CreateDBNodeResponse);",
          "doc": "创建数据库节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateDBNode",
          "requestMessageName": "UpdateDBNodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateDBNode (UpdateDBNodeRequest) returns (RPCSuccess);",
          "doc": "修改数据库节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteDBNode",
          "requestMessageName": "DeleteDBNodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteDBNode (DeleteDBNodeRequest) returns (RPCSuccess);",
          "doc": "删除节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledDBNodes",
          "requestMessageName": "CountAllEnabledDBNodesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledDBNodes (CountAllEnabledDBNodesRequest) returns (RPCCountResponse);",
          "doc": "计算可用的数据库节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledDBNodes",
          "requestMessageName": "ListEnabledDBNodesRequest",
          "responseMessageName": "ListEnabledDBNodesResponse",
          "code": "rpc listEnabledDBNodes (ListEnabledDBNodesRequest) returns (ListEnabledDBNodesResponse);",
          "doc": "列出单页的数据库节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledDBNode",
          "requestMessageName": "FindEnabledDBNodeRequest",
          "responseMessageName": "FindEnabledDBNodeResponse",
          "code": "rpc findEnabledDBNode (FindEnabledDBNodeRequest) returns (FindEnabledDBNodeResponse);",
          "doc": "根据ID查找可用的数据库节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllDBNodeTables",
          "requestMessageName": "FindAllDBNodeTablesRequest",
          "responseMessageName": "FindAllDBNodeTablesResponse",
          "code": "rpc findAllDBNodeTables (FindAllDBNodeTablesRequest) returns (FindAllDBNodeTablesResponse);",
          "doc": "获取所有表信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteDBNodeTable",
          "requestMessageName": "DeleteDBNodeTableRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteDBNodeTable (DeleteDBNodeTableRequest) returns (RPCSuccess);",
          "doc": "删除表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "truncateDBNodeTable",
          "requestMessageName": "TruncateDBNodeTableRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc truncateDBNodeTable (TruncateDBNodeTableRequest) returns (RPCSuccess);",
          "doc": "清空表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkDBNodeStatus",
          "requestMessageName": "CheckDBNodeStatusRequest",
          "responseMessageName": "CheckDBNodeStatusResponse",
          "code": "rpc checkDBNodeStatus(CheckDBNodeStatusRequest) returns (CheckDBNodeStatusResponse);",
          "doc": "检查数据库节点状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_db_node.proto",
      "doc": "数据库节点服务"
    },
    {
      "name": "DNSService",
      "methods": [
        {
          "name": "findAllDNSIssues",
          "requestMessageName": "FindAllDNSIssuesRequest",
          "responseMessageName": "FindAllDNSIssuesResponse",
          "code": "rpc findAllDNSIssues (FindAllDNSIssuesRequest) returns (FindAllDNSIssuesResponse);",
          "doc": "查找问题",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_dns.proto",
      "doc": "域名解析服务"
    },
    {
      "name": "DNSDomainService",
      "methods": [
        {
          "name": "createDNSDomain",
          "requestMessageName": "CreateDNSDomainRequest",
          "responseMessageName": "CreateDNSDomainResponse",
          "code": "rpc createDNSDomain (CreateDNSDomainRequest) returns (CreateDNSDomainResponse);",
          "doc": "创建域名",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateDNSDomain",
          "requestMessageName": "UpdateDNSDomainRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateDNSDomain (UpdateDNSDomainRequest) returns (RPCSuccess);",
          "doc": "修改域名",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteDNSDomain",
          "requestMessageName": "DeleteDNSDomainRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteDNSDomain (DeleteDNSDomainRequest) returns (RPCSuccess);",
          "doc": "删除域名",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "recoverDNSDomain",
          "requestMessageName": "RecoverDNSDomainRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc recoverDNSDomain (RecoverDNSDomainRequest) returns (RPCSuccess);",
          "doc": "恢复删除的域名",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findDNSDomain",
          "requestMessageName": "FindDNSDomainRequest",
          "responseMessageName": "FindDNSDomainResponse",
          "code": "rpc findDNSDomain (FindDNSDomainRequest) returns (FindDNSDomainResponse);",
          "doc": "查询单个域名完整信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findBasicDNSDomain",
          "requestMessageName": "FindBasicDNSDomainRequest",
          "responseMessageName": "FindBasicDNSDomainResponse",
          "code": "rpc findBasicDNSDomain (FindBasicDNSDomainRequest) returns (FindBasicDNSDomainResponse);",
          "doc": "查询单个域名基础信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllDNSDomainsWithDNSProviderId",
          "requestMessageName": "CountAllDNSDomainsWithDNSProviderIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllDNSDomainsWithDNSProviderId (CountAllDNSDomainsWithDNSProviderIdRequest) returns (RPCCountResponse);",
          "doc": "计算服务商下的域名数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllDNSDomainsWithDNSProviderId",
          "requestMessageName": "FindAllDNSDomainsWithDNSProviderIdRequest",
          "responseMessageName": "FindAllDNSDomainsWithDNSProviderIdResponse",
          "code": "rpc findAllDNSDomainsWithDNSProviderId (FindAllDNSDomainsWithDNSProviderIdRequest) returns (FindAllDNSDomainsWithDNSProviderIdResponse);",
          "doc": "列出服务商下的所有域名",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllBasicDNSDomainsWithDNSProviderId",
          "requestMessageName": "FindAllBasicDNSDomainsWithDNSProviderIdRequest",
          "responseMessageName": "FindAllBasicDNSDomainsWithDNSProviderIdResponse",
          "code": "rpc findAllBasicDNSDomainsWithDNSProviderId (FindAllBasicDNSDomainsWithDNSProviderIdRequest) returns (FindAllBasicDNSDomainsWithDNSProviderIdResponse);",
          "doc": "列出服务商下的所有域名基本信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listBasicDNSDomainsWithDNSProviderId",
          "requestMessageName": "ListBasicDNSDomainsWithDNSProviderIdRequest",
          "responseMessageName": "ListDNSDomainsWithDNSProviderIdResponse",
          "code": "rpc listBasicDNSDomainsWithDNSProviderId (ListBasicDNSDomainsWithDNSProviderIdRequest) returns (ListDNSDomainsWithDNSProviderIdResponse);",
          "doc": "列出服务商下的单页域名信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "syncDNSDomainData",
          "requestMessageName": "SyncDNSDomainDataRequest",
          "responseMessageName": "SyncDNSDomainDataResponse",
          "code": "rpc syncDNSDomainData (SyncDNSDomainDataRequest) returns (SyncDNSDomainDataResponse);",
          "doc": "同步域名解析",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllDNSDomainRoutes",
          "requestMessageName": "FindAllDNSDomainRoutesRequest",
          "responseMessageName": "FindAllDNSDomainRoutesResponse",
          "code": "rpc findAllDNSDomainRoutes (FindAllDNSDomainRoutesRequest) returns (FindAllDNSDomainRoutesResponse);",
          "doc": "查看支持的线路",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "existAvailableDomains",
          "requestMessageName": "ExistAvailableDomainsRequest",
          "responseMessageName": "ExistAvailableDomainsResponse",
          "code": "rpc existAvailableDomains (ExistAvailableDomainsRequest) returns (ExistAvailableDomainsResponse);",
          "doc": "判断是否有域名可选",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "existDNSDomainRecord",
          "requestMessageName": "ExistDNSDomainRecordRequest",
          "responseMessageName": "ExistDNSDomainRecordResponse",
          "code": "rpc existDNSDomainRecord (ExistDNSDomainRecordRequest) returns (ExistDNSDomainRecordResponse);",
          "doc": "检查域名是否在记录中",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "syncDNSDomainsFromProvider",
          "requestMessageName": "SyncDNSDomainsFromProviderRequest",
          "responseMessageName": "SyncDNSDomainsFromProviderResponse",
          "code": "rpc syncDNSDomainsFromProvider(SyncDNSDomainsFromProviderRequest) returns (SyncDNSDomainsFromProviderResponse);",
          "doc": "从服务商同步域名",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_dns_domain.proto",
      "doc": "DNS域名相关"
    },
    {
      "name": "DNSProviderService",
      "methods": [
        {
          "name": "createDNSProvider",
          "requestMessageName": "CreateDNSProviderRequest",
          "responseMessageName": "CreateDNSProviderResponse",
          "code": "rpc createDNSProvider (CreateDNSProviderRequest) returns (CreateDNSProviderResponse);",
          "doc": "创建服务商",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateDNSProvider",
          "requestMessageName": "UpdateDNSProviderRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateDNSProvider (UpdateDNSProviderRequest) returns (RPCSuccess);",
          "doc": "修改服务商",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledDNSProviders",
          "requestMessageName": "CountAllEnabledDNSProvidersRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledDNSProviders (CountAllEnabledDNSProvidersRequest) returns (RPCCountResponse);",
          "doc": "计算服务商数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledDNSProviders",
          "requestMessageName": "ListEnabledDNSProvidersRequest",
          "responseMessageName": "ListEnabledDNSProvidersResponse",
          "code": "rpc listEnabledDNSProviders (ListEnabledDNSProvidersRequest) returns (ListEnabledDNSProvidersResponse);",
          "doc": "列出单页服务商信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledDNSProviders",
          "requestMessageName": "FindAllEnabledDNSProvidersRequest",
          "responseMessageName": "FindAllEnabledDNSProvidersResponse",
          "code": "rpc findAllEnabledDNSProviders (FindAllEnabledDNSProvidersRequest) returns (FindAllEnabledDNSProvidersResponse);",
          "doc": "查找所有的DNS服务商",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteDNSProvider",
          "requestMessageName": "DeleteDNSProviderRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteDNSProvider (DeleteDNSProviderRequest) returns (RPCSuccess);",
          "doc": "删除服务商",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledDNSProvider",
          "requestMessageName": "FindEnabledDNSProviderRequest",
          "responseMessageName": "FindEnabledDNSProviderResponse",
          "code": "rpc findEnabledDNSProvider (FindEnabledDNSProviderRequest) returns (FindEnabledDNSProviderResponse);",
          "doc": "查找单个服务商",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllDNSProviderTypes",
          "requestMessageName": "FindAllDNSProviderTypesRequest",
          "responseMessageName": "FindAllDNSProviderTypesResponse",
          "code": "rpc findAllDNSProviderTypes (FindAllDNSProviderTypesRequest) returns (FindAllDNSProviderTypesResponse);",
          "doc": "取得所有服务商类型",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledDNSProvidersWithType",
          "requestMessageName": "FindAllEnabledDNSProvidersWithTypeRequest",
          "responseMessageName": "FindAllEnabledDNSProvidersWithTypeResponse",
          "code": "rpc findAllEnabledDNSProvidersWithType (FindAllEnabledDNSProvidersWithTypeRequest) returns (FindAllEnabledDNSProvidersWithTypeResponse);",
          "doc": "取得某个类型的所有服务商",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_dns_provider.proto",
      "doc": "DNS服务商相关服务"
    },
    {
      "name": "DNSTaskService",
      "methods": [
        {
          "name": "existsDNSTasks",
          "requestMessageName": "ExistsDNSTasksRequest",
          "responseMessageName": "ExistsDNSTasksResponse",
          "code": "rpc existsDNSTasks (ExistsDNSTasksRequest) returns (ExistsDNSTasksResponse);",
          "doc": "检查是否有正在执行的任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllDoingDNSTasks",
          "requestMessageName": "FindAllDoingDNSTasksRequest",
          "responseMessageName": "FindAllDoingDNSTasksResponse",
          "code": "rpc findAllDoingDNSTasks (FindAllDoingDNSTasksRequest) returns (FindAllDoingDNSTasksResponse);",
          "doc": "查找正在执行的所有任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteDNSTask",
          "requestMessageName": "DeleteDNSTaskRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteDNSTask (DeleteDNSTaskRequest) returns (RPCSuccess);",
          "doc": "删除任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteAllDNSTasks",
          "requestMessageName": "DeleteAllDNSTasksRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteAllDNSTasks(DeleteAllDNSTasksRequest) returns (RPCSuccess);",
          "doc": "删除所有同步任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_dns_task.proto",
      "doc": "DNS同步相关任务"
    },
    {
      "name": "FileService",
      "methods": [
        {
          "name": "findEnabledFile",
          "requestMessageName": "FindEnabledFileRequest",
          "responseMessageName": "FindEnabledFileResponse",
          "code": "rpc findEnabledFile (FindEnabledFileRequest) returns (FindEnabledFileResponse);",
          "doc": "查找文件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createFile",
          "requestMessageName": "CreateFileRequest",
          "responseMessageName": "CreateFileResponse",
          "code": "rpc createFile (CreateFileRequest) returns (CreateFileResponse);",
          "doc": "创建文件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateFileFinished",
          "requestMessageName": "UpdateFileFinishedRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateFileFinished (UpdateFileFinishedRequest) returns (RPCSuccess);",
          "doc": "将文件置为已完成",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_file.proto",
      "doc": "文件相关服务"
    },
    {
      "name": "FileChunkService",
      "methods": [
        {
          "name": "createFileChunk",
          "requestMessageName": "CreateFileChunkRequest",
          "responseMessageName": "CreateFileChunkResponse",
          "code": "rpc createFileChunk (CreateFileChunkRequest) returns (CreateFileChunkResponse);",
          "doc": "创建文件片段",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllFileChunkIds",
          "requestMessageName": "FindAllFileChunkIdsRequest",
          "responseMessageName": "FindAllFileChunkIdsResponse",
          "code": "rpc findAllFileChunkIds (FindAllFileChunkIdsRequest) returns (FindAllFileChunkIdsResponse);",
          "doc": "获取的一个文件的所有片段IDs",
          "roles": [
            "dns",
            "user",
            "node",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "downloadFileChunk",
          "requestMessageName": "DownloadFileChunkRequest",
          "responseMessageName": "DownloadFileChunkResponse",
          "code": "rpc downloadFileChunk (DownloadFileChunkRequest) returns (DownloadFileChunkResponse);",
          "doc": "下载文件片段",
          "roles": [
            "dns",
            "user",
            "node",
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_file_chunk.proto",
      "doc": "文件片段相关服务"
    },
    {
      "name": "FirewallService",
      "methods": [
        {
          "name": "composeFirewallGlobalBoard",
          "requestMessageName": "ComposeFirewallGlobalBoardRequest",
          "responseMessageName": "ComposeFirewallGlobalBoardResponse",
          "code": "rpc composeFirewallGlobalBoard (ComposeFirewallGlobalBoardRequest) returns (ComposeFirewallGlobalBoardResponse);",
          "doc": "组合看板数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "notifyHTTPFirewallEvent",
          "requestMessageName": "NotifyHTTPFirewallEventRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc notifyHTTPFirewallEvent (NotifyHTTPFirewallEventRequest) returns (RPCSuccess);",
          "doc": "发送告警(notify)消息",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "countFirewallDailyBlocks",
          "requestMessageName": "CountFirewallDailyBlocksRequest",
          "responseMessageName": "CountFirewallDailyBlocksResponse",
          "code": "rpc countFirewallDailyBlocks(CountFirewallDailyBlocksRequest) returns (CountFirewallDailyBlocksResponse);",
          "doc": "读取当前Block动作次数",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_firewall.proto",
      "doc": "防火墙全局服务"
    },
    {
      "name": "FormalClientBrowserService",
      "methods": [
        {
          "name": "createFormalClientBrowser",
          "requestMessageName": "CreateFormalClientBrowserRequest",
          "responseMessageName": "CreateFormalClientBrowserResponse",
          "code": "rpc createFormalClientBrowser(CreateFormalClientBrowserRequest) returns (CreateFormalClientBrowserResponse);",
          "doc": "创建浏览器信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countFormalClientBrowsers",
          "requestMessageName": "CountFormalClientBrowsersRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countFormalClientBrowsers(CountFormalClientBrowsersRequest) returns (RPCCountResponse);",
          "doc": "计算浏览器信息数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listFormalClientBrowsers",
          "requestMessageName": "ListFormalClientBrowsersRequest",
          "responseMessageName": "ListFormalClientBrowsersResponse",
          "code": "rpc listFormalClientBrowsers(ListFormalClientBrowsersRequest) returns (ListFormalClientBrowsersResponse);",
          "doc": "列出单页浏览器信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateFormalClientBrowser",
          "requestMessageName": "UpdateFormalClientBrowserRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateFormalClientBrowser(UpdateFormalClientBrowserRequest) returns (RPCSuccess);",
          "doc": "修改浏览器信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findFormalClientBrowserWithDataId",
          "requestMessageName": "FindFormalClientBrowserWithDataIdRequest",
          "responseMessageName": "FindFormalClientBrowserWithDataIdResponse",
          "code": "rpc findFormalClientBrowserWithDataId(FindFormalClientBrowserWithDataIdRequest) returns (FindFormalClientBrowserWithDataIdResponse);",
          "doc": "通过dataId查询浏览器信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_formal_client_browser.proto",
      "doc": "浏览器信息库服务"
    },
    {
      "name": "FormalClientSystemService",
      "methods": [
        {
          "name": "createFormalClientSystem",
          "requestMessageName": "CreateFormalClientSystemRequest",
          "responseMessageName": "CreateFormalClientSystemResponse",
          "code": "rpc createFormalClientSystem(CreateFormalClientSystemRequest) returns (CreateFormalClientSystemResponse);",
          "doc": "创建操作系统信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countFormalClientSystems",
          "requestMessageName": "CountFormalClientSystemsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countFormalClientSystems(CountFormalClientSystemsRequest) returns (RPCCountResponse);",
          "doc": "计算操作系统信息数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listFormalClientSystems",
          "requestMessageName": "ListFormalClientSystemsRequest",
          "responseMessageName": "ListFormalClientSystemsResponse",
          "code": "rpc listFormalClientSystems(ListFormalClientSystemsRequest) returns (ListFormalClientSystemsResponse);",
          "doc": "列出单页操作系统信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateFormalClientSystem",
          "requestMessageName": "UpdateFormalClientSystemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateFormalClientSystem(UpdateFormalClientSystemRequest) returns (RPCSuccess);",
          "doc": "修改操作系统信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findFormalClientSystemWithDataId",
          "requestMessageName": "FindFormalClientSystemWithDataIdRequest",
          "responseMessageName": "FindFormalClientSystemWithDataIdResponse",
          "code": "rpc findFormalClientSystemWithDataId(FindFormalClientSystemWithDataIdRequest) returns (FindFormalClientSystemWithDataIdResponse);",
          "doc": "通过dataId查询操作系统信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_formal_client_system.proto",
      "doc": "操作系统信息库服务"
    },
    {
      "name": "HTTPAccessLogService",
      "methods": [
        {
          "name": "createHTTPAccessLogs",
          "requestMessageName": "CreateHTTPAccessLogsRequest",
          "responseMessageName": "CreateHTTPAccessLogsResponse",
          "code": "rpc createHTTPAccessLogs (CreateHTTPAccessLogsRequest) returns (CreateHTTPAccessLogsResponse);",
          "doc": "创建访问日志",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "listHTTPAccessLogs",
          "requestMessageName": "ListHTTPAccessLogsRequest",
          "responseMessageName": "ListHTTPAccessLogsResponse",
          "code": "rpc listHTTPAccessLogs (ListHTTPAccessLogsRequest) returns (ListHTTPAccessLogsResponse);",
          "doc": "列出单页访问日志",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHTTPAccessLog",
          "requestMessageName": "FindHTTPAccessLogRequest",
          "responseMessageName": "FindHTTPAccessLogResponse",
          "code": "rpc findHTTPAccessLog (FindHTTPAccessLogRequest) returns (FindHTTPAccessLogResponse);",
          "doc": "查找单个日志",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHTTPAccessLogPartitions",
          "requestMessageName": "FindHTTPAccessLogPartitionsRequest",
          "responseMessageName": "FindHTTPAccessLogPartitionsResponse",
          "code": "rpc findHTTPAccessLogPartitions(FindHTTPAccessLogPartitionsRequest) returns (FindHTTPAccessLogPartitionsResponse);",
          "doc": "查找日志分区",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_access_log.proto",
      "doc": "访问日志相关服务"
    },
    {
      "name": "HTTPAccessLogPolicyService",
      "methods": [
        {
          "name": "countAllHTTPAccessLogPolicies",
          "requestMessageName": "CountAllHTTPAccessLogPoliciesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllHTTPAccessLogPolicies (CountAllHTTPAccessLogPoliciesRequest) returns (RPCCountResponse);",
          "doc": "计算访问日志策略数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listHTTPAccessLogPolicies",
          "requestMessageName": "ListHTTPAccessLogPoliciesRequest",
          "responseMessageName": "ListHTTPAccessLogPoliciesResponse",
          "code": "rpc listHTTPAccessLogPolicies (ListHTTPAccessLogPoliciesRequest) returns (ListHTTPAccessLogPoliciesResponse);",
          "doc": "列出单页访问日志策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createHTTPAccessLogPolicy",
          "requestMessageName": "CreateHTTPAccessLogPolicyRequest",
          "responseMessageName": "CreateHTTPAccessLogPolicyResponse",
          "code": "rpc createHTTPAccessLogPolicy (CreateHTTPAccessLogPolicyRequest) returns (CreateHTTPAccessLogPolicyResponse);",
          "doc": "创建访问日志策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPAccessLogPolicy",
          "requestMessageName": "UpdateHTTPAccessLogPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPAccessLogPolicy (UpdateHTTPAccessLogPolicyRequest) returns (RPCSuccess);",
          "doc": "修改访问日志策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHTTPAccessLogPolicy",
          "requestMessageName": "FindHTTPAccessLogPolicyRequest",
          "responseMessageName": "FindHTTPAccessLogPolicyResponse",
          "code": "rpc findHTTPAccessLogPolicy (FindHTTPAccessLogPolicyRequest) returns (FindHTTPAccessLogPolicyResponse);",
          "doc": "查找单个访问日志策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteHTTPAccessLogPolicy",
          "requestMessageName": "DeleteHTTPAccessLogPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteHTTPAccessLogPolicy (DeleteHTTPAccessLogPolicyRequest) returns (RPCSuccess);",
          "doc": "删除访问日志策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "writeHTTPAccessLogPolicy",
          "requestMessageName": "WriteHTTPAccessLogPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc writeHTTPAccessLogPolicy (WriteHTTPAccessLogPolicyRequest) returns (RPCSuccess);",
          "doc": "测试写入某个访问日志策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_access_log_policy.proto",
      "doc": "访问日志策略服务"
    },
    {
      "name": "HTTPAuthPolicyService",
      "methods": [
        {
          "name": "createHTTPAuthPolicy",
          "requestMessageName": "CreateHTTPAuthPolicyRequest",
          "responseMessageName": "CreateHTTPAuthPolicyResponse",
          "code": "rpc createHTTPAuthPolicy (CreateHTTPAuthPolicyRequest) returns (CreateHTTPAuthPolicyResponse);",
          "doc": "创建策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPAuthPolicy",
          "requestMessageName": "UpdateHTTPAuthPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPAuthPolicy (UpdateHTTPAuthPolicyRequest) returns (RPCSuccess);",
          "doc": "修改策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPAuthPolicy",
          "requestMessageName": "FindEnabledHTTPAuthPolicyRequest",
          "responseMessageName": "FindEnabledHTTPAuthPolicyResponse",
          "code": "rpc findEnabledHTTPAuthPolicy (FindEnabledHTTPAuthPolicyRequest) returns (FindEnabledHTTPAuthPolicyResponse);",
          "doc": "查找策略信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_auth_policy.proto",
      "doc": "服务认证策略服务"
    },
    {
      "name": "HTTPCachePolicyService",
      "methods": [
        {
          "name": "findAllEnabledHTTPCachePolicies",
          "requestMessageName": "FindAllEnabledHTTPCachePoliciesRequest",
          "responseMessageName": "FindAllEnabledHTTPCachePoliciesResponse",
          "code": "rpc findAllEnabledHTTPCachePolicies (FindAllEnabledHTTPCachePoliciesRequest) returns (FindAllEnabledHTTPCachePoliciesResponse);",
          "doc": "获取所有可用策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createHTTPCachePolicy",
          "requestMessageName": "CreateHTTPCachePolicyRequest",
          "responseMessageName": "CreateHTTPCachePolicyResponse",
          "code": "rpc createHTTPCachePolicy (CreateHTTPCachePolicyRequest) returns (CreateHTTPCachePolicyResponse);",
          "doc": "创建缓存策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPCachePolicy",
          "requestMessageName": "UpdateHTTPCachePolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPCachePolicy (UpdateHTTPCachePolicyRequest) returns (RPCSuccess);",
          "doc": "修改缓存策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteHTTPCachePolicy",
          "requestMessageName": "DeleteHTTPCachePolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteHTTPCachePolicy (DeleteHTTPCachePolicyRequest) returns (RPCSuccess);",
          "doc": "删除缓存策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledHTTPCachePolicies",
          "requestMessageName": "CountAllEnabledHTTPCachePoliciesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledHTTPCachePolicies (CountAllEnabledHTTPCachePoliciesRequest) returns (RPCCountResponse);",
          "doc": "计算缓存策略数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledHTTPCachePolicies",
          "requestMessageName": "ListEnabledHTTPCachePoliciesRequest",
          "responseMessageName": "ListEnabledHTTPCachePoliciesResponse",
          "code": "rpc listEnabledHTTPCachePolicies (ListEnabledHTTPCachePoliciesRequest) returns (ListEnabledHTTPCachePoliciesResponse);",
          "doc": "列出单页的缓存策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPCachePolicyConfig",
          "requestMessageName": "FindEnabledHTTPCachePolicyConfigRequest",
          "responseMessageName": "FindEnabledHTTPCachePolicyConfigResponse",
          "code": "rpc findEnabledHTTPCachePolicyConfig (FindEnabledHTTPCachePolicyConfigRequest) returns (FindEnabledHTTPCachePolicyConfigResponse);",
          "doc": "查找单个缓存策略配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPCachePolicy",
          "requestMessageName": "FindEnabledHTTPCachePolicyRequest",
          "responseMessageName": "FindEnabledHTTPCachePolicyResponse",
          "code": "rpc findEnabledHTTPCachePolicy (FindEnabledHTTPCachePolicyRequest) returns (FindEnabledHTTPCachePolicyResponse);",
          "doc": "查找单个缓存策略信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPCachePolicyRefs",
          "requestMessageName": "UpdateHTTPCachePolicyRefsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPCachePolicyRefs (UpdateHTTPCachePolicyRefsRequest) returns (RPCSuccess);",
          "doc": "设置缓存策略的默认条件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_cache_policy.proto",
      "doc": "缓存策略服务"
    },
    {
      "name": "HTTPCacheTaskService",
      "methods": [
        {
          "name": "createHTTPCacheTask",
          "requestMessageName": "CreateHTTPCacheTaskRequest",
          "responseMessageName": "CreateHTTPCacheTaskResponse",
          "code": "rpc createHTTPCacheTask(CreateHTTPCacheTaskRequest) returns (CreateHTTPCacheTaskResponse);",
          "doc": "创建任务",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countHTTPCacheTasks",
          "requestMessageName": "CountHTTPCacheTasksRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countHTTPCacheTasks(CountHTTPCacheTasksRequest) returns (RPCCountResponse);",
          "doc": "计算任务总数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countDoingHTTPCacheTasks",
          "requestMessageName": "CountDoingHTTPCacheTasksRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countDoingHTTPCacheTasks(CountDoingHTTPCacheTasksRequest) returns (RPCCountResponse);",
          "doc": "计算正在执行的任务数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listHTTPCacheTasks",
          "requestMessageName": "ListHTTPCacheTasksRequest",
          "responseMessageName": "ListHTTPCacheTasksResponse",
          "code": "rpc listHTTPCacheTasks(ListHTTPCacheTasksRequest) returns (ListHTTPCacheTasksResponse);",
          "doc": "列出单页任务",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPCacheTask",
          "requestMessageName": "FindEnabledHTTPCacheTaskRequest",
          "responseMessageName": "FindEnabledHTTPCacheTaskResponse",
          "code": "rpc findEnabledHTTPCacheTask(FindEnabledHTTPCacheTaskRequest) returns (FindEnabledHTTPCacheTaskResponse);",
          "doc": "查找单个任务",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteHTTPCacheTask",
          "requestMessageName": "DeleteHTTPCacheTaskRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteHTTPCacheTask(DeleteHTTPCacheTaskRequest) returns (RPCSuccess);",
          "doc": "删除任务",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "resetHTTPCacheTask",
          "requestMessageName": "ResetHTTPCacheTaskRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc resetHTTPCacheTask(ResetHTTPCacheTaskRequest) returns (RPCSuccess);",
          "doc": "重置任务状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_cache_task.proto",
      "doc": "缓存任务管理"
    },
    {
      "name": "HTTPCacheTaskKeyService",
      "methods": [
        {
          "name": "validateHTTPCacheTaskKeys",
          "requestMessageName": "ValidateHTTPCacheTaskKeysRequest",
          "responseMessageName": "ValidateHTTPCacheTaskKeysResponse",
          "code": "rpc validateHTTPCacheTaskKeys(ValidateHTTPCacheTaskKeysRequest) returns (ValidateHTTPCacheTaskKeysResponse);",
          "doc": "校验缓存Key",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findDoingHTTPCacheTaskKeys",
          "requestMessageName": "FindDoingHTTPCacheTaskKeysRequest",
          "responseMessageName": "FindDoingHTTPCacheTaskKeysResponse",
          "code": "rpc findDoingHTTPCacheTaskKeys(FindDoingHTTPCacheTaskKeysRequest) returns (FindDoingHTTPCacheTaskKeysResponse);",
          "doc": "查找需要执行的Key",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPCacheTaskKeysStatus",
          "requestMessageName": "UpdateHTTPCacheTaskKeysStatusRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPCacheTaskKeysStatus(UpdateHTTPCacheTaskKeysStatusRequest) returns (RPCSuccess);",
          "doc": "更新一组Key状态",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "countHTTPCacheTaskKeysWithDay",
          "requestMessageName": "CountHTTPCacheTaskKeysWithDayRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countHTTPCacheTaskKeysWithDay(CountHTTPCacheTaskKeysWithDayRequest) returns (RPCCountResponse);",
          "doc": "计算当天已经清理的Key数量",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_cache_task_key.proto",
      "doc": "缓存任务Key管理"
    },
    {
      "name": "HTTPFastcgiService",
      "methods": [
        {
          "name": "createHTTPFastcgi",
          "requestMessageName": "CreateHTTPFastcgiRequest",
          "responseMessageName": "CreateHTTPFastcgiResponse",
          "code": "rpc createHTTPFastcgi (CreateHTTPFastcgiRequest) returns (CreateHTTPFastcgiResponse);",
          "doc": "创建Fastcgi",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPFastcgi",
          "requestMessageName": "UpdateHTTPFastcgiRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPFastcgi (UpdateHTTPFastcgiRequest) returns (RPCSuccess);",
          "doc": "修改Fastcgi",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPFastcgi",
          "requestMessageName": "FindEnabledHTTPFastcgiRequest",
          "responseMessageName": "FindEnabledHTTPFastcgiResponse",
          "code": "rpc findEnabledHTTPFastcgi (FindEnabledHTTPFastcgiRequest) returns (FindEnabledHTTPFastcgiResponse);",
          "doc": "获取Fastcgi详情",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPFastcgiConfig",
          "requestMessageName": "FindEnabledHTTPFastcgiConfigRequest",
          "responseMessageName": "FindEnabledHTTPFastcgiConfigResponse",
          "code": "rpc findEnabledHTTPFastcgiConfig (FindEnabledHTTPFastcgiConfigRequest) returns (FindEnabledHTTPFastcgiConfigResponse);",
          "doc": "获取Fastcgi配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_fastcgi.proto",
      "doc": "Fastcgi服务"
    },
    {
      "name": "HTTPFirewallPolicyService",
      "methods": [
        {
          "name": "findAllEnabledHTTPFirewallPolicies",
          "requestMessageName": "FindAllEnabledHTTPFirewallPoliciesRequest",
          "responseMessageName": "FindAllEnabledHTTPFirewallPoliciesResponse",
          "code": "rpc findAllEnabledHTTPFirewallPolicies (FindAllEnabledHTTPFirewallPoliciesRequest) returns (FindAllEnabledHTTPFirewallPoliciesResponse);",
          "doc": "获取所有可用策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createHTTPFirewallPolicy",
          "requestMessageName": "CreateHTTPFirewallPolicyRequest",
          "responseMessageName": "CreateHTTPFirewallPolicyResponse",
          "code": "rpc createHTTPFirewallPolicy (CreateHTTPFirewallPolicyRequest) returns (CreateHTTPFirewallPolicyResponse);",
          "doc": "创建防火墙策略",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "createEmptyHTTPFirewallPolicy",
          "requestMessageName": "CreateEmptyHTTPFirewallPolicyRequest",
          "responseMessageName": "CreateEmptyHTTPFirewallPolicyResponse",
          "code": "rpc createEmptyHTTPFirewallPolicy (CreateEmptyHTTPFirewallPolicyRequest) returns (CreateEmptyHTTPFirewallPolicyResponse);",
          "doc": "创建空防火墙策略",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPFirewallPolicy",
          "requestMessageName": "UpdateHTTPFirewallPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPFirewallPolicy (UpdateHTTPFirewallPolicyRequest) returns (RPCSuccess);",
          "doc": "修改防火墙策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPFirewallPolicyGroups",
          "requestMessageName": "UpdateHTTPFirewallPolicyGroupsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPFirewallPolicyGroups (UpdateHTTPFirewallPolicyGroupsRequest) returns (RPCSuccess);",
          "doc": "修改分组信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPFirewallInboundConfig",
          "requestMessageName": "UpdateHTTPFirewallInboundConfigRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPFirewallInboundConfig (UpdateHTTPFirewallInboundConfigRequest) returns (RPCSuccess);",
          "doc": "修改inbound信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledHTTPFirewallPolicies",
          "requestMessageName": "CountAllEnabledHTTPFirewallPoliciesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledHTTPFirewallPolicies (CountAllEnabledHTTPFirewallPoliciesRequest) returns (RPCCountResponse);",
          "doc": "计算可用的防火墙策略数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledHTTPFirewallPolicies",
          "requestMessageName": "ListEnabledHTTPFirewallPoliciesRequest",
          "responseMessageName": "ListEnabledHTTPFirewallPoliciesResponse",
          "code": "rpc listEnabledHTTPFirewallPolicies (ListEnabledHTTPFirewallPoliciesRequest) returns (ListEnabledHTTPFirewallPoliciesResponse);",
          "doc": "列出单页的防火墙策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteHTTPFirewallPolicy",
          "requestMessageName": "DeleteHTTPFirewallPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteHTTPFirewallPolicy (DeleteHTTPFirewallPolicyRequest) returns (RPCSuccess);",
          "doc": "删除某个防火墙策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPFirewallPolicyConfig",
          "requestMessageName": "FindEnabledHTTPFirewallPolicyConfigRequest",
          "responseMessageName": "FindEnabledHTTPFirewallPolicyConfigResponse",
          "code": "rpc findEnabledHTTPFirewallPolicyConfig (FindEnabledHTTPFirewallPolicyConfigRequest) returns (FindEnabledHTTPFirewallPolicyConfigResponse);",
          "doc": "查找单个防火墙配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPFirewallPolicy",
          "requestMessageName": "FindEnabledHTTPFirewallPolicyRequest",
          "responseMessageName": "FindEnabledHTTPFirewallPolicyResponse",
          "code": "rpc findEnabledHTTPFirewallPolicy (FindEnabledHTTPFirewallPolicyRequest) returns (FindEnabledHTTPFirewallPolicyResponse);",
          "doc": "获取防火墙的基本信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "importHTTPFirewallPolicy",
          "requestMessageName": "ImportHTTPFirewallPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc importHTTPFirewallPolicy (ImportHTTPFirewallPolicyRequest) returns (RPCSuccess);",
          "doc": "导入策略数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkHTTPFirewallPolicyIPStatus",
          "requestMessageName": "CheckHTTPFirewallPolicyIPStatusRequest",
          "responseMessageName": "CheckHTTPFirewallPolicyIPStatusResponse",
          "code": "rpc checkHTTPFirewallPolicyIPStatus (CheckHTTPFirewallPolicyIPStatusRequest) returns (CheckHTTPFirewallPolicyIPStatusResponse);",
          "doc": "检查IP状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_firewall_policy.proto",
      "doc": "HTTP防火墙（WAF）服务"
    },
    {
      "name": "HTTPFirewallRuleGroupService",
      "methods": [
        {
          "name": "updateHTTPFirewallRuleGroupIsOn",
          "requestMessageName": "UpdateHTTPFirewallRuleGroupIsOnRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPFirewallRuleGroupIsOn (UpdateHTTPFirewallRuleGroupIsOnRequest) returns (RPCSuccess);",
          "doc": "设置是否启用分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "createHTTPFirewallRuleGroup",
          "requestMessageName": "CreateHTTPFirewallRuleGroupRequest",
          "responseMessageName": "CreateHTTPFirewallRuleGroupResponse",
          "code": "rpc createHTTPFirewallRuleGroup (CreateHTTPFirewallRuleGroupRequest) returns (CreateHTTPFirewallRuleGroupResponse);",
          "doc": "创建分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPFirewallRuleGroup",
          "requestMessageName": "UpdateHTTPFirewallRuleGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPFirewallRuleGroup (UpdateHTTPFirewallRuleGroupRequest) returns (RPCSuccess);",
          "doc": "修改分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPFirewallRuleGroupConfig",
          "requestMessageName": "FindEnabledHTTPFirewallRuleGroupConfigRequest",
          "responseMessageName": "FindEnabledHTTPFirewallRuleGroupConfigResponse",
          "code": "rpc findEnabledHTTPFirewallRuleGroupConfig (FindEnabledHTTPFirewallRuleGroupConfigRequest) returns (FindEnabledHTTPFirewallRuleGroupConfigResponse);",
          "doc": "获取分组配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPFirewallRuleGroup",
          "requestMessageName": "FindEnabledHTTPFirewallRuleGroupRequest",
          "responseMessageName": "FindEnabledHTTPFirewallRuleGroupResponse",
          "code": "rpc findEnabledHTTPFirewallRuleGroup (FindEnabledHTTPFirewallRuleGroupRequest) returns (FindEnabledHTTPFirewallRuleGroupResponse);",
          "doc": "获取分组信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPFirewallRuleGroupSets",
          "requestMessageName": "UpdateHTTPFirewallRuleGroupSetsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPFirewallRuleGroupSets (UpdateHTTPFirewallRuleGroupSetsRequest) returns (RPCSuccess);",
          "doc": "修改分组的规则集",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "addHTTPFirewallRuleGroupSet",
          "requestMessageName": "AddHTTPFirewallRuleGroupSetRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc addHTTPFirewallRuleGroupSet(AddHTTPFirewallRuleGroupSetRequest) returns (RPCSuccess);",
          "doc": "添加规则集",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_firewall_rule_group.proto",
      "doc": "WAF分组服务"
    },
    {
      "name": "HTTPFirewallRuleSetService",
      "methods": [
        {
          "name": "createOrUpdateHTTPFirewallRuleSetFromConfig",
          "requestMessageName": "CreateOrUpdateHTTPFirewallRuleSetFromConfigRequest",
          "responseMessageName": "CreateOrUpdateHTTPFirewallRuleSetFromConfigResponse",
          "code": "rpc createOrUpdateHTTPFirewallRuleSetFromConfig (CreateOrUpdateHTTPFirewallRuleSetFromConfigRequest) returns (CreateOrUpdateHTTPFirewallRuleSetFromConfigResponse);",
          "doc": "根据配置创建或修改规则集",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPFirewallRuleSetIsOn",
          "requestMessageName": "UpdateHTTPFirewallRuleSetIsOnRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPFirewallRuleSetIsOn (UpdateHTTPFirewallRuleSetIsOnRequest) returns (RPCSuccess);",
          "doc": "设置开启状态",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPFirewallRuleSetConfig",
          "requestMessageName": "FindEnabledHTTPFirewallRuleSetConfigRequest",
          "responseMessageName": "FindEnabledHTTPFirewallRuleSetConfigResponse",
          "code": "rpc findEnabledHTTPFirewallRuleSetConfig (FindEnabledHTTPFirewallRuleSetConfigRequest) returns (FindEnabledHTTPFirewallRuleSetConfigResponse);",
          "doc": "查找规则集配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPFirewallRuleSet",
          "requestMessageName": "FindEnabledHTTPFirewallRuleSetRequest",
          "responseMessageName": "FindEnabledHTTPFirewallRuleSetResponse",
          "code": "rpc findEnabledHTTPFirewallRuleSet (FindEnabledHTTPFirewallRuleSetRequest) returns (FindEnabledHTTPFirewallRuleSetResponse);",
          "doc": "查找规则集信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_firewall_rule_set.proto",
      "doc": "WAF规则集服务"
    },
    {
      "name": "HTTPGzipService",
      "methods": [
        {
          "name": "createHTTPGzip",
          "requestMessageName": "CreateHTTPGzipRequest",
          "responseMessageName": "CreateHTTPGzipResponse",
          "code": "rpc createHTTPGzip (CreateHTTPGzipRequest) returns (CreateHTTPGzipResponse);",
          "doc": "创建Gzip配置",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPGzipConfig",
          "requestMessageName": "FindEnabledGzipConfigRequest",
          "responseMessageName": "FindEnabledGzipConfigResponse",
          "code": "rpc findEnabledHTTPGzipConfig (FindEnabledGzipConfigRequest) returns (FindEnabledGzipConfigResponse);",
          "doc": "查找Gzip配置",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPGzip",
          "requestMessageName": "UpdateHTTPGzipRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPGzip (UpdateHTTPGzipRequest) returns (RPCSuccess);",
          "doc": "修改Gzip配置",
          "roles": [],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_gzip.proto",
      "doc": "Gzip服务"
    },
    {
      "name": "HTTPHeaderService",
      "methods": [
        {
          "name": "createHTTPHeader",
          "requestMessageName": "CreateHTTPHeaderRequest",
          "responseMessageName": "CreateHTTPHeaderResponse",
          "code": "rpc createHTTPHeader (CreateHTTPHeaderRequest) returns (CreateHTTPHeaderResponse);",
          "doc": "创建Header",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPHeader",
          "requestMessageName": "UpdateHTTPHeaderRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPHeader (UpdateHTTPHeaderRequest) returns (RPCSuccess);",
          "doc": "修改Header",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPHeaderConfig",
          "requestMessageName": "FindEnabledHTTPHeaderConfigRequest",
          "responseMessageName": "FindEnabledHTTPHeaderConfigResponse",
          "code": "rpc findEnabledHTTPHeaderConfig (FindEnabledHTTPHeaderConfigRequest) returns (FindEnabledHTTPHeaderConfigResponse);",
          "doc": "查找配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_header.proto",
      "doc": "HTTP Header管理服务"
    },
    {
      "name": "HTTPHeaderPolicyService",
      "methods": [
        {
          "name": "findEnabledHTTPHeaderPolicyConfig",
          "requestMessageName": "FindEnabledHTTPHeaderPolicyConfigRequest",
          "responseMessageName": "FindEnabledHTTPHeaderPolicyConfigResponse",
          "code": "rpc findEnabledHTTPHeaderPolicyConfig (FindEnabledHTTPHeaderPolicyConfigRequest) returns (FindEnabledHTTPHeaderPolicyConfigResponse);",
          "doc": "查找策略配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "createHTTPHeaderPolicy",
          "requestMessageName": "CreateHTTPHeaderPolicyRequest",
          "responseMessageName": "CreateHTTPHeaderPolicyResponse",
          "code": "rpc createHTTPHeaderPolicy (CreateHTTPHeaderPolicyRequest) returns (CreateHTTPHeaderPolicyResponse);",
          "doc": "创建策略",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPHeaderPolicyAddingHeaders",
          "requestMessageName": "UpdateHTTPHeaderPolicyAddingHeadersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPHeaderPolicyAddingHeaders (UpdateHTTPHeaderPolicyAddingHeadersRequest) returns (RPCSuccess);",
          "doc": "修改AddHeaders",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPHeaderPolicySettingHeaders",
          "requestMessageName": "UpdateHTTPHeaderPolicySettingHeadersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPHeaderPolicySettingHeaders (UpdateHTTPHeaderPolicySettingHeadersRequest) returns (RPCSuccess);",
          "doc": "修改SetHeaders",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPHeaderPolicyAddingTrailers",
          "requestMessageName": "UpdateHTTPHeaderPolicyAddingTrailersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPHeaderPolicyAddingTrailers (UpdateHTTPHeaderPolicyAddingTrailersRequest) returns (RPCSuccess);",
          "doc": "修改AddTrailers",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPHeaderPolicyReplacingHeaders",
          "requestMessageName": "UpdateHTTPHeaderPolicyReplacingHeadersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPHeaderPolicyReplacingHeaders (UpdateHTTPHeaderPolicyReplacingHeadersRequest) returns (RPCSuccess);",
          "doc": "修改ReplaceHeaders",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPHeaderPolicyDeletingHeaders",
          "requestMessageName": "UpdateHTTPHeaderPolicyDeletingHeadersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPHeaderPolicyDeletingHeaders (UpdateHTTPHeaderPolicyDeletingHeadersRequest) returns (RPCSuccess);",
          "doc": "修改删除的Headers",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPHeaderPolicyNonStandardHeaders",
          "requestMessageName": "UpdateHTTPHeaderPolicyNonStandardHeadersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPHeaderPolicyNonStandardHeaders(UpdateHTTPHeaderPolicyNonStandardHeadersRequest) returns (RPCSuccess);",
          "doc": "修改非标的Headers",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPHeaderPolicyCORS",
          "requestMessageName": "UpdateHTTPHeaderPolicyCORSRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPHeaderPolicyCORS(UpdateHTTPHeaderPolicyCORSRequest) returns (RPCSuccess);",
          "doc": "修改策略CORS设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_header_policy.proto",
      "doc": "HTTP Header策略服务"
    },
    {
      "name": "HTTPLocationService",
      "methods": [
        {
          "name": "createHTTPLocation",
          "requestMessageName": "CreateHTTPLocationRequest",
          "responseMessageName": "CreateHTTPLocationResponse",
          "code": "rpc createHTTPLocation (CreateHTTPLocationRequest) returns (CreateHTTPLocationResponse);",
          "doc": "创建路径规则",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPLocation",
          "requestMessageName": "UpdateHTTPLocationRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPLocation (UpdateHTTPLocationRequest) returns (RPCSuccess);",
          "doc": "修改路径规则",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPLocationConfig",
          "requestMessageName": "FindEnabledHTTPLocationConfigRequest",
          "responseMessageName": "FindEnabledHTTPLocationConfigResponse",
          "code": "rpc findEnabledHTTPLocationConfig (FindEnabledHTTPLocationConfigRequest) returns (FindEnabledHTTPLocationConfigResponse);",
          "doc": "查找路径规则配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteHTTPLocation",
          "requestMessageName": "DeleteHTTPLocationRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteHTTPLocation (DeleteHTTPLocationRequest) returns (RPCSuccess);",
          "doc": "删除路径规则",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAndInitHTTPLocationReverseProxyConfig",
          "requestMessageName": "FindAndInitHTTPLocationReverseProxyConfigRequest",
          "responseMessageName": "FindAndInitHTTPLocationReverseProxyConfigResponse",
          "code": "rpc findAndInitHTTPLocationReverseProxyConfig (FindAndInitHTTPLocationReverseProxyConfigRequest) returns (FindAndInitHTTPLocationReverseProxyConfigResponse);",
          "doc": "查找反向代理设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAndInitHTTPLocationWebConfig",
          "requestMessageName": "FindAndInitHTTPLocationWebConfigRequest",
          "responseMessageName": "FindAndInitHTTPLocationWebConfigResponse",
          "code": "rpc findAndInitHTTPLocationWebConfig (FindAndInitHTTPLocationWebConfigRequest) returns (FindAndInitHTTPLocationWebConfigResponse);",
          "doc": "初始化Web设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPLocationReverseProxy",
          "requestMessageName": "UpdateHTTPLocationReverseProxyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPLocationReverseProxy (UpdateHTTPLocationReverseProxyRequest) returns (RPCSuccess);",
          "doc": "修改反向代理设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_location.proto",
      "doc": "路由规则服务"
    },
    {
      "name": "HTTPPageService",
      "methods": [
        {
          "name": "createHTTPPage",
          "requestMessageName": "CreateHTTPPageRequest",
          "responseMessageName": "CreateHTTPPageResponse",
          "code": "rpc createHTTPPage (CreateHTTPPageRequest) returns (CreateHTTPPageResponse);",
          "doc": "创建Page",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPPage",
          "requestMessageName": "UpdateHTTPPageRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPPage (UpdateHTTPPageRequest) returns (RPCSuccess);",
          "doc": "修改Page",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPPageConfig",
          "requestMessageName": "FindEnabledHTTPPageConfigRequest",
          "responseMessageName": "FindEnabledHTTPPageConfigResponse",
          "code": "rpc findEnabledHTTPPageConfig (FindEnabledHTTPPageConfigRequest) returns (FindEnabledHTTPPageConfigResponse);",
          "doc": "查找单个Page配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_page.proto",
      "doc": "自定义页面服务"
    },
    {
      "name": "HTTPRewriteRuleService",
      "methods": [
        {
          "name": "createHTTPRewriteRule",
          "requestMessageName": "CreateHTTPRewriteRuleRequest",
          "responseMessageName": "CreateHTTPRewriteRuleResponse",
          "code": "rpc createHTTPRewriteRule (CreateHTTPRewriteRuleRequest) returns (CreateHTTPRewriteRuleResponse);",
          "doc": "创建重写规则",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPRewriteRule",
          "requestMessageName": "UpdateHTTPRewriteRuleRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPRewriteRule (UpdateHTTPRewriteRuleRequest) returns (RPCSuccess);",
          "doc": "修改重写规则",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_rewrite_rule.proto",
      "doc": "重写规则服务"
    },
    {
      "name": "HTTPWebService",
      "methods": [
        {
          "name": "createHTTPWeb",
          "requestMessageName": "CreateHTTPWebRequest",
          "responseMessageName": "CreateHTTPWebResponse",
          "code": "rpc createHTTPWeb (CreateHTTPWebRequest) returns (CreateHTTPWebResponse);",
          "doc": "创建Web配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPWeb",
          "requestMessageName": "FindEnabledHTTPWebRequest",
          "responseMessageName": "FindEnabledHTTPWebResponse",
          "code": "rpc findEnabledHTTPWeb (FindEnabledHTTPWebRequest) returns (FindEnabledHTTPWebResponse);",
          "doc": "查找Web信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledHTTPWebConfig",
          "requestMessageName": "FindEnabledHTTPWebConfigRequest",
          "responseMessageName": "FindEnabledHTTPWebConfigResponse",
          "code": "rpc findEnabledHTTPWebConfig (FindEnabledHTTPWebConfigRequest) returns (FindEnabledHTTPWebConfigResponse);",
          "doc": "查找Web配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWeb",
          "requestMessageName": "UpdateHTTPWebRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWeb (UpdateHTTPWebRequest) returns (RPCSuccess);",
          "doc": "更改Web配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebCompression",
          "requestMessageName": "UpdateHTTPWebCompressionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebCompression (UpdateHTTPWebCompressionRequest) returns (RPCSuccess);",
          "doc": "更改压缩配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebOptimization",
          "requestMessageName": "UpdateHTTPWebOptimizationRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebOptimization(UpdateHTTPWebOptimizationRequest) returns (RPCSuccess);",
          "doc": "更改页面优化配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebWebP",
          "requestMessageName": "UpdateHTTPWebWebPRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebWebP (UpdateHTTPWebWebPRequest) returns (RPCSuccess);",
          "doc": "更改WebP配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebRemoteAddr",
          "requestMessageName": "UpdateHTTPWebRemoteAddrRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebRemoteAddr(UpdateHTTPWebRemoteAddrRequest) returns (RPCSuccess);",
          "doc": "更改RemoteAddr配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebCharset",
          "requestMessageName": "UpdateHTTPWebCharsetRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebCharset (UpdateHTTPWebCharsetRequest) returns (RPCSuccess);",
          "doc": "更改字符集配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebRequestHeader",
          "requestMessageName": "UpdateHTTPWebRequestHeaderRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebRequestHeader (UpdateHTTPWebRequestHeaderRequest) returns (RPCSuccess);",
          "doc": "更改请求Header策略",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebResponseHeader",
          "requestMessageName": "UpdateHTTPWebResponseHeaderRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebResponseHeader (UpdateHTTPWebResponseHeaderRequest) returns (RPCSuccess);",
          "doc": "更改响应Header策略",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebShutdown",
          "requestMessageName": "UpdateHTTPWebShutdownRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebShutdown (UpdateHTTPWebShutdownRequest) returns (RPCSuccess);",
          "doc": "更改Shutdown",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebPages",
          "requestMessageName": "UpdateHTTPWebPagesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebPages (UpdateHTTPWebPagesRequest) returns (RPCSuccess);",
          "doc": "更改Pages",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebAccessLog",
          "requestMessageName": "UpdateHTTPWebAccessLogRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebAccessLog (UpdateHTTPWebAccessLogRequest) returns (RPCSuccess);",
          "doc": "更改访问日志配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebStat",
          "requestMessageName": "UpdateHTTPWebStatRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebStat (UpdateHTTPWebStatRequest) returns (RPCSuccess);",
          "doc": "更改统计配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebCache",
          "requestMessageName": "UpdateHTTPWebCacheRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebCache (UpdateHTTPWebCacheRequest) returns (RPCSuccess);",
          "doc": "更改缓存配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebFirewall",
          "requestMessageName": "UpdateHTTPWebFirewallRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebFirewall (UpdateHTTPWebFirewallRequest) returns (RPCSuccess);",
          "doc": "更改防火墙设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebLocations",
          "requestMessageName": "UpdateHTTPWebLocationsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebLocations (UpdateHTTPWebLocationsRequest) returns (RPCSuccess);",
          "doc": "更改路径规则配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebRedirectToHTTPS",
          "requestMessageName": "UpdateHTTPWebRedirectToHTTPSRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebRedirectToHTTPS (UpdateHTTPWebRedirectToHTTPSRequest) returns (RPCSuccess);",
          "doc": "更改跳转到HTTPS设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebWebsocket",
          "requestMessageName": "UpdateHTTPWebWebsocketRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebWebsocket (UpdateHTTPWebWebsocketRequest) returns (RPCSuccess);",
          "doc": "更改Websocket设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebFastcgi",
          "requestMessageName": "UpdateHTTPWebFastcgiRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebFastcgi (UpdateHTTPWebFastcgiRequest) returns (RPCSuccess);",
          "doc": "更改Fastcgi设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebRewriteRules",
          "requestMessageName": "UpdateHTTPWebRewriteRulesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebRewriteRules (UpdateHTTPWebRewriteRulesRequest) returns (RPCSuccess);",
          "doc": "更改重写规则设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebHostRedirects",
          "requestMessageName": "UpdateHTTPWebHostRedirectsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebHostRedirects (UpdateHTTPWebHostRedirectsRequest) returns (RPCSuccess);",
          "doc": "更改主机跳转设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHTTPWebHostRedirects",
          "requestMessageName": "FindHTTPWebHostRedirectsRequest",
          "responseMessageName": "FindHTTPWebHostRedirectsResponse",
          "code": "rpc findHTTPWebHostRedirects (FindHTTPWebHostRedirectsRequest) returns (FindHTTPWebHostRedirectsResponse);",
          "doc": "查找主机跳转设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebAuth",
          "requestMessageName": "UpdateHTTPWebAuthRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebAuth (UpdateHTTPWebAuthRequest) returns (RPCSuccess);",
          "doc": "更改认证设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebCommon",
          "requestMessageName": "UpdateHTTPWebCommonRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebCommon(UpdateHTTPWebCommonRequest) returns (RPCSuccess);",
          "doc": "更改通用设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebRequestLimit",
          "requestMessageName": "UpdateHTTPWebRequestLimitRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebRequestLimit(UpdateHTTPWebRequestLimitRequest) returns (RPCSuccess);",
          "doc": "修改请求限制",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHTTPWebRequestLimit",
          "requestMessageName": "FindHTTPWebRequestLimitRequest",
          "responseMessageName": "FindHTTPWebRequestLimitResponse",
          "code": "rpc findHTTPWebRequestLimit(FindHTTPWebRequestLimitRequest) returns (FindHTTPWebRequestLimitResponse);",
          "doc": "查找请求限制",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebRequestScripts",
          "requestMessageName": "UpdateHTTPWebRequestScriptsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebRequestScripts(UpdateHTTPWebRequestScriptsRequest) returns (RPCSuccess);",
          "doc": "修改请求脚本",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHTTPWebRequestScripts",
          "requestMessageName": "FindHTTPWebRequestScriptsRequest",
          "responseMessageName": "FindHTTPWebRequestScriptsResponse",
          "code": "rpc findHTTPWebRequestScripts(FindHTTPWebRequestScriptsRequest) returns (FindHTTPWebRequestScriptsResponse);",
          "doc": "查找请求脚本",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebUAM",
          "requestMessageName": "UpdateHTTPWebUAMRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebUAM(UpdateHTTPWebUAMRequest) returns (RPCSuccess);",
          "doc": "修改UAM设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHTTPWebUAM",
          "requestMessageName": "FindHTTPWebUAMRequest",
          "responseMessageName": "FindHTTPWebUAMResponse",
          "code": "rpc findHTTPWebUAM(FindHTTPWebUAMRequest) returns (FindHTTPWebUAMResponse);",
          "doc": "查找UAM设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebCC",
          "requestMessageName": "UpdateHTTPWebCCRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebCC(UpdateHTTPWebCCRequest) returns (RPCSuccess);",
          "doc": "修改CC设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHTTPWebCC",
          "requestMessageName": "FindHTTPWebCCRequest",
          "responseMessageName": "FindHTTPWebCCResponse",
          "code": "rpc findHTTPWebCC(FindHTTPWebCCRequest) returns (FindHTTPWebCCResponse);",
          "doc": "查找CC设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebReferers",
          "requestMessageName": "UpdateHTTPWebReferersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebReferers(UpdateHTTPWebReferersRequest) returns (RPCSuccess);",
          "doc": "修改防盗链设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHTTPWebReferers",
          "requestMessageName": "FindHTTPWebReferersRequest",
          "responseMessageName": "FindHTTPWebReferersResponse",
          "code": "rpc findHTTPWebReferers(FindHTTPWebReferersRequest) returns (FindHTTPWebReferersResponse);",
          "doc": "查找防盗链设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebUserAgent",
          "requestMessageName": "UpdateHTTPWebUserAgentRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebUserAgent(UpdateHTTPWebUserAgentRequest) returns (RPCSuccess);",
          "doc": "修改UserAgent设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHTTPWebUserAgent",
          "requestMessageName": "FindHTTPWebUserAgentRequest",
          "responseMessageName": "FindHTTPWebUserAgentResponse",
          "code": "rpc findHTTPWebUserAgent(FindHTTPWebUserAgentRequest) returns (FindHTTPWebUserAgentResponse);",
          "doc": "查找UserAgent设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_web.proto",
      "doc": "HTTP Web相关管理服务"
    },
    {
      "name": "HTTPWebsocketService",
      "methods": [
        {
          "name": "createHTTPWebsocket",
          "requestMessageName": "CreateHTTPWebsocketRequest",
          "responseMessageName": "CreateHTTPWebsocketResponse",
          "code": "rpc createHTTPWebsocket (CreateHTTPWebsocketRequest) returns (CreateHTTPWebsocketResponse);",
          "doc": "创建Websocket配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateHTTPWebsocket",
          "requestMessageName": "UpdateHTTPWebsocketRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateHTTPWebsocket (UpdateHTTPWebsocketRequest) returns (RPCSuccess);",
          "doc": "修改Websocket配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_http_websocket.proto",
      "doc": "HTTP Websocket管理服务"
    },
    {
      "name": "IPItemService",
      "methods": [
        {
          "name": "createIPItem",
          "requestMessageName": "CreateIPItemRequest",
          "responseMessageName": "CreateIPItemResponse",
          "code": "rpc createIPItem (CreateIPItemRequest) returns (CreateIPItemResponse);",
          "doc": "创建IP",
          "roles": [
            "dns",
            "user",
            "node",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createIPItems",
          "requestMessageName": "CreateIPItemsRequest",
          "responseMessageName": "CreateIPItemsResponse",
          "code": "rpc createIPItems(CreateIPItemsRequest) returns (CreateIPItemsResponse);",
          "doc": "创建一组IP",
          "roles": [
            "dns",
            "user",
            "node",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateIPItem",
          "requestMessageName": "UpdateIPItemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateIPItem (UpdateIPItemRequest) returns (RPCSuccess);",
          "doc": "修改IP",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteIPItem",
          "requestMessageName": "DeleteIPItemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteIPItem (DeleteIPItemRequest) returns (RPCSuccess);",
          "doc": "删除IP",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteIPItems",
          "requestMessageName": "DeleteIPItemsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteIPItems(DeleteIPItemsRequest) returns (RPCSuccess);",
          "doc": "批量删除IP",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countIPItemsWithListId",
          "requestMessageName": "CountIPItemsWithListIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countIPItemsWithListId (CountIPItemsWithListIdRequest) returns (RPCCountResponse);",
          "doc": "计算IP数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listIPItemsWithListId",
          "requestMessageName": "ListIPItemsWithListIdRequest",
          "responseMessageName": "ListIPItemsWithListIdResponse",
          "code": "rpc listIPItemsWithListId (ListIPItemsWithListIdRequest) returns (ListIPItemsWithListIdResponse);",
          "doc": "列出单页的IP",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledIPItem",
          "requestMessageName": "FindEnabledIPItemRequest",
          "responseMessageName": "FindEnabledIPItemResponse",
          "code": "rpc findEnabledIPItem (FindEnabledIPItemRequest) returns (FindEnabledIPItemResponse);",
          "doc": "查找单个IP",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listIPItemsAfterVersion",
          "requestMessageName": "ListIPItemsAfterVersionRequest",
          "responseMessageName": "ListIPItemsAfterVersionResponse",
          "code": "rpc listIPItemsAfterVersion (ListIPItemsAfterVersionRequest) returns (ListIPItemsAfterVersionResponse);",
          "doc": "根据版本列出一组IP",
          "roles": [
            "node",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkIPItemStatus",
          "requestMessageName": "CheckIPItemStatusRequest",
          "responseMessageName": "CheckIPItemStatusResponse",
          "code": "rpc checkIPItemStatus (CheckIPItemStatusRequest) returns (CheckIPItemStatusResponse);",
          "doc": "检查IP状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "existsEnabledIPItem",
          "requestMessageName": "ExistsEnabledIPItemRequest",
          "responseMessageName": "ExistsEnabledIPItemResponse",
          "code": "rpc existsEnabledIPItem (ExistsEnabledIPItemRequest) returns (ExistsEnabledIPItemResponse);",
          "doc": "检查IP是否存在",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledIPItems",
          "requestMessageName": "CountAllEnabledIPItemsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledIPItems(CountAllEnabledIPItemsRequest) returns (RPCCountResponse);",
          "doc": "计算所有IP数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listAllEnabledIPItems",
          "requestMessageName": "ListAllEnabledIPItemsRequest",
          "responseMessageName": "ListAllEnabledIPItemsResponse",
          "code": "rpc listAllEnabledIPItems(ListAllEnabledIPItemsRequest) returns (ListAllEnabledIPItemsResponse);",
          "doc": "列出所有名单中的IP",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateIPItemsRead",
          "requestMessageName": "UpdateIPItemsReadRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateIPItemsRead(UpdateIPItemsReadRequest) returns (RPCSuccess);",
          "doc": "设置所有为已读",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ip_item.proto",
      "doc": "IP条目管理"
    },
    {
      "name": "IPLibraryService",
      "methods": [
        {
          "name": "createIPLibrary",
          "requestMessageName": "CreateIPLibraryRequest",
          "responseMessageName": "CreateIPLibraryResponse",
          "code": "rpc createIPLibrary (CreateIPLibraryRequest) returns (CreateIPLibraryResponse) {\n\t\toption deprecated = true;\n\t};\n\n\t// 查找最新的IP库\n\trpc findLatestIPLibraryWithType (FindLatestIPLibraryWithTypeRequest) returns (FindLatestIPLibraryWithTypeResponse) {\n\t\toption deprecated = true;\n\t};\n\n\t// 查找单个IP库\n\trpc findEnabledIPLibrary (FindEnabledIPLibraryRequest) returns (FindEnabledIPLibraryResponse) {\n\t\toption deprecated = true;\n\t};\n\n\t// 列出某个类型的所有IP库\n\trpc findAllEnabledIPLibrariesWithType (FindAllEnabledIPLibrariesWithTypeRequest) returns (FindAllEnabledIPLibrariesWithTypeResponse) {\n\t\toption deprecated = true;\n\t};\n\n\t// 删除IP库\n\trpc deleteIPLibrary (DeleteIPLibraryRequest) returns (RPCSuccess) {\n\t\toption deprecated = true;\n\t};",
          "doc": "创建IP库",
          "roles": [
            "admin"
          ],
          "isDeprecated": true
        },
        {
          "name": "lookupIPRegion",
          "requestMessageName": "LookupIPRegionRequest",
          "responseMessageName": "LookupIPRegionResponse",
          "code": "rpc lookupIPRegion (LookupIPRegionRequest) returns (LookupIPRegionResponse);",
          "doc": "查询某个IP信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "lookupIPRegions",
          "requestMessageName": "LookupIPRegionsRequest",
          "responseMessageName": "LookupIPRegionsResponse",
          "code": "rpc lookupIPRegions (LookupIPRegionsRequest) returns (LookupIPRegionsResponse);",
          "doc": "查询一组IP信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ip_library.proto",
      "doc": "IP库"
    },
    {
      "name": "IPLibraryArtifactService",
      "methods": [
        {
          "name": "createIPLibraryArtifact",
          "requestMessageName": "CreateIPLibraryArtifactRequest",
          "responseMessageName": "CreateIPLibraryArtifactResponse",
          "code": "rpc createIPLibraryArtifact(CreateIPLibraryArtifactRequest) returns (CreateIPLibraryArtifactResponse);",
          "doc": "创建制品",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateIPLibraryArtifactIsPublic",
          "requestMessageName": "UpdateIPLibraryArtifactIsPublicRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateIPLibraryArtifactIsPublic(UpdateIPLibraryArtifactIsPublicRequest) returns (RPCSuccess);",
          "doc": "使用/取消使用制品",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllIPLibraryArtifacts",
          "requestMessageName": "FindAllIPLibraryArtifactsRequest",
          "responseMessageName": "FindAllIPLibraryArtifactsResponse",
          "code": "rpc findAllIPLibraryArtifacts(FindAllIPLibraryArtifactsRequest) returns (FindAllIPLibraryArtifactsResponse);",
          "doc": "查询所有制品",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findIPLibraryArtifact",
          "requestMessageName": "FindIPLibraryArtifactRequest",
          "responseMessageName": "FindIPLibraryArtifactResponse",
          "code": "rpc findIPLibraryArtifact(FindIPLibraryArtifactRequest) returns (FindIPLibraryArtifactResponse);",
          "doc": "查找单个制品信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findPublicIPLibraryArtifact",
          "requestMessageName": "FindPublicIPLibraryArtifactRequest",
          "responseMessageName": "FindPublicIPLibraryArtifactResponse",
          "code": "rpc findPublicIPLibraryArtifact(FindPublicIPLibraryArtifactRequest) returns (FindPublicIPLibraryArtifactResponse);",
          "doc": "查找当前正在使用的制品",
          "roles": [
            "dns",
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteIPLibraryArtifact",
          "requestMessageName": "DeleteIPLibraryArtifactRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteIPLibraryArtifact(DeleteIPLibraryArtifactRequest) returns (RPCSuccess);",
          "doc": "删除制品",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ip_library_artifact.proto",
      "doc": "IP库制品"
    },
    {
      "name": "IPLibraryFileService",
      "methods": [
        {
          "name": "findAllFinishedIPLibraryFiles",
          "requestMessageName": "FindAllFinishedIPLibraryFilesRequest",
          "responseMessageName": "FindAllFinishedIPLibraryFilesResponse",
          "code": "rpc findAllFinishedIPLibraryFiles(FindAllFinishedIPLibraryFilesRequest) returns (FindAllFinishedIPLibraryFilesResponse);",
          "doc": "查找所有已完成的IP库文件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllUnfinishedIPLibraryFiles",
          "requestMessageName": "FindAllUnfinishedIPLibraryFilesRequest",
          "responseMessageName": "FindAllUnfinishedIPLibraryFilesResponse",
          "code": "rpc findAllUnfinishedIPLibraryFiles(FindAllUnfinishedIPLibraryFilesRequest) returns (FindAllUnfinishedIPLibraryFilesResponse);",
          "doc": "查找所有未完成的IP库文件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findIPLibraryFile",
          "requestMessageName": "FindIPLibraryFileRequest",
          "responseMessageName": "FindIPLibraryFileResponse",
          "code": "rpc findIPLibraryFile(FindIPLibraryFileRequest) returns (FindIPLibraryFileResponse);",
          "doc": "查找单个IP库文件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createIPLibraryFile",
          "requestMessageName": "CreateIPLibraryFileRequest",
          "responseMessageName": "CreateIPLibraryFileResponse",
          "code": "rpc createIPLibraryFile(CreateIPLibraryFileRequest) returns (CreateIPLibraryFileResponse);",
          "doc": "创建IP库文件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkCountriesWithIPLibraryFileId",
          "requestMessageName": "CheckCountriesWithIPLibraryFileIdRequest",
          "responseMessageName": "CheckCountriesWithIPLibraryFileIdResponse",
          "code": "rpc checkCountriesWithIPLibraryFileId(CheckCountriesWithIPLibraryFileIdRequest) returns (CheckCountriesWithIPLibraryFileIdResponse);",
          "doc": "检查国家/地区",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkProvincesWithIPLibraryFileId",
          "requestMessageName": "CheckProvincesWithIPLibraryFileIdRequest",
          "responseMessageName": "CheckProvincesWithIPLibraryFileIdResponse",
          "code": "rpc checkProvincesWithIPLibraryFileId(CheckProvincesWithIPLibraryFileIdRequest) returns (CheckProvincesWithIPLibraryFileIdResponse);",
          "doc": "检查省份/州",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkCitiesWithIPLibraryFileId",
          "requestMessageName": "CheckCitiesWithIPLibraryFileIdRequest",
          "responseMessageName": "CheckCitiesWithIPLibraryFileIdResponse",
          "code": "rpc checkCitiesWithIPLibraryFileId(CheckCitiesWithIPLibraryFileIdRequest) returns (CheckCitiesWithIPLibraryFileIdResponse);",
          "doc": "检查城市/市",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkTownsWithIPLibraryFileId",
          "requestMessageName": "CheckTownsWithIPLibraryFileIdRequest",
          "responseMessageName": "CheckTownsWithIPLibraryFileIdResponse",
          "code": "rpc checkTownsWithIPLibraryFileId(CheckTownsWithIPLibraryFileIdRequest) returns (CheckTownsWithIPLibraryFileIdResponse);",
          "doc": "检查区县",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkProvidersWithIPLibraryFileId",
          "requestMessageName": "CheckProvidersWithIPLibraryFileIdRequest",
          "responseMessageName": "CheckProvidersWithIPLibraryFileIdResponse",
          "code": "rpc checkProvidersWithIPLibraryFileId(CheckProvidersWithIPLibraryFileIdRequest) returns (CheckProvidersWithIPLibraryFileIdResponse);",
          "doc": "检查ISP运营商",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "generateIPLibraryFile",
          "requestMessageName": "GenerateIPLibraryFileRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc generateIPLibraryFile(GenerateIPLibraryFileRequest) returns (RPCSuccess);",
          "doc": "生成IP库文件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateIPLibraryFileFinished",
          "requestMessageName": "UpdateIPLibraryFileFinishedRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateIPLibraryFileFinished(UpdateIPLibraryFileFinishedRequest) returns (RPCSuccess);",
          "doc": "设置某个IP库为已完成",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteIPLibraryFile",
          "requestMessageName": "DeleteIPLibraryFileRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteIPLibraryFile(DeleteIPLibraryFileRequest) returns (RPCSuccess);",
          "doc": "删除IP库文件",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ip_library_file.proto",
      "doc": "IP库文件管理"
    },
    {
      "name": "IPListService",
      "methods": [
        {
          "name": "createIPList",
          "requestMessageName": "CreateIPListRequest",
          "responseMessageName": "CreateIPListResponse",
          "code": "rpc createIPList (CreateIPListRequest) returns (CreateIPListResponse);",
          "doc": "创建IP列表",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateIPList",
          "requestMessageName": "UpdateIPListRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateIPList (UpdateIPListRequest) returns (RPCSuccess);",
          "doc": "修改IP列表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledIPList",
          "requestMessageName": "FindEnabledIPListRequest",
          "responseMessageName": "FindEnabledIPListResponse",
          "code": "rpc findEnabledIPList (FindEnabledIPListRequest) returns (FindEnabledIPListResponse);",
          "doc": "查找IP列表信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledIPLists",
          "requestMessageName": "CountAllEnabledIPListsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledIPLists (CountAllEnabledIPListsRequest) returns (RPCCountResponse);",
          "doc": "计算名单数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledIPLists",
          "requestMessageName": "ListEnabledIPListsRequest",
          "responseMessageName": "ListEnabledIPListsResponse",
          "code": "rpc listEnabledIPLists (ListEnabledIPListsRequest) returns (ListEnabledIPListsResponse);",
          "doc": "列出单页名单",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteIPList",
          "requestMessageName": "DeleteIPListRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteIPList (DeleteIPListRequest) returns (RPCSuccess);",
          "doc": "删除IP名单",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "existsEnabledIPList",
          "requestMessageName": "ExistsEnabledIPListRequest",
          "responseMessageName": "ExistsEnabledIPListResponse",
          "code": "rpc existsEnabledIPList (ExistsEnabledIPListRequest) returns (ExistsEnabledIPListResponse);",
          "doc": "检查IPList是否存在",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledIPListContainsIP",
          "requestMessageName": "FindEnabledIPListContainsIPRequest",
          "responseMessageName": "FindEnabledIPListContainsIPResponse",
          "code": "rpc findEnabledIPListContainsIP(FindEnabledIPListContainsIPRequest) returns (FindEnabledIPListContainsIPResponse);",
          "doc": "根据IP来搜索IP名单",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ip_list.proto",
      "doc": "IP列表"
    },
    {
      "name": "LatestItemService",
      "methods": [
        {
          "name": "increaseLatestItem",
          "requestMessageName": "IncreaseLatestItemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc increaseLatestItem (IncreaseLatestItemRequest) returns (RPCSuccess);",
          "doc": "记录最近使用的条目",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_latest_item.proto",
      "doc": "最近使用的条目服务"
    },
    {
      "name": "LogService",
      "methods": [
        {
          "name": "createLog",
          "requestMessageName": "CreateLogRequest",
          "responseMessageName": "CreateLogResponse",
          "code": "rpc createLog (CreateLogRequest) returns (CreateLogResponse);",
          "doc": "创建日志",
          "roles": [
            "user",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countLogs",
          "requestMessageName": "CountLogRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countLogs (CountLogRequest) returns (RPCCountResponse);",
          "doc": "计算日志数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listLogs",
          "requestMessageName": "ListLogsRequest",
          "responseMessageName": "ListLogsResponse",
          "code": "rpc listLogs (ListLogsRequest) returns (ListLogsResponse);",
          "doc": "列出单页日志",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteLogPermanently",
          "requestMessageName": "DeleteLogPermanentlyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteLogPermanently (DeleteLogPermanentlyRequest) returns (RPCSuccess);",
          "doc": "删除单条",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteLogsPermanently",
          "requestMessageName": "DeleteLogsPermanentlyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteLogsPermanently (DeleteLogsPermanentlyRequest) returns (RPCSuccess);",
          "doc": "批量删除",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "cleanLogsPermanently",
          "requestMessageName": "CleanLogsPermanentlyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc cleanLogsPermanently (CleanLogsPermanentlyRequest) returns (RPCSuccess);",
          "doc": "清理",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "sumLogsSize",
          "requestMessageName": "SumLogsSizeRequest",
          "responseMessageName": "SumLogsResponse",
          "code": "rpc sumLogsSize (SumLogsSizeRequest) returns (SumLogsResponse);",
          "doc": "计算日志容量大小",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_log.proto",
      "doc": "审计日志服务"
    },
    {
      "name": "LoginService",
      "methods": [
        {
          "name": "findEnabledLogin",
          "requestMessageName": "FindEnabledLoginRequest",
          "responseMessageName": "FindEnabledLoginResponse",
          "code": "rpc findEnabledLogin (FindEnabledLoginRequest) returns (FindEnabledLoginResponse);",
          "doc": "查找认证",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateLogin",
          "requestMessageName": "UpdateLoginRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateLogin (UpdateLoginRequest) returns (RPCSuccess);",
          "doc": "修改认证",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_login.proto",
      "doc": "认证相关服务"
    },
    {
      "name": "LoginSessionService",
      "methods": [
        {
          "name": "writeLoginSessionValue",
          "requestMessageName": "WriteLoginSessionValueRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc writeLoginSessionValue(WriteLoginSessionValueRequest) returns (RPCSuccess);",
          "doc": "写入SESSION数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteLoginSession",
          "requestMessageName": "DeleteLoginSessionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteLoginSession(DeleteLoginSessionRequest) returns (RPCSuccess);",
          "doc": "删除SESSION",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findLoginSession",
          "requestMessageName": "FindLoginSessionRequest",
          "responseMessageName": "FindLoginSessionResponse",
          "code": "rpc findLoginSession(FindLoginSessionRequest) returns (FindLoginSessionResponse);",
          "doc": "查找SESSION",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_login_session.proto",
      "doc": "登录SESSION服务"
    },
    {
      "name": "MessageService",
      "methods": [
        {
          "name": "countUnreadMessages",
          "requestMessageName": "CountUnreadMessagesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countUnreadMessages (CountUnreadMessagesRequest) returns (RPCCountResponse);",
          "doc": "计算未读消息数",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listUnreadMessages",
          "requestMessageName": "ListUnreadMessagesRequest",
          "responseMessageName": "ListUnreadMessagesResponse",
          "code": "rpc listUnreadMessages (ListUnreadMessagesRequest) returns (ListUnreadMessagesResponse);",
          "doc": "列出单页未读消息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateMessageRead",
          "requestMessageName": "UpdateMessageReadRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateMessageRead (UpdateMessageReadRequest) returns (RPCSuccess);",
          "doc": "设置消息已读状态",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateMessagesRead",
          "requestMessageName": "UpdateMessagesReadRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateMessagesRead (UpdateMessagesReadRequest) returns (RPCSuccess);",
          "doc": "设置一组消息已读状态",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateAllMessagesRead",
          "requestMessageName": "UpdateAllMessagesReadRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateAllMessagesRead (UpdateAllMessagesReadRequest) returns (RPCSuccess);",
          "doc": "设置所有消息为已读",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_message.proto",
      "doc": "消息相关服务"
    },
    {
      "name": "MessageMediaService",
      "methods": [
        {
          "name": "findAllMessageMedias",
          "requestMessageName": "FindAllMessageMediasRequest",
          "responseMessageName": "FindAllMessageMediasResponse",
          "code": "rpc findAllMessageMedias (FindAllMessageMediasRequest) returns (FindAllMessageMediasResponse);",
          "doc": "获取所有支持的媒介",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "sendMediaMessage",
          "requestMessageName": "SendMediaMessageRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc sendMediaMessage(SendMediaMessageRequest) returns (RPCSuccess);",
          "doc": "发送媒介信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_message_media.proto",
      "doc": "消息媒介管理"
    },
    {
      "name": "MessageMediaInstanceService",
      "methods": [
        {
          "name": "createMessageMediaInstance",
          "requestMessageName": "CreateMessageMediaInstanceRequest",
          "responseMessageName": "CreateMessageMediaInstanceResponse",
          "code": "rpc createMessageMediaInstance (CreateMessageMediaInstanceRequest) returns (CreateMessageMediaInstanceResponse);",
          "doc": "创建消息媒介实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateMessageMediaInstance",
          "requestMessageName": "UpdateMessageMediaInstanceRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateMessageMediaInstance (UpdateMessageMediaInstanceRequest) returns (RPCSuccess);",
          "doc": "修改消息媒介实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteMessageMediaInstance",
          "requestMessageName": "DeleteMessageMediaInstanceRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteMessageMediaInstance (DeleteMessageMediaInstanceRequest) returns (RPCSuccess);",
          "doc": "删除消息媒介实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledMessageMediaInstances",
          "requestMessageName": "CountAllEnabledMessageMediaInstancesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledMessageMediaInstances (CountAllEnabledMessageMediaInstancesRequest) returns (RPCCountResponse);",
          "doc": "计算消息媒介实例数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledMessageMediaInstances",
          "requestMessageName": "ListEnabledMessageMediaInstancesRequest",
          "responseMessageName": "ListEnabledMessageMediaInstancesResponse",
          "code": "rpc listEnabledMessageMediaInstances (ListEnabledMessageMediaInstancesRequest) returns (ListEnabledMessageMediaInstancesResponse);",
          "doc": "列出单页消息媒介实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledMessageMediaInstance",
          "requestMessageName": "FindEnabledMessageMediaInstanceRequest",
          "responseMessageName": "FindEnabledMessageMediaInstanceResponse",
          "code": "rpc findEnabledMessageMediaInstance (FindEnabledMessageMediaInstanceRequest) returns (FindEnabledMessageMediaInstanceResponse);",
          "doc": "查找单个消息媒介实例信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_message_media_instance.proto",
      "doc": "消息媒介实例"
    },
    {
      "name": "MessageReceiverService",
      "methods": [
        {
          "name": "updateMessageReceivers",
          "requestMessageName": "UpdateMessageReceiversRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateMessageReceivers (UpdateMessageReceiversRequest) returns (RPCSuccess);",
          "doc": "修改接收者",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledMessageReceivers",
          "requestMessageName": "FindAllEnabledMessageReceiversRequest",
          "responseMessageName": "FindAllEnabledMessageReceiversResponse",
          "code": "rpc findAllEnabledMessageReceivers (FindAllEnabledMessageReceiversRequest) returns (FindAllEnabledMessageReceiversResponse);",
          "doc": "查找接收者",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledMessageReceiversWithMessageRecipientId",
          "requestMessageName": "FindAllEnabledMessageReceiversWithMessageRecipientIdRequest",
          "responseMessageName": "FindAllEnabledMessageReceiversWithMessageRecipientIdResponse",
          "code": "rpc findAllEnabledMessageReceiversWithMessageRecipientId (FindAllEnabledMessageReceiversWithMessageRecipientIdRequest) returns (FindAllEnabledMessageReceiversWithMessageRecipientIdResponse);",
          "doc": "根据接收人查找关联的接收者",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteMessageReceiver",
          "requestMessageName": "DeleteMessageReceiverRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteMessageReceiver (DeleteMessageReceiverRequest) returns (RPCSuccess);",
          "doc": "删除接收者",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledMessageReceivers",
          "requestMessageName": "CountAllEnabledMessageReceiversRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledMessageReceivers (CountAllEnabledMessageReceiversRequest) returns (RPCCountResponse);",
          "doc": "计算接收者数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_message_receiver.proto",
      "doc": "消息对象接收者设置"
    },
    {
      "name": "MessageRecipientService",
      "methods": [
        {
          "name": "createMessageRecipient",
          "requestMessageName": "CreateMessageRecipientRequest",
          "responseMessageName": "CreateMessageRecipientResponse",
          "code": "rpc createMessageRecipient (CreateMessageRecipientRequest) returns (CreateMessageRecipientResponse);",
          "doc": "创建接收人",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateMessageRecipient",
          "requestMessageName": "UpdateMessageRecipientRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateMessageRecipient (UpdateMessageRecipientRequest) returns (RPCSuccess);",
          "doc": "修改接收人",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteMessageRecipient",
          "requestMessageName": "DeleteMessageRecipientRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteMessageRecipient (DeleteMessageRecipientRequest) returns (RPCSuccess);",
          "doc": "删除接收人",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledMessageRecipients",
          "requestMessageName": "CountAllEnabledMessageRecipientsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledMessageRecipients (CountAllEnabledMessageRecipientsRequest) returns (RPCCountResponse);",
          "doc": "计算接收人数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledMessageRecipients",
          "requestMessageName": "ListEnabledMessageRecipientsRequest",
          "responseMessageName": "ListEnabledMessageRecipientsResponse",
          "code": "rpc listEnabledMessageRecipients (ListEnabledMessageRecipientsRequest) returns (ListEnabledMessageRecipientsResponse);",
          "doc": "列出单页接收人",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledMessageRecipient",
          "requestMessageName": "FindEnabledMessageRecipientRequest",
          "responseMessageName": "FindEnabledMessageRecipientResponse",
          "code": "rpc findEnabledMessageRecipient (FindEnabledMessageRecipientRequest) returns (FindEnabledMessageRecipientResponse);",
          "doc": "查找单个接收人信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_message_recipient.proto",
      "doc": "消息接收人"
    },
    {
      "name": "MessageRecipientGroupService",
      "methods": [
        {
          "name": "createMessageRecipientGroup",
          "requestMessageName": "CreateMessageRecipientGroupRequest",
          "responseMessageName": "CreateMessageRecipientGroupResponse",
          "code": "rpc createMessageRecipientGroup (CreateMessageRecipientGroupRequest) returns (CreateMessageRecipientGroupResponse);",
          "doc": "创建分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateMessageRecipientGroup",
          "requestMessageName": "UpdateMessageRecipientGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateMessageRecipientGroup (UpdateMessageRecipientGroupRequest) returns (RPCSuccess);",
          "doc": "修改分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledMessageRecipientGroups",
          "requestMessageName": "FindAllEnabledMessageRecipientGroupsRequest",
          "responseMessageName": "FindAllEnabledMessageRecipientGroupsResponse",
          "code": "rpc findAllEnabledMessageRecipientGroups (FindAllEnabledMessageRecipientGroupsRequest) returns (FindAllEnabledMessageRecipientGroupsResponse);",
          "doc": "查找所有可用的分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteMessageRecipientGroup",
          "requestMessageName": "DeleteMessageRecipientGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteMessageRecipientGroup (DeleteMessageRecipientGroupRequest) returns (RPCSuccess);",
          "doc": "删除分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledMessageRecipientGroup",
          "requestMessageName": "FindEnabledMessageRecipientGroupRequest",
          "responseMessageName": "FindEnabledMessageRecipientGroupResponse",
          "code": "rpc findEnabledMessageRecipientGroup (FindEnabledMessageRecipientGroupRequest) returns (FindEnabledMessageRecipientGroupResponse);",
          "doc": "查找单个分组信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_message_recipient_group.proto",
      "doc": "消息接收人分组"
    },
    {
      "name": "MessageTaskService",
      "methods": [
        {
          "name": "createMessageTask",
          "requestMessageName": "CreateMessageTaskRequest",
          "responseMessageName": "CreateMessageTaskResponse",
          "code": "rpc createMessageTask (CreateMessageTaskRequest) returns (CreateMessageTaskResponse);",
          "doc": "创建消息任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteMessageTask",
          "requestMessageName": "DeleteMessageTaskRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteMessageTask (DeleteMessageTaskRequest) returns (RPCSuccess);",
          "doc": "删除消息任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledMessageTask",
          "requestMessageName": "FindEnabledMessageTaskRequest",
          "responseMessageName": "FindEnabledMessageTaskResponse",
          "code": "rpc findEnabledMessageTask (FindEnabledMessageTaskRequest) returns (FindEnabledMessageTaskResponse);",
          "doc": "读取消息任务状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countMessageTasksWithStatus",
          "requestMessageName": "CountMessageTasksWithStatusRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countMessageTasksWithStatus(CountMessageTasksWithStatusRequest) returns (RPCCountResponse);",
          "doc": "计算某个状态的消息任务数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listMessageTasksWithStatus",
          "requestMessageName": "ListMessageTasksWithStatusRequest",
          "responseMessageName": "ListMessageTasksWithStatusResponse",
          "code": "rpc listMessageTasksWithStatus(ListMessageTasksWithStatusRequest) returns (ListMessageTasksWithStatusResponse);",
          "doc": "根据状态列出某页任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "sendMessageTask",
          "requestMessageName": "SendMessageTaskRequest",
          "responseMessageName": "SendMessageTaskResponse",
          "code": "rpc sendMessageTask(SendMessageTaskRequest) returns (SendMessageTaskResponse);",
          "doc": "发送某个消息任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateMessageTaskStatus",
          "requestMessageName": "UpdateMessageTaskStatusRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateMessageTaskStatus(UpdateMessageTaskStatusRequest) returns (RPCSuccess);",
          "doc": "修改消息任务状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_message_task.proto",
      "doc": "消息发送任务服务"
    },
    {
      "name": "MessageTaskLogService",
      "methods": [
        {
          "name": "countMessageTaskLogs",
          "requestMessageName": "CountMessageTaskLogsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countMessageTaskLogs (CountMessageTaskLogsRequest) returns (RPCCountResponse);",
          "doc": "计算日志数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listMessageTaskLogs",
          "requestMessageName": "ListMessageTaskLogsRequest",
          "responseMessageName": "ListMessageTaskLogsResponse",
          "code": "rpc listMessageTaskLogs (ListMessageTaskLogsRequest) returns (ListMessageTaskLogsResponse);",
          "doc": "列出当页日志",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_message_task_log.proto",
      "doc": "消息发送任务日志"
    },
    {
      "name": "MetricChartService",
      "methods": [
        {
          "name": "createMetricChart",
          "requestMessageName": "CreateMetricChartRequest",
          "responseMessageName": "CreateMetricChartResponse",
          "code": "rpc createMetricChart (CreateMetricChartRequest) returns (CreateMetricChartResponse);",
          "doc": "创建图表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateMetricChart",
          "requestMessageName": "UpdateMetricChartRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateMetricChart (UpdateMetricChartRequest) returns (RPCSuccess);",
          "doc": "修改图表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledMetricChart",
          "requestMessageName": "FindEnabledMetricChartRequest",
          "responseMessageName": "FindEnabledMetricChartResponse",
          "code": "rpc findEnabledMetricChart (FindEnabledMetricChartRequest) returns (FindEnabledMetricChartResponse);",
          "doc": "查找单个图表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countEnabledMetricCharts",
          "requestMessageName": "CountEnabledMetricChartsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countEnabledMetricCharts (CountEnabledMetricChartsRequest) returns (RPCCountResponse);",
          "doc": "计算图表数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledMetricCharts",
          "requestMessageName": "ListEnabledMetricChartsRequest",
          "responseMessageName": "ListEnabledMetricChartsResponse",
          "code": "rpc listEnabledMetricCharts (ListEnabledMetricChartsRequest) returns (ListEnabledMetricChartsResponse);",
          "doc": "列出单页图表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteMetricChart",
          "requestMessageName": "DeleteMetricChartRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteMetricChart (DeleteMetricChartRequest) returns (RPCSuccess);",
          "doc": "删除图表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_metric_chart.proto",
      "doc": "指标图表相关服务"
    },
    {
      "name": "MetricItemService",
      "methods": [
        {
          "name": "createMetricItem",
          "requestMessageName": "CreateMetricItemRequest",
          "responseMessageName": "CreateMetricItemResponse",
          "code": "rpc createMetricItem (CreateMetricItemRequest) returns (CreateMetricItemResponse);",
          "doc": "创建指标",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateMetricItem",
          "requestMessageName": "UpdateMetricItemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateMetricItem (UpdateMetricItemRequest) returns (RPCSuccess);",
          "doc": "修改指标",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledMetricItem",
          "requestMessageName": "FindEnabledMetricItemRequest",
          "responseMessageName": "FindEnabledMetricItemResponse",
          "code": "rpc findEnabledMetricItem (FindEnabledMetricItemRequest) returns (FindEnabledMetricItemResponse);",
          "doc": "查找单个指标信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledMetricItems",
          "requestMessageName": "CountAllEnabledMetricItemsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledMetricItems (CountAllEnabledMetricItemsRequest) returns (RPCCountResponse);",
          "doc": "计算指标数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledMetricItems",
          "requestMessageName": "ListEnabledMetricItemsRequest",
          "responseMessageName": "ListEnabledMetricItemsResponse",
          "code": "rpc listEnabledMetricItems (ListEnabledMetricItemsRequest) returns (ListEnabledMetricItemsResponse);",
          "doc": "列出单页指标",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteMetricItem",
          "requestMessageName": "DeleteMetricItemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteMetricItem (DeleteMetricItemRequest) returns (RPCSuccess);",
          "doc": "删除指标",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_metric_item.proto",
      "doc": "指标相关服务"
    },
    {
      "name": "MetricStatService",
      "methods": [
        {
          "name": "uploadMetricStats",
          "requestMessageName": "UploadMetricStatsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc uploadMetricStats (UploadMetricStatsRequest) returns (RPCSuccess);",
          "doc": "上传统计数据",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "countMetricStats",
          "requestMessageName": "CountMetricStatsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countMetricStats (CountMetricStatsRequest) returns (RPCCountResponse);",
          "doc": "计算指标数据数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listMetricStats",
          "requestMessageName": "ListMetricStatsRequest",
          "responseMessageName": "ListMetricStatsResponse",
          "code": "rpc listMetricStats (ListMetricStatsRequest) returns (ListMetricStatsResponse);",
          "doc": "读取单页指标数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_metric_stat.proto",
      "doc": "指标统计数据相关服务"
    },
    {
      "name": "NodeService",
      "methods": [
        {
          "name": "createNode",
          "requestMessageName": "CreateNodeRequest",
          "responseMessageName": "CreateNodeResponse",
          "code": "rpc createNode (CreateNodeRequest) returns (CreateNodeResponse);",
          "doc": "创建节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "registerClusterNode",
          "requestMessageName": "RegisterClusterNodeRequest",
          "responseMessageName": "RegisterClusterNodeResponse",
          "code": "rpc registerClusterNode (RegisterClusterNodeRequest) returns (RegisterClusterNodeResponse);",
          "doc": "注册集群节点",
          "roles": [
            "cluster"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodes",
          "requestMessageName": "CountAllEnabledNodesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodes (CountAllEnabledNodesRequest) returns (RPCCountResponse);",
          "doc": "所有可用的节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodesMatch",
          "requestMessageName": "CountAllEnabledNodesMatchRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodesMatch (CountAllEnabledNodesMatchRequest) returns (RPCCountResponse);",
          "doc": "计算匹配的节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledNodesMatch",
          "requestMessageName": "ListEnabledNodesMatchRequest",
          "responseMessageName": "ListEnabledNodesMatchResponse",
          "code": "rpc listEnabledNodesMatch (ListEnabledNodesMatchRequest) returns (ListEnabledNodesMatchResponse);",
          "doc": "列出单页节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodesWithNodeClusterId",
          "requestMessageName": "FindAllEnabledNodesWithNodeClusterIdRequest",
          "responseMessageName": "FindAllEnabledNodesWithNodeClusterIdResponse",
          "code": "rpc findAllEnabledNodesWithNodeClusterId (FindAllEnabledNodesWithNodeClusterIdRequest) returns (FindAllEnabledNodesWithNodeClusterIdResponse);",
          "doc": "根据集群查找所有节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNode",
          "requestMessageName": "DeleteNodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNode (DeleteNodeRequest) returns (RPCSuccess);",
          "doc": "删除节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeFromNodeCluster",
          "requestMessageName": "DeleteNodeFromNodeClusterRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeFromNodeCluster (DeleteNodeFromNodeClusterRequest) returns (RPCSuccess);",
          "doc": "从集群中删除节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNode",
          "requestMessageName": "UpdateNodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNode (UpdateNodeRequest) returns (RPCSuccess);",
          "doc": "修改节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNode",
          "requestMessageName": "FindEnabledNodeRequest",
          "responseMessageName": "FindEnabledNodeResponse",
          "code": "rpc findEnabledNode (FindEnabledNodeRequest) returns (FindEnabledNodeResponse);",
          "doc": "获取单个节点信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledBasicNode",
          "requestMessageName": "FindEnabledBasicNodeRequest",
          "responseMessageName": "FindEnabledBasicNodeResponse",
          "code": "rpc findEnabledBasicNode (FindEnabledBasicNodeRequest) returns (FindEnabledBasicNodeResponse);",
          "doc": "获取单个节点基本信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findCurrentNodeConfig",
          "requestMessageName": "FindCurrentNodeConfigRequest",
          "responseMessageName": "FindCurrentNodeConfigResponse",
          "code": "rpc findCurrentNodeConfig (FindCurrentNodeConfigRequest) returns (FindCurrentNodeConfigResponse);",
          "doc": "获取当前节点配置",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "sendCommandToNode",
          "requestMessageName": "NodeStreamMessage",
          "responseMessageName": "NodeStreamMessage",
          "code": "rpc sendCommandToNode (NodeStreamMessage) returns (NodeStreamMessage);",
          "doc": "向节点发送命令",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeStatus",
          "requestMessageName": "UpdateNodeStatusRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeStatus (UpdateNodeStatusRequest) returns (RPCSuccess);",
          "doc": "更新节点状态",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeIsInstalled",
          "requestMessageName": "UpdateNodeIsInstalledRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeIsInstalled (UpdateNodeIsInstalledRequest) returns (RPCSuccess);",
          "doc": "修改节点安装状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "installNode",
          "requestMessageName": "InstallNodeRequest",
          "responseMessageName": "InstallNodeResponse",
          "code": "rpc installNode (InstallNodeRequest) returns (InstallNodeResponse);",
          "doc": "安装节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "upgradeNode",
          "requestMessageName": "UpgradeNodeRequest",
          "responseMessageName": "UpgradeNodeResponse",
          "code": "rpc upgradeNode (UpgradeNodeRequest) returns (UpgradeNodeResponse);",
          "doc": "升级节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "startNode",
          "requestMessageName": "StartNodeRequest",
          "responseMessageName": "StartNodeResponse",
          "code": "rpc startNode (StartNodeRequest) returns (StartNodeResponse);",
          "doc": "启动节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "stopNode",
          "requestMessageName": "StopNodeRequest",
          "responseMessageName": "StopNodeResponse",
          "code": "rpc stopNode (StopNodeRequest) returns (StopNodeResponse);",
          "doc": "停止节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeConnectedAPINodes",
          "requestMessageName": "UpdateNodeConnectedAPINodesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeConnectedAPINodes (UpdateNodeConnectedAPINodesRequest) returns (RPCSuccess);",
          "doc": "更改节点连接的API节点信息",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodesWithNodeGrantId",
          "requestMessageName": "CountAllEnabledNodesWithNodeGrantIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodesWithNodeGrantId (CountAllEnabledNodesWithNodeGrantIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个认证的节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodesWithNodeGrantId",
          "requestMessageName": "FindAllEnabledNodesWithNodeGrantIdRequest",
          "responseMessageName": "FindAllEnabledNodesWithNodeGrantIdResponse",
          "code": "rpc findAllEnabledNodesWithNodeGrantId (FindAllEnabledNodesWithNodeGrantIdRequest) returns (FindAllEnabledNodesWithNodeGrantIdResponse);",
          "doc": "查找使用某个认证的所有节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNotInstalledNodesWithNodeClusterId",
          "requestMessageName": "CountAllNotInstalledNodesWithNodeClusterIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNotInstalledNodesWithNodeClusterId (CountAllNotInstalledNodesWithNodeClusterIdRequest) returns (RPCCountResponse);",
          "doc": "计算没有安装的节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllNotInstalledNodesWithNodeClusterId",
          "requestMessageName": "FindAllNotInstalledNodesWithNodeClusterIdRequest",
          "responseMessageName": "FindAllNotInstalledNodesWithNodeClusterIdResponse",
          "code": "rpc findAllNotInstalledNodesWithNodeClusterId (FindAllNotInstalledNodesWithNodeClusterIdRequest) returns (FindAllNotInstalledNodesWithNodeClusterIdResponse);",
          "doc": "列出所有未安装的节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllUpgradeNodesWithNodeClusterId",
          "requestMessageName": "CountAllUpgradeNodesWithNodeClusterIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllUpgradeNodesWithNodeClusterId (CountAllUpgradeNodesWithNodeClusterIdRequest) returns (RPCCountResponse);",
          "doc": "计算需要升级的节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllUpgradeNodesWithNodeClusterId",
          "requestMessageName": "FindAllUpgradeNodesWithNodeClusterIdRequest",
          "responseMessageName": "FindAllUpgradeNodesWithNodeClusterIdResponse",
          "code": "rpc findAllUpgradeNodesWithNodeClusterId (FindAllUpgradeNodesWithNodeClusterIdRequest) returns (FindAllUpgradeNodesWithNodeClusterIdResponse);",
          "doc": "列出所有需要升级的节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeInstallStatus",
          "requestMessageName": "FindNodeInstallStatusRequest",
          "responseMessageName": "FindNodeInstallStatusResponse",
          "code": "rpc findNodeInstallStatus (FindNodeInstallStatusRequest) returns (FindNodeInstallStatusResponse);",
          "doc": "读取节点安装状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeLogin",
          "requestMessageName": "UpdateNodeLoginRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeLogin (UpdateNodeLoginRequest) returns (RPCSuccess);",
          "doc": "修改节点登录信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodesWithNodeGroupId",
          "requestMessageName": "CountAllEnabledNodesWithNodeGroupIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodesWithNodeGroupId (CountAllEnabledNodesWithNodeGroupIdRequest) returns (RPCCountResponse);",
          "doc": "计算某个节点分组内的节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodesDNSWithNodeClusterId",
          "requestMessageName": "FindAllEnabledNodesDNSWithNodeClusterIdRequest",
          "responseMessageName": "FindAllEnabledNodesDNSWithNodeClusterIdResponse",
          "code": "rpc findAllEnabledNodesDNSWithNodeClusterId (FindAllEnabledNodesDNSWithNodeClusterIdRequest) returns (FindAllEnabledNodesDNSWithNodeClusterIdResponse);",
          "doc": "取得某个集群下的所有节点DNS信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeDNS",
          "requestMessageName": "FindEnabledNodeDNSRequest",
          "responseMessageName": "FindEnabledNodeDNSResponse",
          "code": "rpc findEnabledNodeDNS (FindEnabledNodeDNSRequest) returns (FindEnabledNodeDNSResponse);",
          "doc": "查找单个节点的域名解析信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeDNS",
          "requestMessageName": "UpdateNodeDNSRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeDNS (UpdateNodeDNSRequest) returns (RPCSuccess);",
          "doc": "修改节点的DNS解析信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodesWithNodeRegionId",
          "requestMessageName": "CountAllEnabledNodesWithNodeRegionIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodesWithNodeRegionId (CountAllEnabledNodesWithNodeRegionIdRequest) returns (RPCCountResponse);",
          "doc": "计算某个区域下的节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodesWithIds",
          "requestMessageName": "FindEnabledNodesWithIdsRequest",
          "responseMessageName": "FindEnabledNodesWithIdsResponse",
          "code": "rpc findEnabledNodesWithIds (FindEnabledNodesWithIdsRequest) returns (FindEnabledNodesWithIdsResponse);",
          "doc": "根据一组ID获取节点信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkNodeLatestVersion",
          "requestMessageName": "CheckNodeLatestVersionRequest",
          "responseMessageName": "CheckNodeLatestVersionResponse",
          "code": "rpc checkNodeLatestVersion (CheckNodeLatestVersionRequest) returns (CheckNodeLatestVersionResponse);",
          "doc": "检查新版本",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeUp",
          "requestMessageName": "UpdateNodeUpRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeUp (UpdateNodeUpRequest) returns (RPCSuccess);",
          "doc": "设置节点上线状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "downloadNodeInstallationFile",
          "requestMessageName": "DownloadNodeInstallationFileRequest",
          "responseMessageName": "DownloadNodeInstallationFileResponse",
          "code": "rpc downloadNodeInstallationFile (DownloadNodeInstallationFileRequest) returns (DownloadNodeInstallationFileResponse);",
          "doc": "下载最新边缘节点安装文件",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeSystem",
          "requestMessageName": "UpdateNodeSystemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeSystem(UpdateNodeSystemRequest) returns (RPCSuccess);",
          "doc": "修改节点系统信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeCache",
          "requestMessageName": "UpdateNodeCacheRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeCache(UpdateNodeCacheRequest) returns (RPCSuccess);",
          "doc": "修改节点缓存设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeLevelInfo",
          "requestMessageName": "FindNodeLevelInfoRequest",
          "responseMessageName": "FindNodeLevelInfoResponse",
          "code": "rpc findNodeLevelInfo(FindNodeLevelInfoRequest) returns (FindNodeLevelInfoResponse);",
          "doc": "读取节点级别信息",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeDNSResolver",
          "requestMessageName": "FindNodeDNSResolverRequest",
          "responseMessageName": "FindNodeDNSResolverResponse",
          "code": "rpc findNodeDNSResolver(FindNodeDNSResolverRequest) returns (FindNodeDNSResolverResponse);",
          "doc": "读取节点DNS Resolver",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeDNSResolver",
          "requestMessageName": "UpdateNodeDNSResolverRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeDNSResolver(UpdateNodeDNSResolverRequest) returns (RPCSuccess);",
          "doc": "修改DNS Resolver",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeDDoSProtection",
          "requestMessageName": "FindNodeDDoSProtectionRequest",
          "responseMessageName": "FindNodeDDoSProtectionResponse",
          "code": "rpc findNodeDDoSProtection(FindNodeDDoSProtectionRequest) returns (FindNodeDDoSProtectionResponse);",
          "doc": "获取节点的DDoS设置",
          "roles": [
            "node",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeDDoSProtection",
          "requestMessageName": "UpdateNodeDDoSProtectionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeDDoSProtection(UpdateNodeDDoSProtectionRequest) returns (RPCSuccess);",
          "doc": "修改节点的DDoS设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeGlobalServerConfig",
          "requestMessageName": "FindNodeGlobalServerConfigRequest",
          "responseMessageName": "FindNodeGlobalServerConfigResponse",
          "code": "rpc findNodeGlobalServerConfig(FindNodeGlobalServerConfigRequest) returns (FindNodeGlobalServerConfigResponse);",
          "doc": "取得节点的服务全局配置",
          "roles": [
            "node",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeConfigInfo",
          "requestMessageName": "FindEnabledNodeConfigInfoRequest",
          "responseMessageName": "FindEnabledNodeConfigInfoResponse",
          "code": "rpc findEnabledNodeConfigInfo (FindEnabledNodeConfigInfoRequest) returns (FindEnabledNodeConfigInfoResponse);",
          "doc": "取得节点的配置概要信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNodeRegionInfo",
          "requestMessageName": "CountAllNodeRegionInfoRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNodeRegionInfo(CountAllNodeRegionInfoRequest) returns (RPCCountResponse);",
          "doc": "查找节点区域信息数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNodeRegionInfo",
          "requestMessageName": "ListNodeRegionInfoRequest",
          "responseMessageName": "ListNodeRegionInfoResponse",
          "code": "rpc listNodeRegionInfo(ListNodeRegionInfoRequest) returns (ListNodeRegionInfoResponse);",
          "doc": "列出单页节点区域信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeRegionInfo",
          "requestMessageName": "UpdateNodeRegionInfoRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeRegionInfo(UpdateNodeRegionInfoRequest) returns (RPCSuccess);",
          "doc": "修改节点区域信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeAPIConfig",
          "requestMessageName": "FindNodeAPIConfigRequest",
          "responseMessageName": "FindNodeAPIConfigResponse",
          "code": "rpc findNodeAPIConfig(FindNodeAPIConfigRequest) returns (FindNodeAPIConfigResponse);",
          "doc": "查找单个节点的API相关配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeAPIConfig",
          "requestMessageName": "UpdateNodeAPIConfigRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeAPIConfig(UpdateNodeAPIConfigRequest) returns (RPCSuccess);",
          "doc": "修改某个节点的API相关配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeUAMPolicies",
          "requestMessageName": "FindNodeUAMPoliciesRequest",
          "responseMessageName": "FindNodeUAMPoliciesResponse",
          "code": "rpc findNodeUAMPolicies(FindNodeUAMPoliciesRequest) returns (FindNodeUAMPoliciesResponse);",
          "doc": "查找节点的UAM策略",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeHTTPCCPolicies",
          "requestMessageName": "FindNodeHTTPCCPoliciesRequest",
          "responseMessageName": "FindNodeHTTPCCPoliciesResponse",
          "code": "rpc findNodeHTTPCCPolicies(FindNodeHTTPCCPoliciesRequest) returns (FindNodeHTTPCCPoliciesResponse);",
          "doc": "查找节点的HTTP CC策略",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeHTTP3Policies",
          "requestMessageName": "FindNodeHTTP3PoliciesRequest",
          "responseMessageName": "FindNodeHTTP3PoliciesResponse",
          "code": "rpc findNodeHTTP3Policies(FindNodeHTTP3PoliciesRequest) returns (FindNodeHTTP3PoliciesResponse);",
          "doc": "查找节点的HTTP3策略",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeHTTPPagesPolicies",
          "requestMessageName": "FindNodeHTTPPagesPoliciesRequest",
          "responseMessageName": "FindNodeHTTPPagesPoliciesResponse",
          "code": "rpc findNodeHTTPPagesPolicies(FindNodeHTTPPagesPoliciesRequest) returns (FindNodeHTTPPagesPoliciesResponse);",
          "doc": "查找节点的自定义页面策略",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeScheduleInfo",
          "requestMessageName": "FindNodeScheduleInfoRequest",
          "responseMessageName": "FindNodeScheduleInfoResponse",
          "code": "rpc findNodeScheduleInfo(FindNodeScheduleInfoRequest) returns (FindNodeScheduleInfoResponse);",
          "doc": "查找节点调度信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeScheduleInfo",
          "requestMessageName": "UpdateNodeScheduleInfoRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeScheduleInfo(UpdateNodeScheduleInfoRequest) returns (RPCSuccess);",
          "doc": "修改节点调度信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "resetNodeActionStatus",
          "requestMessageName": "ResetNodeActionStatusRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc resetNodeActionStatus(ResetNodeActionStatusRequest) returns (RPCSuccess);",
          "doc": "重置节点动作状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllNodeScheduleInfoWithNodeClusterId",
          "requestMessageName": "FindAllNodeScheduleInfoWithNodeClusterIdRequest",
          "responseMessageName": "FindAllNodeScheduleInfoWithNodeClusterIdResponse",
          "code": "rpc findAllNodeScheduleInfoWithNodeClusterId(FindAllNodeScheduleInfoWithNodeClusterIdRequest) returns (FindAllNodeScheduleInfoWithNodeClusterIdResponse);",
          "doc": "查找集群的节点调度信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "copyNodeActionsToNodeGroup",
          "requestMessageName": "CopyNodeActionsToNodeGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc copyNodeActionsToNodeGroup(CopyNodeActionsToNodeGroupRequest) returns (RPCSuccess);",
          "doc": "复制动作设置到分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "copyNodeActionsToNodeCluster",
          "requestMessageName": "CopyNodeActionsToNodeClusterRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc copyNodeActionsToNodeCluster(CopyNodeActionsToNodeClusterRequest) returns (RPCSuccess);",
          "doc": "复制动作设置到集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeTOAConfig",
          "requestMessageName": "FindNodeTOAConfigRequest",
          "responseMessageName": "FindNodeTOAConfigResponse",
          "code": "rpc findNodeTOAConfig(FindNodeTOAConfigRequest) returns (FindNodeTOAConfigResponse);",
          "doc": "查找节点的TOA配置",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeNetworkSecurityPolicy",
          "requestMessageName": "FindNodeNetworkSecurityPolicyRequest",
          "responseMessageName": "FindNodeNetworkSecurityPolicyResponse",
          "code": "rpc findNodeNetworkSecurityPolicy(FindNodeNetworkSecurityPolicyRequest) returns (FindNodeNetworkSecurityPolicyResponse);",
          "doc": "查找节点的网络安全策略",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node.proto",
      "doc": "边缘节点管理服务"
    },
    {
      "name": "NodeActionService",
      "methods": [
        {
          "name": "createNodeAction",
          "requestMessageName": "CreateNodeActionRequest",
          "responseMessageName": "CreateNodeActionResponse",
          "code": "rpc createNodeAction(CreateNodeActionRequest) returns (CreateNodeActionResponse);",
          "doc": "添加动作",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeAction",
          "requestMessageName": "DeleteNodeActionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeAction(DeleteNodeActionRequest) returns (RPCSuccess);",
          "doc": "删除动作",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeAction",
          "requestMessageName": "UpdateNodeActionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeAction(UpdateNodeActionRequest) returns (RPCSuccess);",
          "doc": "修改动作",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllNodeActions",
          "requestMessageName": "FindAllNodeActionsRequest",
          "responseMessageName": "FindAllNodeActionsResponse",
          "code": "rpc findAllNodeActions(FindAllNodeActionsRequest) returns (FindAllNodeActionsResponse);",
          "doc": "列出某个节点的所有动作",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeAction",
          "requestMessageName": "FindNodeActionRequest",
          "responseMessageName": "FindNodeActionResponse",
          "code": "rpc findNodeAction(FindNodeActionRequest) returns (FindNodeActionResponse);",
          "doc": "查找单个节点动作",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeActionOrders",
          "requestMessageName": "UpdateNodeActionOrdersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeActionOrders(UpdateNodeActionOrdersRequest) returns (RPCSuccess);",
          "doc": "设置节点动作排序",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_action.proto",
      "doc": "节点动作服务"
    },
    {
      "name": "NodeClusterService",
      "methods": [
        {
          "name": "createNodeCluster",
          "requestMessageName": "CreateNodeClusterRequest",
          "responseMessageName": "CreateNodeClusterResponse",
          "code": "rpc createNodeCluster (CreateNodeClusterRequest) returns (CreateNodeClusterResponse);",
          "doc": "创建集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeCluster",
          "requestMessageName": "UpdateNodeClusterRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeCluster (UpdateNodeClusterRequest) returns (RPCSuccess);",
          "doc": "修改集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeCluster",
          "requestMessageName": "DeleteNodeClusterRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeCluster (DeleteNodeClusterRequest) returns (RPCSuccess);",
          "doc": "删除集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeCluster",
          "requestMessageName": "FindEnabledNodeClusterRequest",
          "responseMessageName": "FindEnabledNodeClusterResponse",
          "code": "rpc findEnabledNodeCluster (FindEnabledNodeClusterRequest) returns (FindEnabledNodeClusterResponse);",
          "doc": "查找单个集群信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAPINodesWithNodeCluster",
          "requestMessageName": "FindAPINodesWithNodeClusterRequest",
          "responseMessageName": "FindAPINodesWithNodeClusterResponse",
          "code": "rpc findAPINodesWithNodeCluster (FindAPINodesWithNodeClusterRequest) returns (FindAPINodesWithNodeClusterResponse);",
          "doc": "查找集群的API节点信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeClusters",
          "requestMessageName": "FindAllEnabledNodeClustersRequest",
          "responseMessageName": "FindAllEnabledNodeClustersResponse",
          "code": "rpc findAllEnabledNodeClusters (FindAllEnabledNodeClustersRequest) returns (FindAllEnabledNodeClustersResponse);",
          "doc": "获取所有可用集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeClusters",
          "requestMessageName": "CountAllEnabledNodeClustersRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeClusters (CountAllEnabledNodeClustersRequest) returns (RPCCountResponse);",
          "doc": "计算所有集群数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledNodeClusters",
          "requestMessageName": "ListEnabledNodeClustersRequest",
          "responseMessageName": "ListEnabledNodeClustersResponse",
          "code": "rpc listEnabledNodeClusters (ListEnabledNodeClustersRequest) returns (ListEnabledNodeClustersResponse);",
          "doc": "列出单页集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeClusterHealthCheckConfig",
          "requestMessageName": "FindNodeClusterHealthCheckConfigRequest",
          "responseMessageName": "FindNodeClusterHealthCheckConfigResponse",
          "code": "rpc findNodeClusterHealthCheckConfig (FindNodeClusterHealthCheckConfigRequest) returns (FindNodeClusterHealthCheckConfigResponse);",
          "doc": "查找集群的健康检查配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterHealthCheck",
          "requestMessageName": "UpdateNodeClusterHealthCheckRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterHealthCheck (UpdateNodeClusterHealthCheckRequest) returns (RPCSuccess);",
          "doc": "修改集群健康检查设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "executeNodeClusterHealthCheck",
          "requestMessageName": "ExecuteNodeClusterHealthCheckRequest",
          "responseMessageName": "ExecuteNodeClusterHealthCheckResponse",
          "code": "rpc executeNodeClusterHealthCheck (ExecuteNodeClusterHealthCheckRequest) returns (ExecuteNodeClusterHealthCheckResponse);",
          "doc": "执行健康检查",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeClustersWithNodeGrantId",
          "requestMessageName": "CountAllEnabledNodeClustersWithNodeGrantIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeClustersWithNodeGrantId (CountAllEnabledNodeClustersWithNodeGrantIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个认证的集群数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeClustersWithNodeGrantId",
          "requestMessageName": "FindAllEnabledNodeClustersWithNodeGrantIdRequest",
          "responseMessageName": "FindAllEnabledNodeClustersWithNodeGrantIdResponse",
          "code": "rpc findAllEnabledNodeClustersWithNodeGrantId (FindAllEnabledNodeClustersWithNodeGrantIdRequest) returns (FindAllEnabledNodeClustersWithNodeGrantIdResponse);",
          "doc": "查找使用某个认证的所有集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeClusterDNS",
          "requestMessageName": "FindEnabledNodeClusterDNSRequest",
          "responseMessageName": "FindEnabledNodeClusterDNSResponse",
          "code": "rpc findEnabledNodeClusterDNS (FindEnabledNodeClusterDNSRequest) returns (FindEnabledNodeClusterDNSResponse);",
          "doc": "查找集群的DNS配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeClustersWithDNSProviderId",
          "requestMessageName": "CountAllEnabledNodeClustersWithDNSProviderIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeClustersWithDNSProviderId (CountAllEnabledNodeClustersWithDNSProviderIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个DNS服务商的集群数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeClustersWithDNSDomainId",
          "requestMessageName": "CountAllEnabledNodeClustersWithDNSDomainIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeClustersWithDNSDomainId (CountAllEnabledNodeClustersWithDNSDomainIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个DNS域名的集群数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeClustersWithDNSDomainId",
          "requestMessageName": "FindAllEnabledNodeClustersWithDNSDomainIdRequest",
          "responseMessageName": "FindAllEnabledNodeClustersWithDNSDomainIdResponse",
          "code": "rpc findAllEnabledNodeClustersWithDNSDomainId (FindAllEnabledNodeClustersWithDNSDomainIdRequest) returns (FindAllEnabledNodeClustersWithDNSDomainIdResponse);",
          "doc": "查找使用某个域名的所有集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkNodeClusterDNSName",
          "requestMessageName": "CheckNodeClusterDNSNameRequest",
          "responseMessageName": "CheckNodeClusterDNSNameResponse",
          "code": "rpc checkNodeClusterDNSName (CheckNodeClusterDNSNameRequest) returns (CheckNodeClusterDNSNameResponse);",
          "doc": "检查集群域名是否已经被使用",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterDNS",
          "requestMessageName": "UpdateNodeClusterDNSRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterDNS (UpdateNodeClusterDNSRequest) returns (RPCSuccess);",
          "doc": "修改集群的域名设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkNodeClusterDNSChanges",
          "requestMessageName": "CheckNodeClusterDNSChangesRequest",
          "responseMessageName": "CheckNodeClusterDNSChangesResponse",
          "code": "rpc checkNodeClusterDNSChanges (CheckNodeClusterDNSChangesRequest) returns (CheckNodeClusterDNSChangesResponse);",
          "doc": "检查集群的DNS是否有变化",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeClusterTOA",
          "requestMessageName": "FindEnabledNodeClusterTOARequest",
          "responseMessageName": "FindEnabledNodeClusterTOAResponse",
          "code": "rpc findEnabledNodeClusterTOA (FindEnabledNodeClusterTOARequest) returns (FindEnabledNodeClusterTOAResponse);",
          "doc": "查找集群的TOA配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterTOA",
          "requestMessageName": "UpdateNodeClusterTOARequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterTOA (UpdateNodeClusterTOARequest) returns (RPCSuccess);",
          "doc": "修改集群的TOA设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeClustersWithHTTPCachePolicyId",
          "requestMessageName": "CountAllEnabledNodeClustersWithHTTPCachePolicyIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeClustersWithHTTPCachePolicyId (CountAllEnabledNodeClustersWithHTTPCachePolicyIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个缓存策略的集群数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeClustersWithHTTPCachePolicyId",
          "requestMessageName": "FindAllEnabledNodeClustersWithHTTPCachePolicyIdRequest",
          "responseMessageName": "FindAllEnabledNodeClustersWithHTTPCachePolicyIdResponse",
          "code": "rpc findAllEnabledNodeClustersWithHTTPCachePolicyId (FindAllEnabledNodeClustersWithHTTPCachePolicyIdRequest) returns (FindAllEnabledNodeClustersWithHTTPCachePolicyIdResponse);",
          "doc": "查找使用缓存策略的所有集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeClustersWithHTTPFirewallPolicyId",
          "requestMessageName": "CountAllEnabledNodeClustersWithHTTPFirewallPolicyIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeClustersWithHTTPFirewallPolicyId (CountAllEnabledNodeClustersWithHTTPFirewallPolicyIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个WAF策略的集群数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeClustersWithHTTPFirewallPolicyId",
          "requestMessageName": "FindAllEnabledNodeClustersWithHTTPFirewallPolicyIdRequest",
          "responseMessageName": "FindAllEnabledNodeClustersWithHTTPFirewallPolicyIdResponse",
          "code": "rpc findAllEnabledNodeClustersWithHTTPFirewallPolicyId (FindAllEnabledNodeClustersWithHTTPFirewallPolicyIdRequest) returns (FindAllEnabledNodeClustersWithHTTPFirewallPolicyIdResponse);",
          "doc": "查找使用某个WAF策略的所有集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterHTTPCachePolicyId",
          "requestMessageName": "UpdateNodeClusterHTTPCachePolicyIdRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterHTTPCachePolicyId (UpdateNodeClusterHTTPCachePolicyIdRequest) returns (RPCSuccess);",
          "doc": "修改集群的缓存策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterHTTPFirewallPolicyId",
          "requestMessageName": "UpdateNodeClusterHTTPFirewallPolicyIdRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterHTTPFirewallPolicyId (UpdateNodeClusterHTTPFirewallPolicyIdRequest) returns (RPCSuccess);",
          "doc": "修改集群的WAF策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterSystemService",
          "requestMessageName": "UpdateNodeClusterSystemServiceRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterSystemService (UpdateNodeClusterSystemServiceRequest) returns (RPCSuccess);",
          "doc": "修改集群的系统服务设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeClusterSystemService",
          "requestMessageName": "FindNodeClusterSystemServiceRequest",
          "responseMessageName": "FindNodeClusterSystemServiceResponse",
          "code": "rpc findNodeClusterSystemService (FindNodeClusterSystemServiceRequest) returns (FindNodeClusterSystemServiceResponse);",
          "doc": "查找集群的系统服务设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findFreePortInNodeCluster",
          "requestMessageName": "FindFreePortInNodeClusterRequest",
          "responseMessageName": "FindFreePortInNodeClusterResponse",
          "code": "rpc findFreePortInNodeCluster (FindFreePortInNodeClusterRequest) returns (FindFreePortInNodeClusterResponse);",
          "doc": "获取集群中可以使用的端口",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkPortIsUsingInNodeCluster",
          "requestMessageName": "CheckPortIsUsingInNodeClusterRequest",
          "responseMessageName": "CheckPortIsUsingInNodeClusterResponse",
          "code": "rpc checkPortIsUsingInNodeCluster (CheckPortIsUsingInNodeClusterRequest) returns (CheckPortIsUsingInNodeClusterResponse);",
          "doc": "检查端口是否已经被使用",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findLatestNodeClusters",
          "requestMessageName": "FindLatestNodeClustersRequest",
          "responseMessageName": "FindLatestNodeClustersResponse",
          "code": "rpc findLatestNodeClusters (FindLatestNodeClustersRequest) returns (FindLatestNodeClustersResponse);",
          "doc": "查找最近访问的集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeClusterConfigInfo",
          "requestMessageName": "FindEnabledNodeClusterConfigInfoRequest",
          "responseMessageName": "FindEnabledNodeClusterConfigInfoResponse",
          "code": "rpc findEnabledNodeClusterConfigInfo (FindEnabledNodeClusterConfigInfoRequest) returns (FindEnabledNodeClusterConfigInfoResponse);",
          "doc": "取得集群的配置概要信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterPinned",
          "requestMessageName": "UpdateNodeClusterPinnedRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterPinned(UpdateNodeClusterPinnedRequest) returns (RPCSuccess);",
          "doc": "设置集群是否置顶",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeClusterWebPPolicy",
          "requestMessageName": "FindEnabledNodeClusterWebPPolicyRequest",
          "responseMessageName": "FindEnabledNodeClusterWebPPolicyResponse",
          "code": "rpc findEnabledNodeClusterWebPPolicy(FindEnabledNodeClusterWebPPolicyRequest) returns (FindEnabledNodeClusterWebPPolicyResponse);",
          "doc": "读取集群WebP策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterWebPPolicy",
          "requestMessageName": "UpdateNodeClusterWebPPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterWebPPolicy(UpdateNodeClusterWebPPolicyRequest) returns (RPCSuccess);",
          "doc": "设置集群WebP策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeClusterUAMPolicy",
          "requestMessageName": "FindEnabledNodeClusterUAMPolicyRequest",
          "responseMessageName": "FindEnabledNodeClusterUAMPolicyResponse",
          "code": "rpc findEnabledNodeClusterUAMPolicy(FindEnabledNodeClusterUAMPolicyRequest) returns (FindEnabledNodeClusterUAMPolicyResponse);",
          "doc": "读取集群的UAM策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterUAMPolicy",
          "requestMessageName": "UpdateNodeClusterUAMPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterUAMPolicy(UpdateNodeClusterUAMPolicyRequest) returns (RPCSuccess);",
          "doc": "设置集群的UAM策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeClusterHTTPCCPolicy",
          "requestMessageName": "FindEnabledNodeClusterHTTPCCPolicyRequest",
          "responseMessageName": "FindEnabledNodeClusterHTTPCCPolicyResponse",
          "code": "rpc findEnabledNodeClusterHTTPCCPolicy(FindEnabledNodeClusterHTTPCCPolicyRequest) returns (FindEnabledNodeClusterHTTPCCPolicyResponse);",
          "doc": "读取集群的HTTP CC策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterHTTPCCPolicy",
          "requestMessageName": "UpdateNodeClusterHTTPCCPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterHTTPCCPolicy(UpdateNodeClusterHTTPCCPolicyRequest) returns (RPCSuccess);",
          "doc": "设置集群的HTTP CC策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeClusterDDoSProtection",
          "requestMessageName": "FindNodeClusterDDoSProtectionRequest",
          "responseMessageName": "FindNodeClusterDDoSProtectionResponse",
          "code": "rpc findNodeClusterDDoSProtection(FindNodeClusterDDoSProtectionRequest) returns (FindNodeClusterDDoSProtectionResponse);",
          "doc": "获取集群的DDoS设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterDDoSProtection",
          "requestMessageName": "UpdateNodeClusterDDoSProtectionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterDDoSProtection(UpdateNodeClusterDDoSProtectionRequest) returns (RPCSuccess);",
          "doc": "修改集群的DDoS设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeClusterGlobalServerConfig",
          "requestMessageName": "FindNodeClusterGlobalServerConfigRequest",
          "responseMessageName": "FindNodeClusterGlobalServerConfigResponse",
          "code": "rpc findNodeClusterGlobalServerConfig(FindNodeClusterGlobalServerConfigRequest) returns (FindNodeClusterGlobalServerConfigResponse);",
          "doc": "获取集群的全局服务设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterGlobalServerConfig",
          "requestMessageName": "UpdateNodeClusterGlobalServerConfigRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterGlobalServerConfig(UpdateNodeClusterGlobalServerConfigRequest) returns (RPCSuccess);",
          "doc": "修改集群的全局服务设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeClusterHTTPPagesPolicy",
          "requestMessageName": "FindNodeClusterHTTPPagesPolicyRequest",
          "responseMessageName": "FindNodeClusterHTTPPagesPolicyResponse",
          "code": "rpc findNodeClusterHTTPPagesPolicy(FindNodeClusterHTTPPagesPolicyRequest) returns (FindNodeClusterHTTPPagesPolicyResponse);",
          "doc": "获取集群的自定义页面设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterHTTPPagesPolicy",
          "requestMessageName": "UpdateNodeClusterHTTPPagesPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterHTTPPagesPolicy(UpdateNodeClusterHTTPPagesPolicyRequest) returns (RPCSuccess);",
          "doc": "修改集群的自定义页面设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeClusterHTTP3Policy",
          "requestMessageName": "FindNodeClusterHTTP3PolicyRequest",
          "responseMessageName": "FindNodeClusterHTTP3PolicyResponse",
          "code": "rpc findNodeClusterHTTP3Policy(FindNodeClusterHTTP3PolicyRequest) returns (FindNodeClusterHTTP3PolicyResponse);",
          "doc": "获取集群的HTTP3设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterHTTP3Policy",
          "requestMessageName": "UpdateNodeClusterHTTP3PolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterHTTP3Policy(UpdateNodeClusterHTTP3PolicyRequest) returns (RPCSuccess);",
          "doc": "修改集群的HTTP3设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeClusterNetworkSecurityPolicy",
          "requestMessageName": "FindNodeClusterNetworkSecurityPolicyRequest",
          "responseMessageName": "FindNodeClusterNetworkSecurityPolicyResponse",
          "code": "rpc findNodeClusterNetworkSecurityPolicy(FindNodeClusterNetworkSecurityPolicyRequest) returns (FindNodeClusterNetworkSecurityPolicyResponse);",
          "doc": "获取集群的网络安全策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterNetworkSecurityPolicy",
          "requestMessageName": "UpdateNodeClusterNetworkSecurityPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterNetworkSecurityPolicy(UpdateNodeClusterNetworkSecurityPolicyRequest) returns (RPCSuccess);",
          "doc": "修改集群的网络安全策略",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_cluster.proto",
      "doc": "边缘节点集群管理服务"
    },
    {
      "name": "NodeClusterFirewallActionService",
      "methods": [
        {
          "name": "createNodeClusterFirewallAction",
          "requestMessageName": "CreateNodeClusterFirewallActionRequest",
          "responseMessageName": "NodeClusterFirewallActionResponse",
          "code": "rpc createNodeClusterFirewallAction (CreateNodeClusterFirewallActionRequest) returns (NodeClusterFirewallActionResponse);",
          "doc": "创建动作",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeClusterFirewallAction",
          "requestMessageName": "UpdateNodeClusterFirewallActionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeClusterFirewallAction (UpdateNodeClusterFirewallActionRequest) returns (RPCSuccess);",
          "doc": "修改动作",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeClusterFirewallAction",
          "requestMessageName": "DeleteNodeClusterFirewallActionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeClusterFirewallAction (DeleteNodeClusterFirewallActionRequest) returns (RPCSuccess);",
          "doc": "删除动作",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeClusterFirewallActions",
          "requestMessageName": "FindAllEnabledNodeClusterFirewallActionsRequest",
          "responseMessageName": "FindAllEnabledNodeClusterFirewallActionsResponse",
          "code": "rpc findAllEnabledNodeClusterFirewallActions (FindAllEnabledNodeClusterFirewallActionsRequest) returns (FindAllEnabledNodeClusterFirewallActionsResponse);",
          "doc": "查询集群的所有动作",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeClusterFirewallAction",
          "requestMessageName": "FindEnabledNodeClusterFirewallActionRequest",
          "responseMessageName": "FindEnabledNodeClusterFirewallActionResponse",
          "code": "rpc findEnabledNodeClusterFirewallAction (FindEnabledNodeClusterFirewallActionRequest) returns (FindEnabledNodeClusterFirewallActionResponse);",
          "doc": "查询单个动作",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeClusterFirewallActions",
          "requestMessageName": "CountAllEnabledNodeClusterFirewallActionsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeClusterFirewallActions (CountAllEnabledNodeClusterFirewallActionsRequest) returns (RPCCountResponse);",
          "doc": "计算动作数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_cluster_firewall_action.proto",
      "doc": "防火墙动作服务"
    },
    {
      "name": "NodeClusterMetricItemService",
      "methods": [
        {
          "name": "enableNodeClusterMetricItem",
          "requestMessageName": "EnableNodeClusterMetricItemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc enableNodeClusterMetricItem (EnableNodeClusterMetricItemRequest) returns (RPCSuccess);",
          "doc": "启用某个指标",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "disableNodeClusterMetricItem",
          "requestMessageName": "DisableNodeClusterMetricItemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc disableNodeClusterMetricItem (DisableNodeClusterMetricItemRequest) returns (RPCSuccess);",
          "doc": "禁用某个指标",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllNodeClusterMetricItems",
          "requestMessageName": "FindAllNodeClusterMetricItemsRequest",
          "responseMessageName": "FindAllNodeClusterMetricItemsResponse",
          "code": "rpc findAllNodeClusterMetricItems (FindAllNodeClusterMetricItemsRequest) returns (FindAllNodeClusterMetricItemsResponse);",
          "doc": "查找集群中所有指标",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "existsNodeClusterMetricItem",
          "requestMessageName": "ExistsNodeClusterMetricItemRequest",
          "responseMessageName": "RPCExists",
          "code": "rpc existsNodeClusterMetricItem (ExistsNodeClusterMetricItemRequest) returns (RPCExists);",
          "doc": "检查是否已添加某个指标",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllNodeClustersWithMetricItemId",
          "requestMessageName": "FindAllNodeClustersWithMetricItemIdRequest",
          "responseMessageName": "FindAllNodeClustersWithMetricItemIdResponse",
          "code": "rpc findAllNodeClustersWithMetricItemId (FindAllNodeClustersWithMetricItemIdRequest) returns (FindAllNodeClustersWithMetricItemIdResponse);",
          "doc": "查找使用指标的集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_cluster_metric_item.proto",
      "doc": "集群指标"
    },
    {
      "name": "NodeGrantService",
      "methods": [
        {
          "name": "createNodeGrant",
          "requestMessageName": "CreateNodeGrantRequest",
          "responseMessageName": "CreateNodeGrantResponse",
          "code": "rpc createNodeGrant (CreateNodeGrantRequest) returns (CreateNodeGrantResponse);",
          "doc": "创建认证",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeGrant",
          "requestMessageName": "UpdateNodeGrantRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeGrant (UpdateNodeGrantRequest) returns (RPCSuccess);",
          "doc": "修改认证",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "disableNodeGrant",
          "requestMessageName": "DisableNodeGrantRequest",
          "responseMessageName": "DisableNodeGrantResponse",
          "code": "rpc disableNodeGrant (DisableNodeGrantRequest) returns (DisableNodeGrantResponse);",
          "doc": "禁用认证",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeGrants",
          "requestMessageName": "CountAllEnabledNodeGrantsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeGrants (CountAllEnabledNodeGrantsRequest) returns (RPCCountResponse);",
          "doc": "计算认证的数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledNodeGrants",
          "requestMessageName": "ListEnabledNodeGrantsRequest",
          "responseMessageName": "ListEnabledNodeGrantsResponse",
          "code": "rpc listEnabledNodeGrants (ListEnabledNodeGrantsRequest) returns (ListEnabledNodeGrantsResponse);",
          "doc": "列出单页认证",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeGrants",
          "requestMessageName": "FindAllEnabledNodeGrantsRequest",
          "responseMessageName": "FindAllEnabledNodeGrantsResponse",
          "code": "rpc findAllEnabledNodeGrants (FindAllEnabledNodeGrantsRequest) returns (FindAllEnabledNodeGrantsResponse);",
          "doc": "列出所有认证",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeGrant",
          "requestMessageName": "FindEnabledNodeGrantRequest",
          "responseMessageName": "FindEnabledNodeGrantResponse",
          "code": "rpc findEnabledNodeGrant (FindEnabledNodeGrantRequest) returns (FindEnabledNodeGrantResponse);",
          "doc": "获取单个认证信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "testNodeGrant",
          "requestMessageName": "TestNodeGrantRequest",
          "responseMessageName": "TestNodeGrantResponse",
          "code": "rpc testNodeGrant (TestNodeGrantRequest) returns (TestNodeGrantResponse);",
          "doc": "测试连接",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findSuggestNodeGrants",
          "requestMessageName": "FindSuggestNodeGrantsRequest",
          "responseMessageName": "FindSuggestNodeGrantsResponse",
          "code": "rpc findSuggestNodeGrants(FindSuggestNodeGrantsRequest) returns (FindSuggestNodeGrantsResponse);",
          "doc": "查找集群推荐的认证",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_grant.proto",
      "doc": "节点认证信息管理服务"
    },
    {
      "name": "NodeGroupService",
      "methods": [
        {
          "name": "createNodeGroup",
          "requestMessageName": "CreateNodeGroupRequest",
          "responseMessageName": "CreateNodeGroupResponse",
          "code": "rpc createNodeGroup (CreateNodeGroupRequest) returns (CreateNodeGroupResponse);",
          "doc": "创建分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeGroup",
          "requestMessageName": "UpdateNodeGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeGroup (UpdateNodeGroupRequest) returns (RPCSuccess);",
          "doc": "修改分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeGroup",
          "requestMessageName": "DeleteNodeGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeGroup (DeleteNodeGroupRequest) returns (RPCSuccess);",
          "doc": "删除分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeGroupsWithNodeClusterId",
          "requestMessageName": "FindAllEnabledNodeGroupsWithNodeClusterIdRequest",
          "responseMessageName": "FindAllEnabledNodeGroupsWithNodeClusterIdResponse",
          "code": "rpc findAllEnabledNodeGroupsWithNodeClusterId (FindAllEnabledNodeGroupsWithNodeClusterIdRequest) returns (FindAllEnabledNodeGroupsWithNodeClusterIdResponse);",
          "doc": "查询所有分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeGroupOrders",
          "requestMessageName": "UpdateNodeGroupOrdersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeGroupOrders (UpdateNodeGroupOrdersRequest) returns (RPCSuccess);",
          "doc": "修改分组排序",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeGroup",
          "requestMessageName": "FindEnabledNodeGroupRequest",
          "responseMessageName": "FindEnabledNodeGroupResponse",
          "code": "rpc findEnabledNodeGroup (FindEnabledNodeGroupRequest) returns (FindEnabledNodeGroupResponse);",
          "doc": "查找单个分组信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_group.proto",
      "doc": "节点分组服务"
    },
    {
      "name": "NodeIPAddressService",
      "methods": [
        {
          "name": "createNodeIPAddress",
          "requestMessageName": "CreateNodeIPAddressRequest",
          "responseMessageName": "CreateNodeIPAddressResponse",
          "code": "rpc createNodeIPAddress (CreateNodeIPAddressRequest) returns (CreateNodeIPAddressResponse);",
          "doc": "创建IP地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createNodeIPAddresses",
          "requestMessageName": "CreateNodeIPAddressesRequest",
          "responseMessageName": "CreateNodeIPAddressesResponse",
          "code": "rpc createNodeIPAddresses (CreateNodeIPAddressesRequest) returns (CreateNodeIPAddressesResponse);",
          "doc": "批量创建IP地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeIPAddress",
          "requestMessageName": "UpdateNodeIPAddressRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeIPAddress (UpdateNodeIPAddressRequest) returns (RPCSuccess);",
          "doc": "修改IP地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeIPAddressNodeId",
          "requestMessageName": "UpdateNodeIPAddressNodeIdRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeIPAddressNodeId (UpdateNodeIPAddressNodeIdRequest) returns (RPCSuccess);",
          "doc": "修改IP地址所属节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "disableNodeIPAddress",
          "requestMessageName": "DisableNodeIPAddressRequest",
          "responseMessageName": "DisableNodeIPAddressResponse",
          "code": "rpc disableNodeIPAddress (DisableNodeIPAddressRequest) returns (DisableNodeIPAddressResponse);",
          "doc": "禁用单个IP地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "disableAllNodeIPAddressesWithNodeId",
          "requestMessageName": "DisableAllNodeIPAddressesWithNodeIdRequest",
          "responseMessageName": "DisableAllNodeIPAddressesWithNodeIdResponse",
          "code": "rpc disableAllNodeIPAddressesWithNodeId (DisableAllNodeIPAddressesWithNodeIdRequest) returns (DisableAllNodeIPAddressesWithNodeIdResponse);",
          "doc": "禁用节点的所有IP地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeIPAddress",
          "requestMessageName": "FindEnabledNodeIPAddressRequest",
          "responseMessageName": "FindEnabledNodeIPAddressResponse",
          "code": "rpc findEnabledNodeIPAddress (FindEnabledNodeIPAddressRequest) returns (FindEnabledNodeIPAddressResponse);",
          "doc": "查找单个IP地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeIPAddressesWithNodeId",
          "requestMessageName": "FindAllEnabledNodeIPAddressesWithNodeIdRequest",
          "responseMessageName": "FindAllEnabledNodeIPAddressesWithNodeIdResponse",
          "code": "rpc findAllEnabledNodeIPAddressesWithNodeId (FindAllEnabledNodeIPAddressesWithNodeIdRequest) returns (FindAllEnabledNodeIPAddressesWithNodeIdResponse);",
          "doc": "查找节点的所有地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeIPAddresses",
          "requestMessageName": "CountAllEnabledNodeIPAddressesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeIPAddresses(CountAllEnabledNodeIPAddressesRequest) returns (RPCCountResponse);",
          "doc": "计算IP地址数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledNodeIPAddresses",
          "requestMessageName": "ListEnabledNodeIPAddressesRequest",
          "responseMessageName": "ListEnabledNodeIPAddressesResponse",
          "code": "rpc listEnabledNodeIPAddresses(ListEnabledNodeIPAddressesRequest) returns (ListEnabledNodeIPAddressesResponse);",
          "doc": "列出单页IP地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeIPAddressIsUp",
          "requestMessageName": "UpdateNodeIPAddressIsUpRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeIPAddressIsUp(UpdateNodeIPAddressIsUpRequest) returns (RPCSuccess);",
          "doc": "设置上下线状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "restoreNodeIPAddressBackupIP",
          "requestMessageName": "RestoreNodeIPAddressBackupIPRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc restoreNodeIPAddressBackupIP(RestoreNodeIPAddressBackupIPRequest) returns (RPCSuccess);",
          "doc": "还原备用IP状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_ip_address.proto",
      "doc": "节点IP地址服务"
    },
    {
      "name": "NodeIPAddressLogService",
      "methods": [
        {
          "name": "countAllNodeIPAddressLogs",
          "requestMessageName": "CountAllNodeIPAddressLogsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNodeIPAddressLogs(CountAllNodeIPAddressLogsRequest) returns (RPCCountResponse);",
          "doc": "计算日志数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNodeIPAddressLogs",
          "requestMessageName": "ListNodeIPAddressLogsRequest",
          "responseMessageName": "ListNodeIPAddressLogsResponse",
          "code": "rpc listNodeIPAddressLogs(ListNodeIPAddressLogsRequest) returns (ListNodeIPAddressLogsResponse);",
          "doc": "列出单页日志",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_ip_address_log.proto",
      "doc": "IP地址相关日志"
    },
    {
      "name": "NodeIPAddressThresholdService",
      "methods": [
        {
          "name": "createNodeIPAddressThreshold",
          "requestMessageName": "CreateNodeIPAddressThresholdRequest",
          "responseMessageName": "CreateNodeIPAddressThresholdResponse",
          "code": "rpc createNodeIPAddressThreshold(CreateNodeIPAddressThresholdRequest) returns (CreateNodeIPAddressThresholdResponse);",
          "doc": "创建阈值",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeIPAddressThreshold",
          "requestMessageName": "UpdateNodeIPAddressThresholdRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeIPAddressThreshold(UpdateNodeIPAddressThresholdRequest) returns (RPCSuccess);",
          "doc": "修改阈值",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeIPAddressThreshold",
          "requestMessageName": "DeleteNodeIPAddressThresholdRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeIPAddressThreshold(DeleteNodeIPAddressThresholdRequest) returns (RPCSuccess);",
          "doc": "删除阈值",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeIPAddressThresholds",
          "requestMessageName": "FindAllEnabledNodeIPAddressThresholdsRequest",
          "responseMessageName": "FindAllEnabledNodeIPAddressThresholdsResponse",
          "code": "rpc findAllEnabledNodeIPAddressThresholds(FindAllEnabledNodeIPAddressThresholdsRequest) returns (FindAllEnabledNodeIPAddressThresholdsResponse);",
          "doc": "查找IP的所有阈值",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeIPAddressThresholds",
          "requestMessageName": "CountAllEnabledNodeIPAddressThresholdsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeIPAddressThresholds(CountAllEnabledNodeIPAddressThresholdsRequest) returns (RPCCountResponse);",
          "doc": "计算IP阈值的数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateAllNodeIPAddressThresholds",
          "requestMessageName": "UpdateAllNodeIPAddressThresholdsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateAllNodeIPAddressThresholds(UpdateAllNodeIPAddressThresholdsRequest) returns (RPCSuccess);",
          "doc": "批量更新阈值",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_ip_address_threshold.proto",
      "doc": "IP阈值相关服务"
    },
    {
      "name": "NodeLogService",
      "methods": [
        {
          "name": "createNodeLogs",
          "requestMessageName": "CreateNodeLogsRequest",
          "responseMessageName": "CreateNodeLogsResponse",
          "code": "rpc createNodeLogs (CreateNodeLogsRequest) returns (CreateNodeLogsResponse);",
          "doc": "创建日志",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "countNodeLogs",
          "requestMessageName": "CountNodeLogsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countNodeLogs (CountNodeLogsRequest) returns (RPCCountResponse);",
          "doc": "查询日志数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNodeLogs",
          "requestMessageName": "ListNodeLogsRequest",
          "responseMessageName": "ListNodeLogsResponse",
          "code": "rpc listNodeLogs (ListNodeLogsRequest) returns (ListNodeLogsResponse);",
          "doc": "列出单页日志",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "fixNodeLogs",
          "requestMessageName": "FixNodeLogsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc fixNodeLogs (FixNodeLogsRequest) returns (RPCSuccess);",
          "doc": "设置日志为已修复",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "fixAllNodeLogs",
          "requestMessageName": "FixAllNodeLogsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc fixAllNodeLogs (FixAllNodeLogsRequest) returns (RPCSuccess);",
          "doc": "设置所有日志为已修复",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllUnreadNodeLogs",
          "requestMessageName": "CountAllUnreadNodeLogsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllUnreadNodeLogs(CountAllUnreadNodeLogsRequest) returns (RPCCountResponse);",
          "doc": "计算未读的日志数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeLogsRead",
          "requestMessageName": "UpdateNodeLogsReadRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeLogsRead(UpdateNodeLogsReadRequest) returns (RPCSuccess);",
          "doc": "设置日志为已读",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateAllNodeLogsRead",
          "requestMessageName": "UpdateAllNodeLogsReadRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateAllNodeLogsRead(UpdateAllNodeLogsReadRequest) returns (RPCSuccess);",
          "doc": "设置所有日志未已读",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeLogs",
          "requestMessageName": "DeleteNodeLogsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeLogs(DeleteNodeLogsRequest) returns (RPCSuccess);",
          "doc": "删除日志",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_log.proto",
      "doc": "节点日志相关服务"
    },
    {
      "name": "NodeLoginService",
      "methods": [
        {
          "name": "findNodeLoginSuggestPorts",
          "requestMessageName": "FindNodeLoginSuggestPortsRequest",
          "responseMessageName": "FindNodeLoginSuggestPortsResponse",
          "code": "rpc findNodeLoginSuggestPorts(FindNodeLoginSuggestPortsRequest) returns (FindNodeLoginSuggestPortsResponse);",
          "doc": "读取建议的端口",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_login.proto",
      "doc": "节点登录相关"
    },
    {
      "name": "NodePriceItemService",
      "methods": [
        {
          "name": "createNodePriceItem",
          "requestMessageName": "CreateNodePriceItemRequest",
          "responseMessageName": "CreateNodePriceItemResponse",
          "code": "rpc createNodePriceItem (CreateNodePriceItemRequest) returns (CreateNodePriceItemResponse);",
          "doc": "创建区域价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodePriceItem",
          "requestMessageName": "UpdateNodePriceItemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodePriceItem (UpdateNodePriceItemRequest) returns (RPCSuccess);",
          "doc": "修改区域价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodePriceItem",
          "requestMessageName": "DeleteNodePriceItemRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodePriceItem (DeleteNodePriceItemRequest) returns (RPCSuccess);",
          "doc": "删除区域价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodePriceItems",
          "requestMessageName": "FindAllEnabledNodePriceItemsRequest",
          "responseMessageName": "FindAllEnabledNodePriceItemsResponse",
          "code": "rpc findAllEnabledNodePriceItems (FindAllEnabledNodePriceItemsRequest) returns (FindAllEnabledNodePriceItemsResponse);",
          "doc": "查找所有区域价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAvailableNodePriceItems",
          "requestMessageName": "FindAllAvailableNodePriceItemsRequest",
          "responseMessageName": "FindAllAvailableNodePriceItemsResponse",
          "code": "rpc findAllAvailableNodePriceItems (FindAllAvailableNodePriceItemsRequest) returns (FindAllAvailableNodePriceItemsResponse);",
          "doc": "查找所有启用的区域价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodePriceItem",
          "requestMessageName": "FindEnabledNodePriceItemRequest",
          "responseMessageName": "FindEnabledNodePriceItemResponse",
          "code": "rpc findEnabledNodePriceItem (FindEnabledNodePriceItemRequest) returns (FindEnabledNodePriceItemResponse);",
          "doc": "查找单个区域信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_price_item.proto",
      "doc": "节点区域定价相关服务"
    },
    {
      "name": "NodeRegionService",
      "methods": [
        {
          "name": "createNodeRegion",
          "requestMessageName": "CreateNodeRegionRequest",
          "responseMessageName": "CreateNodeRegionResponse",
          "code": "rpc createNodeRegion (CreateNodeRegionRequest) returns (CreateNodeRegionResponse);",
          "doc": "创建区域",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeRegion",
          "requestMessageName": "UpdateNodeRegionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeRegion (UpdateNodeRegionRequest) returns (RPCSuccess);",
          "doc": "修改区域",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeRegion",
          "requestMessageName": "DeleteNodeRegionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeRegion (DeleteNodeRegionRequest) returns (RPCSuccess);",
          "doc": "删除区域",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeRegions",
          "requestMessageName": "FindAllEnabledNodeRegionsRequest",
          "responseMessageName": "FindAllEnabledNodeRegionsResponse",
          "code": "rpc findAllEnabledNodeRegions (FindAllEnabledNodeRegionsRequest) returns (FindAllEnabledNodeRegionsResponse);",
          "doc": "查找所有区域",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAvailableNodeRegions",
          "requestMessageName": "FindAllAvailableNodeRegionsRequest",
          "responseMessageName": "FindAllAvailableNodeRegionsResponse",
          "code": "rpc findAllAvailableNodeRegions (FindAllAvailableNodeRegionsRequest) returns (FindAllAvailableNodeRegionsResponse);",
          "doc": "查找所有启用的区域",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeRegionOrders",
          "requestMessageName": "UpdateNodeRegionOrdersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeRegionOrders (UpdateNodeRegionOrdersRequest) returns (RPCSuccess);",
          "doc": "排序",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeRegion",
          "requestMessageName": "FindEnabledNodeRegionRequest",
          "responseMessageName": "FindEnabledNodeRegionResponse",
          "code": "rpc findEnabledNodeRegion (FindEnabledNodeRegionRequest) returns (FindEnabledNodeRegionResponse);",
          "doc": "查找单个区域信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeRegionPrice",
          "requestMessageName": "UpdateNodeRegionPriceRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeRegionPrice (UpdateNodeRegionPriceRequest) returns (RPCSuccess);",
          "doc": "修改价格项价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_region.proto",
      "doc": "节点区域相关服务"
    },
    {
      "name": "NodeTaskService",
      "methods": [
        {
          "name": "findNodeTasks",
          "requestMessageName": "FindNodeTasksRequest",
          "responseMessageName": "FindNodeTasksResponse",
          "code": "rpc findNodeTasks (FindNodeTasksRequest) returns (FindNodeTasksResponse);",
          "doc": "获取单节点同步任务",
          "roles": [
            "dns",
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "reportNodeTaskDone",
          "requestMessageName": "ReportNodeTaskDoneRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc reportNodeTaskDone (ReportNodeTaskDoneRequest) returns (RPCSuccess);",
          "doc": "报告同步任务结果",
          "roles": [
            "dns",
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNodeClusterTasks",
          "requestMessageName": "FindNodeClusterTasksRequest",
          "responseMessageName": "FindNodeClusterTasksResponse",
          "code": "rpc findNodeClusterTasks (FindNodeClusterTasksRequest) returns (FindNodeClusterTasksResponse);",
          "doc": "获取所有正在同步的集群信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "existsNodeTasks",
          "requestMessageName": "ExistsNodeTasksRequest",
          "responseMessageName": "ExistsNodeTasksResponse",
          "code": "rpc existsNodeTasks (ExistsNodeTasksRequest) returns (ExistsNodeTasksResponse);",
          "doc": "检查是否有正在执行的任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeTask",
          "requestMessageName": "DeleteNodeTaskRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeTask (DeleteNodeTaskRequest) returns (RPCSuccess);",
          "doc": "删除任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeTasks",
          "requestMessageName": "DeleteNodeTasksRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeTasks (DeleteNodeTasksRequest) returns (RPCSuccess);",
          "doc": "批量删除任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteAllNodeTasks",
          "requestMessageName": "DeleteAllNodeTasksRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteAllNodeTasks(DeleteAllNodeTasksRequest) returns (RPCSuccess);",
          "doc": "删除所有任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countDoingNodeTasks",
          "requestMessageName": "CountDoingNodeTasksRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countDoingNodeTasks (CountDoingNodeTasksRequest) returns (RPCCountResponse);",
          "doc": "计算正在执行的任务数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNotifyingNodeTasks",
          "requestMessageName": "FindNotifyingNodeTasksRequest",
          "responseMessageName": "FindNotifyingNodeTasksResponse",
          "code": "rpc findNotifyingNodeTasks (FindNotifyingNodeTasksRequest) returns (FindNotifyingNodeTasksResponse);",
          "doc": "查找需要通知的任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeTasksNotified",
          "requestMessageName": "UpdateNodeTasksNotifiedRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeTasksNotified (UpdateNodeTasksNotifiedRequest) returns (RPCSuccess);",
          "doc": "设置任务已通知",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_task.proto",
      "doc": "节点同步任务相关服务"
    },
    {
      "name": "NodeThresholdService",
      "methods": [
        {
          "name": "createNodeThreshold",
          "requestMessageName": "CreateNodeThresholdRequest",
          "responseMessageName": "CreateNodeThresholdResponse",
          "code": "rpc createNodeThreshold (CreateNodeThresholdRequest) returns (CreateNodeThresholdResponse);",
          "doc": "创建阈值",
          "roles": [
            "admin",
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNodeThreshold",
          "requestMessageName": "UpdateNodeThresholdRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNodeThreshold (UpdateNodeThresholdRequest) returns (RPCSuccess);",
          "doc": "修改阈值",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNodeThreshold",
          "requestMessageName": "DeleteNodeThresholdRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNodeThreshold (DeleteNodeThresholdRequest) returns (RPCSuccess);",
          "doc": "删除阈值",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNodeThresholds",
          "requestMessageName": "FindAllEnabledNodeThresholdsRequest",
          "responseMessageName": "FindAllEnabledNodeThresholdsResponse",
          "code": "rpc findAllEnabledNodeThresholds (FindAllEnabledNodeThresholdsRequest) returns (FindAllEnabledNodeThresholdsResponse);",
          "doc": "查询阈值",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledNodeThresholds",
          "requestMessageName": "CountAllEnabledNodeThresholdsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledNodeThresholds (CountAllEnabledNodeThresholdsRequest) returns (RPCCountResponse);",
          "doc": "计算阈值数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledNodeThreshold",
          "requestMessageName": "FindEnabledNodeThresholdRequest",
          "responseMessageName": "FindEnabledNodeThresholdResponse",
          "code": "rpc findEnabledNodeThreshold (FindEnabledNodeThresholdRequest) returns (FindEnabledNodeThresholdResponse);",
          "doc": "查询单个阈值详情",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_threshold.proto",
      "doc": "节点阈值服务"
    },
    {
      "name": "NodeValueService",
      "methods": [
        {
          "name": "createNodeValue",
          "requestMessageName": "CreateNodeValueRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc createNodeValue (CreateNodeValueRequest) returns (RPCSuccess);",
          "doc": "记录数据",
          "roles": [
            "dns",
            "user",
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNodeValues",
          "requestMessageName": "ListNodeValuesRequest",
          "responseMessageName": "ListNodeValuesResponse",
          "code": "rpc listNodeValues (ListNodeValuesRequest) returns (ListNodeValuesResponse);",
          "doc": "读取数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "sumAllNodeValueStats",
          "requestMessageName": "SumAllNodeValueStatsRequest",
          "responseMessageName": "SumAllNodeValueStatsResponse",
          "code": "rpc sumAllNodeValueStats(SumAllNodeValueStatsRequest) returns (SumAllNodeValueStatsResponse);",
          "doc": "读取所有节点的最新数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_node_value.proto",
      "doc": "节点指标数据服务"
    },
    {
      "name": "NSService",
      "methods": [
        {
          "name": "composeNSBoard",
          "requestMessageName": "ComposeNSBoardRequest",
          "responseMessageName": "ComposeNSBoardResponse",
          "code": "rpc composeNSBoard (ComposeNSBoardRequest) returns (ComposeNSBoardResponse);",
          "doc": "组合看板数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "composeNSUserBoard",
          "requestMessageName": "ComposeNSUserBoardRequest",
          "responseMessageName": "ComposeNSUserBoardResponse",
          "code": "rpc composeNSUserBoard(ComposeNSUserBoardRequest) returns (ComposeNSUserBoardResponse);",
          "doc": "组合用户看板数据",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns.proto",
      "doc": "域名服务"
    },
    {
      "name": "NSAccessLogService",
      "methods": [
        {
          "name": "createNSAccessLogs",
          "requestMessageName": "CreateNSAccessLogsRequest",
          "responseMessageName": "CreateNSAccessLogsResponse",
          "code": "rpc createNSAccessLogs (CreateNSAccessLogsRequest) returns (CreateNSAccessLogsResponse);",
          "doc": "创建访问日志",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSAccessLogs",
          "requestMessageName": "ListNSAccessLogsRequest",
          "responseMessageName": "ListNSAccessLogsResponse",
          "code": "rpc listNSAccessLogs (ListNSAccessLogsRequest) returns (ListNSAccessLogsResponse);",
          "doc": "列出单页访问日志",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSAccessLog",
          "requestMessageName": "FindNSAccessLogRequest",
          "responseMessageName": "FindNSAccessLogResponse",
          "code": "rpc findNSAccessLog (FindNSAccessLogRequest) returns (FindNSAccessLogResponse);",
          "doc": "查找单个日志",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_access_log.proto",
      "doc": "访问日志相关服务"
    },
    {
      "name": "NSClusterService",
      "methods": [
        {
          "name": "createNSCluster",
          "requestMessageName": "CreateNSClusterRequest",
          "responseMessageName": "CreateNSClusterResponse",
          "code": "rpc createNSCluster (CreateNSClusterRequest) returns (CreateNSClusterResponse);",
          "doc": "创建集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSCluster",
          "requestMessageName": "UpdateNSClusterRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSCluster (UpdateNSClusterRequest) returns (RPCSuccess);",
          "doc": "修改集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSClusterAccessLog",
          "requestMessageName": "FindNSClusterAccessLogRequest",
          "responseMessageName": "FindNSClusterAccessLogResponse",
          "code": "rpc findNSClusterAccessLog (FindNSClusterAccessLogRequest) returns (FindNSClusterAccessLogResponse);",
          "doc": "查找集群访问日志配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSClusterAccessLog",
          "requestMessageName": "UpdateNSClusterAccessLogRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSClusterAccessLog (UpdateNSClusterAccessLogRequest) returns (RPCSuccess);",
          "doc": "修改集群访问日志配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSCluster",
          "requestMessageName": "DeleteNSCluster",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSCluster (DeleteNSCluster) returns (RPCSuccess);",
          "doc": "删除集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSCluster",
          "requestMessageName": "FindNSClusterRequest",
          "responseMessageName": "FindNSClusterResponse",
          "code": "rpc findNSCluster (FindNSClusterRequest) returns (FindNSClusterResponse);",
          "doc": "查找单个可用集群信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNSClusters",
          "requestMessageName": "CountAllNSClustersRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNSClusters (CountAllNSClustersRequest) returns (RPCCountResponse);",
          "doc": "计算所有可用集群的数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSClusters",
          "requestMessageName": "ListNSClustersRequest",
          "responseMessageName": "ListNSClustersResponse",
          "code": "rpc listNSClusters (ListNSClustersRequest) returns (ListNSClustersResponse);",
          "doc": "列出单页可用集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllNSClusters",
          "requestMessageName": "FindAllNSClustersRequest",
          "responseMessageName": "FindAllNSClustersResponse",
          "code": "rpc findAllNSClusters (FindAllNSClustersRequest) returns (FindAllNSClustersResponse);",
          "doc": "查找所有可用集群",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSClusterRecursionConfig",
          "requestMessageName": "UpdateNSClusterRecursionConfigRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSClusterRecursionConfig(UpdateNSClusterRecursionConfigRequest) returns (RPCSuccess);",
          "doc": "设置递归DNS配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSClusterRecursionConfig",
          "requestMessageName": "FindNSClusterRecursionConfigRequest",
          "responseMessageName": "FindNSClusterRecursionConfigResponse",
          "code": "rpc findNSClusterRecursionConfig(FindNSClusterRecursionConfigRequest) returns (FindNSClusterRecursionConfigResponse);",
          "doc": "读取递归DNS配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSClusterTCPConfig",
          "requestMessageName": "FindNSClusterTCPConfigRequest",
          "responseMessageName": "FindNSClusterTCPConfigResponse",
          "code": "rpc findNSClusterTCPConfig(FindNSClusterTCPConfigRequest) returns (FindNSClusterTCPConfigResponse);",
          "doc": "查找集群的TCP设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSClusterTCP",
          "requestMessageName": "UpdateNSClusterTCPRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSClusterTCP (UpdateNSClusterTCPRequest) returns (RPCSuccess);",
          "doc": "修改集群的TCP设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSClusterTLSConfig",
          "requestMessageName": "FindNSClusterTLSConfigRequest",
          "responseMessageName": "FindNSClusterTLSConfigResponse",
          "code": "rpc findNSClusterTLSConfig(FindNSClusterTLSConfigRequest) returns (FindNSClusterTLSConfigResponse);",
          "doc": "查找集群的TLS设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSClusterTLS",
          "requestMessageName": "UpdateNSClusterTLSRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSClusterTLS (UpdateNSClusterTLSRequest) returns (RPCSuccess);",
          "doc": "修改集群的TLS设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSClusterUDPConfig",
          "requestMessageName": "FindNSClusterUDPConfigRequest",
          "responseMessageName": "FindNSClusterUDPConfigResponse",
          "code": "rpc findNSClusterUDPConfig(FindNSClusterUDPConfigRequest) returns (FindNSClusterUDPConfigResponse);",
          "doc": "查找集群的UDP设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSClusterUDP",
          "requestMessageName": "UpdateNSClusterUDPRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSClusterUDP (UpdateNSClusterUDPRequest) returns (RPCSuccess);",
          "doc": "修改集群的UDP设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSClusterDoHConfig",
          "requestMessageName": "FindNSClusterDoHConfigRequest",
          "responseMessageName": "FindNSClusterDoHConfigResponse",
          "code": "rpc findNSClusterDoHConfig(FindNSClusterDoHConfigRequest) returns (FindNSClusterDoHConfigResponse);",
          "doc": "查找集群的DoH设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSClusterDoH",
          "requestMessageName": "UpdateNSClusterDoHRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSClusterDoH (UpdateNSClusterDoHRequest) returns (RPCSuccess);",
          "doc": "修改集群的DoH设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNSClustersWithSSLCertId",
          "requestMessageName": "CountAllNSClustersWithSSLCertIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNSClustersWithSSLCertId (CountAllNSClustersWithSSLCertIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个SSL证书的集群数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSClusterDDoSProtection",
          "requestMessageName": "FindNSClusterDDoSProtectionRequest",
          "responseMessageName": "FindNSClusterDDoSProtectionResponse",
          "code": "rpc findNSClusterDDoSProtection(FindNSClusterDDoSProtectionRequest) returns (FindNSClusterDDoSProtectionResponse);",
          "doc": "获取NS集群的DDoS设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSClusterDDoSProtection",
          "requestMessageName": "UpdateNSClusterDDoSProtectionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSClusterDDoSProtection(UpdateNSClusterDDoSProtectionRequest) returns (RPCSuccess);",
          "doc": "修改NS集群的DDoS设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSClusterHosts",
          "requestMessageName": "FindNSClusterHostsRequest",
          "responseMessageName": "FindNSClusterHostsResponse",
          "code": "rpc findNSClusterHosts(FindNSClusterHostsRequest) returns (FindNSClusterHostsResponse);",
          "doc": "查找NS集群的主机地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAvailableNSHostsForUser",
          "requestMessageName": "FindAvailableNSHostsForUserRequest",
          "responseMessageName": "FindAvailableNSHostsForUserResponse",
          "code": "rpc findAvailableNSHostsForUser(FindAvailableNSHostsForUserRequest) returns (FindAvailableNSHostsForUserResponse);",
          "doc": "查找用户可以使用的主机地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSClusterAnswerConfig",
          "requestMessageName": "FindNSClusterAnswerConfigRequest",
          "responseMessageName": "FindNSClusterAnswerConfigResponse",
          "code": "rpc findNSClusterAnswerConfig(FindNSClusterAnswerConfigRequest) returns (FindNSClusterAnswerConfigResponse);",
          "doc": "查找应答模式",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSClusterAnswerConfig",
          "requestMessageName": "UpdateNSClusterAnswerConfigRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSClusterAnswerConfig(UpdateNSClusterAnswerConfigRequest) returns (RPCSuccess);",
          "doc": "设置应答模式",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSClusterSOAConfig",
          "requestMessageName": "FindNSClusterSOAConfigRequest",
          "responseMessageName": "FindNSClusterSOAConfigResponse",
          "code": "rpc findNSClusterSOAConfig(FindNSClusterSOAConfigRequest) returns (FindNSClusterSOAConfigResponse);",
          "doc": "查找SOA配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSClusterSOAConfig",
          "requestMessageName": "UpdateNSClusterSOAConfigRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSClusterSOAConfig(UpdateNSClusterSOAConfigRequest) returns (RPCSuccess);",
          "doc": "设置SOA配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_cluster.proto",
      "doc": "域名服务集群相关服务"
    },
    {
      "name": "NSDomainService",
      "methods": [
        {
          "name": "createNSDomain",
          "requestMessageName": "CreateNSDomainRequest",
          "responseMessageName": "CreateNSDomainResponse",
          "code": "rpc createNSDomain (CreateNSDomainRequest) returns (CreateNSDomainResponse);",
          "doc": "创建单个域名",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "createNSDomains",
          "requestMessageName": "CreateNSDomainsRequest",
          "responseMessageName": "CreateNSDomainsResponse",
          "code": "rpc createNSDomains(CreateNSDomainsRequest) returns (CreateNSDomainsResponse);",
          "doc": "批量创建域名",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSDomain",
          "requestMessageName": "UpdateNSDomainRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSDomain (UpdateNSDomainRequest) returns (RPCSuccess);",
          "doc": "修改域名",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSDomainStatus",
          "requestMessageName": "UpdateNSDomainStatusRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSDomainStatus(UpdateNSDomainStatusRequest) returns (RPCSuccess);",
          "doc": "修改域名状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSDomain",
          "requestMessageName": "DeleteNSDomainRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSDomain (DeleteNSDomainRequest) returns (RPCSuccess);",
          "doc": "删除域名",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSDomains",
          "requestMessageName": "DeleteNSDomainsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSDomains(DeleteNSDomainsRequest) returns (RPCSuccess);",
          "doc": "批量删除域名",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSDomain",
          "requestMessageName": "FindNSDomainRequest",
          "responseMessageName": "FindNSDomainResponse",
          "code": "rpc findNSDomain (FindNSDomainRequest) returns (FindNSDomainResponse);",
          "doc": "查找单个域名",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSDomainWithName",
          "requestMessageName": "FindNSDomainWithNameRequest",
          "responseMessageName": "FindNSDomainWithNameResponse",
          "code": "rpc findNSDomainWithName(FindNSDomainWithNameRequest) returns (FindNSDomainWithNameResponse);",
          "doc": "根据域名名称查找域名",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findVerifiedNSDomainOnCluster",
          "requestMessageName": "FindVerifiedNSDomainOnClusterRequest",
          "responseMessageName": "FindVerifiedNSDomainOnClusterResponse",
          "code": "rpc findVerifiedNSDomainOnCluster(FindVerifiedNSDomainOnClusterRequest) returns (FindVerifiedNSDomainOnClusterResponse);",
          "doc": "根据域名名称查找集群中的已验证域名",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNSDomains",
          "requestMessageName": "CountAllNSDomainsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNSDomains (CountAllNSDomainsRequest) returns (RPCCountResponse);",
          "doc": "计算域名数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSDomains",
          "requestMessageName": "ListNSDomainsRequest",
          "responseMessageName": "ListNSDomainsResponse",
          "code": "rpc listNSDomains (ListNSDomainsRequest) returns (ListNSDomainsResponse);",
          "doc": "列出单页域名",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSDomainsAfterVersion",
          "requestMessageName": "ListNSDomainsAfterVersionRequest",
          "responseMessageName": "ListNSDomainsAfterVersionResponse",
          "code": "rpc listNSDomainsAfterVersion (ListNSDomainsAfterVersionRequest) returns (ListNSDomainsAfterVersionResponse);",
          "doc": "根据版本列出一组域名",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSDomainTSIG",
          "requestMessageName": "FindNSDomainTSIGRequest",
          "responseMessageName": "FindNSDomainTSIGResponse",
          "code": "rpc findNSDomainTSIG (FindNSDomainTSIGRequest) returns (FindNSDomainTSIGResponse);",
          "doc": "查找TSIG配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSDomainTSIG",
          "requestMessageName": "UpdateNSDomainTSIGRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSDomainTSIG (UpdateNSDomainTSIGRequest) returns (RPCSuccess);",
          "doc": "修改TSIG配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "existNSDomains",
          "requestMessageName": "ExistNSDomainsRequest",
          "responseMessageName": "ExistNSDomainsResponse",
          "code": "rpc existNSDomains(ExistNSDomainsRequest) returns (ExistNSDomainsResponse);",
          "doc": "检查一组域名是否在用户账户中存在",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "existVerifiedNSDomains",
          "requestMessageName": "ExistVerifiedNSDomainsRequest",
          "responseMessageName": "ExistVerifiedNSDomainsResponse",
          "code": "rpc existVerifiedNSDomains(ExistVerifiedNSDomainsRequest) returns (ExistVerifiedNSDomainsResponse);",
          "doc": "检查一组域名是否已通过验证",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSDomainVerifyingInfo",
          "requestMessageName": "FindNSDomainVerifyingInfoRequest",
          "responseMessageName": "FindNSDomainVerifyingInfoResponse",
          "code": "rpc findNSDomainVerifyingInfo(FindNSDomainVerifyingInfoRequest) returns (FindNSDomainVerifyingInfoResponse);",
          "doc": "获取域名验证信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "verifyNSDomain",
          "requestMessageName": "VerifyNSDomainRequest",
          "responseMessageName": "VerifyNSDomainResponse",
          "code": "rpc verifyNSDomain(VerifyNSDomainRequest) returns (VerifyNSDomainResponse);",
          "doc": "验证域名信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSDomainRecordsHealthCheck",
          "requestMessageName": "FindNSDomainRecordsHealthCheckRequest",
          "responseMessageName": "FindNSDomainRecordsHealthCheckResponse",
          "code": "rpc findNSDomainRecordsHealthCheck(FindNSDomainRecordsHealthCheckRequest) returns (FindNSDomainRecordsHealthCheckResponse);",
          "doc": "查询记录健康检查全局设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSDomainRecordsHealthCheck",
          "requestMessageName": "UpdateNSDomainRecordsHealthCheckRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSDomainRecordsHealthCheck(UpdateNSDomainRecordsHealthCheckRequest) returns (RPCSuccess);",
          "doc": "修改记录健康检查全局设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_domain.proto",
      "doc": "域名相关服务"
    },
    {
      "name": "NSDomainGroupService",
      "methods": [
        {
          "name": "createNSDomainGroup",
          "requestMessageName": "CreateNSDomainGroupRequest",
          "responseMessageName": "CreateNSDomainGroupResponse",
          "code": "rpc createNSDomainGroup(CreateNSDomainGroupRequest) returns (CreateNSDomainGroupResponse);",
          "doc": "创建分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSDomainGroup",
          "requestMessageName": "UpdateNSDomainGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSDomainGroup(UpdateNSDomainGroupRequest) returns (RPCSuccess);",
          "doc": "修改分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSDomainGroup",
          "requestMessageName": "DeleteNSDomainGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSDomainGroup(DeleteNSDomainGroupRequest) returns (RPCSuccess);",
          "doc": "删除分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllNSDomainGroups",
          "requestMessageName": "FindAllNSDomainGroupsRequest",
          "responseMessageName": "FindAllNSDomainGroupsResponse",
          "code": "rpc findAllNSDomainGroups(FindAllNSDomainGroupsRequest) returns (FindAllNSDomainGroupsResponse);",
          "doc": "查询所有分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllAvailableNSDomainGroups",
          "requestMessageName": "CountAllAvailableNSDomainGroupsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllAvailableNSDomainGroups(CountAllAvailableNSDomainGroupsRequest) returns (RPCCountResponse);",
          "doc": "查询可用分组数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAvailableNSDomainGroups",
          "requestMessageName": "FindAllAvailableNSDomainGroupsRequest",
          "responseMessageName": "FindAllAvailableNSDomainGroupsResponse",
          "code": "rpc findAllAvailableNSDomainGroups(FindAllAvailableNSDomainGroupsRequest) returns (FindAllAvailableNSDomainGroupsResponse);",
          "doc": "查询所有启用分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSDomainGroup",
          "requestMessageName": "FindNSDomainGroupRequest",
          "responseMessageName": "FindNSDomainGroupResponse",
          "code": "rpc findNSDomainGroup(FindNSDomainGroupRequest) returns (FindNSDomainGroupResponse);",
          "doc": "查找单个分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_domain_group.proto",
      "doc": "域名分组服务"
    },
    {
      "name": "NSKeyService",
      "methods": [
        {
          "name": "createNSKey",
          "requestMessageName": "CreateNSKeyRequest",
          "responseMessageName": "CreateNSKeyResponse",
          "code": "rpc createNSKey (CreateNSKeyRequest) returns (CreateNSKeyResponse);",
          "doc": "创建密钥",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSKey",
          "requestMessageName": "UpdateNSKeyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSKey (UpdateNSKeyRequest) returns (RPCSuccess);",
          "doc": "修改密钥",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSKey",
          "requestMessageName": "DeleteNSKeyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSKey (DeleteNSKeyRequest) returns (RPCSuccess);",
          "doc": "删除密钥",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSKey",
          "requestMessageName": "FindNSKeyRequest",
          "responseMessageName": "FindNSKeyResponse",
          "code": "rpc findNSKey (FindNSKeyRequest) returns (FindNSKeyResponse);",
          "doc": "查找单个密钥",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNSKeys",
          "requestMessageName": "CountAllNSKeysRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNSKeys (CountAllNSKeysRequest) returns (RPCCountResponse);",
          "doc": "计算密钥数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSKeys",
          "requestMessageName": "ListNSKeysRequest",
          "responseMessageName": "ListNSKeysResponse",
          "code": "rpc listNSKeys (ListNSKeysRequest) returns (ListNSKeysResponse);",
          "doc": "列出单页密钥",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSKeysAfterVersion",
          "requestMessageName": "ListNSKeysAfterVersionRequest",
          "responseMessageName": "ListNSKeysAfterVersionResponse",
          "code": "rpc listNSKeysAfterVersion (ListNSKeysAfterVersionRequest) returns (ListNSKeysAfterVersionResponse);",
          "doc": "根据版本列出一组密钥",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_key.proto",
      "doc": "NS密钥相关服务"
    },
    {
      "name": "NSNodeService",
      "methods": [
        {
          "name": "findAllNSNodesWithNSClusterId",
          "requestMessageName": "FindAllNSNodesWithNSClusterIdRequest",
          "responseMessageName": "FindAllNSNodesWithNSClusterIdResponse",
          "code": "rpc findAllNSNodesWithNSClusterId (FindAllNSNodesWithNSClusterIdRequest) returns (FindAllNSNodesWithNSClusterIdResponse);",
          "doc": "根据集群查找所有NS节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNSNodes",
          "requestMessageName": "CountAllNSNodesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNSNodes (CountAllNSNodesRequest) returns (RPCCountResponse);",
          "doc": "所有可用的NS节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNSNodesMatch",
          "requestMessageName": "CountAllNSNodesMatchRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNSNodesMatch (CountAllNSNodesMatchRequest) returns (RPCCountResponse);",
          "doc": "计算匹配的NS节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSNodesMatch",
          "requestMessageName": "ListNSNodesMatchRequest",
          "responseMessageName": "ListNSNodesMatchResponse",
          "code": "rpc listNSNodesMatch (ListNSNodesMatchRequest) returns (ListNSNodesMatchResponse);",
          "doc": "列出单页NS节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllUpgradeNSNodesWithNSClusterId",
          "requestMessageName": "CountAllUpgradeNSNodesWithNSClusterIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllUpgradeNSNodesWithNSClusterId (CountAllUpgradeNSNodesWithNSClusterIdRequest) returns (RPCCountResponse);",
          "doc": "计算需要升级的NS节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "createNSNode",
          "requestMessageName": "CreateNSNodeRequest",
          "responseMessageName": "CreateNSNodeResponse",
          "code": "rpc createNSNode (CreateNSNodeRequest) returns (CreateNSNodeResponse);",
          "doc": "创建NS节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSNode",
          "requestMessageName": "DeleteNSNodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSNode (DeleteNSNodeRequest) returns (RPCSuccess);",
          "doc": "删除NS节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSNode",
          "requestMessageName": "FindNSNodeRequest",
          "responseMessageName": "FindNSNodeResponse",
          "code": "rpc findNSNode (FindNSNodeRequest) returns (FindNSNodeResponse);",
          "doc": "获取单个NS节点信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSNode",
          "requestMessageName": "UpdateNSNodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSNode (UpdateNSNodeRequest) returns (RPCSuccess);",
          "doc": "修改NS节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "installNSNode",
          "requestMessageName": "InstallNSNodeRequest",
          "responseMessageName": "InstallNSNodeResponse",
          "code": "rpc installNSNode (InstallNSNodeRequest) returns (InstallNSNodeResponse);",
          "doc": "安装NS节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSNodeInstallStatus",
          "requestMessageName": "FindNSNodeInstallStatusRequest",
          "responseMessageName": "FindNSNodeInstallStatusResponse",
          "code": "rpc findNSNodeInstallStatus (FindNSNodeInstallStatusRequest) returns (FindNSNodeInstallStatusResponse);",
          "doc": "读取NS节点安装状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSNodeIsInstalled",
          "requestMessageName": "UpdateNSNodeIsInstalledRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSNodeIsInstalled (UpdateNSNodeIsInstalledRequest) returns (RPCSuccess);",
          "doc": "修改NS节点安装状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSNodeStatus",
          "requestMessageName": "UpdateNSNodeStatusRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSNodeStatus (UpdateNSNodeStatusRequest) returns (RPCSuccess);",
          "doc": "更新NS节点状态",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "findCurrentNSNodeConfig",
          "requestMessageName": "FindCurrentNSNodeConfigRequest",
          "responseMessageName": "FindCurrentNSNodeConfigResponse",
          "code": "rpc findCurrentNSNodeConfig (FindCurrentNSNodeConfigRequest) returns (FindCurrentNSNodeConfigResponse);",
          "doc": "获取当前NS节点信息",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkNSNodeLatestVersion",
          "requestMessageName": "CheckNSNodeLatestVersionRequest",
          "responseMessageName": "CheckNSNodeLatestVersionResponse",
          "code": "rpc checkNSNodeLatestVersion (CheckNSNodeLatestVersionRequest) returns (CheckNSNodeLatestVersionResponse);",
          "doc": "检查NS节点新版本",
          "roles": [
            "dns",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findLatestNSNodeVersion",
          "requestMessageName": "FindLatestNSNodeVersionRequest",
          "responseMessageName": "FindLatestNSNodeVersionResponse",
          "code": "rpc findLatestNSNodeVersion (FindLatestNSNodeVersionRequest) returns (FindLatestNSNodeVersionResponse);",
          "doc": "获取NS节点最新版本",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "downloadNSNodeInstallationFile",
          "requestMessageName": "DownloadNSNodeInstallationFileRequest",
          "responseMessageName": "DownloadNSNodeInstallationFileResponse",
          "code": "rpc downloadNSNodeInstallationFile (DownloadNSNodeInstallationFileRequest) returns (DownloadNSNodeInstallationFileResponse);",
          "doc": "下载最新NS节点安装文件",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "sendCommandToNSNode",
          "requestMessageName": "NSNodeStreamMessage",
          "responseMessageName": "NSNodeStreamMessage",
          "code": "rpc sendCommandToNSNode (NSNodeStreamMessage) returns (NSNodeStreamMessage);",
          "doc": "向NS节点发送命令",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSNodeConnectedAPINodes",
          "requestMessageName": "UpdateNSNodeConnectedAPINodesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSNodeConnectedAPINodes (UpdateNSNodeConnectedAPINodesRequest) returns (RPCSuccess);",
          "doc": "更改NS节点连接的API节点信息",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSNodeLogin",
          "requestMessageName": "UpdateNSNodeLoginRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSNodeLogin (UpdateNSNodeLoginRequest) returns (RPCSuccess);",
          "doc": "修改NS节点登录信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "startNSNode",
          "requestMessageName": "StartNSNodeRequest",
          "responseMessageName": "StartNSNodeResponse",
          "code": "rpc startNSNode (StartNSNodeRequest) returns (StartNSNodeResponse);",
          "doc": "启动NS节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "stopNSNode",
          "requestMessageName": "StopNSNodeRequest",
          "responseMessageName": "StopNSNodeResponse",
          "code": "rpc stopNSNode (StopNSNodeRequest) returns (StopNSNodeResponse);",
          "doc": "停止NS节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSNodeDDoSProtection",
          "requestMessageName": "FindNSNodeDDoSProtectionRequest",
          "responseMessageName": "FindNSNodeDDoSProtectionResponse",
          "code": "rpc findNSNodeDDoSProtection(FindNSNodeDDoSProtectionRequest) returns (FindNSNodeDDoSProtectionResponse);",
          "doc": "获取NS节点的DDoS设置",
          "roles": [
            "admin",
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSNodeDDoSProtection",
          "requestMessageName": "UpdateNSNodeDDoSProtectionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSNodeDDoSProtection(UpdateNSNodeDDoSProtectionRequest) returns (RPCSuccess);",
          "doc": "修改NS节点的DDoS设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSNodeAPIConfig",
          "requestMessageName": "FindNSNodeAPIConfigRequest",
          "responseMessageName": "FindNSNodeAPIConfigResponse",
          "code": "rpc findNSNodeAPIConfig(FindNSNodeAPIConfigRequest) returns (FindNSNodeAPIConfigResponse);",
          "doc": "查找单个节点的API相关配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSNodeAPIConfig",
          "requestMessageName": "UpdateNSNodeAPIConfigRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSNodeAPIConfig(UpdateNSNodeAPIConfigRequest) returns (RPCSuccess);",
          "doc": "修改某个节点的API相关配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_node.proto",
      "doc": "域名服务器节点服务"
    },
    {
      "name": "NSPlanService",
      "methods": [
        {
          "name": "createNSPlan",
          "requestMessageName": "CreateNSPlanRequest",
          "responseMessageName": "CreateNSPlanResponse",
          "code": "rpc createNSPlan(CreateNSPlanRequest) returns (CreateNSPlanResponse);",
          "doc": "创建DNS套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSPlan",
          "requestMessageName": "UpdateNSPlanRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSPlan(UpdateNSPlanRequest) returns (RPCSuccess);",
          "doc": "修改DNS套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "sortNSPlanOrders",
          "requestMessageName": "SortNSPlansRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc sortNSPlanOrders(SortNSPlansRequest) returns (RPCSuccess);",
          "doc": "修改DNS套餐顺序",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllNSPlans",
          "requestMessageName": "FindAllNSPlansRequest",
          "responseMessageName": "FindAllNSPlansResponse",
          "code": "rpc findAllNSPlans(FindAllNSPlansRequest) returns (FindAllNSPlansResponse);",
          "doc": "查找所有DNS套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledNSPlans",
          "requestMessageName": "FindAllEnabledNSPlansRequest",
          "responseMessageName": "FindAllEnabledNSPlansResponse",
          "code": "rpc findAllEnabledNSPlans(FindAllEnabledNSPlansRequest) returns (FindAllEnabledNSPlansResponse);",
          "doc": "查找所有可用DNS套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSPlan",
          "requestMessageName": "FindNSPlanRequest",
          "responseMessageName": "FindNSPlanResponse",
          "code": "rpc findNSPlan(FindNSPlanRequest) returns (FindNSPlanResponse);",
          "doc": "查找DNS套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSPlan",
          "requestMessageName": "DeleteNSPlanRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSPlan(DeleteNSPlanRequest) returns (RPCSuccess);",
          "doc": "删除DNS套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_plan.proto",
      "doc": "DNS套餐服务"
    },
    {
      "name": "NSQuestionOptionService",
      "methods": [
        {
          "name": "createNSQuestionOption",
          "requestMessageName": "CreateNSQuestionOptionRequest",
          "responseMessageName": "CreateNSQuestionOptionResponse",
          "code": "rpc createNSQuestionOption(CreateNSQuestionOptionRequest) returns (CreateNSQuestionOptionResponse);",
          "doc": "创建选项",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSQuestionOption",
          "requestMessageName": "FindNSQuestionOptionRequest",
          "responseMessageName": "FindNSQuestionOptionResponse",
          "code": "rpc findNSQuestionOption(FindNSQuestionOptionRequest) returns (FindNSQuestionOptionResponse);",
          "doc": "读取选项",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSQuestionOption",
          "requestMessageName": "DeleteNSQuestionOptionRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSQuestionOption(DeleteNSQuestionOptionRequest) returns (RPCSuccess);",
          "doc": "删除选项",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_question_option.proto",
      "doc": "DNS查询选项"
    },
    {
      "name": "NSRecordService",
      "methods": [
        {
          "name": "createNSRecord",
          "requestMessageName": "CreateNSRecordRequest",
          "responseMessageName": "CreateNSRecordResponse",
          "code": "rpc createNSRecord (CreateNSRecordRequest) returns (CreateNSRecordResponse);",
          "doc": "创建记录",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "createNSRecords",
          "requestMessageName": "CreateNSRecordsRequest",
          "responseMessageName": "CreateNSRecordsResponse",
          "code": "rpc createNSRecords(CreateNSRecordsRequest) returns (CreateNSRecordsResponse);",
          "doc": "批量创建记录",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "createNSRecordsWithDomainNames",
          "requestMessageName": "CreateNSRecordsWithDomainNamesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc createNSRecordsWithDomainNames(CreateNSRecordsWithDomainNamesRequest) returns (RPCSuccess);",
          "doc": "为一组域名批量创建记录",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSRecordsWithDomainNames",
          "requestMessageName": "UpdateNSRecordsWithDomainNamesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSRecordsWithDomainNames(UpdateNSRecordsWithDomainNamesRequest) returns (RPCSuccess);",
          "doc": "批量修改一组域名的一组记录",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSRecordsWithDomainNames",
          "requestMessageName": "DeleteNSRecordsWithDomainNamesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSRecordsWithDomainNames(DeleteNSRecordsWithDomainNamesRequest) returns (RPCSuccess);",
          "doc": "批量删除一组域名的一组记录",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSRecordsIsOnWithDomainNames",
          "requestMessageName": "UpdateNSRecordsIsOnWithDomainNamesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSRecordsIsOnWithDomainNames(UpdateNSRecordsIsOnWithDomainNamesRequest) returns (RPCSuccess);",
          "doc": "批量一组域名的一组记录启用状态",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "importNSRecords",
          "requestMessageName": "ImportNSRecordsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc importNSRecords(ImportNSRecordsRequest) returns (RPCSuccess);",
          "doc": "导入域名解析",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSRecord",
          "requestMessageName": "UpdateNSRecordRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSRecord (UpdateNSRecordRequest) returns (RPCSuccess);",
          "doc": "修改记录",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSRecord",
          "requestMessageName": "DeleteNSRecordRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSRecord (DeleteNSRecordRequest) returns (RPCSuccess);",
          "doc": "删除记录",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNSRecords",
          "requestMessageName": "CountAllNSRecordsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNSRecords (CountAllNSRecordsRequest) returns (RPCCountResponse);",
          "doc": "计算记录数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNSRecordsWithName",
          "requestMessageName": "CountAllNSRecordsWithNameRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNSRecordsWithName (CountAllNSRecordsWithNameRequest) returns (RPCCountResponse);",
          "doc": "查询相同记录名的记录数",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSRecords",
          "requestMessageName": "ListNSRecordsRequest",
          "responseMessageName": "ListNSRecordsResponse",
          "code": "rpc listNSRecords (ListNSRecordsRequest) returns (ListNSRecordsResponse);",
          "doc": "读取单页记录",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSRecord",
          "requestMessageName": "FindNSRecordRequest",
          "responseMessageName": "FindNSRecordResponse",
          "code": "rpc findNSRecord (FindNSRecordRequest) returns (FindNSRecordResponse);",
          "doc": "查询单个记录信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSRecordWithNameAndType",
          "requestMessageName": "FindNSRecordWithNameAndTypeRequest",
          "responseMessageName": "FindNSRecordWithNameAndTypeResponse",
          "code": "rpc findNSRecordWithNameAndType(FindNSRecordWithNameAndTypeRequest) returns (FindNSRecordWithNameAndTypeResponse);",
          "doc": "使用名称和类型查询单个记录信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSRecordsWithNameAndType",
          "requestMessageName": "FindNSRecordsWithNameAndTypeRequest",
          "responseMessageName": "FindNSRecordsWithNameAndTypeResponse",
          "code": "rpc findNSRecordsWithNameAndType(FindNSRecordsWithNameAndTypeRequest) returns (FindNSRecordsWithNameAndTypeResponse);",
          "doc": "使用名称和类型查询多个记录信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSRecordsAfterVersion",
          "requestMessageName": "ListNSRecordsAfterVersionRequest",
          "responseMessageName": "ListNSRecordsAfterVersionResponse",
          "code": "rpc listNSRecordsAfterVersion (ListNSRecordsAfterVersionRequest) returns (ListNSRecordsAfterVersionResponse);",
          "doc": "根据版本列出一组记录",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSRecordHealthCheck",
          "requestMessageName": "FindNSRecordHealthCheckRequest",
          "responseMessageName": "FindNSRecordHealthCheckResponse",
          "code": "rpc findNSRecordHealthCheck(FindNSRecordHealthCheckRequest) returns (FindNSRecordHealthCheckResponse);",
          "doc": "查询记录健康检查设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSRecordHealthCheck",
          "requestMessageName": "UpdateNSRecordHealthCheckRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSRecordHealthCheck(UpdateNSRecordHealthCheckRequest) returns (RPCSuccess);",
          "doc": "修改记录健康检查设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSRecordIsUp",
          "requestMessageName": "UpdateNSRecordIsUpRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSRecordIsUp(UpdateNSRecordIsUpRequest) returns (RPCSuccess);",
          "doc": "手动修改记录在线状态",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_record.proto",
      "doc": "域名记录相关服务"
    },
    {
      "name": "NSRecordHourlyStatService",
      "methods": [
        {
          "name": "uploadNSRecordHourlyStats",
          "requestMessageName": "UploadNSRecordHourlyStatsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc uploadNSRecordHourlyStats (UploadNSRecordHourlyStatsRequest) returns (RPCSuccess);",
          "doc": "上传统计",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSRecordHourlyStat",
          "requestMessageName": "FindNSRecordHourlyStatRequest",
          "responseMessageName": "FindNSRecordHourlyStatResponse",
          "code": "rpc findNSRecordHourlyStat(FindNSRecordHourlyStatRequest) returns (FindNSRecordHourlyStatResponse);",
          "doc": "获取单个记录单个小时的统计",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findLatestNSRecordsHourlyStats",
          "requestMessageName": "FindLatestNSRecordsHourlyStatsRequest",
          "responseMessageName": "FindLatestNSRecordsHourlyStatsResponse",
          "code": "rpc findLatestNSRecordsHourlyStats(FindLatestNSRecordsHourlyStatsRequest) returns (FindLatestNSRecordsHourlyStatsResponse);",
          "doc": "获取单个记录24小时内的统计",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSRecordHourlyStatWithRecordIds",
          "requestMessageName": "FindNSRecordHourlyStatWithRecordIdsRequest",
          "responseMessageName": "FindNSRecordHourlyStatWithRecordIdsResponse",
          "code": "rpc findNSRecordHourlyStatWithRecordIds(FindNSRecordHourlyStatWithRecordIdsRequest) returns (FindNSRecordHourlyStatWithRecordIdsResponse);",
          "doc": "批量获取一组记录的统计",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_record_hourly_stat.proto",
      "doc": "NS记录小时统计"
    },
    {
      "name": "NSRouteService",
      "methods": [
        {
          "name": "createNSRoute",
          "requestMessageName": "CreateNSRouteRequest",
          "responseMessageName": "CreateNSRouteResponse",
          "code": "rpc createNSRoute (CreateNSRouteRequest) returns (CreateNSRouteResponse);",
          "doc": "创建自定义线路",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSRoute",
          "requestMessageName": "UpdateNSRouteRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSRoute (UpdateNSRouteRequest) returns (RPCSuccess);",
          "doc": "修改自定义线路",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSRoute",
          "requestMessageName": "DeleteNSRouteRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSRoute (DeleteNSRouteRequest) returns (RPCSuccess);",
          "doc": "删除自定义线路",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSRoute",
          "requestMessageName": "FindNSRouteRequest",
          "responseMessageName": "FindNSRouteResponse",
          "code": "rpc findNSRoute (FindNSRouteRequest) returns (FindNSRouteResponse);",
          "doc": "获取单个自定义路线信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllNSRoutes",
          "requestMessageName": "CountAllNSRoutesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllNSRoutes(CountAllNSRoutesRequest) returns (RPCCountResponse);",
          "doc": "查询自定义线路数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllNSRoutes",
          "requestMessageName": "FindAllNSRoutesRequest",
          "responseMessageName": "FindAllNSRoutesResponse",
          "code": "rpc findAllNSRoutes (FindAllNSRoutesRequest) returns (FindAllNSRoutesResponse);",
          "doc": "读取所有自定义线路",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllPublicNSRoutes",
          "requestMessageName": "FindAllPublicRoutesRequest",
          "responseMessageName": "FindAllPublicRoutesResponse",
          "code": "rpc findAllPublicNSRoutes (FindAllPublicRoutesRequest) returns (FindAllPublicRoutesResponse);",
          "doc": "读取所有公用的自定义线路\n目前只允许读取系统管理员设置的公用自定义线路",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "updateNSRouteOrders",
          "requestMessageName": "UpdateNSRouteOrdersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSRouteOrders (UpdateNSRouteOrdersRequest) returns (RPCSuccess);",
          "doc": "设置自定义线路排序",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSRoutesAfterVersion",
          "requestMessageName": "ListNSRoutesAfterVersionRequest",
          "responseMessageName": "ListNSRoutesAfterVersionResponse",
          "code": "rpc listNSRoutesAfterVersion (ListNSRoutesAfterVersionRequest) returns (ListNSRoutesAfterVersionResponse);",
          "doc": "根据版本列出一组自定义线路",
          "roles": [
            "dns"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllDefaultWorldRegionRoutes",
          "requestMessageName": "FindAllDefaultWorldRegionRoutesRequest",
          "responseMessageName": "FindAllDefaultWorldRegionRoutesResponse",
          "code": "rpc findAllDefaultWorldRegionRoutes(FindAllDefaultWorldRegionRoutesRequest) returns (FindAllDefaultWorldRegionRoutesResponse);",
          "doc": "查找默认的世界区域线路",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllDefaultChinaProvinceRoutes",
          "requestMessageName": "FindAllDefaultChinaProvinceRoutesRequest",
          "responseMessageName": "FindAllDefaultChinaProvinceRoutesResponse",
          "code": "rpc findAllDefaultChinaProvinceRoutes(FindAllDefaultChinaProvinceRoutesRequest) returns (FindAllDefaultChinaProvinceRoutesResponse);",
          "doc": "查找默认的中国省份线路",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllDefaultISPRoutes",
          "requestMessageName": "FindAllDefaultISPRoutesRequest",
          "responseMessageName": "FindAllDefaultISPRoutesResponse",
          "code": "rpc findAllDefaultISPRoutes(FindAllDefaultISPRoutesRequest) returns (FindAllDefaultISPRoutesResponse);",
          "doc": "查找默认的ISP线路",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAgentNSRoutes",
          "requestMessageName": "FindAllAgentNSRoutesRequest",
          "responseMessageName": "FindAllAgentNSRoutesResponse",
          "code": "rpc findAllAgentNSRoutes(FindAllAgentNSRoutesRequest) returns (FindAllAgentNSRoutesResponse);",
          "doc": "查找默认的搜索引擎线路",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_route.proto",
      "doc": "线路相关服务"
    },
    {
      "name": "NSRouteCategoryService",
      "methods": [
        {
          "name": "createNSRouteCategory",
          "requestMessageName": "CreateNSRouteCategoryRequest",
          "responseMessageName": "CreateNSRouteCategoryResponse",
          "code": "rpc createNSRouteCategory(CreateNSRouteCategoryRequest) returns (CreateNSRouteCategoryResponse);",
          "doc": "创建线路分类",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSRouteCategory",
          "requestMessageName": "UpdateNSRouteCategoryRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSRouteCategory(UpdateNSRouteCategoryRequest) returns (RPCSuccess);",
          "doc": "修改线路分类",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSRouteCategory",
          "requestMessageName": "DeleteNSRouteCategoryRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSRouteCategory(DeleteNSRouteCategoryRequest) returns (RPCSuccess);",
          "doc": "删除线路分类",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllNSRouteCategories",
          "requestMessageName": "FindAllNSRouteCategoriesRequest",
          "responseMessageName": "FindAllNSRouteCategoriesResponse",
          "code": "rpc findAllNSRouteCategories(FindAllNSRouteCategoriesRequest) returns (FindAllNSRouteCategoriesResponse);",
          "doc": "列出所有线路分类",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSRouteCategoryOrders",
          "requestMessageName": "UpdateNSRouteCategoryOrders",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSRouteCategoryOrders(UpdateNSRouteCategoryOrders) returns (RPCSuccess);",
          "doc": "对线路分类进行排序",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSRouteCategory",
          "requestMessageName": "FindNSRouteCategoryRequest",
          "responseMessageName": "FindNSRouteCategoryResponse",
          "code": "rpc findNSRouteCategory(FindNSRouteCategoryRequest) returns (FindNSRouteCategoryResponse);",
          "doc": "查找单个线路分类",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_route_category.proto",
      "doc": "线路分类服务"
    },
    {
      "name": "NSUserPlanService",
      "methods": [
        {
          "name": "createNSUserPlan",
          "requestMessageName": "CreateNSUserPlanRequest",
          "responseMessageName": "CreateNSUserPlanResponse",
          "code": "rpc createNSUserPlan(CreateNSUserPlanRequest) returns (CreateNSUserPlanResponse);",
          "doc": "创建用户套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateNSUserPlan",
          "requestMessageName": "UpdateNSUserPlanRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateNSUserPlan(UpdateNSUserPlanRequest) returns (RPCSuccess);",
          "doc": "修改用户套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteNSUserPlan",
          "requestMessageName": "DeleteNSUserPlanRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteNSUserPlan(DeleteNSUserPlanRequest) returns (RPCSuccess);",
          "doc": "删除用户套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNSUserPlan",
          "requestMessageName": "FindNSUserPlanRequest",
          "responseMessageName": "FindNSUserPlanResponse",
          "code": "rpc findNSUserPlan(FindNSUserPlanRequest) returns (FindNSUserPlanResponse);",
          "doc": "读取用户套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countNSUserPlans",
          "requestMessageName": "CountNSUserPlansRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countNSUserPlans(CountNSUserPlansRequest) returns (RPCCountResponse);",
          "doc": "计算用户套餐数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listNSUserPlans",
          "requestMessageName": "ListNSUserPlansRequest",
          "responseMessageName": "ListNSUserPlansResponse",
          "code": "rpc listNSUserPlans(ListNSUserPlansRequest) returns (ListNSUserPlansResponse);",
          "doc": "列出单页套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "buyNSUserPlan",
          "requestMessageName": "BuyNSUserPlanRequest",
          "responseMessageName": "BuyNSUserPlanResponse",
          "code": "rpc buyNSUserPlan(BuyNSUserPlanRequest) returns (BuyNSUserPlanResponse);",
          "doc": "使用余额购买用户套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ns_user_plan.proto",
      "doc": "用户DNS套餐服务"
    },
    {
      "name": "OrderMethodService",
      "methods": [
        {
          "name": "createOrderMethod",
          "requestMessageName": "CreateOrderMethodRequest",
          "responseMessageName": "CreateOrderMethodResponse",
          "code": "rpc createOrderMethod(CreateOrderMethodRequest) returns (CreateOrderMethodResponse);",
          "doc": "创建支付方式",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateOrderMethod",
          "requestMessageName": "UpdateOrderMethodRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateOrderMethod(UpdateOrderMethodRequest) returns (RPCSuccess);",
          "doc": "修改支付方式",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteOrderMethod",
          "requestMessageName": "DeleteOrderMethodRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteOrderMethod(DeleteOrderMethodRequest) returns (RPCSuccess);",
          "doc": "删除支付方式",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledOrderMethod",
          "requestMessageName": "FindEnabledOrderMethodRequest",
          "responseMessageName": "FindEnabledOrderMethodResponse",
          "code": "rpc findEnabledOrderMethod(FindEnabledOrderMethodRequest) returns (FindEnabledOrderMethodResponse);",
          "doc": "查找单个支付方式",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledOrderMethodWithCode",
          "requestMessageName": "FindEnabledOrderMethodWithCodeRequest",
          "responseMessageName": "FindEnabledOrderMethodWithCodeResponse",
          "code": "rpc findEnabledOrderMethodWithCode(FindEnabledOrderMethodWithCodeRequest) returns (FindEnabledOrderMethodWithCodeResponse);",
          "doc": "根据代号查找支付方式",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledOrderMethods",
          "requestMessageName": "FindAllEnabledOrderMethodsRequest",
          "responseMessageName": "FindAllEnabledOrderMethodsResponse",
          "code": "rpc findAllEnabledOrderMethods(FindAllEnabledOrderMethodsRequest) returns (FindAllEnabledOrderMethodsResponse);",
          "doc": "查找所有支付方式",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAvailableOrderMethods",
          "requestMessageName": "FindAllAvailableOrderMethodsRequest",
          "responseMessageName": "FindAllAvailableOrderMethodsResponse",
          "code": "rpc findAllAvailableOrderMethods(FindAllAvailableOrderMethodsRequest) returns (FindAllAvailableOrderMethodsResponse);",
          "doc": "查找所有已启用的支付方式",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_order_method.proto",
      "doc": "订单支付方式相关服务"
    },
    {
      "name": "OriginService",
      "methods": [
        {
          "name": "createOrigin",
          "requestMessageName": "CreateOriginRequest",
          "responseMessageName": "CreateOriginResponse",
          "code": "rpc createOrigin (CreateOriginRequest) returns (CreateOriginResponse);",
          "doc": "创建源站",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateOrigin",
          "requestMessageName": "UpdateOriginRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateOrigin (UpdateOriginRequest) returns (RPCSuccess);",
          "doc": "修改源站",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledOrigin",
          "requestMessageName": "FindEnabledOriginRequest",
          "responseMessageName": "FindEnabledOriginResponse",
          "code": "rpc findEnabledOrigin (FindEnabledOriginRequest) returns (FindEnabledOriginResponse);",
          "doc": "查找单个源站信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledOriginConfig",
          "requestMessageName": "FindEnabledOriginConfigRequest",
          "responseMessageName": "FindEnabledOriginConfigResponse",
          "code": "rpc findEnabledOriginConfig (FindEnabledOriginConfigRequest) returns (FindEnabledOriginConfigResponse);",
          "doc": "查找源站配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_origin.proto",
      "doc": "源站管理服务"
    },
    {
      "name": "PingService",
      "methods": [
        {
          "name": "ping",
          "requestMessageName": "PingRequest",
          "responseMessageName": "PingResponse",
          "code": "rpc ping(PingRequest) returns (PingResponse);",
          "doc": "发起Ping",
          "roles": [],
          "isDeprecated": false
        }
      ],
      "filename": "service_ping.proto",
      "doc": "Ping服务\n用来测试连接是否可用"
    },
    {
      "name": "PlanService",
      "methods": [
        {
          "name": "createPlan",
          "requestMessageName": "CreatePlanRequest",
          "responseMessageName": "CreatePlanResponse",
          "code": "rpc createPlan(CreatePlanRequest) returns (CreatePlanResponse);",
          "doc": "创建套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updatePlan",
          "requestMessageName": "UpdatePlanRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updatePlan(UpdatePlanRequest) returns (RPCSuccess);",
          "doc": "修改套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deletePlan",
          "requestMessageName": "DeletePlanRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deletePlan(DeletePlanRequest) returns (RPCSuccess);",
          "doc": "删除套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledPlan",
          "requestMessageName": "FindEnabledPlanRequest",
          "responseMessageName": "FindEnabledPlanResponse",
          "code": "rpc findEnabledPlan(FindEnabledPlanRequest) returns (FindEnabledPlanResponse);",
          "doc": "查找单个套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledPlans",
          "requestMessageName": "CountAllEnabledPlansRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledPlans(CountAllEnabledPlansRequest) returns (RPCCountResponse);",
          "doc": "计算套餐数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledPlans",
          "requestMessageName": "ListEnabledPlansRequest",
          "responseMessageName": "ListEnabledPlansResponse",
          "code": "rpc listEnabledPlans(ListEnabledPlansRequest) returns (ListEnabledPlansResponse);",
          "doc": "列出单页套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "sortPlans",
          "requestMessageName": "SortPlansRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc sortPlans(SortPlansRequest) returns (RPCSuccess);",
          "doc": "对套餐进行排序",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_plan.proto",
      "doc": "套餐相关服务"
    },
    {
      "name": "PriceService",
      "methods": [
        {
          "name": "calculatePrice",
          "requestMessageName": "CalculatePriceRequest",
          "responseMessageName": "CalculatePriceResponse",
          "code": "rpc calculatePrice(CalculatePriceRequest) returns (CalculatePriceResponse);",
          "doc": "计算费用",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_price.proto",
      "doc": "价格相关服务"
    },
    {
      "name": "RegionCityService",
      "methods": [
        {
          "name": "findAllEnabledRegionCities",
          "requestMessageName": "FindAllEnabledRegionCitiesRequest",
          "responseMessageName": "FindAllEnabledRegionCitiesResponse",
          "code": "rpc findAllEnabledRegionCities (FindAllEnabledRegionCitiesRequest) returns (FindAllEnabledRegionCitiesResponse) {\n\t\toption deprecated = true;\n\t};\n\n\t// 查找单个城市信息\n\trpc findEnabledRegionCity (FindEnabledRegionCityRequest) returns (FindEnabledRegionCityResponse) {\n\t\toption deprecated = true;\n\t};",
          "doc": "查找所有城市",
          "roles": [],
          "isDeprecated": true
        },
        {
          "name": "findAllRegionCities",
          "requestMessageName": "FindAllRegionCitiesRequest",
          "responseMessageName": "FindAllRegionCitiesResponse",
          "code": "rpc findAllRegionCities (FindAllRegionCitiesRequest) returns (FindAllRegionCitiesResponse);",
          "doc": "查找所有城市",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findAllRegionCitiesWithRegionProvinceId",
          "requestMessageName": "FindAllRegionCitiesWithRegionProvinceIdRequest",
          "responseMessageName": "FindAllRegionCitiesWithRegionProvinceIdResponse",
          "code": "rpc findAllRegionCitiesWithRegionProvinceId(FindAllRegionCitiesWithRegionProvinceIdRequest) returns (FindAllRegionCitiesWithRegionProvinceIdResponse);",
          "doc": "查找某个省份的所有城市",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findRegionCity",
          "requestMessageName": "FindRegionCityRequest",
          "responseMessageName": "FindRegionCityResponse",
          "code": "rpc findRegionCity (FindRegionCityRequest) returns (FindRegionCityResponse);",
          "doc": "查找单个城市信息",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "updateRegionCityCustom",
          "requestMessageName": "UpdateRegionCityCustomRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateRegionCityCustom(UpdateRegionCityCustomRequest) returns (RPCSuccess);",
          "doc": "修改城市定制信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_region_city.proto",
      "doc": "城市相关服务"
    },
    {
      "name": "RegionCountryService",
      "methods": [
        {
          "name": "findAllEnabledRegionCountries",
          "requestMessageName": "FindAllEnabledRegionCountriesRequest",
          "responseMessageName": "FindAllEnabledRegionCountriesResponse",
          "code": "rpc findAllEnabledRegionCountries (FindAllEnabledRegionCountriesRequest) returns (FindAllEnabledRegionCountriesResponse) {\n\t\toption deprecated = true;\n\t};\n\n\t// 查找单个国家/地区信息\n\trpc findEnabledRegionCountry (FindEnabledRegionCountryRequest) returns (FindEnabledRegionCountryResponse) {\n\t\toption deprecated = true;\n\t};",
          "doc": "查找所有的国家/地区列表",
          "roles": [],
          "isDeprecated": true
        },
        {
          "name": "findAllRegionCountries",
          "requestMessageName": "FindAllRegionCountriesRequest",
          "responseMessageName": "FindAllRegionCountriesResponse",
          "code": "rpc findAllRegionCountries (FindAllRegionCountriesRequest) returns (FindAllRegionCountriesResponse);",
          "doc": "查找所有的国家/地区列表",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findRegionCountry",
          "requestMessageName": "FindRegionCountryRequest",
          "responseMessageName": "FindRegionCountryResponse",
          "code": "rpc findRegionCountry (FindRegionCountryRequest) returns (FindRegionCountryResponse);",
          "doc": "查找单个国家/地区信息",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "updateRegionCountryCustom",
          "requestMessageName": "UpdateRegionCountryCustomRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateRegionCountryCustom(UpdateRegionCountryCustomRequest) returns (RPCSuccess);",
          "doc": "修改国家/地区定制信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_region_country.proto",
      "doc": "国家/地区相关服务"
    },
    {
      "name": "RegionProviderService",
      "methods": [
        {
          "name": "findAllEnabledRegionProviders",
          "requestMessageName": "FindAllEnabledRegionProvidersRequest",
          "responseMessageName": "FindAllEnabledRegionProvidersResponse",
          "code": "rpc findAllEnabledRegionProviders (FindAllEnabledRegionProvidersRequest) returns (FindAllEnabledRegionProvidersResponse) {\n\t\toption deprecated = true;\n\t};\n\n\t// 查找单个ISP信息\n\trpc findEnabledRegionProvider (FindEnabledRegionProviderRequest) returns (FindEnabledRegionProviderResponse) {\n\t\toption deprecated = true;\n\t};",
          "doc": "查找所有ISP",
          "roles": [],
          "isDeprecated": true
        },
        {
          "name": "findAllRegionProviders",
          "requestMessageName": "FindAllRegionProvidersRequest",
          "responseMessageName": "FindAllRegionProvidersResponse",
          "code": "rpc findAllRegionProviders (FindAllRegionProvidersRequest) returns (FindAllRegionProvidersResponse);",
          "doc": "查找所有ISP",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findRegionProvider",
          "requestMessageName": "FindRegionProviderRequest",
          "responseMessageName": "FindRegionProviderResponse",
          "code": "rpc findRegionProvider (FindRegionProviderRequest) returns (FindRegionProviderResponse);",
          "doc": "查找单个ISP信息",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "updateRegionProviderCustom",
          "requestMessageName": "UpdateRegionProviderCustomRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateRegionProviderCustom(UpdateRegionProviderCustomRequest) returns (RPCSuccess);",
          "doc": "修改ISP定制信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_region_provider.proto",
      "doc": "ISP相关服务"
    },
    {
      "name": "RegionProvinceService",
      "methods": [
        {
          "name": "findAllEnabledRegionProvincesWithCountryId",
          "requestMessageName": "FindAllEnabledRegionProvincesWithCountryIdRequest",
          "responseMessageName": "FindAllEnabledRegionProvincesWithCountryIdResponse",
          "code": "rpc findAllEnabledRegionProvincesWithCountryId (FindAllEnabledRegionProvincesWithCountryIdRequest) returns (FindAllEnabledRegionProvincesWithCountryIdResponse) {\n\t\toption deprecated = true;\n\t};\n\n\t// 查找单个省份信息\n\trpc findEnabledRegionProvince (FindEnabledRegionProvinceRequest) returns (FindEnabledRegionProvinceResponse) {\n\t\toption deprecated = true;\n\t};",
          "doc": "查找所有省份",
          "roles": [],
          "isDeprecated": true
        },
        {
          "name": "findAllRegionProvincesWithRegionCountryId",
          "requestMessageName": "FindAllRegionProvincesWithRegionCountryIdRequest",
          "responseMessageName": "FindAllRegionProvincesWithRegionCountryIdResponse",
          "code": "rpc findAllRegionProvincesWithRegionCountryId (FindAllRegionProvincesWithRegionCountryIdRequest) returns (FindAllRegionProvincesWithRegionCountryIdResponse);",
          "doc": "查找所有省份",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findRegionProvince",
          "requestMessageName": "FindRegionProvinceRequest",
          "responseMessageName": "FindRegionProvinceResponse",
          "code": "rpc findRegionProvince (FindRegionProvinceRequest) returns (FindRegionProvinceResponse);",
          "doc": "查找单个省份信息",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "updateRegionProvinceCustom",
          "requestMessageName": "UpdateRegionProvinceCustomRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateRegionProvinceCustom(UpdateRegionProvinceCustomRequest) returns (RPCSuccess);",
          "doc": "修改国家/地区定制信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_region_province.proto",
      "doc": "省份相关服务"
    },
    {
      "name": "RegionTownService",
      "methods": [
        {
          "name": "findAllRegionTowns",
          "requestMessageName": "FindAllRegionTownsRequest",
          "responseMessageName": "FindAllRegionTownsResponse",
          "code": "rpc findAllRegionTowns (FindAllRegionTownsRequest) returns (FindAllRegionTownsResponse);",
          "doc": "查找所有区县",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findAllRegionTownsWithRegionCityId",
          "requestMessageName": "FindAllRegionTownsWithRegionCityIdRequest",
          "responseMessageName": "FindAllRegionTownsWithRegionCityIdResponse",
          "code": "rpc findAllRegionTownsWithRegionCityId(FindAllRegionTownsWithRegionCityIdRequest) returns (FindAllRegionTownsWithRegionCityIdResponse);",
          "doc": "查找某个城市的所有区县",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findRegionTown",
          "requestMessageName": "FindRegionTownRequest",
          "responseMessageName": "FindRegionTownResponse",
          "code": "rpc findRegionTown (FindRegionTownRequest) returns (FindRegionTownResponse);",
          "doc": "查找单个区县信息",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "updateRegionTownCustom",
          "requestMessageName": "UpdateRegionTownCustomRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateRegionTownCustom(UpdateRegionTownCustomRequest) returns (RPCSuccess);",
          "doc": "修改区县定制信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_region_town.proto",
      "doc": "区县相关服务"
    },
    {
      "name": "ReportNodeService",
      "methods": [
        {
          "name": "createReportNode",
          "requestMessageName": "CreateReportNodeRequest",
          "responseMessageName": "CreateReportNodeResponse",
          "code": "rpc createReportNode(CreateReportNodeRequest) returns (CreateReportNodeResponse);",
          "doc": "添加终端",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteReportNode",
          "requestMessageName": "DeleteReportNodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteReportNode(DeleteReportNodeRequest) returns (RPCSuccess);",
          "doc": "删除终端",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateReportNode",
          "requestMessageName": "UpdateReportNodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateReportNode(UpdateReportNodeRequest) returns (RPCSuccess);",
          "doc": "修改终端",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledReportNodes",
          "requestMessageName": "CountAllEnabledReportNodesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledReportNodes(CountAllEnabledReportNodesRequest) returns (RPCCountResponse);",
          "doc": "计算终端数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledReportNodes",
          "requestMessageName": "ListEnabledReportNodesRequest",
          "responseMessageName": "ListEnabledReportNodesResponse",
          "code": "rpc listEnabledReportNodes(ListEnabledReportNodesRequest) returns (ListEnabledReportNodesResponse);",
          "doc": "列出单页终端",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledReportNode",
          "requestMessageName": "FindEnabledReportNodeRequest",
          "responseMessageName": "FindEnabledReportNodeResponse",
          "code": "rpc findEnabledReportNode(FindEnabledReportNodeRequest) returns (FindEnabledReportNodeResponse);",
          "doc": "查找单个终端",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateReportNodeStatus",
          "requestMessageName": "UpdateReportNodeStatusRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateReportNodeStatus (UpdateReportNodeStatusRequest) returns (RPCSuccess);",
          "doc": "更新节点状态",
          "roles": [
            "report"
          ],
          "isDeprecated": false
        },
        {
          "name": "findCurrentReportNodeConfig",
          "requestMessageName": "FindCurrentReportNodeConfigRequest",
          "responseMessageName": "FindCurrentReportNodeConfigResponse",
          "code": "rpc findCurrentReportNodeConfig (FindCurrentReportNodeConfigRequest) returns (FindCurrentReportNodeConfigResponse);",
          "doc": "获取当前节点信息",
          "roles": [
            "report"
          ],
          "isDeprecated": false
        },
        {
          "name": "findReportNodeTasks",
          "requestMessageName": "FindReportNodeTasksRequest",
          "responseMessageName": "FindReportNodeTasksResponse",
          "code": "rpc findReportNodeTasks(FindReportNodeTasksRequest) returns (FindReportNodeTasksResponse);",
          "doc": "读取任务",
          "roles": [
            "report"
          ],
          "isDeprecated": false
        },
        {
          "name": "findLatestReportNodeVersion",
          "requestMessageName": "FindLatestReportNodeVersionRequest",
          "responseMessageName": "FindLatestReportNodeVersionResponse",
          "code": "rpc findLatestReportNodeVersion(FindLatestReportNodeVersionRequest) returns (FindLatestReportNodeVersionResponse);",
          "doc": "取得最新的版本号",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllReportNodeTasks",
          "requestMessageName": "CountAllReportNodeTasksRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllReportNodeTasks(CountAllReportNodeTasksRequest) returns (RPCCountResponse);",
          "doc": "计算任务数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listReportNodeTasks",
          "requestMessageName": "ListReportNodeTasksRequest",
          "responseMessageName": "ListReportNodeTasksResponse",
          "code": "rpc listReportNodeTasks(ListReportNodeTasksRequest) returns (ListReportNodeTasksResponse);",
          "doc": "列出单页任务",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateReportNodeGlobalSetting",
          "requestMessageName": "UpdateReportNodeGlobalSetting",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateReportNodeGlobalSetting(UpdateReportNodeGlobalSetting) returns (RPCSuccess);",
          "doc": "修改全局设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "readReportNodeGlobalSetting",
          "requestMessageName": "ReadReportNodeGlobalSettingRequest",
          "responseMessageName": "ReadReportNodeGlobalSettingResponse",
          "code": "rpc readReportNodeGlobalSetting(ReadReportNodeGlobalSettingRequest) returns (ReadReportNodeGlobalSettingResponse);",
          "doc": "读取全局设置",
          "roles": [
            "report",
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_report_node.proto",
      "doc": "监控终端服务"
    },
    {
      "name": "ReportNodeGroupService",
      "methods": [
        {
          "name": "createReportNodeGroup",
          "requestMessageName": "CreateReportNodeGroupRequest",
          "responseMessageName": "CreateReportNodeGroupResponse",
          "code": "rpc createReportNodeGroup(CreateReportNodeGroupRequest) returns (CreateReportNodeGroupResponse);",
          "doc": "创建分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateReportNodeGroup",
          "requestMessageName": "UpdateReportNodeGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateReportNodeGroup(UpdateReportNodeGroupRequest) returns (RPCSuccess);",
          "doc": "修改分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteReportNodeGroup",
          "requestMessageName": "DeleteReportNodeGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteReportNodeGroup(DeleteReportNodeGroupRequest) returns (RPCSuccess);",
          "doc": "删除分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledReportNodeGroups",
          "requestMessageName": "FindAllEnabledReportNodeGroupsRequest",
          "responseMessageName": "FindAllEnabledReportNodeGroupsResponse",
          "code": "rpc findAllEnabledReportNodeGroups(FindAllEnabledReportNodeGroupsRequest) returns (FindAllEnabledReportNodeGroupsResponse);",
          "doc": "查找所有分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledReportNodeGroup",
          "requestMessageName": "FindEnabledReportNodeGroupRequest",
          "responseMessageName": "FindEnabledReportNodeGroupResponse",
          "code": "rpc findEnabledReportNodeGroup(FindEnabledReportNodeGroupRequest) returns (FindEnabledReportNodeGroupResponse);",
          "doc": "查找单个分组",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledReportNodeGroups",
          "requestMessageName": "CountAllEnabledReportNodeGroupsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledReportNodeGroups(CountAllEnabledReportNodeGroupsRequest) returns (RPCCountResponse);",
          "doc": "计算所有分组数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_report_node_group.proto",
      "doc": "监控节点分组"
    },
    {
      "name": "ReportResultService",
      "methods": [
        {
          "name": "countAllReportResults",
          "requestMessageName": "CountAllReportResultsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllReportResults(CountAllReportResultsRequest) returns (RPCCountResponse);",
          "doc": "计算监控结果数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listReportResults",
          "requestMessageName": "ListReportResultsRequest",
          "responseMessageName": "ListReportResultsResponse",
          "code": "rpc listReportResults(ListReportResultsRequest) returns (ListReportResultsResponse);",
          "doc": "列出单页监控结果",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateReportResults",
          "requestMessageName": "UpdateReportResultsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateReportResults(UpdateReportResultsRequest) returns (RPCSuccess);",
          "doc": "上传报告结果",
          "roles": [
            "report"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllReportResults",
          "requestMessageName": "FindAllReportResultsRequest",
          "responseMessageName": "FindAllReportResultsResponse",
          "code": "rpc findAllReportResults(FindAllReportResultsRequest) returns (FindAllReportResultsResponse);",
          "doc": "查询某个对象的监控结果",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_report_result.proto",
      "doc": "区域监控报告结果"
    },
    {
      "name": "ReverseProxyService",
      "methods": [
        {
          "name": "createReverseProxy",
          "requestMessageName": "CreateReverseProxyRequest",
          "responseMessageName": "CreateReverseProxyResponse",
          "code": "rpc createReverseProxy (CreateReverseProxyRequest) returns (CreateReverseProxyResponse);",
          "doc": "创建反向代理",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledReverseProxy",
          "requestMessageName": "FindEnabledReverseProxyRequest",
          "responseMessageName": "FindEnabledReverseProxyResponse",
          "code": "rpc findEnabledReverseProxy (FindEnabledReverseProxyRequest) returns (FindEnabledReverseProxyResponse);",
          "doc": "查找反向代理",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledReverseProxyConfig",
          "requestMessageName": "FindEnabledReverseProxyConfigRequest",
          "responseMessageName": "FindEnabledReverseProxyConfigResponse",
          "code": "rpc findEnabledReverseProxyConfig (FindEnabledReverseProxyConfigRequest) returns (FindEnabledReverseProxyConfigResponse);",
          "doc": "查找反向代理配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateReverseProxyScheduling",
          "requestMessageName": "UpdateReverseProxySchedulingRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateReverseProxyScheduling (UpdateReverseProxySchedulingRequest) returns (RPCSuccess);",
          "doc": "修改反向代理的调度算法",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateReverseProxyPrimaryOrigins",
          "requestMessageName": "UpdateReverseProxyPrimaryOriginsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateReverseProxyPrimaryOrigins (UpdateReverseProxyPrimaryOriginsRequest) returns (RPCSuccess);",
          "doc": "修改主要源站信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateReverseProxyBackupOrigins",
          "requestMessageName": "UpdateReverseProxyBackupOriginsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateReverseProxyBackupOrigins (UpdateReverseProxyBackupOriginsRequest) returns (RPCSuccess);",
          "doc": "修改备用源站信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateReverseProxy",
          "requestMessageName": "UpdateReverseProxyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateReverseProxy (UpdateReverseProxyRequest) returns (RPCSuccess);",
          "doc": "修改反向代理设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_reverse_proxy.proto",
      "doc": "反向代理管理服务"
    },
    {
      "name": "ScriptService",
      "methods": [
        {
          "name": "createScript",
          "requestMessageName": "CreateScriptRequest",
          "responseMessageName": "CreateScriptResponse",
          "code": "rpc createScript(CreateScriptRequest) returns (CreateScriptResponse);",
          "doc": "添加脚本",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteScript",
          "requestMessageName": "DeleteScriptRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteScript(DeleteScriptRequest) returns (RPCSuccess);",
          "doc": "删除脚本",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledScripts",
          "requestMessageName": "CountAllEnabledScriptsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledScripts(CountAllEnabledScriptsRequest) returns (RPCCountResponse);",
          "doc": "计算脚本数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledScripts",
          "requestMessageName": "ListEnabledScriptsRequest",
          "responseMessageName": "ListEnabledScriptsResponse",
          "code": "rpc listEnabledScripts(ListEnabledScriptsRequest) returns (ListEnabledScriptsResponse);",
          "doc": "列出单页脚本",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "publishScripts",
          "requestMessageName": "PublishScriptsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc publishScripts(PublishScriptsRequest) returns (RPCSuccess);",
          "doc": "发布脚本",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkScriptUpdates",
          "requestMessageName": "CheckScriptUpdatesRequest",
          "responseMessageName": "CheckScriptUpdatesResponse",
          "code": "rpc checkScriptUpdates(CheckScriptUpdatesRequest) returns (CheckScriptUpdatesResponse);",
          "doc": "检查脚本是否需要有更新",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledScript",
          "requestMessageName": "FindEnabledScriptRequest",
          "responseMessageName": "FindEnabledScriptResponse",
          "code": "rpc findEnabledScript(FindEnabledScriptRequest) returns (FindEnabledScriptResponse);",
          "doc": "查找单个脚本",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateScript",
          "requestMessageName": "UpdateScriptRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateScript(UpdateScriptRequest) returns (RPCSuccess);",
          "doc": "修改脚本",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "composeScriptConfigs",
          "requestMessageName": "ComposeScriptConfigsRequest",
          "responseMessageName": "ComposeScriptConfigsResponse",
          "code": "rpc composeScriptConfigs(ComposeScriptConfigsRequest) returns (ComposeScriptConfigsResponse);",
          "doc": "组合脚本配置",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_script.proto",
      "doc": "脚本相关服务"
    },
    {
      "name": "ServerService",
      "methods": [
        {
          "name": "createServer",
          "requestMessageName": "CreateServerRequest",
          "responseMessageName": "CreateServerResponse",
          "code": "rpc createServer (CreateServerRequest) returns (CreateServerResponse);",
          "doc": "创建网站",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "createBasicHTTPServer",
          "requestMessageName": "CreateBasicHTTPServerRequest",
          "responseMessageName": "CreateBasicHTTPServerResponse",
          "code": "rpc createBasicHTTPServer(CreateBasicHTTPServerRequest) returns (CreateBasicHTTPServerResponse);",
          "doc": "快速创建基本的HTTP网站",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "createBasicTCPServer",
          "requestMessageName": "CreateBasicTCPServerRequest",
          "responseMessageName": "CreateBasicTCPServerResponse",
          "code": "rpc createBasicTCPServer(CreateBasicTCPServerRequest) returns (CreateBasicTCPServerResponse);",
          "doc": "快速创建基本的TCP网站",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerBasic",
          "requestMessageName": "UpdateServerBasicRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerBasic (UpdateServerBasicRequest) returns (RPCSuccess);",
          "doc": "修改网站基本信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerGroupIds",
          "requestMessageName": "UpdateServerGroupIdsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerGroupIds(UpdateServerGroupIdsRequest) returns (RPCSuccess);",
          "doc": "修改网站所在分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerIsOn",
          "requestMessageName": "UpdateServerIsOnRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerIsOn (UpdateServerIsOnRequest) returns (RPCSuccess);",
          "doc": "修改网站是否启用",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerHTTP",
          "requestMessageName": "UpdateServerHTTPRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerHTTP (UpdateServerHTTPRequest) returns (RPCSuccess);",
          "doc": "修改网站的HTTP设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerHTTPS",
          "requestMessageName": "UpdateServerHTTPSRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerHTTPS (UpdateServerHTTPSRequest) returns (RPCSuccess);",
          "doc": "修改网站的HTTPS设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerTCP",
          "requestMessageName": "UpdateServerTCPRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerTCP (UpdateServerTCPRequest) returns (RPCSuccess);",
          "doc": "修改网站的TCP设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerTLS",
          "requestMessageName": "UpdateServerTLSRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerTLS (UpdateServerTLSRequest) returns (RPCSuccess);",
          "doc": "修改网站的TLS设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerUnix",
          "requestMessageName": "UpdateServerUnixRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerUnix (UpdateServerUnixRequest) returns (RPCSuccess);",
          "doc": "修改网站的Unix设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerUDP",
          "requestMessageName": "UpdateServerUDPRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerUDP (UpdateServerUDPRequest) returns (RPCSuccess);",
          "doc": "修改网站的UDP设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerWeb",
          "requestMessageName": "UpdateServerWebRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerWeb (UpdateServerWebRequest) returns (RPCSuccess);",
          "doc": "修改网站的Web设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerReverseProxy",
          "requestMessageName": "UpdateServerReverseProxyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerReverseProxy (UpdateServerReverseProxyRequest) returns (RPCSuccess);",
          "doc": "修改网站的反向代理设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findServerNames",
          "requestMessageName": "FindServerNamesRequest",
          "responseMessageName": "FindServerNamesResponse",
          "code": "rpc findServerNames (FindServerNamesRequest) returns (FindServerNamesResponse);",
          "doc": "查找网站的域名设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerNames",
          "requestMessageName": "UpdateServerNamesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerNames (UpdateServerNamesRequest) returns (RPCSuccess);",
          "doc": "修改网站的域名设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerNamesAuditing",
          "requestMessageName": "UpdateServerNamesAuditingRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerNamesAuditing (UpdateServerNamesAuditingRequest) returns (RPCSuccess);",
          "doc": "审核网站的域名设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerDNS",
          "requestMessageName": "UpdateServerDNSRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerDNS(UpdateServerDNSRequest) returns (RPCSuccess);",
          "doc": "修改网站的DNS相关设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "regenerateServerDNSName",
          "requestMessageName": "RegenerateServerDNSNameRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc regenerateServerDNSName(RegenerateServerDNSNameRequest) returns (RPCSuccess);",
          "doc": "重新生成CNAME",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerDNSName",
          "requestMessageName": "UpdateServerDNSNameRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerDNSName(UpdateServerDNSNameRequest) returns (RPCSuccess);",
          "doc": "修改网站的CNAME",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findServerIdWithDNSName",
          "requestMessageName": "FindServerIdWithDNSNameRequest",
          "responseMessageName": "FindServerIdWithDNSNameResponse",
          "code": "rpc findServerIdWithDNSName(FindServerIdWithDNSNameRequest) returns (FindServerIdWithDNSNameResponse);",
          "doc": "使用CNAME查找网站",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledServersMatch",
          "requestMessageName": "CountAllEnabledServersMatchRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledServersMatch (CountAllEnabledServersMatchRequest) returns (RPCCountResponse);",
          "doc": "计算匹配的网站数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledServersMatch",
          "requestMessageName": "ListEnabledServersMatchRequest",
          "responseMessageName": "ListEnabledServersMatchResponse",
          "code": "rpc listEnabledServersMatch (ListEnabledServersMatchRequest) returns (ListEnabledServersMatchResponse);",
          "doc": "列出单页网站",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteServer",
          "requestMessageName": "DeleteServerRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteServer (DeleteServerRequest) returns (RPCSuccess);",
          "doc": "禁用某网站",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledServer",
          "requestMessageName": "FindEnabledServerRequest",
          "responseMessageName": "FindEnabledServerResponse",
          "code": "rpc findEnabledServer (FindEnabledServerRequest) returns (FindEnabledServerResponse);",
          "doc": "查找单个网站",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledServerConfig",
          "requestMessageName": "FindEnabledServerConfigRequest",
          "responseMessageName": "FindEnabledServerConfigResponse",
          "code": "rpc findEnabledServerConfig (FindEnabledServerConfigRequest) returns (FindEnabledServerConfigResponse);",
          "doc": "查找网站配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledServerType",
          "requestMessageName": "FindEnabledServerTypeRequest",
          "responseMessageName": "FindEnabledServerTypeResponse",
          "code": "rpc findEnabledServerType (FindEnabledServerTypeRequest) returns (FindEnabledServerTypeResponse);",
          "doc": "查找网站的网站类型",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAndInitServerReverseProxyConfig",
          "requestMessageName": "FindAndInitServerReverseProxyConfigRequest",
          "responseMessageName": "FindAndInitServerReverseProxyConfigResponse",
          "code": "rpc findAndInitServerReverseProxyConfig (FindAndInitServerReverseProxyConfigRequest) returns (FindAndInitServerReverseProxyConfigResponse);",
          "doc": "查找反向代理设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAndInitServerWebConfig",
          "requestMessageName": "FindAndInitServerWebConfigRequest",
          "responseMessageName": "FindAndInitServerWebConfigResponse",
          "code": "rpc findAndInitServerWebConfig (FindAndInitServerWebConfigRequest) returns (FindAndInitServerWebConfigResponse);",
          "doc": "初始化Web设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledServersWithSSLCertId",
          "requestMessageName": "CountAllEnabledServersWithSSLCertIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledServersWithSSLCertId (CountAllEnabledServersWithSSLCertIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个SSL证书的网站数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledServersWithSSLCertId",
          "requestMessageName": "FindAllEnabledServersWithSSLCertIdRequest",
          "responseMessageName": "FindAllEnabledServersWithSSLCertIdResponse",
          "code": "rpc findAllEnabledServersWithSSLCertId (FindAllEnabledServersWithSSLCertIdRequest) returns (FindAllEnabledServersWithSSLCertIdResponse);",
          "doc": "查找使用某个SSL证书的所有网站",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledServersWithNodeClusterId",
          "requestMessageName": "CountAllEnabledServersWithNodeClusterIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledServersWithNodeClusterId (CountAllEnabledServersWithNodeClusterIdRequest) returns (RPCCountResponse);",
          "doc": "计算运行在某个集群上的所有网站数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledServersWithServerGroupId",
          "requestMessageName": "CountAllEnabledServersWithServerGroupIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledServersWithServerGroupId (CountAllEnabledServersWithServerGroupIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个分组的网站数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "notifyServersChange",
          "requestMessageName": "NotifyServersChangeRequest",
          "responseMessageName": "NotifyServersChangeResponse",
          "code": "rpc notifyServersChange (NotifyServersChangeRequest) returns (NotifyServersChangeResponse);",
          "doc": "通知更新",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledServersDNSWithNodeClusterId",
          "requestMessageName": "FindAllEnabledServersDNSWithNodeClusterIdRequest",
          "responseMessageName": "FindAllEnabledServersDNSWithNodeClusterIdResponse",
          "code": "rpc findAllEnabledServersDNSWithNodeClusterId (FindAllEnabledServersDNSWithNodeClusterIdRequest) returns (FindAllEnabledServersDNSWithNodeClusterIdResponse);",
          "doc": "取得某个集群下的所有网站相关的DNS",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledServerDNS",
          "requestMessageName": "FindEnabledServerDNSRequest",
          "responseMessageName": "FindEnabledServerDNSResponse",
          "code": "rpc findEnabledServerDNS (FindEnabledServerDNSRequest) returns (FindEnabledServerDNSResponse);",
          "doc": "查找单个网站的DNS信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkUserServer",
          "requestMessageName": "CheckUserServerRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc checkUserServer (CheckUserServerRequest) returns (RPCSuccess);",
          "doc": "检查网站是否属于某个用户",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledServerNamesWithUserId",
          "requestMessageName": "FindAllEnabledServerNamesWithUserIdRequest",
          "responseMessageName": "FindAllEnabledServerNamesWithUserIdResponse",
          "code": "rpc findAllEnabledServerNamesWithUserId (FindAllEnabledServerNamesWithUserIdRequest) returns (FindAllEnabledServerNamesWithUserIdResponse);",
          "doc": "查找一个用户下的所有域名列表",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllServerNamesWithUserId",
          "requestMessageName": "CountAllServerNamesWithUserIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllServerNamesWithUserId (CountAllServerNamesWithUserIdRequest) returns (RPCCountResponse);",
          "doc": "计算一个用户下的所有域名数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countServerNames",
          "requestMessageName": "CountServerNamesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countServerNames(CountServerNamesRequest) returns (RPCCountResponse);",
          "doc": "计算某个网站下的域名数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllUserServers",
          "requestMessageName": "FindAllUserServersRequest",
          "responseMessageName": "FindAllUserServersResponse",
          "code": "rpc findAllUserServers(FindAllUserServersRequest) returns (FindAllUserServersResponse);",
          "doc": "查找一个用户下的所有网站",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllUserServers",
          "requestMessageName": "CountAllUserServersRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllUserServers(CountAllUserServersRequest) returns (RPCCountResponse);",
          "doc": "计算一个用户下的所有网站数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "composeAllUserServersConfig",
          "requestMessageName": "ComposeAllUserServersConfigRequest",
          "responseMessageName": "ComposeAllUserServersConfigResponse",
          "code": "rpc composeAllUserServersConfig(ComposeAllUserServersConfigRequest) returns (ComposeAllUserServersConfigResponse);",
          "doc": "查找某个用户下的网站配置",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledUserServerBasic",
          "requestMessageName": "FindEnabledUserServerBasicRequest",
          "responseMessageName": "FindEnabledUserServerBasicResponse",
          "code": "rpc findEnabledUserServerBasic (FindEnabledUserServerBasicRequest) returns (FindEnabledUserServerBasicResponse);",
          "doc": "查找用户网站基本信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateEnabledUserServerBasic",
          "requestMessageName": "UpdateEnabledUserServerBasicRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateEnabledUserServerBasic (UpdateEnabledUserServerBasicRequest) returns (RPCSuccess);",
          "doc": "修改用户网站基本信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "uploadServerHTTPRequestStat",
          "requestMessageName": "UploadServerHTTPRequestStatRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc uploadServerHTTPRequestStat (UploadServerHTTPRequestStatRequest) returns (RPCSuccess);",
          "doc": "上传HTTP请求待统计数据",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkServerNameDuplicationInNodeCluster",
          "requestMessageName": "CheckServerNameDuplicationInNodeClusterRequest",
          "responseMessageName": "CheckServerNameDuplicationInNodeClusterResponse",
          "code": "rpc checkServerNameDuplicationInNodeCluster (CheckServerNameDuplicationInNodeClusterRequest) returns (CheckServerNameDuplicationInNodeClusterResponse);",
          "doc": "检查域名是否已经存在",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findLatestServers",
          "requestMessageName": "FindLatestServersRequest",
          "responseMessageName": "FindLatestServersResponse",
          "code": "rpc findLatestServers (FindLatestServersRequest) returns (FindLatestServersResponse);",
          "doc": "查找最近访问的网站",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findNearbyServers",
          "requestMessageName": "FindNearbyServersRequest",
          "responseMessageName": "FindNearbyServersResponse",
          "code": "rpc findNearbyServers(FindNearbyServersRequest) returns (FindNearbyServersResponse);",
          "doc": "查找某个网站附近的网站",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "purgeServerCache",
          "requestMessageName": "PurgeServerCacheRequest",
          "responseMessageName": "PurgeServerCacheResponse",
          "code": "rpc purgeServerCache(PurgeServerCacheRequest) returns (PurgeServerCacheResponse);",
          "doc": "清除缓存",
          "roles": [
            "node",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledServerTrafficLimit",
          "requestMessageName": "FindEnabledServerTrafficLimitRequest",
          "responseMessageName": "FindEnabledServerTrafficLimitResponse",
          "code": "rpc findEnabledServerTrafficLimit(FindEnabledServerTrafficLimitRequest) returns (FindEnabledServerTrafficLimitResponse);",
          "doc": "查找流量限制",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerTrafficLimit",
          "requestMessageName": "UpdateServerTrafficLimitRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerTrafficLimit(UpdateServerTrafficLimitRequest) returns (RPCSuccess);",
          "doc": "设置流量限制",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerUserPlan",
          "requestMessageName": "UpdateServerUserPlanRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerUserPlan(UpdateServerUserPlanRequest) returns (RPCSuccess);",
          "doc": "修改网站套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findServerUserPlan",
          "requestMessageName": "FindServerUserPlanRequest",
          "responseMessageName": "FindServerUserPlanResponse",
          "code": "rpc findServerUserPlan(FindServerUserPlanRequest) returns (FindServerUserPlanResponse);",
          "doc": "获取网站套餐信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "composeServerConfig",
          "requestMessageName": "ComposeServerConfigRequest",
          "responseMessageName": "ComposeServerConfigResponse",
          "code": "rpc composeServerConfig(ComposeServerConfigRequest) returns (ComposeServerConfigResponse);",
          "doc": "获取网站配置",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerUAM",
          "requestMessageName": "UpdateServerUAMRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerUAM(UpdateServerUAMRequest) returns (RPCSuccess);",
          "doc": "修改网站UAM设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledServerUAM",
          "requestMessageName": "FindEnabledServerUAMRequest",
          "responseMessageName": "FindEnabledServerUAMResponse",
          "code": "rpc findEnabledServerUAM(FindEnabledServerUAMRequest) returns (FindEnabledServerUAMResponse);",
          "doc": "查找网站UAM设置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerUser",
          "requestMessageName": "UpdateServerUserRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerUser(UpdateServerUserRequest) returns (RPCSuccess);",
          "doc": "修改网站所属用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerName",
          "requestMessageName": "UpdateServerNameRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerName(UpdateServerNameRequest) returns (RPCSuccess);",
          "doc": "修改网站名称",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "copyServerConfig",
          "requestMessageName": "CopyServerConfigRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc copyServerConfig(CopyServerConfigRequest) returns (RPCSuccess);",
          "doc": "在网站之间复制配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findServerAuditingPrompt",
          "requestMessageName": "FindServerAuditingPromptRequest",
          "responseMessageName": "FindServerAuditingPromptResponse",
          "code": "rpc findServerAuditingPrompt(FindServerAuditingPromptRequest) returns (FindServerAuditingPromptResponse);",
          "doc": "获取域名审核时的提示文字",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server.proto",
      "doc": "网站服务相关服务"
    },
    {
      "name": "ServerBandwidthStatService",
      "methods": [
        {
          "name": "uploadServerBandwidthStats",
          "requestMessageName": "UploadServerBandwidthStatsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc uploadServerBandwidthStats(UploadServerBandwidthStatsRequest) returns (RPCSuccess);",
          "doc": "上传带宽统计",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findServerBandwidthStats",
          "requestMessageName": "FindServerBandwidthStatsRequest",
          "responseMessageName": "FindServerBandwidthStatsResponse",
          "code": "rpc findServerBandwidthStats(FindServerBandwidthStatsRequest) returns (FindServerBandwidthStatsResponse);",
          "doc": "获取服务的峰值带宽",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findHourlyServerBandwidthStats",
          "requestMessageName": "FindHourlyServerBandwidthStatsRequest",
          "responseMessageName": "FindHourlyServerBandwidthStatsResponse",
          "code": "rpc findHourlyServerBandwidthStats(FindHourlyServerBandwidthStatsRequest) returns (FindHourlyServerBandwidthStatsResponse);",
          "doc": "获取最近N小时峰值带宽",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findDailyServerBandwidthStats",
          "requestMessageName": "FindDailyServerBandwidthStatsRequest",
          "responseMessageName": "FindDailyServerBandwidthStatsResponse",
          "code": "rpc findDailyServerBandwidthStats(FindDailyServerBandwidthStatsRequest) returns (FindDailyServerBandwidthStatsResponse);",
          "doc": "获取最近N天峰值带宽",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findDailyServerBandwidthStatsBetweenDays",
          "requestMessageName": "FindDailyServerBandwidthStatsBetweenDaysRequest",
          "responseMessageName": "FindDailyServerBandwidthStatsBetweenDaysResponse",
          "code": "rpc findDailyServerBandwidthStatsBetweenDays (FindDailyServerBandwidthStatsBetweenDaysRequest) returns (FindDailyServerBandwidthStatsBetweenDaysResponse);",
          "doc": "读取日期段内的带宽数据",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_bandwidth_stat.proto",
      "doc": "服务带宽统计服务"
    },
    {
      "name": "ServerBillService",
      "methods": [
        {
          "name": "countAllServerBills",
          "requestMessageName": "CountAllServerBillsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllServerBills(CountAllServerBillsRequest) returns (RPCCountResponse);",
          "doc": "查询服务账单数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listServerBills",
          "requestMessageName": "ListServerBillsRequest",
          "responseMessageName": "ListServerBillsResponse",
          "code": "rpc listServerBills(ListServerBillsRequest) returns (ListServerBillsResponse);",
          "doc": "查询服务账单列表",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_bill.proto",
      "doc": "服务账单相关服务"
    },
    {
      "name": "ServerClientBrowserMonthlyStatService",
      "methods": [
        {
          "name": "findTopServerClientBrowserMonthlyStats",
          "requestMessageName": "FindTopServerClientBrowserMonthlyStatsRequest",
          "responseMessageName": "FindTopServerClientBrowserMonthlyStatsResponse",
          "code": "rpc findTopServerClientBrowserMonthlyStats (FindTopServerClientBrowserMonthlyStatsRequest) returns (FindTopServerClientBrowserMonthlyStatsResponse);",
          "doc": "查找前N个浏览器",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_client_browser_monthly_stat.proto",
      "doc": "浏览器统计"
    },
    {
      "name": "ServerClientSystemMonthlyStatService",
      "methods": [
        {
          "name": "findTopServerClientSystemMonthlyStats",
          "requestMessageName": "FindTopServerClientSystemMonthlyStatsRequest",
          "responseMessageName": "FindTopServerClientSystemMonthlyStatsResponse",
          "code": "rpc findTopServerClientSystemMonthlyStats (FindTopServerClientSystemMonthlyStatsRequest) returns (FindTopServerClientSystemMonthlyStatsResponse);",
          "doc": "查找前N个操作系统",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_client_system_monthly_stat.proto",
      "doc": "操作系统统计"
    },
    {
      "name": "ServerDailyStatService",
      "methods": [
        {
          "name": "uploadServerDailyStats",
          "requestMessageName": "UploadServerDailyStatsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc uploadServerDailyStats (UploadServerDailyStatsRequest) returns (RPCSuccess);",
          "doc": "上传统计",
          "roles": [
            "dns",
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findLatestServerHourlyStats",
          "requestMessageName": "FindLatestServerHourlyStatsRequest",
          "responseMessageName": "FindLatestServerHourlyStatsResponse",
          "code": "rpc findLatestServerHourlyStats (FindLatestServerHourlyStatsRequest) returns (FindLatestServerHourlyStatsResponse);",
          "doc": "按小时读取统计数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findLatestServerMinutelyStats",
          "requestMessageName": "FindLatestServerMinutelyStatsRequest",
          "responseMessageName": "FindLatestServerMinutelyStatsResponse",
          "code": "rpc findLatestServerMinutelyStats (FindLatestServerMinutelyStatsRequest) returns (FindLatestServerMinutelyStatsResponse);",
          "doc": "按分钟读取统计数据，并返回秒级平均流量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findServer5MinutelyStatsWithDay",
          "requestMessageName": "FindServer5MinutelyStatsWithDayRequest",
          "responseMessageName": "FindServer5MinutelyStatsWithDayResponse",
          "code": "rpc findServer5MinutelyStatsWithDay(FindServer5MinutelyStatsWithDayRequest) returns (FindServer5MinutelyStatsWithDayResponse);",
          "doc": "读取某天的5分钟间隔流量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findLatestServerDailyStats",
          "requestMessageName": "FindLatestServerDailyStatsRequest",
          "responseMessageName": "FindLatestServerDailyStatsResponse",
          "code": "rpc findLatestServerDailyStats (FindLatestServerDailyStatsRequest) returns (FindLatestServerDailyStatsResponse);",
          "doc": "读取最近N日的统计数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findServerDailyStatsBetweenDays",
          "requestMessageName": "FindServerDailyStatsBetweenDaysRequest",
          "responseMessageName": "FindServerDailyStatsBetweenDaysResponse",
          "code": "rpc findServerDailyStatsBetweenDays (FindServerDailyStatsBetweenDaysRequest) returns (FindServerDailyStatsBetweenDaysResponse);",
          "doc": "读取日期段内的流量数据",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "sumCurrentServerDailyStats",
          "requestMessageName": "SumCurrentServerDailyStatsRequest",
          "responseMessageName": "SumCurrentServerDailyStatsResponse",
          "code": "rpc sumCurrentServerDailyStats(SumCurrentServerDailyStatsRequest) returns (SumCurrentServerDailyStatsResponse);",
          "doc": "查找单个服务当前时刻（N分钟内）统计数据",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "sumServerDailyStats",
          "requestMessageName": "SumServerDailyStatsRequest",
          "responseMessageName": "SumServerDailyStatsResponse",
          "code": "rpc sumServerDailyStats(SumServerDailyStatsRequest) returns (SumServerDailyStatsResponse);",
          "doc": "计算单个服务的日统计",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "sumServerMonthlyStats",
          "requestMessageName": "SumServerMonthlyStatsRequest",
          "responseMessageName": "SumServerMonthlyStatsResponse",
          "code": "rpc sumServerMonthlyStats(SumServerMonthlyStatsRequest) returns (SumServerMonthlyStatsResponse);",
          "doc": "计算单个服务的月统计",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_daily_stat.proto",
      "doc": "服务统计相关服务"
    },
    {
      "name": "ServerDomainHourlyStatService",
      "methods": [
        {
          "name": "listTopServerDomainStatsWithServerId",
          "requestMessageName": "ListTopServerDomainStatsWithServerIdRequest",
          "responseMessageName": "ListTopServerDomainStatsWithServerIdResponse",
          "code": "rpc listTopServerDomainStatsWithServerId(ListTopServerDomainStatsWithServerIdRequest) returns (ListTopServerDomainStatsWithServerIdResponse);",
          "doc": "读取服务的域名排行",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_domain_hourly_stat.proto",
      "doc": "服务域名按小时统计服务"
    },
    {
      "name": "ServerGroupService",
      "methods": [
        {
          "name": "createServerGroup",
          "requestMessageName": "CreateServerGroupRequest",
          "responseMessageName": "CreateServerGroupResponse",
          "code": "rpc createServerGroup (CreateServerGroupRequest) returns (CreateServerGroupResponse);",
          "doc": "创建分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerGroup",
          "requestMessageName": "UpdateServerGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerGroup (UpdateServerGroupRequest) returns (RPCSuccess);",
          "doc": "修改分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteServerGroup",
          "requestMessageName": "DeleteServerGroupRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteServerGroup (DeleteServerGroupRequest) returns (RPCSuccess);",
          "doc": "删除分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledServerGroups",
          "requestMessageName": "FindAllEnabledServerGroupsRequest",
          "responseMessageName": "FindAllEnabledServerGroupsResponse",
          "code": "rpc findAllEnabledServerGroups (FindAllEnabledServerGroupsRequest) returns (FindAllEnabledServerGroupsResponse);",
          "doc": "查询所有分组",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerGroupOrders",
          "requestMessageName": "UpdateServerGroupOrdersRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerGroupOrders (UpdateServerGroupOrdersRequest) returns (RPCSuccess);",
          "doc": "修改分组排序",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledServerGroup",
          "requestMessageName": "FindEnabledServerGroupRequest",
          "responseMessageName": "FindEnabledServerGroupResponse",
          "code": "rpc findEnabledServerGroup (FindEnabledServerGroupRequest) returns (FindEnabledServerGroupResponse);",
          "doc": "查找单个分组信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAndInitServerGroupHTTPReverseProxyConfig",
          "requestMessageName": "FindAndInitServerGroupHTTPReverseProxyConfigRequest",
          "responseMessageName": "FindAndInitServerGroupHTTPReverseProxyConfigResponse",
          "code": "rpc findAndInitServerGroupHTTPReverseProxyConfig (FindAndInitServerGroupHTTPReverseProxyConfigRequest) returns (FindAndInitServerGroupHTTPReverseProxyConfigResponse);",
          "doc": "查找HTTP反向代理设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAndInitServerGroupTCPReverseProxyConfig",
          "requestMessageName": "FindAndInitServerGroupTCPReverseProxyConfigRequest",
          "responseMessageName": "FindAndInitServerGroupTCPReverseProxyConfigResponse",
          "code": "rpc findAndInitServerGroupTCPReverseProxyConfig (FindAndInitServerGroupTCPReverseProxyConfigRequest) returns (FindAndInitServerGroupTCPReverseProxyConfigResponse);",
          "doc": "查找TCP反向代理设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAndInitServerGroupUDPReverseProxyConfig",
          "requestMessageName": "FindAndInitServerGroupUDPReverseProxyConfigRequest",
          "responseMessageName": "FindAndInitServerGroupUDPReverseProxyConfigResponse",
          "code": "rpc findAndInitServerGroupUDPReverseProxyConfig (FindAndInitServerGroupUDPReverseProxyConfigRequest) returns (FindAndInitServerGroupUDPReverseProxyConfigResponse);",
          "doc": "查找UDP反向代理设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerGroupHTTPReverseProxy",
          "requestMessageName": "UpdateServerGroupHTTPReverseProxyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerGroupHTTPReverseProxy (UpdateServerGroupHTTPReverseProxyRequest) returns (RPCSuccess);",
          "doc": "修改分组的HTTP反向代理设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerGroupTCPReverseProxy",
          "requestMessageName": "UpdateServerGroupTCPReverseProxyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerGroupTCPReverseProxy (UpdateServerGroupTCPReverseProxyRequest) returns (RPCSuccess);",
          "doc": "修改分组的TCP反向代理设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateServerGroupUDPReverseProxy",
          "requestMessageName": "UpdateServerGroupUDPReverseProxyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateServerGroupUDPReverseProxy (UpdateServerGroupUDPReverseProxyRequest) returns (RPCSuccess);",
          "doc": "修改分组的UDP反向代理设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledServerGroupConfigInfo",
          "requestMessageName": "FindEnabledServerGroupConfigInfoRequest",
          "responseMessageName": "FindEnabledServerGroupConfigInfoResponse",
          "code": "rpc findEnabledServerGroupConfigInfo (FindEnabledServerGroupConfigInfoRequest) returns (FindEnabledServerGroupConfigInfoResponse);",
          "doc": "取得分组的配置概要信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAndInitServerGroupWebConfig",
          "requestMessageName": "FindAndInitServerGroupWebConfigRequest",
          "responseMessageName": "FindAndInitServerGroupWebConfigResponse",
          "code": "rpc findAndInitServerGroupWebConfig (FindAndInitServerGroupWebConfigRequest) returns (FindAndInitServerGroupWebConfigResponse);",
          "doc": "初始化Web设置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_group.proto",
      "doc": "服务分组服务"
    },
    {
      "name": "ServerHTTPFirewallDailyStatService",
      "methods": [
        {
          "name": "composeServerHTTPFirewallDashboard",
          "requestMessageName": "ComposeServerHTTPFirewallDashboardRequest",
          "responseMessageName": "ComposeServerHTTPFirewallDashboardResponse",
          "code": "rpc composeServerHTTPFirewallDashboard (ComposeServerHTTPFirewallDashboardRequest) returns (ComposeServerHTTPFirewallDashboardResponse);",
          "doc": "组合服务的Dashboard",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_http_firewall_daily_stat.proto",
      "doc": "WAF统计"
    },
    {
      "name": "ServerRegionCityMonthlyStatService",
      "methods": [
        {
          "name": "findTopServerRegionCityMonthlyStats",
          "requestMessageName": "FindTopServerRegionCityMonthlyStatsRequest",
          "responseMessageName": "FindTopServerRegionCityMonthlyStatsResponse",
          "code": "rpc findTopServerRegionCityMonthlyStats (FindTopServerRegionCityMonthlyStatsRequest) returns (FindTopServerRegionCityMonthlyStatsResponse);",
          "doc": "查找前N个城市",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_region_city_monthly_stat.proto",
      "doc": "城市月份统计"
    },
    {
      "name": "ServerRegionCountryMonthlyStatService",
      "methods": [
        {
          "name": "findTopServerRegionCountryMonthlyStats",
          "requestMessageName": "FindTopServerRegionCountryMonthlyStatsRequest",
          "responseMessageName": "FindTopServerRegionCountryMonthlyStatsResponse",
          "code": "rpc findTopServerRegionCountryMonthlyStats (FindTopServerRegionCountryMonthlyStatsRequest) returns (FindTopServerRegionCountryMonthlyStatsResponse);",
          "doc": "查找前N个地区",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_region_country_monthly_stat.proto",
      "doc": "地区月份统计"
    },
    {
      "name": "ServerRegionProviderMonthlyStatService",
      "methods": [
        {
          "name": "findTopServerRegionProviderMonthlyStats",
          "requestMessageName": "FindTopServerRegionProviderMonthlyStatsRequest",
          "responseMessageName": "FindTopServerRegionProviderMonthlyStatsResponse",
          "code": "rpc findTopServerRegionProviderMonthlyStats (FindTopServerRegionProviderMonthlyStatsRequest) returns (FindTopServerRegionProviderMonthlyStatsResponse);",
          "doc": "查找前N个运营商",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_region_provider_monthly_stat.proto",
      "doc": "运营商月份统计"
    },
    {
      "name": "ServerRegionProvinceMonthlyStatService",
      "methods": [
        {
          "name": "findTopServerRegionProvinceMonthlyStats",
          "requestMessageName": "FindTopServerRegionProvinceMonthlyStatsRequest",
          "responseMessageName": "FindTopServerRegionProvinceMonthlyStatsResponse",
          "code": "rpc findTopServerRegionProvinceMonthlyStats (FindTopServerRegionProvinceMonthlyStatsRequest) returns (FindTopServerRegionProvinceMonthlyStatsResponse);",
          "doc": "查找前N个省份",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_region_province_monthly_stat.proto",
      "doc": "省份月份统计"
    },
    {
      "name": "ServerStatBoardService",
      "methods": [
        {
          "name": "findAllEnabledServerStatBoards",
          "requestMessageName": "FindAllEnabledServerStatBoardsRequest",
          "responseMessageName": "FindAllEnabledServerStatBoardsResponse",
          "code": "rpc findAllEnabledServerStatBoards (FindAllEnabledServerStatBoardsRequest) returns (FindAllEnabledServerStatBoardsResponse);",
          "doc": "读取所有看板",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "composeServerStatNodeClusterBoard",
          "requestMessageName": "ComposeServerStatNodeClusterBoardRequest",
          "responseMessageName": "ComposeServerStatNodeClusterBoardResponse",
          "code": "rpc composeServerStatNodeClusterBoard (ComposeServerStatNodeClusterBoardRequest) returns (ComposeServerStatNodeClusterBoardResponse);",
          "doc": "组合集群看板数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "composeServerStatNodeBoard",
          "requestMessageName": "ComposeServerStatNodeBoardRequest",
          "responseMessageName": "ComposeServerStatNodeBoardResponse",
          "code": "rpc composeServerStatNodeBoard (ComposeServerStatNodeBoardRequest) returns (ComposeServerStatNodeBoardResponse);",
          "doc": "组合节点看板数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "composeServerStatBoard",
          "requestMessageName": "ComposeServerStatBoardRequest",
          "responseMessageName": "ComposeServerStatBoardResponse",
          "code": "rpc composeServerStatBoard (ComposeServerStatBoardRequest) returns (ComposeServerStatBoardResponse);",
          "doc": "组合服务看板数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_stat_board.proto",
      "doc": "统计看板"
    },
    {
      "name": "ServerStatBoardChartService",
      "methods": [
        {
          "name": "enableServerStatBoardChart",
          "requestMessageName": "EnableServerStatBoardChartRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc enableServerStatBoardChart (EnableServerStatBoardChartRequest) returns (RPCSuccess);",
          "doc": "添加图表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "disableServerStatBoardChart",
          "requestMessageName": "DisableServerStatBoardChartRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc disableServerStatBoardChart (DisableServerStatBoardChartRequest) returns (RPCSuccess);",
          "doc": "取消图表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledServerStatBoardCharts",
          "requestMessageName": "FindAllEnabledServerStatBoardChartsRequest",
          "responseMessageName": "FindAllEnabledServerStatBoardChartsResponse",
          "code": "rpc findAllEnabledServerStatBoardCharts (FindAllEnabledServerStatBoardChartsRequest) returns (FindAllEnabledServerStatBoardChartsResponse);",
          "doc": "读取看板中的图表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_server_stat_board_chart.proto",
      "doc": "统计看板条目"
    },
    {
      "name": "SSLCertService",
      "methods": [
        {
          "name": "createSSLCert",
          "requestMessageName": "CreateSSLCertRequest",
          "responseMessageName": "CreateSSLCertResponse",
          "code": "rpc createSSLCert (CreateSSLCertRequest) returns (CreateSSLCertResponse);",
          "doc": "创建证书",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "createSSLCerts",
          "requestMessageName": "CreateSSLCertsRequest",
          "responseMessageName": "CreateSSLCertsResponse",
          "code": "rpc createSSLCerts(CreateSSLCertsRequest) returns (CreateSSLCertsResponse);",
          "doc": "创建一组证书",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateSSLCert",
          "requestMessageName": "UpdateSSLCertRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateSSLCert (UpdateSSLCertRequest) returns (RPCSuccess);",
          "doc": "修改证书",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteSSLCert",
          "requestMessageName": "DeleteSSLCertRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteSSLCert (DeleteSSLCertRequest) returns (RPCSuccess);",
          "doc": "删除证书",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledSSLCertConfig",
          "requestMessageName": "FindEnabledSSLCertConfigRequest",
          "responseMessageName": "FindEnabledSSLCertConfigResponse",
          "code": "rpc findEnabledSSLCertConfig (FindEnabledSSLCertConfigRequest) returns (FindEnabledSSLCertConfigResponse);",
          "doc": "查找证书配置",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countSSLCerts",
          "requestMessageName": "CountSSLCertRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countSSLCerts (CountSSLCertRequest) returns (RPCCountResponse);",
          "doc": "计算匹配的证书数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listSSLCerts",
          "requestMessageName": "ListSSLCertsRequest",
          "responseMessageName": "ListSSLCertsResponse",
          "code": "rpc listSSLCerts (ListSSLCertsRequest) returns (ListSSLCertsResponse);",
          "doc": "列出单页匹配的证书",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllSSLCertsWithOCSPError",
          "requestMessageName": "CountAllSSLCertsWithOCSPErrorRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllSSLCertsWithOCSPError (CountAllSSLCertsWithOCSPErrorRequest) returns (RPCCountResponse);",
          "doc": "计算有OCSP错误的证书数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listSSLCertsWithOCSPError",
          "requestMessageName": "ListSSLCertsWithOCSPErrorRequest",
          "responseMessageName": "ListSSLCertsWithOCSPErrorResponse",
          "code": "rpc listSSLCertsWithOCSPError (ListSSLCertsWithOCSPErrorRequest) returns (ListSSLCertsWithOCSPErrorResponse);",
          "doc": "列出有OCSP错误的证书",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "ignoreSSLCertsWithOCSPError",
          "requestMessageName": "IgnoreSSLCertsWithOCSPErrorRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc ignoreSSLCertsWithOCSPError (IgnoreSSLCertsWithOCSPErrorRequest) returns (RPCSuccess);",
          "doc": "忽略一组OCSP证书错误",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "resetSSLCertsWithOCSPError",
          "requestMessageName": "ResetSSLCertsWithOCSPErrorRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc resetSSLCertsWithOCSPError (ResetSSLCertsWithOCSPErrorRequest) returns (RPCSuccess);",
          "doc": "重置一组证书OCSP错误状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "resetAllSSLCertsWithOCSPError",
          "requestMessageName": "ResetAllSSLCertsWithOCSPErrorRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc resetAllSSLCertsWithOCSPError (ResetAllSSLCertsWithOCSPErrorRequest) returns (RPCSuccess);",
          "doc": "重置所有证书OCSP错误状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listUpdatedSSLCertOCSP",
          "requestMessageName": "ListUpdatedSSLCertOCSPRequest",
          "responseMessageName": "ListUpdatedSSLCertOCSPResponse",
          "code": "rpc listUpdatedSSLCertOCSP(ListUpdatedSSLCertOCSPRequest) returns (ListUpdatedSSLCertOCSPResponse);",
          "doc": "读取证书的OCSP",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "findSSLCertUser",
          "requestMessageName": "FindSSLCertUserRequest",
          "responseMessageName": "FindSSLCertUserResponse",
          "code": "rpc findSSLCertUser(FindSSLCertUserRequest) returns (FindSSLCertUserResponse);",
          "doc": "查找证书所属用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ssl_cert.proto",
      "doc": "SSL证书管理服务"
    },
    {
      "name": "SSLPolicyService",
      "methods": [
        {
          "name": "createSSLPolicy",
          "requestMessageName": "CreateSSLPolicyRequest",
          "responseMessageName": "CreateSSLPolicyResponse",
          "code": "rpc createSSLPolicy (CreateSSLPolicyRequest) returns (CreateSSLPolicyResponse);",
          "doc": "创建策略",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateSSLPolicy",
          "requestMessageName": "UpdateSSLPolicyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateSSLPolicy (UpdateSSLPolicyRequest) returns (RPCSuccess);",
          "doc": "修改策略",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledSSLPolicyConfig",
          "requestMessageName": "FindEnabledSSLPolicyConfigRequest",
          "responseMessageName": "FindEnabledSSLPolicyConfigResponse",
          "code": "rpc findEnabledSSLPolicyConfig (FindEnabledSSLPolicyConfigRequest) returns (FindEnabledSSLPolicyConfigResponse);",
          "doc": "查找策略",
          "roles": [
            "user",
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_ssl_policy.proto",
      "doc": "SSL/TLS策略管理服务"
    },
    {
      "name": "SysLockerService",
      "methods": [
        {
          "name": "SysLockerLock",
          "requestMessageName": "SysLockerLockRequest",
          "responseMessageName": "SysLockerLockResponse",
          "code": "rpc SysLockerLock (SysLockerLockRequest) returns (SysLockerLockResponse);",
          "doc": "获得锁",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "SysLockerUnlock",
          "requestMessageName": "SysLockerUnlockRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc SysLockerUnlock (SysLockerUnlockRequest) returns (RPCSuccess);",
          "doc": "释放锁",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_sys_locker.proto",
      "doc": "互斥锁管理"
    },
    {
      "name": "SysSettingService",
      "methods": [
        {
          "name": "updateSysSetting",
          "requestMessageName": "UpdateSysSettingRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateSysSetting (UpdateSysSettingRequest) returns (RPCSuccess);",
          "doc": "更改配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "readSysSetting",
          "requestMessageName": "ReadSysSettingRequest",
          "responseMessageName": "ReadSysSettingResponse",
          "code": "rpc readSysSetting (ReadSysSettingRequest) returns (ReadSysSettingResponse);",
          "doc": "读取配置",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_sys_setting.proto",
      "doc": "系统设置管理服务"
    },
    {
      "name": "TrafficDailyStatService",
      "methods": [
        {
          "name": "findTrafficDailyStatWithDay",
          "requestMessageName": "FindTrafficDailyStatWithDayRequest",
          "responseMessageName": "FindTrafficDailyStatWithDayResponse",
          "code": "rpc findTrafficDailyStatWithDay(FindTrafficDailyStatWithDayRequest) returns (FindTrafficDailyStatWithDayResponse);",
          "doc": "查找某日统计",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_traffic_daily_stat.proto",
      "doc": "按日统计服务"
    },
    {
      "name": "TrafficPackageService",
      "methods": [
        {
          "name": "createTrafficPackage",
          "requestMessageName": "CreateTrafficPackageRequest",
          "responseMessageName": "CreateTrafficPackageResponse",
          "code": "rpc createTrafficPackage(CreateTrafficPackageRequest) returns (CreateTrafficPackageResponse);",
          "doc": "创建流量包",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateTrafficPackage",
          "requestMessageName": "UpdateTrafficPackageRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateTrafficPackage(UpdateTrafficPackageRequest) returns (RPCSuccess);",
          "doc": "修改流量包",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteTrafficPackage",
          "requestMessageName": "DeleteTrafficPackageRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteTrafficPackage(DeleteTrafficPackageRequest) returns (RPCSuccess);",
          "doc": "删除流量包",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findTrafficPackage",
          "requestMessageName": "FindTrafficPackageRequest",
          "responseMessageName": "FindTrafficPackageResponse",
          "code": "rpc findTrafficPackage(FindTrafficPackageRequest) returns (FindTrafficPackageResponse);",
          "doc": "查找流量包",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllTrafficPackages",
          "requestMessageName": "FindAllTrafficPackagesRequest",
          "responseMessageName": "FindAllTrafficPackagesResponse",
          "code": "rpc findAllTrafficPackages(FindAllTrafficPackagesRequest) returns (FindAllTrafficPackagesResponse);",
          "doc": "查找所有流量包",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAvailableTrafficPackages",
          "requestMessageName": "FindAllAvailableTrafficPackagesRequest",
          "responseMessageName": "FindAllAvailableTrafficPackagesResponse",
          "code": "rpc findAllAvailableTrafficPackages(FindAllAvailableTrafficPackagesRequest) returns (FindAllAvailableTrafficPackagesResponse);",
          "doc": "查找所有可用流量包",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_traffic_package.proto",
      "doc": "流量包服务"
    },
    {
      "name": "TrafficPackagePeriodService",
      "methods": [
        {
          "name": "createTrafficPackagePeriod",
          "requestMessageName": "CreateTrafficPackagePeriodRequest",
          "responseMessageName": "CreateTrafficPackagePeriodResponse",
          "code": "rpc createTrafficPackagePeriod(CreateTrafficPackagePeriodRequest) returns (CreateTrafficPackagePeriodResponse);",
          "doc": "创建有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateTrafficPackagePeriod",
          "requestMessageName": "UpdateTrafficPackagePeriodRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateTrafficPackagePeriod(UpdateTrafficPackagePeriodRequest) returns (RPCSuccess);",
          "doc": "修改有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteTrafficPackagePeriod",
          "requestMessageName": "DeleteTrafficPackagePeriodRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteTrafficPackagePeriod(DeleteTrafficPackagePeriodRequest) returns (RPCSuccess);",
          "doc": "删除有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findTrafficPackagePeriod",
          "requestMessageName": "FindTrafficPackagePeriodRequest",
          "responseMessageName": "FindTrafficPackagePeriodResponse",
          "code": "rpc findTrafficPackagePeriod(FindTrafficPackagePeriodRequest) returns (FindTrafficPackagePeriodResponse);",
          "doc": "查找有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllTrafficPackagePeriods",
          "requestMessageName": "FindAllTrafficPackagePeriodsRequest",
          "responseMessageName": "FindAllTrafficPackagePeriodsResponse",
          "code": "rpc findAllTrafficPackagePeriods(FindAllTrafficPackagePeriodsRequest) returns (FindAllTrafficPackagePeriodsResponse);",
          "doc": "列出所有有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAvailableTrafficPackagePeriods",
          "requestMessageName": "FindAllAvailableTrafficPackagePeriodsRequest",
          "responseMessageName": "FindAllAvailableTrafficPackagePeriodsResponse",
          "code": "rpc findAllAvailableTrafficPackagePeriods(FindAllAvailableTrafficPackagePeriodsRequest) returns (FindAllAvailableTrafficPackagePeriodsResponse);",
          "doc": "列出所有可用有效期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_traffic_package_period.proto",
      "doc": "流量包有效期服务"
    },
    {
      "name": "TrafficPackagePriceService",
      "methods": [
        {
          "name": "updateTrafficPackagePrice",
          "requestMessageName": "UpdateTrafficPackagePriceRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateTrafficPackagePrice(UpdateTrafficPackagePriceRequest) returns (RPCSuccess);",
          "doc": "设置流量包价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findTrafficPackagePrice",
          "requestMessageName": "FindTrafficPackagePriceRequest",
          "responseMessageName": "FindTrafficPackagePriceResponse",
          "code": "rpc findTrafficPackagePrice(FindTrafficPackagePriceRequest) returns (FindTrafficPackagePriceResponse);",
          "doc": "获取单个流量包具体价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countTrafficPackagePrices",
          "requestMessageName": "CountTrafficPackagePricesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countTrafficPackagePrices(CountTrafficPackagePricesRequest) returns (RPCCountResponse);",
          "doc": "计算流量包价格项数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findTrafficPackagePrices",
          "requestMessageName": "FindTrafficPackagePricesRequest",
          "responseMessageName": "FindTrafficPackagePricesResponse",
          "code": "rpc findTrafficPackagePrices(FindTrafficPackagePricesRequest) returns (FindTrafficPackagePricesResponse);",
          "doc": "查找流量包价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllTrafficPackagePrices",
          "requestMessageName": "FindAllTrafficPackagePricesRequest",
          "responseMessageName": "FindAllTrafficPackagePricesResponse",
          "code": "rpc findAllTrafficPackagePrices(FindAllTrafficPackagePricesRequest) returns (FindAllTrafficPackagePricesResponse);",
          "doc": "查找所有流量包价格",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_traffic_package_price.proto",
      "doc": "流量包价格服务"
    },
    {
      "name": "UpdatingServerListService",
      "methods": [
        {
          "name": "findUpdatingServerLists",
          "requestMessageName": "FindUpdatingServerListsRequest",
          "responseMessageName": "FindUpdatingServerListsResponse",
          "code": "rpc findUpdatingServerLists(FindUpdatingServerListsRequest) returns (FindUpdatingServerListsResponse);",
          "doc": "查找要更新的服务配置",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_updating_server_list.proto",
      "doc": "待更新服务列表服务"
    },
    {
      "name": "UserService",
      "methods": [
        {
          "name": "createUser",
          "requestMessageName": "CreateUserRequest",
          "responseMessageName": "CreateUserResponse",
          "code": "rpc createUser (CreateUserRequest) returns (CreateUserResponse);",
          "doc": "创建用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "registerUser",
          "requestMessageName": "RegisterUserRequest",
          "responseMessageName": "RegisterUserResponse",
          "code": "rpc registerUser(RegisterUserRequest) returns (RegisterUserResponse);",
          "doc": "注册用户",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "verifyUser",
          "requestMessageName": "VerifyUserRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc verifyUser(VerifyUserRequest) returns (RPCSuccess);",
          "doc": "审核用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUser",
          "requestMessageName": "UpdateUserRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUser (UpdateUserRequest) returns (RPCSuccess);",
          "doc": "修改用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteUser",
          "requestMessageName": "DeleteUserRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteUser (DeleteUserRequest) returns (RPCSuccess);",
          "doc": "删除用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledUsers",
          "requestMessageName": "CountAllEnabledUsersRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledUsers (CountAllEnabledUsersRequest) returns (RPCCountResponse);",
          "doc": "计算用户数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledUsers",
          "requestMessageName": "ListEnabledUsersRequest",
          "responseMessageName": "ListEnabledUsersResponse",
          "code": "rpc listEnabledUsers (ListEnabledUsersRequest) returns (ListEnabledUsersResponse);",
          "doc": "列出单页用户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledUser",
          "requestMessageName": "FindEnabledUserRequest",
          "responseMessageName": "FindEnabledUserResponse",
          "code": "rpc findEnabledUser (FindEnabledUserRequest) returns (FindEnabledUserResponse);",
          "doc": "查询单个用户信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkUserUsername",
          "requestMessageName": "CheckUserUsernameRequest",
          "responseMessageName": "CheckUserUsernameResponse",
          "code": "rpc checkUserUsername (CheckUserUsernameRequest) returns (CheckUserUsernameResponse);",
          "doc": "检查用户名是否存在",
          "roles": [
            "user",
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "loginUser",
          "requestMessageName": "LoginUserRequest",
          "responseMessageName": "LoginUserResponse",
          "code": "rpc loginUser (LoginUserRequest) returns (LoginUserResponse);",
          "doc": "登录",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "updateUserInfo",
          "requestMessageName": "UpdateUserInfoRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserInfo (UpdateUserInfoRequest) returns (RPCSuccess);",
          "doc": "修改用户基本信息",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserLogin",
          "requestMessageName": "UpdateUserLoginRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserLogin (UpdateUserLoginRequest) returns (RPCSuccess);",
          "doc": "修改用户登录信息",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "composeUserDashboard",
          "requestMessageName": "ComposeUserDashboardRequest",
          "responseMessageName": "ComposeUserDashboardResponse",
          "code": "rpc composeUserDashboard (ComposeUserDashboardRequest) returns (ComposeUserDashboardResponse);",
          "doc": "取得用户Dashboard数据",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findUserNodeClusterId",
          "requestMessageName": "FindUserNodeClusterIdRequest",
          "responseMessageName": "FindUserNodeClusterIdResponse",
          "code": "rpc findUserNodeClusterId (FindUserNodeClusterIdRequest) returns (FindUserNodeClusterIdResponse);",
          "doc": "获取用户所在的集群ID",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserFeatures",
          "requestMessageName": "UpdateUserFeaturesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserFeatures (UpdateUserFeaturesRequest) returns (RPCSuccess);",
          "doc": "设置单个用户能使用的功能",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateAllUsersFeatures",
          "requestMessageName": "UpdateAllUsersFeaturesRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateAllUsersFeatures(UpdateAllUsersFeaturesRequest) returns (RPCSuccess);",
          "doc": "设置所有用户能使用的功能",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findUserFeatures",
          "requestMessageName": "FindUserFeaturesRequest",
          "responseMessageName": "FindUserFeaturesResponse",
          "code": "rpc findUserFeatures (FindUserFeaturesRequest) returns (FindUserFeaturesResponse);",
          "doc": "获取用户所有的功能列表",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllUserFeatureDefinitions",
          "requestMessageName": "FindAllUserFeatureDefinitionsRequest",
          "responseMessageName": "FindAllUserFeatureDefinitionsResponse",
          "code": "rpc findAllUserFeatureDefinitions (FindAllUserFeatureDefinitionsRequest) returns (FindAllUserFeatureDefinitionsResponse);",
          "doc": "获取所有的功能定义",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "composeUserGlobalBoard",
          "requestMessageName": "ComposeUserGlobalBoardRequest",
          "responseMessageName": "ComposeUserGlobalBoardResponse",
          "code": "rpc composeUserGlobalBoard (ComposeUserGlobalBoardRequest) returns (ComposeUserGlobalBoardResponse);",
          "doc": "组合全局的看板数据",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkUserOTPWithUsername",
          "requestMessageName": "CheckUserOTPWithUsernameRequest",
          "responseMessageName": "CheckUserOTPWithUsernameResponse",
          "code": "rpc checkUserOTPWithUsername (CheckUserOTPWithUsernameRequest) returns (CheckUserOTPWithUsernameResponse);",
          "doc": "根据用户名检查是否需要输入OTP",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findUserPriceInfo",
          "requestMessageName": "FindUserPriceInfoRequest",
          "responseMessageName": "FindUserPriceInfoResponse",
          "code": "rpc findUserPriceInfo(FindUserPriceInfoRequest) returns (FindUserPriceInfoResponse);",
          "doc": "读取用户计费信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserPriceType",
          "requestMessageName": "UpdateUserPriceTypeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserPriceType(UpdateUserPriceTypeRequest) returns (RPCSuccess);",
          "doc": "修改用户计费方式",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserPricePeriod",
          "requestMessageName": "UpdateUserPricePeriodRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserPricePeriod(UpdateUserPricePeriodRequest) returns (RPCSuccess);",
          "doc": "修改用户计费周期",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkUserServersState",
          "requestMessageName": "CheckUserServersStateRequest",
          "responseMessageName": "CheckUserServersStateResponse",
          "code": "rpc checkUserServersState(CheckUserServersStateRequest) returns (CheckUserServersStateResponse);",
          "doc": "检查用户服务可用状态",
          "roles": [
            "node"
          ],
          "isDeprecated": false
        },
        {
          "name": "renewUserServersState",
          "requestMessageName": "RenewUserServersStateRequest",
          "responseMessageName": "RenewUserServersStateResponse",
          "code": "rpc renewUserServersState(RenewUserServersStateRequest) returns (RenewUserServersStateResponse);",
          "doc": "更新用户服务可用状态",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkUserEmail",
          "requestMessageName": "CheckUserEmailRequest",
          "responseMessageName": "CheckUserEmailResponse",
          "code": "rpc checkUserEmail(CheckUserEmailRequest) returns (CheckUserEmailResponse);",
          "doc": "检查邮箱是否已被使用",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findUserVerifiedEmailWithUsername",
          "requestMessageName": "FindUserVerifiedEmailWithUsernameRequest",
          "responseMessageName": "FindUserVerifiedEmailWithUsernameResponse",
          "code": "rpc findUserVerifiedEmailWithUsername(FindUserVerifiedEmailWithUsernameRequest) returns (FindUserVerifiedEmailWithUsernameResponse);",
          "doc": "根据用户名查询用户绑定的邮箱",
          "roles": [],
          "isDeprecated": false
        }
      ],
      "filename": "service_user.proto",
      "doc": "用户相关服务"
    },
    {
      "name": "UserAccessKeyService",
      "methods": [
        {
          "name": "createUserAccessKey",
          "requestMessageName": "CreateUserAccessKeyRequest",
          "responseMessageName": "CreateUserAccessKeyResponse",
          "code": "rpc createUserAccessKey (CreateUserAccessKeyRequest) returns (CreateUserAccessKeyResponse);",
          "doc": "创建AccessKey",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledUserAccessKeys",
          "requestMessageName": "FindAllEnabledUserAccessKeysRequest",
          "responseMessageName": "FindAllEnabledUserAccessKeysResponse",
          "code": "rpc findAllEnabledUserAccessKeys (FindAllEnabledUserAccessKeysRequest) returns (FindAllEnabledUserAccessKeysResponse);",
          "doc": "查找所有的AccessKey",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteUserAccessKey",
          "requestMessageName": "DeleteUserAccessKeyRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteUserAccessKey (DeleteUserAccessKeyRequest) returns (RPCSuccess);",
          "doc": "删除AccessKey",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserAccessKeyIsOn",
          "requestMessageName": "UpdateUserAccessKeyIsOnRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserAccessKeyIsOn (UpdateUserAccessKeyIsOnRequest) returns (RPCSuccess);",
          "doc": "设置是否启用AccessKey",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledUserAccessKeys",
          "requestMessageName": "CountAllEnabledUserAccessKeysRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledUserAccessKeys (CountAllEnabledUserAccessKeysRequest) returns (RPCCountResponse);",
          "doc": "计算AccessKey数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_access_key.proto",
      "doc": "用户AccessKey相关服务"
    },
    {
      "name": "UserAccountService",
      "methods": [
        {
          "name": "countUserAccounts",
          "requestMessageName": "CountUserAccountsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countUserAccounts(CountUserAccountsRequest) returns (RPCCountResponse);",
          "doc": "计算账户数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listUserAccounts",
          "requestMessageName": "ListUserAccountsRequest",
          "responseMessageName": "ListUserAccountsResponse",
          "code": "rpc listUserAccounts(ListUserAccountsRequest) returns (ListUserAccountsResponse);",
          "doc": "列出单页账户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledUserAccountWithUserId",
          "requestMessageName": "FindEnabledUserAccountWithUserIdRequest",
          "responseMessageName": "FindEnabledUserAccountWithUserIdResponse",
          "code": "rpc findEnabledUserAccountWithUserId(FindEnabledUserAccountWithUserIdRequest) returns (FindEnabledUserAccountWithUserIdResponse);",
          "doc": "根据用户ID查找单个账户",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledUserAccount",
          "requestMessageName": "FindEnabledUserAccountRequest",
          "responseMessageName": "FindEnabledUserAccountResponse",
          "code": "rpc findEnabledUserAccount(FindEnabledUserAccountRequest) returns (FindEnabledUserAccountResponse);",
          "doc": "查找单个账户",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserAccount",
          "requestMessageName": "UpdateUserAccountRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserAccount(UpdateUserAccountRequest) returns (RPCSuccess);",
          "doc": "修改用户账户",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_account.proto",
      "doc": "用户账户服务"
    },
    {
      "name": "UserAccountDailyStatService",
      "methods": [
        {
          "name": "listUserAccountDailyStats",
          "requestMessageName": "ListUserAccountDailyStatsRequest",
          "responseMessageName": "ListUserAccountDailyStatsResponse",
          "code": "rpc listUserAccountDailyStats(ListUserAccountDailyStatsRequest) returns (ListUserAccountDailyStatsResponse);",
          "doc": "列出按天统计",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listUserAccountMonthlyStats",
          "requestMessageName": "ListUserAccountMonthlyStatsRequest",
          "responseMessageName": "ListUserAccountMonthlyStatsResponse",
          "code": "rpc listUserAccountMonthlyStats(ListUserAccountMonthlyStatsRequest) returns (ListUserAccountMonthlyStatsResponse);",
          "doc": "列出按月统计",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_account_daily_stat.proto",
      "doc": "用户账户统计服务"
    },
    {
      "name": "UserAccountLogService",
      "methods": [
        {
          "name": "countUserAccountLogs",
          "requestMessageName": "CountUserAccountLogsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countUserAccountLogs(CountUserAccountLogsRequest) returns (RPCCountResponse);",
          "doc": "计算日志数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listUserAccountLogs",
          "requestMessageName": "ListUserAccountLogsRequest",
          "responseMessageName": "ListUserAccountLogsResponse",
          "code": "rpc listUserAccountLogs(ListUserAccountLogsRequest) returns (ListUserAccountLogsResponse);",
          "doc": "列出单页日志",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_account_log.proto",
      "doc": "用户账户日志服务"
    },
    {
      "name": "UserADInstanceService",
      "methods": [
        {
          "name": "createUserADInstance",
          "requestMessageName": "CreateUserADInstanceRequest",
          "responseMessageName": "CreateUserADInstanceResponse",
          "code": "rpc createUserADInstance(CreateUserADInstanceRequest) returns (CreateUserADInstanceResponse);",
          "doc": "创建用户高防实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "buyUserADInstance",
          "requestMessageName": "BuyUserADInstanceRequest",
          "responseMessageName": "BuyUserADInstanceResponse",
          "code": "rpc buyUserADInstance(BuyUserADInstanceRequest) returns (BuyUserADInstanceResponse);",
          "doc": "购买用户高防实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countUserADInstances",
          "requestMessageName": "CountUserADInstancesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countUserADInstances(CountUserADInstancesRequest) returns (RPCCountResponse);",
          "doc": "计算用户高防实例数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listUserADInstances",
          "requestMessageName": "ListUserADInstancesRequest",
          "responseMessageName": "ListUserADInstancesResponse",
          "code": "rpc listUserADInstances(ListUserADInstancesRequest) returns (ListUserADInstancesResponse);",
          "doc": "列出单页用户高防实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findUserADInstance",
          "requestMessageName": "FindUserADInstanceRequest",
          "responseMessageName": "FindUserADInstanceResponse",
          "code": "rpc findUserADInstance(FindUserADInstanceRequest) returns (FindUserADInstanceResponse);",
          "doc": "查找单个用户高防实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteUserADInstance",
          "requestMessageName": "DeleteUserADInstanceRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteUserADInstance(DeleteUserADInstanceRequest) returns (RPCSuccess);",
          "doc": "删除用户高防实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "renewUserADInstance",
          "requestMessageName": "RenewUserADInstanceRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc renewUserADInstance(RenewUserADInstanceRequest) returns (RPCSuccess);",
          "doc": "续期用户高防实例",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserADInstanceObjects",
          "requestMessageName": "UpdateUserADInstanceObjectsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserADInstanceObjects(UpdateUserADInstanceObjectsRequest) returns (RPCSuccess);",
          "doc": "修改实例防护对象",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_ad_instance.proto",
      "doc": "用户高防实例服务"
    },
    {
      "name": "UserBillService",
      "methods": [
        {
          "name": "generateAllUserBills",
          "requestMessageName": "GenerateAllUserBillsRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc generateAllUserBills (GenerateAllUserBillsRequest) returns (RPCSuccess);",
          "doc": "手工生成账单",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllUserBills",
          "requestMessageName": "CountAllUserBillsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllUserBills (CountAllUserBillsRequest) returns (RPCCountResponse);",
          "doc": "计算所有账单数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listUserBills",
          "requestMessageName": "ListUserBillsRequest",
          "responseMessageName": "ListUserBillsResponse",
          "code": "rpc listUserBills (ListUserBillsRequest) returns (ListUserBillsResponse);",
          "doc": "列出单页账单",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findUserBill",
          "requestMessageName": "FindUserBillRequest",
          "responseMessageName": "FindUserBillResponse",
          "code": "rpc findUserBill(FindUserBillRequest) returns (FindUserBillResponse);",
          "doc": "查找账单信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "payUserBill",
          "requestMessageName": "PayUserBillRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc payUserBill(PayUserBillRequest) returns (RPCSuccess);",
          "doc": "支付账单",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "sumUserUnpaidBills",
          "requestMessageName": "SumUserUnpaidBillsRequest",
          "responseMessageName": "SumUserUnpaidBillsResponse",
          "code": "rpc sumUserUnpaidBills(SumUserUnpaidBillsRequest) returns (SumUserUnpaidBillsResponse);",
          "doc": "计算用户所有未支付账单总额",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_bill.proto",
      "doc": "账单相关服务"
    },
    {
      "name": "UserEmailVerificationService",
      "methods": [
        {
          "name": "verifyUserEmail",
          "requestMessageName": "VerifyUserEmailRequest",
          "responseMessageName": "VerifyUserEmailResponse",
          "code": "rpc verifyUserEmail(VerifyUserEmailRequest) returns (VerifyUserEmailResponse);",
          "doc": "认证邮箱",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "sendUserEmailVerification",
          "requestMessageName": "SendUserEmailVerificationRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc sendUserEmailVerification(SendUserEmailVerificationRequest) returns (RPCSuccess);",
          "doc": "发送邮箱认证",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findLatestUserEmailVerification",
          "requestMessageName": "FindLatestUserEmailVerificationRequest",
          "responseMessageName": "FindLatestUserEmailVerificationResponse",
          "code": "rpc findLatestUserEmailVerification(FindLatestUserEmailVerificationRequest) returns (FindLatestUserEmailVerificationResponse);",
          "doc": "查找用户正在等待激活的认证",
          "roles": [],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_email_verification.proto",
      "doc": "用户电子邮箱认证服务"
    },
    {
      "name": "UserIdentityService",
      "methods": [
        {
          "name": "createUserIdentity",
          "requestMessageName": "CreateUserIdentityRequest",
          "responseMessageName": "CreateUserIdentityResponse",
          "code": "rpc createUserIdentity(CreateUserIdentityRequest) returns (CreateUserIdentityResponse);",
          "doc": "创建实名认证信息",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledUserIdentity",
          "requestMessageName": "FindEnabledUserIdentityRequest",
          "responseMessageName": "FindEnabledUserIdentityResponse",
          "code": "rpc findEnabledUserIdentity(FindEnabledUserIdentityRequest) returns (FindEnabledUserIdentityResponse);",
          "doc": "查找单个实名认证信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledUserIdentityWithOrgType",
          "requestMessageName": "FindEnabledUserIdentityWithOrgTypeRequest",
          "responseMessageName": "FindEnabledUserIdentityWithOrgTypeResponse",
          "code": "rpc findEnabledUserIdentityWithOrgType(FindEnabledUserIdentityWithOrgTypeRequest) returns (FindEnabledUserIdentityWithOrgTypeResponse);",
          "doc": "查看某个类型的实名认证信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "checkUserIdentityIsSubmitted",
          "requestMessageName": "CheckUserIdentityIsSubmittedRequest",
          "responseMessageName": "CheckUserIdentityIsSubmittedResponse",
          "code": "rpc checkUserIdentityIsSubmitted(CheckUserIdentityIsSubmittedRequest) returns (CheckUserIdentityIsSubmittedResponse);",
          "doc": "检查是否正在审核中",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserIdentity",
          "requestMessageName": "UpdateUserIdentityRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserIdentity(UpdateUserIdentityRequest) returns (RPCSuccess);",
          "doc": "修改实名认证信息",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "submitUserIdentity",
          "requestMessageName": "SubmitUserIdentityRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc submitUserIdentity(SubmitUserIdentityRequest) returns (RPCSuccess);",
          "doc": "提交审核实名认证信息",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "cancelUserIdentity",
          "requestMessageName": "CancelUserIdentityRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc cancelUserIdentity(CancelUserIdentityRequest) returns (RPCSuccess);",
          "doc": "取消提交实名审核认证信息",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "resetUserIdentity",
          "requestMessageName": "ResetUserIdentityRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc resetUserIdentity(ResetUserIdentityRequest) returns (RPCSuccess);",
          "doc": "重置用户实名认证信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "rejectUserIdentity",
          "requestMessageName": "RejectUserIdentityRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc rejectUserIdentity(RejectUserIdentityRequest) returns (RPCSuccess);",
          "doc": "拒绝用户实名认证信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "verifyUserIdentity",
          "requestMessageName": "VerifyUserIdentityRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc verifyUserIdentity(VerifyUserIdentityRequest) returns (RPCSuccess);",
          "doc": "通过用户实名认证信息",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_identity.proto",
      "doc": "用户实名认证服务"
    },
    {
      "name": "UserNodeService",
      "methods": [
        {
          "name": "createUserNode",
          "requestMessageName": "CreateUserNodeRequest",
          "responseMessageName": "CreateUserNodeResponse",
          "code": "rpc createUserNode (CreateUserNodeRequest) returns (CreateUserNodeResponse);",
          "doc": "创建用户节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserNode",
          "requestMessageName": "UpdateUserNodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserNode (UpdateUserNodeRequest) returns (RPCSuccess);",
          "doc": "修改用户节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteUserNode",
          "requestMessageName": "DeleteUserNodeRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteUserNode (DeleteUserNodeRequest) returns (RPCSuccess);",
          "doc": "删除用户节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledUserNodes",
          "requestMessageName": "FindAllEnabledUserNodesRequest",
          "responseMessageName": "FindAllEnabledUserNodesResponse",
          "code": "rpc findAllEnabledUserNodes (FindAllEnabledUserNodesRequest) returns (FindAllEnabledUserNodesResponse);",
          "doc": "列出所有可用用户节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledUserNodes",
          "requestMessageName": "CountAllEnabledUserNodesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledUserNodes (CountAllEnabledUserNodesRequest) returns (RPCCountResponse);",
          "doc": "计算用户节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledUserNodes",
          "requestMessageName": "ListEnabledUserNodesRequest",
          "responseMessageName": "ListEnabledUserNodesResponse",
          "code": "rpc listEnabledUserNodes (ListEnabledUserNodesRequest) returns (ListEnabledUserNodesResponse);",
          "doc": "列出单页的用户节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledUserNode",
          "requestMessageName": "FindEnabledUserNodeRequest",
          "responseMessageName": "FindEnabledUserNodeResponse",
          "code": "rpc findEnabledUserNode (FindEnabledUserNodeRequest) returns (FindEnabledUserNodeResponse);",
          "doc": "根据ID查找节点",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findCurrentUserNode",
          "requestMessageName": "FindCurrentUserNodeRequest",
          "responseMessageName": "FindCurrentUserNodeResponse",
          "code": "rpc findCurrentUserNode (FindCurrentUserNodeRequest) returns (FindCurrentUserNodeResponse);",
          "doc": "获取当前用户节点信息",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "updateUserNodeStatus",
          "requestMessageName": "UpdateUserNodeStatusRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserNodeStatus (UpdateUserNodeStatusRequest) returns (RPCSuccess);",
          "doc": "更新节点状态",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledUserNodesWithSSLCertId",
          "requestMessageName": "CountAllEnabledUserNodesWithSSLCertIdRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledUserNodesWithSSLCertId (CountAllEnabledUserNodesWithSSLCertIdRequest) returns (RPCCountResponse);",
          "doc": "计算使用某个SSL证书的用户节点数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findUserNodeAccessAddr",
          "requestMessageName": "FindUserNodeAccessAddrRequest",
          "responseMessageName": "FindUserNodeAccessAddrResponse",
          "code": "rpc findUserNodeAccessAddr(FindUserNodeAccessAddrRequest) returns (FindUserNodeAccessAddrResponse);",
          "doc": "获取用户节点访问地址",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_node.proto",
      "doc": "用户节点管理服务"
    },
    {
      "name": "UserOrderService",
      "methods": [
        {
          "name": "createUserOrder",
          "requestMessageName": "CreateUserOrderRequest",
          "responseMessageName": "CreateUserOrderResponse",
          "code": "rpc createUserOrder(CreateUserOrderRequest) returns (CreateUserOrderResponse);",
          "doc": "创建订单",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "findEnabledUserOrder",
          "requestMessageName": "FindEnabledUserOrderRequest",
          "responseMessageName": "FindEnabledUserOrderResponse",
          "code": "rpc findEnabledUserOrder(FindEnabledUserOrderRequest) returns (FindEnabledUserOrderResponse);",
          "doc": "查看订单",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "cancelUserOrder",
          "requestMessageName": "CancelUserOrderRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc cancelUserOrder(CancelUserOrderRequest) returns (RPCSuccess);",
          "doc": "取消订单",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "finishUserOrder",
          "requestMessageName": "FinishUserOrderRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc finishUserOrder(FinishUserOrderRequest) returns (RPCSuccess);",
          "doc": "完成订单",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countEnabledUserOrders",
          "requestMessageName": "CountEnabledUserOrdersRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countEnabledUserOrders(CountEnabledUserOrdersRequest) returns (RPCCountResponse);",
          "doc": "计算订单数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledUserOrders",
          "requestMessageName": "ListEnabledUserOrdersRequest",
          "responseMessageName": "ListEnabledUserOrdersResponse",
          "code": "rpc listEnabledUserOrders(ListEnabledUserOrdersRequest) returns (ListEnabledUserOrdersResponse);",
          "doc": "列出单页订单",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "notifyUserOrderPayment",
          "requestMessageName": "NotifyUserOrderPaymentRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc notifyUserOrderPayment(NotifyUserOrderPaymentRequest) returns (RPCSuccess);",
          "doc": "订单支付通知",
          "roles": [],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_order.proto",
      "doc": "用户订单相关服务"
    },
    {
      "name": "UserPlanService",
      "methods": [
        {
          "name": "buyUserPlan",
          "requestMessageName": "BuyUserPlanRequest",
          "responseMessageName": "BuyUserPlanResponse",
          "code": "rpc buyUserPlan(BuyUserPlanRequest) returns (BuyUserPlanResponse);",
          "doc": "购买套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "renewUserPlan",
          "requestMessageName": "RenewUserPlanRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc renewUserPlan(RenewUserPlanRequest) returns (RPCSuccess);",
          "doc": "续费套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findEnabledUserPlan",
          "requestMessageName": "FindEnabledUserPlanRequest",
          "responseMessageName": "FindEnabledUserPlanResponse",
          "code": "rpc findEnabledUserPlan(FindEnabledUserPlanRequest) returns (FindEnabledUserPlanResponse);",
          "doc": "查找单个已购套餐信息",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserPlan",
          "requestMessageName": "UpdateUserPlanRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserPlan(UpdateUserPlanRequest) returns (RPCSuccess);",
          "doc": "修改已购套餐",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteUserPlan",
          "requestMessageName": "DeleteUserPlanRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteUserPlan(DeleteUserPlanRequest) returns (RPCSuccess);",
          "doc": "删除已购套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countAllEnabledUserPlans",
          "requestMessageName": "CountAllEnabledUserPlansRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countAllEnabledUserPlans(CountAllEnabledUserPlansRequest) returns (RPCCountResponse);",
          "doc": "计算已购套餐数",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listEnabledUserPlans",
          "requestMessageName": "ListEnabledUserPlansRequest",
          "responseMessageName": "ListEnabledUserPlansResponse",
          "code": "rpc listEnabledUserPlans(ListEnabledUserPlansRequest) returns (ListEnabledUserPlansResponse);",
          "doc": "列出单页已购套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllEnabledUserPlansForServer",
          "requestMessageName": "FindAllEnabledUserPlansForServerRequest",
          "responseMessageName": "FindAllEnabledUserPlansForServerResponse",
          "code": "rpc findAllEnabledUserPlansForServer(FindAllEnabledUserPlansForServerRequest) returns (FindAllEnabledUserPlansForServerResponse);",
          "doc": "查找所有服务可用的套餐",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_plan.proto",
      "doc": "用户购买的套餐管理服务"
    },
    {
      "name": "UserTicketService",
      "methods": [
        {
          "name": "createUserTicket",
          "requestMessageName": "CreateUserTicketRequest",
          "responseMessageName": "CreateUserTicketResponse",
          "code": "rpc createUserTicket(CreateUserTicketRequest) returns (CreateUserTicketResponse);",
          "doc": "创建工单",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserTicket",
          "requestMessageName": "UpdateUserTicketRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserTicket(UpdateUserTicketRequest) returns (RPCSuccess);",
          "doc": "修改工单",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteUserTicket",
          "requestMessageName": "DeleteUserTicketRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteUserTicket(DeleteUserTicketRequest) returns (RPCSuccess);",
          "doc": "删除工单",
          "roles": [
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countUserTickets",
          "requestMessageName": "CountUserTicketsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countUserTickets(CountUserTicketsRequest) returns (RPCCountResponse);",
          "doc": "计算工单数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listUserTickets",
          "requestMessageName": "ListUserTicketsRequest",
          "responseMessageName": "ListUserTicketsResponse",
          "code": "rpc listUserTickets(ListUserTicketsRequest) returns (ListUserTicketsResponse);",
          "doc": "列出单页工单",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findUserTicket",
          "requestMessageName": "FindUserTicketRequest",
          "responseMessageName": "FindUserTicketResponse",
          "code": "rpc findUserTicket(FindUserTicketRequest) returns (FindUserTicketResponse);",
          "doc": "查找单个工单",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_ticket.proto",
      "doc": "工单服务"
    },
    {
      "name": "UserTicketCategoryService",
      "methods": [
        {
          "name": "createUserTicketCategory",
          "requestMessageName": "CreateUserTicketCategoryRequest",
          "responseMessageName": "CreateUserTicketCategoryResponse",
          "code": "rpc createUserTicketCategory(CreateUserTicketCategoryRequest) returns (CreateUserTicketCategoryResponse);",
          "doc": "创建分类",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "updateUserTicketCategory",
          "requestMessageName": "UpdateUserTicketCategoryRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc updateUserTicketCategory(UpdateUserTicketCategoryRequest) returns (RPCSuccess);",
          "doc": "修改分类",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteUserTicketCategory",
          "requestMessageName": "DeleteUserTicketCategoryRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteUserTicketCategory(DeleteUserTicketCategoryRequest) returns (RPCSuccess);",
          "doc": "删除分类",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllUserTicketCategories",
          "requestMessageName": "FindAllUserTicketCategoriesRequest",
          "responseMessageName": "FindAllUserTicketCategoriesResponse",
          "code": "rpc findAllUserTicketCategories(FindAllUserTicketCategoriesRequest) returns (FindAllUserTicketCategoriesResponse);",
          "doc": "查找所有分类",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "findAllAvailableUserTicketCategories",
          "requestMessageName": "FindAllAvailableUserTicketCategoriesRequest",
          "responseMessageName": "FindAllAvailableUserTicketCategoriesResponse",
          "code": "rpc findAllAvailableUserTicketCategories(FindAllAvailableUserTicketCategoriesRequest) returns (FindAllAvailableUserTicketCategoriesResponse);",
          "doc": "查找所有启用中的分类",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "findUserTicketCategory",
          "requestMessageName": "FindUserTicketCategoryRequest",
          "responseMessageName": "FindUserTicketCategoryResponse",
          "code": "rpc findUserTicketCategory(FindUserTicketCategoryRequest) returns (FindUserTicketCategoryResponse);",
          "doc": "查询单个分类",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_ticket_category.proto",
      "doc": "工单分类服务"
    },
    {
      "name": "UserTicketLogService",
      "methods": [
        {
          "name": "createUserTicketLog",
          "requestMessageName": "CreateUserTicketLogRequest",
          "responseMessageName": "CreateUserTicketLogResponse",
          "code": "rpc createUserTicketLog(CreateUserTicketLogRequest) returns (CreateUserTicketLogResponse);",
          "doc": "创建日志",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteUserTicketLog",
          "requestMessageName": "DeleteUserTicketLogRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteUserTicketLog(DeleteUserTicketLogRequest) returns (RPCSuccess);",
          "doc": "删除日志",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "countUserTicketLogs",
          "requestMessageName": "CountUserTicketLogsRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countUserTicketLogs(CountUserTicketLogsRequest) returns (RPCCountResponse);",
          "doc": "查询日志数量",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        },
        {
          "name": "listUserTicketLogs",
          "requestMessageName": "ListUserTicketLogsRequest",
          "responseMessageName": "ListUserTicketLogsResponse",
          "code": "rpc listUserTicketLogs(ListUserTicketLogsRequest) returns (ListUserTicketLogsResponse);",
          "doc": "列出单页日志",
          "roles": [
            "admin",
            "user"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_ticket_log.proto",
      "doc": "工单日志服务"
    },
    {
      "name": "UserTrafficBillService",
      "methods": [
        {
          "name": "findUserTrafficBills",
          "requestMessageName": "FindUserTrafficBillsRequest",
          "responseMessageName": "FindUserTrafficBillsResponse",
          "code": "rpc findUserTrafficBills(FindUserTrafficBillsRequest) returns (FindUserTrafficBillsResponse);",
          "doc": "列出某个账单下的流量带宽子账单",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_traffic_bill.proto",
      "doc": "用户流量带宽子账单服务"
    },
    {
      "name": "UserTrafficPackageService",
      "methods": [
        {
          "name": "createUserTrafficPackage",
          "requestMessageName": "CreateUserTrafficPackageRequest",
          "responseMessageName": "CreateUserTrafficPackageResponse",
          "code": "rpc createUserTrafficPackage(CreateUserTrafficPackageRequest) returns (CreateUserTrafficPackageResponse);",
          "doc": "创建用户流量包",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "buyUserTrafficPackage",
          "requestMessageName": "BuyUserTrafficPackageRequest",
          "responseMessageName": "BuyUserTrafficPackageResponse",
          "code": "rpc buyUserTrafficPackage(BuyUserTrafficPackageRequest) returns (BuyUserTrafficPackageResponse);",
          "doc": "购买用户流量包",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "countUserTrafficPackages",
          "requestMessageName": "CountUserTrafficPackagesRequest",
          "responseMessageName": "RPCCountResponse",
          "code": "rpc countUserTrafficPackages(CountUserTrafficPackagesRequest) returns (RPCCountResponse);",
          "doc": "查询当前流量包数量",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "listUserTrafficPackages",
          "requestMessageName": "ListUserTrafficPackagesRequest",
          "responseMessageName": "ListUserTrafficPackagesResponse",
          "code": "rpc listUserTrafficPackages(ListUserTrafficPackagesRequest) returns (ListUserTrafficPackagesResponse);",
          "doc": "列出单页流量包",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        },
        {
          "name": "deleteUserTrafficPackage",
          "requestMessageName": "DeleteUserTrafficPackageRequest",
          "responseMessageName": "RPCSuccess",
          "code": "rpc deleteUserTrafficPackage(DeleteUserTrafficPackageRequest) returns (RPCSuccess);",
          "doc": "删除流量包",
          "roles": [
            "admin"
          ],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_traffic_package.proto",
      "doc": "用户流量包服务"
    },
    {
      "name": "UserVerifyCodeService",
      "methods": [
        {
          "name": "sendUserVerifyCode",
          "requestMessageName": "SendUserVerifyCodeRequest",
          "responseMessageName": "SendUserVerifyCodeResponse",
          "code": "rpc sendUserVerifyCode(SendUserVerifyCodeRequest) returns (SendUserVerifyCodeResponse);",
          "doc": "发送重置密码验证码",
          "roles": [],
          "isDeprecated": false
        },
        {
          "name": "validateUserVerifyCode",
          "requestMessageName": "ValidateUserVerifyCodeRequest",
          "responseMessageName": "ValidateUserVerifyCodeResponse",
          "code": "rpc validateUserVerifyCode(ValidateUserVerifyCodeRequest) returns (ValidateUserVerifyCodeResponse);",
          "doc": "校验验证码",
          "roles": [],
          "isDeprecated": false
        }
      ],
      "filename": "service_user_verify_code.proto",
      "doc": "用户验证码服务"
    }
  ],
  "messages": [
    {
      "name": "ACMEProvider",
      "code": "message ACMEProvider {\n\tstring name = 1;\n\tstring code = 2;\n\tstring description = 4;\n\tstring  apiURL = 5;\n\tbool requireEAB = 6;\n\tstring eabDescription = 7;\n}",
      "doc": ""
    },
    {
      "name": "ACMEProviderAccount",
      "code": "message ACMEProviderAccount {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tstring providerCode = 4;\n\tstring eabKid = 5;\n\tstring eabKey = 6;\n\tstring error = 7;\n\n\tACMEProvider acmeProvider = 30;\n}",
      "doc": ""
    },
    {
      "name": "ACMETask",
      "code": "message ACMETask {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring dnsDomain = 3;\n\trepeated string domains = 4;\n\tint64 createdAt = 5;\n\tbool autoRenew = 6;\n\tstring authType = 7;\n\tstring authURL = 8;\n\n\tACMEUser acmeUser = 30;\n\tDNSProvider dnsProvider = 31;\n\tSSLCert sslCert = 32;\n\tACMETaskLog latestACMETaskLog = 33;\n}",
      "doc": ""
    },
    {
      "name": "ACMETaskLog",
      "code": "message ACMETaskLog {\n\tint64 id = 1;\n\tbool isOk = 2;\n\tstring error = 3;\n\tint64 createdAt = 4;\n}",
      "doc": "ACME任务日志"
    },
    {
      "name": "ACMEUser",
      "code": "message ACMEUser {\n\tint64 id = 1;\n\tstring email = 2;\n\tstring description = 3;\n\tint64 createdAt = 4;\n\tstring acmeProviderCode = 5;\n\n\tACMEProvider acmeProvider = 30;\n\tACMEProviderAccount acmeProviderAccount = 31;\n}",
      "doc": ""
    },
    {
      "name": "ADNetwork",
      "code": "message ADNetwork {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring description = 4;\n}",
      "doc": "高防线路"
    },
    {
      "name": "ADPackage",
      "code": "message ADPackage {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tint64 adNetworkId = 3;\n\tint32 protectionBandwidthSize = 4;\n\tstring protectionBandwidthUnit = 5;\n\tint32 serverBandwidthSize = 6;\n\tstring serverBandwidthUnit = 7;\n\n\tADNetwork adNetwork = 30;\n\tstring summary = 31; // 概述\n\tint64 countIdleADPackageInstances = 32; // 剩余可用的实例数，只有在获取可用高防产品的时候才会返回\n}",
      "doc": "高防产品"
    },
    {
      "name": "ADPackageInstance",
      "code": "message ADPackageInstance {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tint64 adPackageId = 3;\n\tint64 nodeClusterId = 4;\n\trepeated int64 nodeIds = 5;\n\trepeated string ipAddresses = 6;\n\tint64 userId = 7; // 租用用户ID\n\tstring userDayTo = 8; // 租用日期\n\tint64 userInstanceId = 9; // 当前绑定的用户实例ID\n\n\tNodeCluster nodeCluster = 30;\n\tADPackage adPackage = 31;\n\tUser user = 32;\n}",
      "doc": "高防产品实例"
    },
    {
      "name": "ADPackagePeriod",
      "code": "message ADPackagePeriod {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tint32 count = 3;\n\tstring unit = 4;\n\tint32 months = 5;\n}",
      "doc": "高防实例有效期"
    },
    {
      "name": "ADPackagePrice",
      "code": "message ADPackagePrice {\n\tint64 adPackageId = 1;\n\tint64 adPackagePeriodId = 2;\n\tdouble price = 3;\n}",
      "doc": "高防产品价格定义"
    },
    {
      "name": "APIMethodStat",
      "code": "message APIMethodStat {\n\tint64 id = 1;\n\tint64 apiNodeId = 2;\n\tstring method = 3;\n\tstring tag = 4;\n\tfloat costMs = 5;\n\tfloat peekMs = 6;\n\tint64  countCalls = 7;\n\n\tAPINode apiNode = 30;\n}",
      "doc": ""
    },
    {
      "name": "APINode",
      "code": "message APINode {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tint64 nodeClusterId = 3;\n\tstring uniqueId = 4;\n\tstring secret = 5;\n\tstring name = 6;\n\tstring description = 7;\n\tbytes httpJSON = 8;\n\tbytes httpsJSON = 9;\n\tbool RestIsOn = 13;\n\tbytes restHTTPJSON = 14;\n\tbytes restHTTPSJSON = 15;\n\tbytes accessAddrsJSON = 10;\n\trepeated string accessAddrs = 11;\n\tbytes statusJSON = 12;\n\tbool isPrimary = 16;\n\n\tbool debug = 30;\n\tstring instanceCode = 31;\n}",
      "doc": ""
    },
    {
      "name": "APIToken",
      "code": "message APIToken {\n\tint64 id = 1;\n\tstring nodeId = 2;\n\tstring secret = 3;\n\tstring role = 4;\n}",
      "doc": "API令牌"
    },
    {
      "name": "AddHTTPFirewallRuleGroupSetRequest",
      "code": "message AddHTTPFirewallRuleGroupSetRequest {\n\tint64 firewallRuleGroupId = 1;\n\tbytes firewallRuleSetConfigJSON = 2;\n}",
      "doc": "添加规则集"
    },
    {
      "name": "Admin",
      "code": "message Admin {\n\tint64 id = 1; // ID\n\tstring fullname = 2; // 全称\n\tstring username = 3; // 用户名\n\tbool isOn = 4; // 是否启用\n\tbool isSuper = 5; // 是否为超级用户\n\tint64 createdAt = 6; // 创建时间\n\trepeated AdminModule Modules = 7; // 有权限的模块\n\tLogin otpLogin = 8; // OTP认证\n\tbool canLogin = 9; // 是否可以登录\n\tbool hasWeakPassword = 10; // 是否设置了弱密码，只有超级管理员能看到此项\n}",
      "doc": ""
    },
    {
      "name": "AdminModule",
      "code": "message AdminModule {\n\tbool allowAll = 1;\n\tstring code = 2;\n\trepeated string actions = 3;\n}",
      "doc": ""
    },
    {
      "name": "AdminModuleList",
      "code": "message AdminModuleList {\n\tint64 adminId = 1;\n\tbool isSuper = 2;\n\trepeated AdminModule Modules = 3;\n\tstring fullname = 4;\n\tstring theme = 5; // 风格模板\n\tstring lang = 6; // 界面语言\n}",
      "doc": ""
    },
    {
      "name": "AuthorityKey",
      "code": "message AuthorityKey {\n\tstring value = 1;\n\tstring dayFrom = 2;\n\tstring dayTo = 3;\n\tstring hostname = 4;\n\trepeated string macAddresses = 5;\n\tint64 updatedAt = 6;\n\tstring company = 7;\n\tint32 nodes = 8;\n\trepeated string components = 9;\n\tstring edition = 10;\n\tstring requestCode = 11;\n}",
      "doc": "版本认证"
    },
    {
      "name": "AuthorityNode",
      "code": "message AuthorityNode {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring uniqueId = 3;\n\tstring secret = 4;\n\tstring name = 5;\n\tstring description = 6;\n\tbytes statusJSON = 7;\n}",
      "doc": ""
    },
    {
      "name": "BasicNode",
      "code": "message BasicNode {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tbool isUp = 4;\n\tint32 level = 5;\n\n\tNodeCluster nodeCluster = 30; // 主集群\n}",
      "doc": ""
    },
    {
      "name": "BuyNSUserPlanRequest",
      "code": "message BuyNSUserPlanRequest{\n\tint64 userId = 1;\n\tint64 planId = 2;\n\tstring period = 3;\n}",
      "doc": "使用余额购买用户套餐"
    },
    {
      "name": "BuyNSUserPlanResponse",
      "code": "message BuyNSUserPlanResponse {\n\tint64 userPlanId = 1;\n}",
      "doc": ""
    },
    {
      "name": "BuyUserADInstanceRequest",
      "code": "message BuyUserADInstanceRequest {\n\tint64 userId = 1;\n\tint64 adPackageId = 2;\n\tint64 adPackagePeriodId = 3;\n\tint32 count = 4;\n}",
      "doc": "购买用户高防实例"
    },
    {
      "name": "BuyUserADInstanceResponse",
      "code": "message BuyUserADInstanceResponse {\n\trepeated int64 userADInstanceIds = 1;\n}",
      "doc": ""
    },
    {
      "name": "BuyUserPlanRequest",
      "code": "message BuyUserPlanRequest{\n\tint64 userId = 1;\n\tint64 planId = 2;\n\tstring dayTo = 3;\n\tstring period = 4;\n\tint32  countPeriod = 5;\n\tstring name = 6;\n}",
      "doc": "添加已购套餐"
    },
    {
      "name": "BuyUserPlanResponse",
      "code": "message BuyUserPlanResponse {\n\tint64 userPlanId = 1;\n}",
      "doc": ""
    },
    {
      "name": "BuyUserTrafficPackageRequest",
      "code": "message BuyUserTrafficPackageRequest {\n\tint64 userId = 1;\n\tint64 trafficPackageId = 2;\n\tint64 nodeRegionId = 3;\n\tint64 trafficPackagePeriodId = 4;\n\tint32 count = 5;\n}",
      "doc": "购买用户流量包"
    },
    {
      "name": "BuyUserTrafficPackageResponse",
      "code": "message BuyUserTrafficPackageResponse {\n\trepeated int64 userTrafficPackageIds = 1;\n}",
      "doc": ""
    },
    {
      "name": "CalculatePriceRequest",
      "code": "message CalculatePriceRequest {\n\tstring priceType = 1;\n\tdouble trafficGB = 2;\n\tdouble bandwidthMB = 3;\n\tint64 nodeRegionId = 4;\n}",
      "doc": "计算费用"
    },
    {
      "name": "CalculatePriceResponse",
      "code": "message CalculatePriceResponse {\n\tdouble amount = 1;\n\tbool hasNodeRegionPrice = 2;\n}",
      "doc": ""
    },
    {
      "name": "CancelUserIdentityRequest",
      "code": "message CancelUserIdentityRequest {\n\tint64 userIdentityId = 1;\n}",
      "doc": "取消提交身份审核认证信息"
    },
    {
      "name": "CancelUserOrderRequest",
      "code": "message CancelUserOrderRequest {\n\tstring code = 1;\n}",
      "doc": "取消订单"
    },
    {
      "name": "CheckAdminExistsRequest",
      "code": "message CheckAdminExistsRequest {\n\tint64 adminId = 1;\n}",
      "doc": "检查管理员是否存在"
    },
    {
      "name": "CheckAdminExistsResponse",
      "code": "message CheckAdminExistsResponse {\n\tbool isOk = 1;\n\tstring message = 2;\n}",
      "doc": ""
    },
    {
      "name": "CheckAdminOTPWithUsernameRequest",
      "code": "message CheckAdminOTPWithUsernameRequest {\n\tstring username = 1;\n}",
      "doc": "根据用户名检查是否需要输入OTP"
    },
    {
      "name": "CheckAdminOTPWithUsernameResponse",
      "code": "message CheckAdminOTPWithUsernameResponse {\n\tbool requireOTP = 1;\n}",
      "doc": ""
    },
    {
      "name": "CheckAdminUsernameRequest",
      "code": "message CheckAdminUsernameRequest {\n\tint64 adminId = 1;\n\tstring username = 2;\n}",
      "doc": "检查用户名是否存在"
    },
    {
      "name": "CheckAdminUsernameResponse",
      "code": "message CheckAdminUsernameResponse {\n\tbool exists = 1;\n}",
      "doc": ""
    },
    {
      "name": "CheckCitiesWithIPLibraryFileIdRequest",
      "code": "message CheckCitiesWithIPLibraryFileIdRequest{\n\tint64 ipLibraryFileId = 1;\n}",
      "doc": "检查城市/市"
    },
    {
      "name": "CheckCitiesWithIPLibraryFileIdResponse",
      "code": "message CheckCitiesWithIPLibraryFileIdResponse {\n\trepeated MissingCity missingCities = 1;\n\n\n\tmessage MissingCity {\n\t\tstring countryName = 1;\n\t\tstring provinceName = 2;\n\t\tstring cityName = 3;\n\t\trepeated RegionCity similarCities = 4;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "CheckCountriesWithIPLibraryFileIdRequest",
      "code": "message CheckCountriesWithIPLibraryFileIdRequest {\n\tint64 ipLibraryFileId = 1;\n}",
      "doc": "检查国家/地区"
    },
    {
      "name": "CheckCountriesWithIPLibraryFileIdResponse",
      "code": "message CheckCountriesWithIPLibraryFileIdResponse {\n\trepeated MissingCountry missingCountries = 1;\n\n\n\tmessage MissingCountry {\n\t\tstring countryName = 1;\n\t\trepeated RegionCountry similarCountries = 2;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "CheckDBNodeStatusRequest",
      "code": "message CheckDBNodeStatusRequest {\n\tint64 dbNodeId = 1;\n}",
      "doc": "检查数据库节点状态"
    },
    {
      "name": "CheckDBNodeStatusResponse",
      "code": "message CheckDBNodeStatusResponse  {\n\tDBNodeStatus dbNodeStatus = 1;\n}",
      "doc": ""
    },
    {
      "name": "CheckHTTPFirewallPolicyIPStatusRequest",
      "code": "message CheckHTTPFirewallPolicyIPStatusRequest {\n\tint64 httpFirewallPolicyId = 1;\n\tstring ip = 2;\n}",
      "doc": "检查IP状态"
    },
    {
      "name": "CheckHTTPFirewallPolicyIPStatusResponse",
      "code": "message CheckHTTPFirewallPolicyIPStatusResponse {\n\tbool isOk = 1; // 是否查询成功\n\tstring error = 2;\n\tbool isFound = 3; // 是否找到\n\tbool isAllowed = 4; // 是否允许\n\tIPList ipList = 5; // 匹配的IPList\n\tIPItem ipItem = 6; // 匹配的IPItem\n\tRegionCountry regionCountry = 7; // 匹配到封禁的地区\n\tRegionProvince regionProvince = 8; // 匹配到封禁的省份\n}",
      "doc": ""
    },
    {
      "name": "CheckIPItemStatusRequest",
      "code": "message CheckIPItemStatusRequest {\n\tint64 ipListId = 1;\n\tstring ip = 2;\n}",
      "doc": "检查IP状态"
    },
    {
      "name": "CheckIPItemStatusResponse",
      "code": "message CheckIPItemStatusResponse {\n\tbool isOk = 1; // 是否查询成功\n\tstring error = 2;\n\tbool isFound = 3; // 是否找到\n\tbool isAllowed = 4; // 是否允许\n\tIPItem ipItem = 5; // 匹配的IPItem\n}",
      "doc": ""
    },
    {
      "name": "CheckNSNodeLatestVersionRequest",
      "code": "message CheckNSNodeLatestVersionRequest {\n\tstring os = 1;\n\tstring arch = 2;\n\tstring currentVersion = 3;\n}",
      "doc": "检查NS节点新版本"
    },
    {
      "name": "CheckNSNodeLatestVersionResponse",
      "code": "message CheckNSNodeLatestVersionResponse {\n\tbool hasNewVersion = 1;\n\tstring newVersion = 2;\n}",
      "doc": ""
    },
    {
      "name": "CheckNodeClusterDNSChangesRequest",
      "code": "message CheckNodeClusterDNSChangesRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "检查集群的DNS是否有变化"
    },
    {
      "name": "CheckNodeClusterDNSChangesResponse",
      "code": "message CheckNodeClusterDNSChangesResponse {\n\tbool isChanged = 1;\n}",
      "doc": ""
    },
    {
      "name": "CheckNodeClusterDNSNameRequest",
      "code": "message CheckNodeClusterDNSNameRequest {\n\tint64 nodeClusterId = 1;\n\tstring dnsName = 2;\n}",
      "doc": "检查集群域名是否已经被使用"
    },
    {
      "name": "CheckNodeClusterDNSNameResponse",
      "code": "message CheckNodeClusterDNSNameResponse {\n\tbool isUsed = 1;\n}",
      "doc": ""
    },
    {
      "name": "CheckNodeLatestVersionRequest",
      "code": "message CheckNodeLatestVersionRequest {\n\tstring os = 1;\n\tstring arch = 2;\n\tstring currentVersion = 3;\n}",
      "doc": "检查新版本"
    },
    {
      "name": "CheckNodeLatestVersionResponse",
      "code": "message CheckNodeLatestVersionResponse {\n\tbool hasNewVersion = 1;\n\tstring newVersion = 2;\n}",
      "doc": ""
    },
    {
      "name": "CheckPortIsUsingInNodeClusterRequest",
      "code": "message CheckPortIsUsingInNodeClusterRequest {\n\tint32 port = 1;\n\tint64 nodeClusterId = 2;\n\tint64 excludeServerId = 3;\n\tstring excludeProtocol = 4;\n\tstring protocolFamily = 5;\n}",
      "doc": "检查端口是否已经被使用"
    },
    {
      "name": "CheckPortIsUsingInNodeClusterResponse",
      "code": "message CheckPortIsUsingInNodeClusterResponse {\n\tbool isUsing = 1;\n}",
      "doc": ""
    },
    {
      "name": "CheckProvidersWithIPLibraryFileIdRequest",
      "code": "message CheckProvidersWithIPLibraryFileIdRequest{\n\tint64 ipLibraryFileId = 1;\n}",
      "doc": "检查ISP运营商"
    },
    {
      "name": "CheckProvidersWithIPLibraryFileIdResponse",
      "code": "message CheckProvidersWithIPLibraryFileIdResponse {\n\trepeated MissingProvider missingProviders = 1;\n\n\n\tmessage MissingProvider {\n\t\tstring providerName = 1;\n\t\trepeated RegionProvider similarProviders = 2;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "CheckProvincesWithIPLibraryFileIdRequest",
      "code": "message CheckProvincesWithIPLibraryFileIdRequest{\n\tint64 ipLibraryFileId = 1;\n}",
      "doc": "检查省份/州"
    },
    {
      "name": "CheckProvincesWithIPLibraryFileIdResponse",
      "code": "message CheckProvincesWithIPLibraryFileIdResponse {\n\trepeated MissingProvince missingProvinces = 1;\n\n\n\tmessage MissingProvince {\n\t\tstring countryName = 1;\n\t\tstring provinceName = 2;\n\t\trepeated RegionProvince similarProvinces = 3;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "CheckScriptUpdatesRequest",
      "code": "message CheckScriptUpdatesRequest {\n\tint64  userId = 1;\n}",
      "doc": "检查脚本是否需要有更新"
    },
    {
      "name": "CheckScriptUpdatesResponse",
      "code": "message CheckScriptUpdatesResponse {\n\tbool hasUpdates = 1;\n\tint64 version = 2;\n}",
      "doc": ""
    },
    {
      "name": "CheckServerNameDuplicationInNodeClusterRequest",
      "code": "message CheckServerNameDuplicationInNodeClusterRequest {\n\tint64 nodeClusterId = 1;\n\trepeated string serverNames = 2; // 可以同时检查一批域名\n\tint64 excludeServerId = 3; // 要排除的网站ID\n\tbool supportWildcard = 4;// 支持泛解析\n}",
      "doc": "检查域名是否已经存在"
    },
    {
      "name": "CheckServerNameDuplicationInNodeClusterResponse",
      "code": "message CheckServerNameDuplicationInNodeClusterResponse {\n\trepeated string duplicatedServerNames = 1;\n}",
      "doc": ""
    },
    {
      "name": "CheckTownsWithIPLibraryFileIdRequest",
      "code": "message CheckTownsWithIPLibraryFileIdRequest {\n\tint64 ipLibraryFileId = 1;\n}",
      "doc": "检查区县"
    },
    {
      "name": "CheckTownsWithIPLibraryFileIdResponse",
      "code": "message CheckTownsWithIPLibraryFileIdResponse {\n\trepeated MissingTown missingTowns = 1;\n\n\n\tmessage MissingTown {\n\t\tstring countryName = 1;\n\t\tstring provinceName = 2;\n\t\tstring cityName = 3;\n\t\tstring townName = 4;\n\t\trepeated RegionTown similarTowns = 5;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "CheckUserEmailRequest",
      "code": "message CheckUserEmailRequest {\n\tstring email = 1; // 邮箱地址\n}",
      "doc": "检查邮箱是否已被验证"
    },
    {
      "name": "CheckUserEmailResponse",
      "code": "message CheckUserEmailResponse {\n\tbool exists = 1; // 是否已被使用\n}",
      "doc": ""
    },
    {
      "name": "CheckUserIdentityIsSubmittedRequest",
      "code": "message CheckUserIdentityIsSubmittedRequest {\n\tint64 userId = 1;\n}",
      "doc": "检查是否正在审核中"
    },
    {
      "name": "CheckUserIdentityIsSubmittedResponse",
      "code": "message CheckUserIdentityIsSubmittedResponse {\n\tbool isSubmitted = 1;\n}",
      "doc": ""
    },
    {
      "name": "CheckUserOTPWithUsernameRequest",
      "code": "message CheckUserOTPWithUsernameRequest {\n\tstring username = 1;\n}",
      "doc": "根据用户名检查是否需要输入OTP"
    },
    {
      "name": "CheckUserOTPWithUsernameResponse",
      "code": "message CheckUserOTPWithUsernameResponse {\n\tbool requireOTP = 1;\n}",
      "doc": ""
    },
    {
      "name": "CheckUserServerRequest",
      "code": "message CheckUserServerRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "检查网站是否属于某个用户"
    },
    {
      "name": "CheckUserServersStateRequest",
      "code": "message CheckUserServersStateRequest {\n\tint64 userId = 1;\n}",
      "doc": "检查用户服务可用状态"
    },
    {
      "name": "CheckUserServersStateResponse",
      "code": "message CheckUserServersStateResponse {\n\tbool isEnabled = 1;\n}",
      "doc": ""
    },
    {
      "name": "CheckUserUsernameRequest",
      "code": "message CheckUserUsernameRequest {\n\tint64 userId = 1;\n\tstring username = 2;\n}",
      "doc": "检查用户名是否存在"
    },
    {
      "name": "CheckUserUsernameResponse",
      "code": "message CheckUserUsernameResponse {\n\tbool exists = 1;\n}",
      "doc": ""
    },
    {
      "name": "CleanLogsPermanentlyRequest",
      "code": "message CleanLogsPermanentlyRequest {\n\tint32 days = 1;\n\tbool clearAll = 2;\n}",
      "doc": "清理"
    },
    {
      "name": "ClientAgent",
      "code": "message ClientAgent {\n\tint64 id = 1;\n\tstring name = 2;\n\tstring code = 3;\n\tstring description = 4;\n\tint64 countIPs = 5;\n}",
      "doc": ""
    },
    {
      "name": "ClientAgentIP",
      "code": "message ClientAgentIP {\n\tint64 id = 1;\n\tstring ip = 2;\n\tstring ptr = 3;\n\n\tClientAgent clientAgent = 30;\n}",
      "doc": ""
    },
    {
      "name": "ClientBrowser",
      "code": "message ClientBrowser {\n\tint64 id = 1;\n\tstring name = 2;\n}",
      "doc": ""
    },
    {
      "name": "ClientSystem",
      "code": "message ClientSystem {\n\tint64 id = 1;\n\tstring name = 2;\n}",
      "doc": ""
    },
    {
      "name": "ClusterTask",
      "code": "message ClusterTask {\n\tint64 clusterId = 1;\n\tstring clusterName = 2;\n\trepeated NodeTask nodeTasks = 3;\n}",
      "doc": ""
    },
    {
      "name": "ComposeAdminDashboardRequest",
      "code": "message ComposeAdminDashboardRequest {\n\tstring apiVersion = 1;\n}",
      "doc": "取得管理员Dashboard数据"
    },
    {
      "name": "ComposeAdminDashboardResponse",
      "code": "message ComposeAdminDashboardResponse {\n\tint64 countNodeClusters = 1;\n\tint64 countNodes = 2;\n\tint64 countOfflineNodes = 9;\n\tint64 countServers = 3;\n\tint64 countAuditingServers = 13;\n\tint64 countUsers = 4;\n\tint64 countAPINodes = 5;\n\tint64 countOfflineAPINodes = 10;\n\tint64 countDBNodes = 6;\n\tint64 countOfflineDBNodes = 11;\n\tint64 countUserNodes = 7;\n\tint64 countOfflineUserNodes = 12;\n\tint64 defaultNodeClusterId = 8;\n\n\trepeated DailyTrafficStat dailyTrafficStats = 30;\n\trepeated HourlyTrafficStat hourlyTrafficStats = 31;\n\n\tUpgradeInfo nodeUpgradeInfo = 32;\n\tUpgradeInfo apiNodeUpgradeInfo = 33;\n\tUpgradeInfo userNodeUpgradeInfo = 35;\n\tUpgradeInfo authorityNodeUpgradeInfo = 36;\n\tUpgradeInfo nsNodeUpgradeInfo = 37;\n\tUpgradeInfo reportNodeUpgradeInfo = 41;\n\n\trepeated NodeStat topNodeStats = 38;\n\trepeated DomainStat topDomainStats = 39;\n\trepeated CountryStat topCountryStats = 42;\n\n\trepeated MetricDataChart metricDataCharts = 40;\n\n\n\tmessage DailyTrafficStat {\n\t\tstring day = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\n\tmessage HourlyTrafficStat {\n\t\tstring hour = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\n\tmessage NodeStat {\n\t\tint64 nodeId = 1;\n\t\tstring nodeName = 2;\n\t\tint64 countRequests = 3;\n\t\tint64 bytes = 4;\n\t}\n\n\n\tmessage DomainStat {\n\t\tint64 serverId = 1;\n\t\tstring domain = 2;\n\t\tint64 countRequests = 3;\n\t\tint64 bytes = 4;\n\t}\n\n\n\tmessage CountryStat {\n\t\tstring countryName = 1;\n\t\tint64 bytes = 2;\n\t\tint64 countRequests = 3;\n\t\tfloat percent = 4; // 流量占比\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\t// 节点升级信息\n\n\tmessage UpgradeInfo {\n\t\tint64 countNodes = 1; // 节点数\n\t\tstring newVersion = 2; // 新版本\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ComposeAllUserServersConfigRequest",
      "code": "message ComposeAllUserServersConfigRequest {\n\tint64 userId = 1;\n}",
      "doc": "查找某个用户下的网站配置"
    },
    {
      "name": "ComposeAllUserServersConfigResponse",
      "code": "message ComposeAllUserServersConfigResponse {\n\tbytes serversConfigJSON = 1; // [server config1, server config2, ...]\n}",
      "doc": ""
    },
    {
      "name": "ComposeFirewallGlobalBoardRequest",
      "code": "message ComposeFirewallGlobalBoardRequest {\n\n}",
      "doc": "组合看板数据"
    },
    {
      "name": "ComposeFirewallGlobalBoardResponse",
      "code": "message ComposeFirewallGlobalBoardResponse {\n\tint64 countDailyLogs = 1;\n\tint64 countDailyBlocks = 2;\n\tint64 countDailyCaptcha = 3;\n\tint64 countWeeklyBlocks = 4;\n\n\trepeated HTTPFirewallRuleGroupStat httpFirewallRuleGroups = 30;\n\trepeated DailyStat dailyStats = 31;\n\trepeated HourlyStat hourlyStats = 32;\n\trepeated NodeStat topNodeStats = 33;\n\trepeated DomainStat topDomainStats = 34;\n\trepeated CountryStat topCountryStats = 35;\n\n\n\tmessage HTTPFirewallRuleGroupStat {\n\t\tHTTPFirewallRuleGroup httpFirewallRuleGroup = 1;\n\t\tint64 count = 2;\n\t}\n\n\n\tmessage HourlyStat {\n\t\tstring hour = 1;\n\t\tint64 countLogs = 2;\n\t\tint64 countCaptcha = 3;\n\t\tint64 countBlocks = 4;\n\t}\n\n\n\tmessage DailyStat {\n\t\tstring day = 1;\n\t\tint64 countLogs = 2;\n\t\tint64 countCaptcha = 3;\n\t\tint64 countBlocks = 4;\n\t}\n\n\n\tmessage NodeStat {\n\t\tint64 nodeId = 1;\n\t\tstring nodeName = 2;\n\t\tint64 countRequests = 3;\n\t\tint64 bytes = 4;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\n\tmessage DomainStat {\n\t\tint64 serverId = 1;\n\t\tstring domain = 2;\n\t\tint64 countRequests = 3;\n\t\tint64 bytes = 4;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\n\tmessage CountryStat {\n\t\tstring countryName = 1;\n\t\tint64 bytes = 2;\n\t\tint64 countRequests = 3;\n\t\tfloat percent = 4; // 流量占比\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ComposeNSBoardRequest",
      "code": "message ComposeNSBoardRequest {\n\n}",
      "doc": "组合看板数据"
    },
    {
      "name": "ComposeNSBoardResponse",
      "code": "message ComposeNSBoardResponse {\n\tint64 countNSDomains = 1;\n\tint64 countNSRecords = 2;\n\tint64 countNSClusters = 3;\n\tint64 countNSNodes = 4;\n\tint64 countOfflineNSNodes = 5;\n\n\trepeated DailyTrafficStat dailyTrafficStats = 30;\n\trepeated HourlyTrafficStat hourlyTrafficStats = 31;\n\trepeated NodeStat topNSNodeStats = 32;\n\trepeated DomainStat topNSDomainStats = 33;\n\trepeated NodeValue cpuNodeValues = 34;\n\trepeated NodeValue memoryNodeValues = 35;\n\trepeated NodeValue loadNodeValues = 36;\n\n\n\tmessage DailyTrafficStat {\n\t\tstring day = 1;\n\t\tint64 bytes = 2;\n\t\tint64 countRequests = 3;\n\t}\n\n\n\tmessage HourlyTrafficStat {\n\t\tstring hour = 1;\n\t\tint64 bytes = 2;\n\t\tint64 countRequests = 3;\n\t}\n\n\n\tmessage NodeStat {\n\t\tint64 nsClusterId = 1;\n\t\tint64 nsNodeId = 2;\n\t\tstring nsNodeName = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 bytes = 5;\n\t}\n\n\n\tmessage DomainStat {\n\t\tint64 nsDomainId = 1;\n\t\tstring nsDomainName = 2;\n\t\tint64 countRequests = 3;\n\t\tint64 bytes = 4;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ComposeNSUserBoardRequest",
      "code": "message ComposeNSUserBoardRequest {\n\tint64 userId = 1;\n}",
      "doc": "组合用户看板数据"
    },
    {
      "name": "ComposeNSUserBoardResponse",
      "code": "message ComposeNSUserBoardResponse {\n\tint64 countNSDomains = 1;\n\tint64 countNSRecords = 2;\n\tint64 countNSRoutes = 3;\n\n\tNSUserPlan nsUserPlan = 30;\n\trepeated DomainStat topNSDomainStats = 31;\n\n\n\tmessage DomainStat {\n\t\tint64 nsDomainId = 1;\n\t\tstring nsDomainName = 2;\n\t\tint64 countRequests = 3;\n\t\tint64 bytes = 4;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ComposeScriptConfigsRequest",
      "code": "message ComposeScriptConfigsRequest {\n\n}",
      "doc": "组合脚本配置"
    },
    {
      "name": "ComposeScriptConfigsResponse",
      "code": "message ComposeScriptConfigsResponse {\n\tbytes scriptConfigsJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "ComposeServerConfigRequest",
      "code": "message ComposeServerConfigRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "获取网站配置"
    },
    {
      "name": "ComposeServerConfigResponse",
      "code": "message ComposeServerConfigResponse {\n\tbytes serverConfigJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "ComposeServerHTTPFirewallDashboardRequest",
      "code": "message ComposeServerHTTPFirewallDashboardRequest {\n\tstring day = 1;\n\tint64 userId = 2;\n\tint64 serverId = 3;\n}",
      "doc": "组合服务的Dashboard"
    },
    {
      "name": "ComposeServerHTTPFirewallDashboardResponse",
      "code": "message ComposeServerHTTPFirewallDashboardResponse {\n\tint64 countDailyLog = 1;\n\tint64 countDailyBlock = 2;\n\tint64 countDailyCaptcha = 3;\n\tint64 countWeeklyBlock = 4;\n\tint64 countMonthlyBlock = 5;\n\n\trepeated HTTPFirewallRuleGroupStat httpFirewallRuleGroups = 30;\n\trepeated DailyStat logDailyStats = 31;\n\trepeated DailyStat blockDailyStats = 32;\n\trepeated DailyStat captchaDailyStats = 33;\n\n\n\tmessage HTTPFirewallRuleGroupStat {\n\t\tHTTPFirewallRuleGroup httpFirewallRuleGroup = 1;\n\t\tint64 count = 2;\n\t}\n\n\n\tmessage DailyStat {\n\t\tstring day = 1;\n\t\tint64 count = 2;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ComposeServerStatBoardRequest",
      "code": "message ComposeServerStatBoardRequest {\n\tint64 serverId = 1;\n}",
      "doc": "组合服务看板数据"
    },
    {
      "name": "ComposeServerStatBoardResponse",
      "code": "message ComposeServerStatBoardResponse {\n\tint64 minutelyPeekBandwidthBytes = 5; // 当前带宽（N分钟峰值）\n\tint64 dailyPeekBandwidthBytes = 2; // 当天带宽峰值\n\tint64 monthlyPeekBandwidthBytes = 3; // 当月带宽峰值\n\tint64 lastMonthlyPeekBandwidthBytes = 4; // 上个月带宽峰值\n\n\tint32 bandwidthPercentile = 7;\n\trepeated ServerBandwidthStat minutelyBandwidthStats = 1; // 分钟级的带宽统计\n\tServerBandwidthStat minutelyNthBandwidthStat = 8;\n\n\trepeated DailyTrafficStat dailyTrafficStats = 30;\n\trepeated HourlyTrafficStat hourlyTrafficStats = 31;\n\trepeated NodeStat topNodeStats = 32;\n\trepeated CountryStat topCountryStats = 35;\n\n\trepeated MetricDataChart metricDataCharts = 34;\n\n\n\tmessage DailyTrafficStat {\n\t\tstring day = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\n\tmessage HourlyTrafficStat {\n\t\tstring hour = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\n\tmessage NodeStat {\n\t\tint64 nodeId = 1;\n\t\tstring nodeName = 2;\n\t\tint64 countRequests = 3;\n\t\tint64 bytes = 4;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\n\tmessage CountryStat {\n\t\tstring countryName = 1;\n\t\tint64 bytes = 2;\n\t\tint64 countRequests = 3;\n\t\tfloat percent = 4; // 流量占比\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ComposeServerStatNodeBoardRequest",
      "code": "message ComposeServerStatNodeBoardRequest {\n\tint64 nodeId = 1; // 节点ID\n}",
      "doc": "组合节点看板数据"
    },
    {
      "name": "ComposeServerStatNodeBoardResponse",
      "code": "message ComposeServerStatNodeBoardResponse {\n\tbool isActive = 1;\n\tint64 trafficInBytes = 2;\n\tint64 trafficOutBytes = 3;\n\tint64 countRequests = 4;\n\tint64 countAttackRequests = 5;\n\tint64 countConnections = 6;\n\tint64 cacheDiskSize = 7;\n\tint64 cacheMemorySize = 8;\n\tfloat cpuUsage = 9;\n\tfloat memoryUsage = 10;\n\tint64 memoryTotalSize = 11;\n\tfloat load = 12;\n\tint64 monthlyTrafficBytes = 13; // 当月流量\n\tint64 dailyTrafficBytes = 14; // 当日流量\n\tint64 lastDailyTrafficBytes = 15; // 昨日流量\n\n\trepeated DailyTrafficStat dailyTrafficStats = 31;\n\trepeated HourlyTrafficStat hourlyTrafficStats = 32;\n\n\trepeated NodeValue cpuNodeValues = 34; // CPU数据\n\trepeated NodeValue memoryNodeValues = 35; // 内存数据\n\trepeated NodeValue loadNodeValues = 36; // 负载数据\n\trepeated NodeValue cacheDirsValues = 38; // 缓存目录数据\n\trepeated NodeValue networkPacketsValues = 39; // 网络数据包数据\n\n\trepeated MetricDataChart metricDataCharts = 37;\n\n\n\tmessage DailyTrafficStat {\n\t\tstring day = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\n\tmessage HourlyTrafficStat {\n\t\tstring hour = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ComposeServerStatNodeClusterBoardRequest",
      "code": "message ComposeServerStatNodeClusterBoardRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "组合集群看板数据"
    },
    {
      "name": "ComposeServerStatNodeClusterBoardResponse",
      "code": "message ComposeServerStatNodeClusterBoardResponse {\n\tint64 countActiveNodes = 1; // 在线节点\n\tint64 countInactiveNodes = 2; // 离线节点\n\tint64 countServers = 3; // 服务数量\n\tint64 countUsers = 4; // 用户数量\n\tint64 monthlyTrafficBytes = 5; // 当月流量\n\tint64 dailyTrafficBytes = 6; // 当日流量\n\tint64 lastDailyTrafficBytes = 7; // 昨日流量\n\n\trepeated DailyTrafficStat dailyTrafficStats = 30;\n\trepeated HourlyTrafficStat hourlyTrafficStats = 31;\n\trepeated NodeStat topNodeStats = 32;\n\n\trepeated NodeValue cpuNodeValues = 34;\n\trepeated NodeValue memoryNodeValues = 35;\n\trepeated NodeValue loadNodeValues = 36;\n\n\trepeated MetricDataChart metricDataCharts = 37; // 指标图表\n\n\t// 日流量统计\n\n\tmessage DailyTrafficStat {\n\t\tstring day = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\t// 小时流量统计\n\n\tmessage HourlyTrafficStat {\n\t\tstring hour = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n\n\t// 节点统计\n\n\tmessage NodeStat {\n\t\tint64 nodeId = 1;\n\t\tstring nodeName = 2;\n\t\tint64 countRequests = 3;\n\t\tint64 bytes = 4;\n\t\tint64 countAttackRequests = 6;\n\t\tint64 attackBytes = 7;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ComposeUserDashboardRequest",
      "code": "message ComposeUserDashboardRequest {\n\tint64 userId = 1;\n}",
      "doc": "取得用户Dashboard数据"
    },
    {
      "name": "ComposeUserDashboardResponse",
      "code": "message ComposeUserDashboardResponse {\n\tint64 countServers = 1;\n\tint64 monthlyTrafficBytes = 2;\n\tint64 monthlyPeekBandwidthBytes = 3;\n\tint64 dailyTrafficBytes = 4;\n\tint64 dailyPeekBandwidthBytes = 5;\n\trepeated DailyTrafficStat dailyTrafficStats = 6;\n\trepeated DailyPeekBandwidthStat dailyPeekBandwidthStats = 7;\n\tint32 bandwidthPercentile = 8; // 带宽百分位\n\tint64 bandwidthPercentileBits = 9; // 带宽百分位上的比特数\n\n\n\tmessage DailyTrafficStat {\n\t\tstring day = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 attackBytes = 4;\n\t\tint64 countRequests = 5;\n\t\tint64 countCachedRequests = 6;\n\t\tint64 countAttackRequests = 7;\n\t}\n\n\n\tmessage DailyPeekBandwidthStat {\n\t\tstring day = 1;\n\t\tint64 bytes = 2;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ComposeUserGlobalBoardRequest",
      "code": "message ComposeUserGlobalBoardRequest {\n\n}",
      "doc": "组合看板数据"
    },
    {
      "name": "ComposeUserGlobalBoardResponse",
      "code": "message ComposeUserGlobalBoardResponse {\n\tint64 totalUsers = 1;\n\tint64 countTodayUsers = 2;\n\tint64 countWeeklyUsers = 3;\n\tint64 countUserNodes = 4;\n\tint64 countOfflineUserNodes = 5;\n\tint64 countVerifyingUsers = 6;\n\n\trepeated DailyStat dailyStats = 30;\n\trepeated NodeValue cpuNodeValues = 31;\n\trepeated NodeValue memoryNodeValues = 32;\n\trepeated NodeValue loadNodeValues = 33;\n\trepeated TrafficStat topTrafficStats = 34;\n\n\n\tmessage DailyStat {\n\t\tstring day = 1;\n\t\tint64 count = 2;\n\t}\n\n\n\tmessage TrafficStat {\n\t\tint64 userId = 1;\n\t\tstring userName = 2;\n\t\tint64 countRequests = 3;\n\t\tint64 bytes = 4;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "CopyNodeActionsToNodeClusterRequest",
      "code": "message CopyNodeActionsToNodeClusterRequest {\n\tint64 nodeId = 1; // 节点ID\n}",
      "doc": "同步动作设置到集群"
    },
    {
      "name": "CopyNodeActionsToNodeGroupRequest",
      "code": "message CopyNodeActionsToNodeGroupRequest {\n\tint64 nodeId = 1; // 节点ID\n}",
      "doc": "同步动作设置到分组"
    },
    {
      "name": "CopyServerConfigRequest",
      "code": "message CopyServerConfigRequest {\n\tint64 serverId = 1; // 被复制网站ID\n\tstring configCode = 2; // 要拷贝的配置代号：stat 统计；charset 字符编码；userAgent UA名单；referers 防盗链；webp WebP配置；accessLog 访问日志；cc CC配置；hostRedirects URL跳转；root ROOT配置；remoteAddr 访客设置；requestLimit 请求限制；compression 内容压缩设置；optimization 页面优化设置；cache 缓存设置；uam 五秒盾设置；websocket Websocket设置；pages 自定义页面设置；auth 访问鉴权；reverseProxy 反向代理设置；waf WAF设置\n\tstring targetType = 3; // 目标类型：servers, groups, cluster（当前集群下所有网站，只有管理员才有权限）、user（当前用户下所有网站）\n\trepeated int64 targetServerIds = 4; // 目标网站ID列表\n\trepeated int64 targetServerGroupIds = 5; // 目标网站分组ID列表\n\tint64 targetClusterId = 6; // 目标集群ID\n\tint64 targetUserId = 7; // 目标用户ID\n\n\tbool wafCopyRegions = 30; // 可选项，WAF独立配置：是否拷贝区域封禁设置\n}",
      "doc": "在网站之间复制配置"
    },
    {
      "name": "CountADPackageInstancesRequest",
      "code": "message CountADPackageInstancesRequest {\n\tint64 adNetworkId = 1; // 可选，线路\n\tint64 adPackageId = 2; // 可选，如果不填则表示获取所有实例数量\n\tint64 userId = 3; // 可选，用户ID\n\tstring ip = 4;  // 可选，高防IP\n}",
      "doc": "计算实例数量"
    },
    {
      "name": "CountADPackagePricesRequest",
      "code": "message CountADPackagePricesRequest {\n\tint64 adPackageId = 1;\n}",
      "doc": "计算高防产品价格项数量"
    },
    {
      "name": "CountADPackagesRequest",
      "code": "message CountADPackagesRequest {\n\tint64 adNetworkId = 1;\n}",
      "doc": "查询高防产品数量"
    },
    {
      "name": "CountAPIMethodStatsWithDayRequest",
      "code": "message CountAPIMethodStatsWithDayRequest {\n\tstring day = 1; // YYYYMMDD\n}",
      "doc": "检查是否有统计数据"
    },
    {
      "name": "CountAcmeUsersRequest",
      "code": "message CountAcmeUsersRequest {\n\tint64 adminId = 1;\n\tint64 userId = 2;\n\tint64 acmeProviderAccountId = 3;\n}",
      "doc": "计算用户数量"
    },
    {
      "name": "CountAllAvailableNSDomainGroupsRequest",
      "code": "message CountAllAvailableNSDomainGroupsRequest {\n\tint64 userId = 1;\n}",
      "doc": "查询可用分组数量"
    },
    {
      "name": "CountAllDNSDomainsWithDNSProviderIdRequest",
      "code": "message CountAllDNSDomainsWithDNSProviderIdRequest {\n\tint64 dnsProviderId = 1;\n\tbool isDeleted = 2;\n\tbool isDown = 3;\n}",
      "doc": "计算服务商下的域名数量"
    },
    {
      "name": "CountAllEnabledACMEProviderAccountsRequest",
      "code": "message CountAllEnabledACMEProviderAccountsRequest {\n\n}",
      "doc": "计算所有服务商账号数量"
    },
    {
      "name": "CountAllEnabledACMETasksRequest",
      "code": "message CountAllEnabledACMETasksRequest {\n\tint64 adminId = 1;\n\tint64 userId = 2;\n\tbool isAvailable = 3;\n\tbool isExpired = 4;\n\tint32 expiringDays = 5;\n\tstring keyword = 6;\n\tbool userOnly = 7; // 可选项，是否只列出用户上传的证书\n}",
      "doc": "计算所有任务数量"
    },
    {
      "name": "CountAllEnabledACMETasksWithACMEUserIdRequest",
      "code": "message CountAllEnabledACMETasksWithACMEUserIdRequest {\n\tint64 acmeUserId = 1;\n}",
      "doc": "计算某个ACME用户相关的任务数量"
    },
    {
      "name": "CountAllEnabledAPINodesRequest",
      "code": "message CountAllEnabledAPINodesRequest {\n\n}",
      "doc": "计算API节点数量"
    },
    {
      "name": "CountAllEnabledAPINodesWithSSLCertIdRequest",
      "code": "message CountAllEnabledAPINodesWithSSLCertIdRequest {\n\tint64 sslCertId = 1;\n}",
      "doc": "计算使用某个SSL证书的API节点数量"
    },
    {
      "name": "CountAllEnabledAdminsRequest",
      "code": "message CountAllEnabledAdminsRequest {\n\tstring keyword = 1; // 可选项，查询关键词\n\tbool hasWeakPassword = 2; // 可选项，筛选有弱密码的管理员，只有超级管理员才能查询\n}",
      "doc": "计算管理员数量"
    },
    {
      "name": "CountAllEnabledAndOnAPINodesRequest",
      "code": "message CountAllEnabledAndOnAPINodesRequest {\n\n}",
      "doc": "计算启用的API节点数量"
    },
    {
      "name": "CountAllEnabledDBNodesRequest",
      "code": "message CountAllEnabledDBNodesRequest {\n\n}",
      "doc": "计算可用的数据库节点数量"
    },
    {
      "name": "CountAllEnabledDNSProvidersRequest",
      "code": "message CountAllEnabledDNSProvidersRequest {\n\tint64 adminId = 1;\n\tint64 userId = 2;\n\tstring keyword = 3;\n\tstring domain = 4;\n\tstring type = 5;\n}",
      "doc": "计算服务商数量"
    },
    {
      "name": "CountAllEnabledHTTPCachePoliciesRequest",
      "code": "message CountAllEnabledHTTPCachePoliciesRequest {\n\tstring keyword = 1;\n\tint64 nodeClusterId = 2;\n\tstring type = 3;\n}",
      "doc": "计算缓存策略数量"
    },
    {
      "name": "CountAllEnabledHTTPFirewallPoliciesRequest",
      "code": "message CountAllEnabledHTTPFirewallPoliciesRequest {\n\tstring keyword = 1;\n\tint64 nodeClusterId = 2;\n}",
      "doc": "计算可用的防火墙策略数量"
    },
    {
      "name": "CountAllEnabledIPItemsRequest",
      "code": "message CountAllEnabledIPItemsRequest {\n\tstring keyword = 6; // 关键词\n\tstring ip = 1; // 单个IP，搜索单个IP时需要\n\tbool globalOnly = 2; // 是否为自动添加的IP\n\tbool unread = 3; // 是否未读\n\tstring eventLevel = 4; // 事件级别\n\tstring listType = 5; // 列表类型：black|white\n\tint64 userId = 7; // 用户ID，只有管理员才有权限指定用户ID\n}",
      "doc": "计算所有IP数量"
    },
    {
      "name": "CountAllEnabledIPListsRequest",
      "code": "message CountAllEnabledIPListsRequest {\n\tstring type = 1;\n\tbool isPublic = 2;\n\tstring keyword = 3;\n}",
      "doc": "计算名单数量"
    },
    {
      "name": "CountAllEnabledMessageMediaInstancesRequest",
      "code": "message CountAllEnabledMessageMediaInstancesRequest {\n\tstring mediaType = 1;\n\tstring keyword = 2;\n}",
      "doc": "计算接收人数量"
    },
    {
      "name": "CountAllEnabledMessageReceiversRequest",
      "code": "message CountAllEnabledMessageReceiversRequest {\n\tstring role = 4; // 集群角色：node 或 dns\n\tint64 nodeClusterId = 1; // 集群ID\n\tint64 nodeId = 2; // 节点ID\n\tint64 serverId = 3;  // 网站ID\n}",
      "doc": "计算接收者数量"
    },
    {
      "name": "CountAllEnabledMessageRecipientsRequest",
      "code": "message CountAllEnabledMessageRecipientsRequest {\n\tint64 adminId = 1;\n\tstring mediaType = 2;\n\tint64 messageRecipientGroupId = 3;\n\tstring keyword = 4;\n}",
      "doc": "计算接收人数量"
    },
    {
      "name": "CountAllEnabledMetricItemsRequest",
      "code": "message CountAllEnabledMetricItemsRequest {\n\tstring category = 1;\n}",
      "doc": "计算指标数量"
    },
    {
      "name": "CountAllEnabledNodeClusterFirewallActionsRequest",
      "code": "message CountAllEnabledNodeClusterFirewallActionsRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "计算动作数量"
    },
    {
      "name": "CountAllEnabledNodeClustersRequest",
      "code": "message CountAllEnabledNodeClustersRequest {\n\tstring keyword = 1;\n}",
      "doc": "计算所有集群数量"
    },
    {
      "name": "CountAllEnabledNodeClustersWithDNSDomainIdRequest",
      "code": "message CountAllEnabledNodeClustersWithDNSDomainIdRequest {\n\tint64 dnsDomainId = 1;\n}",
      "doc": "计算使用某个DNS域名的集群数量"
    },
    {
      "name": "CountAllEnabledNodeClustersWithDNSProviderIdRequest",
      "code": "message CountAllEnabledNodeClustersWithDNSProviderIdRequest {\n\tint64 dnsProviderId = 1;\n}",
      "doc": "计算使用某个DNS服务商的集群数量"
    },
    {
      "name": "CountAllEnabledNodeClustersWithHTTPCachePolicyIdRequest",
      "code": "message CountAllEnabledNodeClustersWithHTTPCachePolicyIdRequest {\n\tint64 httpCachePolicyId = 1;\n}",
      "doc": "计算使用某个缓存策略的集群数量"
    },
    {
      "name": "CountAllEnabledNodeClustersWithHTTPFirewallPolicyIdRequest",
      "code": "message CountAllEnabledNodeClustersWithHTTPFirewallPolicyIdRequest {\n\tint64 httpFirewallPolicyId = 1;\n}",
      "doc": "计算使用某个WAF策略的集群数量"
    },
    {
      "name": "CountAllEnabledNodeClustersWithNodeGrantIdRequest",
      "code": "message CountAllEnabledNodeClustersWithNodeGrantIdRequest {\n\tint64 nodeGrantId = 1;\n}",
      "doc": "计算使用某个认证的集群数量"
    },
    {
      "name": "CountAllEnabledNodeGrantsRequest",
      "code": "message CountAllEnabledNodeGrantsRequest {\n\tstring keyword = 1;\n}",
      "doc": "计算节点认证数量"
    },
    {
      "name": "CountAllEnabledNodeIPAddressThresholdsRequest",
      "code": "message CountAllEnabledNodeIPAddressThresholdsRequest {\n\tint64 nodeIPAddressId = 1;\n}",
      "doc": "计算IP阈值的数量"
    },
    {
      "name": "CountAllEnabledNodeIPAddressesRequest",
      "code": "message CountAllEnabledNodeIPAddressesRequest {\n\tint64 nodeClusterId = 1;\n\tstring role = 2;\n\tint32 upState = 3;\n\tstring keyword = 4;\n}",
      "doc": "计算IP地址数量"
    },
    {
      "name": "CountAllEnabledNodeThresholdsRequest",
      "code": "message CountAllEnabledNodeThresholdsRequest {\n\tstring role = 1;\n\tint64 nodeClusterId = 2;\n\tint64 nodeId = 3;\n}",
      "doc": "计算阈值数量"
    },
    {
      "name": "CountAllEnabledNodesMatchRequest",
      "code": "message CountAllEnabledNodesMatchRequest {\n\tint64 nodeClusterId = 1;\n\tint32 installState = 2;\n\tint32 activeState = 3;\n\tstring keyword = 4;\n\tint64 nodeGroupId = 5;\n\tint64 nodeRegionId = 6;\n\tint32 level = 7;\n}",
      "doc": "计算匹配的节点数量"
    },
    {
      "name": "CountAllEnabledNodesRequest",
      "code": "message CountAllEnabledNodesRequest {\n\n}",
      "doc": "所有可用的节点数量"
    },
    {
      "name": "CountAllEnabledNodesWithNodeGrantIdRequest",
      "code": "message CountAllEnabledNodesWithNodeGrantIdRequest {\n\tint64 nodeGrantId = 1;\n}",
      "doc": "计算使用某个认证的节点数量"
    },
    {
      "name": "CountAllEnabledNodesWithNodeGroupIdRequest",
      "code": "message CountAllEnabledNodesWithNodeGroupIdRequest {\n\tint64 nodeGroupId = 1;\n}",
      "doc": "计算某个节点分组内的节点数量"
    },
    {
      "name": "CountAllEnabledNodesWithNodeRegionIdRequest",
      "code": "message CountAllEnabledNodesWithNodeRegionIdRequest {\n\tint64 nodeRegionId = 1;\n}",
      "doc": "计算某个区域下的节点数量"
    },
    {
      "name": "CountAllEnabledPlansRequest",
      "code": "message CountAllEnabledPlansRequest {\n\n}",
      "doc": "计算套餐数量"
    },
    {
      "name": "CountAllEnabledReportNodeGroupsRequest",
      "code": "message CountAllEnabledReportNodeGroupsRequest {\n\n}",
      "doc": "计算所有分组数量"
    },
    {
      "name": "CountAllEnabledReportNodesRequest",
      "code": "message CountAllEnabledReportNodesRequest {\n\tstring keyword = 1;\n\tint64 reportNodeGroupId = 2;\n}",
      "doc": "计算终端数量"
    },
    {
      "name": "CountAllEnabledScriptsRequest",
      "code": "message CountAllEnabledScriptsRequest {\n\tint64 userId = 1;\n}",
      "doc": "计算脚本数量"
    },
    {
      "name": "CountAllEnabledServersMatchRequest",
      "code": "message CountAllEnabledServersMatchRequest {\n\tint64 serverGroupId = 1; // 网站分组ID，如果为-1表示查找未分组\n\tstring keyword = 2;\n\tint64 userId = 3;\n\tint64 nodeClusterId = 4;\n\tint32 auditingFlag = 5;\n\tstring protocolFamily = 6;\n\tint64 userPlanId = 7; // 用户套餐ID\n}",
      "doc": "计算网站数量"
    },
    {
      "name": "CountAllEnabledServersWithNodeClusterIdRequest",
      "code": "message CountAllEnabledServersWithNodeClusterIdRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "计算运行在某个集群上的所有网站数量"
    },
    {
      "name": "CountAllEnabledServersWithSSLCertIdRequest",
      "code": "message CountAllEnabledServersWithSSLCertIdRequest {\n\tint64 sslCertId = 1;\n}",
      "doc": "计算使用某个SSL证书的网站数量"
    },
    {
      "name": "CountAllEnabledServersWithServerGroupIdRequest",
      "code": "message CountAllEnabledServersWithServerGroupIdRequest {\n\tint64 serverGroupId = 1;\n}",
      "doc": "计算使用某个分组的网站数量"
    },
    {
      "name": "CountAllEnabledUserAccessKeysRequest",
      "code": "message CountAllEnabledUserAccessKeysRequest {\n\tint64 adminId = 1;\n\tint64 userId = 2;\n}",
      "doc": "计算AccessKey数量"
    },
    {
      "name": "CountAllEnabledUserNodesRequest",
      "code": "message CountAllEnabledUserNodesRequest {\n\n}",
      "doc": "计算用户节点数量"
    },
    {
      "name": "CountAllEnabledUserNodesWithSSLCertIdRequest",
      "code": "message CountAllEnabledUserNodesWithSSLCertIdRequest {\n\tint64 sslCertId = 1;\n}",
      "doc": "计算使用某个SSL证书的用户节点数量"
    },
    {
      "name": "CountAllEnabledUserPlansRequest",
      "code": "message CountAllEnabledUserPlansRequest {\n\tbool isAvailable = 1;\n\tbool isExpired = 2;\n\tint32 expiringDays = 3;\n\tint64 userId = 4;\n}",
      "doc": "计算已购套餐数"
    },
    {
      "name": "CountAllEnabledUsersRequest",
      "code": "message CountAllEnabledUsersRequest {\n\tstring keyword = 1;\n\tbool isVerifying = 2;\n}",
      "doc": "计算用户数量"
    },
    {
      "name": "CountAllHTTPAccessLogPoliciesRequest",
      "code": "message CountAllHTTPAccessLogPoliciesRequest {\n\n}",
      "doc": "计算访问日志策略数量"
    },
    {
      "name": "CountAllIdleADPackages",
      "code": "message CountAllIdleADPackages {\n\n}",
      "doc": "查询可用的产品数量"
    },
    {
      "name": "CountAllNSClustersWithSSLCertIdRequest",
      "code": "message CountAllNSClustersWithSSLCertIdRequest {\n\tint64 sslCertId = 1;\n}",
      "doc": "计算使用某个SSL证书的集群数量"
    },
    {
      "name": "CountAllNSDomainsRequest",
      "code": "message CountAllNSDomainsRequest {\n\tint64 userId = 1;\n\tint64 nsClusterId = 2;\n\tstring keyword = 3;\n\tint64 nsDomainGroupId = 4;\n\tstring status = 5;\n}",
      "doc": "计算域名数量"
    },
    {
      "name": "CountAllNSKeysRequest",
      "code": "message CountAllNSKeysRequest {\n\tint64 nsDomainId = 1;\n\tint64 nsZoneId = 2;\n}",
      "doc": "计算密钥数量"
    },
    {
      "name": "CountAllNSNodesMatchRequest",
      "code": "message CountAllNSNodesMatchRequest {\n\tint64 nsClusterId = 1;\n\tint32 installState = 2;\n\tint32 activeState = 3;\n\tstring keyword = 4;\n\t//int64 nodeGroupId = 5;\n\t//int64 nodeRegionId = 6;\n}",
      "doc": "计算匹配的NS节点数量"
    },
    {
      "name": "CountAllNSNodesRequest",
      "code": "message CountAllNSNodesRequest {\n\n}",
      "doc": "所有可用的NS节点数量"
    },
    {
      "name": "CountAllNSRecordsRequest",
      "code": "message CountAllNSRecordsRequest {\n\tint64 nsDomainId = 1;\n\tstring type = 2;\n\tint64 nsRouteId = 3 [deprecated = true]; // 使用nsRouteCode代替\n\tstring nsRouteCode = 5;\n\tstring keyword = 4;\n}",
      "doc": "计算记录数量"
    },
    {
      "name": "CountAllNSRecordsWithNameRequest",
      "code": "message CountAllNSRecordsWithNameRequest {\n\tint64 nsDomainId = 1;\n\tstring name = 2;\n\tstring type = 3;\n}",
      "doc": "查询相同记录名的记录数"
    },
    {
      "name": "CountAllNSRoutesRequest",
      "code": "message CountAllNSRoutesRequest {\n\tint64 nsClusterId = 1;\n\tint64 nsDomainId = 2;\n\tint64 userId = 3;\n}",
      "doc": "查询自定义线路数量"
    },
    {
      "name": "CountAllNodeIPAddressLogsRequest",
      "code": "message CountAllNodeIPAddressLogsRequest {\n\tint64 nodeIPAddressId = 1;\n}",
      "doc": "计算日志数量"
    },
    {
      "name": "CountAllNodeRegionInfoRequest",
      "code": "message CountAllNodeRegionInfoRequest {\n\tint64 nodeRegionId = 1; // 区域ID，可选\n}",
      "doc": "查找节点区域信息数量"
    },
    {
      "name": "CountAllNotInstalledNodesWithNodeClusterIdRequest",
      "code": "message CountAllNotInstalledNodesWithNodeClusterIdRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "计算未安装的节点数量"
    },
    {
      "name": "CountAllReportNodeTasksRequest",
      "code": "message CountAllReportNodeTasksRequest {\n\tstring role = 1;\n\tint64 nodeClusterId = 2;\n\tstring type = 3;\n}",
      "doc": "计算任务数量"
    },
    {
      "name": "CountAllReportResultsRequest",
      "code": "message CountAllReportResultsRequest {\n\tint64 reportNodeId = 1;\n\tint32 okState = 2;\n\tstring level = 3;\n}",
      "doc": "计算监控结果数量"
    },
    {
      "name": "CountAllSSLCertsWithOCSPErrorRequest",
      "code": "message CountAllSSLCertsWithOCSPErrorRequest {\n\tstring keyword = 1;\n}",
      "doc": "计算有OCSP错误的证书数量"
    },
    {
      "name": "CountAllServerBillsRequest",
      "code": "message CountAllServerBillsRequest {\n\tint64 userId = 1;\n\tstring month = 2;\n}",
      "doc": "查询服务账单数量"
    },
    {
      "name": "CountAllServerNamesWithUserIdRequest",
      "code": "message CountAllServerNamesWithUserIdRequest {\n\tint64 userId = 1; // 用户ID\n\tint64 userPlanId = 2; // 用户套餐ID\n}",
      "doc": "计算一个用户下的所有域名数量"
    },
    {
      "name": "CountAllUpgradeNSNodesWithNSClusterIdRequest",
      "code": "message CountAllUpgradeNSNodesWithNSClusterIdRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "计算需要升级的NS节点数量"
    },
    {
      "name": "CountAllUpgradeNodesWithNodeClusterIdRequest",
      "code": "message CountAllUpgradeNodesWithNodeClusterIdRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "计算需要升级的节点数量"
    },
    {
      "name": "CountAllUserBillsRequest",
      "code": "message CountAllUserBillsRequest {\n\tint32 paidFlag = 1; // 可选，0|1|-1\n\tint64 userId = 2; // 可选，用户ID\n\tstring month = 3; // 可选，月份\n\tbool trafficRelated = 4; // 可选，是否为流量带宽相关\n\tint32 minDailyBillDays = 5; // 可选，按日计费账单生成最小天数\n\tint32 minMonthlyBillDays = 6; // 可选，按月计费账单生成最小天数\n}",
      "doc": "计算所有账单数量"
    },
    {
      "name": "CountAllUserServersRequest",
      "code": "message CountAllUserServersRequest {\n\tint64 userId = 1; // 用户ID\n\tint64 userPlanId = 2; // 用户套餐ID\n}",
      "doc": "计算一个用户下的所有网站数量"
    },
    {
      "name": "CountDoingHTTPCacheTasksRequest",
      "code": "message CountDoingHTTPCacheTasksRequest {\n\n}",
      "doc": "计算正在执行的任务数量"
    },
    {
      "name": "CountDoingNodeTasksRequest",
      "code": "message CountDoingNodeTasksRequest {\n\n}",
      "doc": "计算正在执行的任务数量"
    },
    {
      "name": "CountEnabledACMETasksWithDNSProviderIdRequest",
      "code": "message CountEnabledACMETasksWithDNSProviderIdRequest {\n\tint64 dnsProviderId = 1;\n}",
      "doc": "计算跟某个DNS服务商相关的任务数量"
    },
    {
      "name": "CountEnabledMetricChartsRequest",
      "code": "message CountEnabledMetricChartsRequest {\n\tint64 metricItemId = 1;\n}",
      "doc": "计算图表数量"
    },
    {
      "name": "CountEnabledUserOrdersRequest",
      "code": "message CountEnabledUserOrdersRequest {\n\tint64 userId = 1;\n\tstring keyword = 2;\n\tstring status = 3;\n}",
      "doc": "计算订单数量"
    },
    {
      "name": "CountFirewallDailyBlocksRequest",
      "code": "message CountFirewallDailyBlocksRequest {\n\n}",
      "doc": "读取当前Block动作次数"
    },
    {
      "name": "CountFirewallDailyBlocksResponse",
      "code": "message CountFirewallDailyBlocksResponse {\n\tint64 countBlocks = 1;\n}",
      "doc": ""
    },
    {
      "name": "CountFormalClientBrowsersRequest",
      "code": "message CountFormalClientBrowsersRequest {\n\tstring keyword = 1; // 可选\n}",
      "doc": "计算浏览器信息数量"
    },
    {
      "name": "CountFormalClientSystemsRequest",
      "code": "message CountFormalClientSystemsRequest {\n\tstring keyword = 1; // 可选\n}",
      "doc": "计算操作系统信息数量"
    },
    {
      "name": "CountHTTPCacheTaskKeysWithDayRequest",
      "code": "message CountHTTPCacheTaskKeysWithDayRequest {\n\tstring keyType = 1; // Key类型：清理：purge，预热：fetch\n\tstring day = 2; // 日期，格式：YYYYMMDD\n}",
      "doc": "计算当天已经清理的Key数量"
    },
    {
      "name": "CountHTTPCacheTasksRequest",
      "code": "message CountHTTPCacheTasksRequest {\n\n}",
      "doc": "计算任务总数量"
    },
    {
      "name": "CountIPItemsWithListIdRequest",
      "code": "message CountIPItemsWithListIdRequest {\n\tint64 ipListId = 1;\n\tstring keyword = 2;\n\tstring ipFrom = 3;\n\tstring ipTo = 4;\n\tstring eventLevel = 5;\n}",
      "doc": "计算IP数量"
    },
    {
      "name": "CountIdleADPackageInstancesRequest",
      "code": "message CountIdleADPackageInstancesRequest {\n\tint64 adPackageId = 1;\n}",
      "doc": "计算可购的实例数量"
    },
    {
      "name": "CountLogRequest",
      "code": "message CountLogRequest {\n\tstring dayFrom = 1; // 可选项，开始日期\n\tstring dayTo = 2; // 可选项，结束日期\n\tstring keyword = 3; // 可选项，关键词\n\tstring userType = 4; // 可选项，用户类型：admin|user；用户端固定为user\n\tstring level = 5; // 可选项，错误级别：info, warn, error\n}",
      "doc": "计算日志数量"
    },
    {
      "name": "CountMessageTaskLogsRequest",
      "code": "message CountMessageTaskLogsRequest {\n\n}",
      "doc": "计算日志数量"
    },
    {
      "name": "CountMetricStatsRequest",
      "code": "message CountMetricStatsRequest {\n\tint64 metricItemId = 1;\n}",
      "doc": "计算指标数据数量"
    },
    {
      "name": "CountNSUserPlansRequest",
      "code": "message CountNSUserPlansRequest{\n\tint64 userId = 1;\n\tint64 nsPlanId = 2;\n\tstring periodUnit = 3;\n\tbool isExpired = 4;\n\tint32 expireDays = 5;\n}",
      "doc": "计算用户套餐数量"
    },
    {
      "name": "CountNodeLogsRequest",
      "code": "message CountNodeLogsRequest {\n\tint64 nodeClusterId = 11;\n\tint64 nodeId = 1;\n\tstring role = 2;\n\tstring dayFrom = 3;\n\tstring dayTo = 4;\n\tstring keyword = 5;\n\tstring level = 6;\n\tint64 serverId = 7;\n\tint64 originId = 8;\n\tbool isUnread = 9;\n\tstring tag = 10;\n\tint32 fixedState = 12;\n\tbool allServers = 13; // 是否获取所有服务相关的日志\n}",
      "doc": "查询日志数量"
    },
    {
      "name": "CountSSLCertRequest",
      "code": "message CountSSLCertRequest {\n\tbool isCA = 1; // 可选项，是否为CA证书\n\tbool isAvailable = 2; // 可选项，是否可用（在有效期内）\n\tbool isExpired = 3; // 可选项，是否已过期\n\tint32 expiringDays = 4; // 可选项，离过期日的天数\n\tstring keyword = 5; // 可选项，关键词\n\tint64 userId = 6; // 可选项，用户ID，不填则表示读取管理员上传的证书\n\trepeated string domains = 7; // 可选项，搜索使用的域名列表\n\tbool userOnly = 8; // 可选项，只列出用户上传的证书\n}",
      "doc": "计算匹配的证书数量"
    },
    {
      "name": "CountServerNamesRequest",
      "code": "message CountServerNamesRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "计算某个网站下的域名数量"
    },
    {
      "name": "CountTrafficPackagePricesRequest",
      "code": "message CountTrafficPackagePricesRequest {\n\tint64 trafficPackageId = 1;\n}",
      "doc": "计算流量包价格项数量"
    },
    {
      "name": "CountUnreadMessagesRequest",
      "code": "message CountUnreadMessagesRequest {\n\n}",
      "doc": "计算未读消息数"
    },
    {
      "name": "CountUserADInstancesRequest",
      "code": "message CountUserADInstancesRequest {\n\tint64 adNetworkId = 1; // 线路ID\n\tint64 userId = 2; // 用户ID\n\tint64 adPackagePeriodId = 3;\n\tstring expiresDay = 4;\n\tbool availableOnly = 5; // 是否只查询有效的高防实例\n}",
      "doc": "查询用户高防实例数量"
    },
    {
      "name": "CountUserAccountLogsRequest",
      "code": "message CountUserAccountLogsRequest {\n\tint64 userAccountId = 1;\n\tstring keyword = 2;\n\tstring eventType = 3;\n}",
      "doc": "计算日志数量"
    },
    {
      "name": "CountUserAccountsRequest",
      "code": "message CountUserAccountsRequest {\n\tstring keyword = 1;\n}",
      "doc": "计算账户数量"
    },
    {
      "name": "CountUserTicketLogsRequest",
      "code": "message CountUserTicketLogsRequest {\n\tint64 userTicketId = 1;\n}",
      "doc": "查询日志数量"
    },
    {
      "name": "CountUserTicketsRequest",
      "code": "message CountUserTicketsRequest {\n\tint64 userId = 1;\n\tint64 userTicketCategoryId = 2;\n\tstring status = 3;\n}",
      "doc": "计算工单数量"
    },
    {
      "name": "CountUserTrafficPackagesRequest",
      "code": "message CountUserTrafficPackagesRequest {\n\tint64 trafficPackageId = 1;\n\tint64 userId = 2;\n\tint64 nodeRegionId = 3;\n\tint64 trafficPackagePeriodId = 4;\n\tstring expiresDay = 5;\n\tbool availableOnly = 6; // 是否只查询有效的流量包\n}",
      "doc": "查询当前流量包数量"
    },
    {
      "name": "CreateACMEProviderAccountRequest",
      "code": "message CreateACMEProviderAccountRequest {\n\tstring name = 1;\n\tstring providerCode = 2;\n\tstring eabKid = 3;\n\tstring eabKey = 4;\n}",
      "doc": "创建服务商"
    },
    {
      "name": "CreateACMEProviderAccountResponse",
      "code": "message CreateACMEProviderAccountResponse {\n\tint64 acmeProviderAccountId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateACMETaskRequest",
      "code": "message CreateACMETaskRequest {\n\tint64 userId = 8; // 平台用户ID，只有管理员才有权限指定\n\tint64 acmeUserId = 1;\n\tint64 dnsProviderId = 2;\n\tstring dnsDomain = 3;\n\trepeated string domains = 4;\n\tbool autoRenew = 5;\n\tstring authType = 6;\n\tstring authURL = 7;\n}",
      "doc": "创建任务"
    },
    {
      "name": "CreateACMETaskResponse",
      "code": "message CreateACMETaskResponse {\n\tint64 acmeTaskId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateACMEUserRequest",
      "code": "message CreateACMEUserRequest {\n\tint64 userId = 5; // 所属用户，只有管理员才有权限指定\n\tstring email = 1; // 用户邮箱\n\tstring description = 2; // 用户描述\n\tstring acmeProviderCode = 3; // 服务商代号\n\tint64 acmeProviderAccountId = 4; // 服务商帐号\n}",
      "doc": "创建用户"
    },
    {
      "name": "CreateACMEUserResponse",
      "code": "message CreateACMEUserResponse {\n\tint64 acmeUserId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateADNetworkRequest",
      "code": "message CreateADNetworkRequest {\n\tstring name = 1;\n\tstring description = 2;\n}",
      "doc": "创建线路"
    },
    {
      "name": "CreateADNetworkResponse",
      "code": "message CreateADNetworkResponse {\n\tint64 adNetworkId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateADPackageInstanceRequest",
      "code": "message CreateADPackageInstanceRequest {\n\tint64 adPackageId = 1;\n\tint64 nodeClusterId = 2;\n\trepeated int64 nodeIds = 3;\n\trepeated string ipAddresses = 4;\n}",
      "doc": "创建实例"
    },
    {
      "name": "CreateADPackageInstanceResponse",
      "code": "message CreateADPackageInstanceResponse {\n\tint64 adPackageInstanceId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateADPackagePeriodRequest",
      "code": "message CreateADPackagePeriodRequest {\n\tint32 count = 1;\n\tstring unit = 2; // month | year\n}",
      "doc": "创建有效期"
    },
    {
      "name": "CreateADPackagePeriodResponse",
      "code": "message CreateADPackagePeriodResponse {\n\tint64 adPackagePeriodId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateADPackageRequest",
      "code": "message CreateADPackageRequest {\n\tint64 adNetworkId = 1;\n\tint32 protectionBandwidthSize = 2;\n\tstring protectionBandwidthUnit = 3;\n\tint32  serverBandwidthSize = 4;\n\tstring serverBandwidthUnit = 5;\n}",
      "doc": "创建高防产品"
    },
    {
      "name": "CreateADPackageResponse",
      "code": "message CreateADPackageResponse {\n\tint64 adPackageId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateAPINodeRequest",
      "code": "message CreateAPINodeRequest {\n\tstring name = 1; // API节点名称\n\tstring description = 2; // API节点描述\n\tbytes httpJSON = 3; // 监听HTTP地址配置 @link json:http_protocol\n\tbytes httpsJSON = 4; // 监听HTTPS地址配置 @link json:https_protocol\n\tbytes accessAddrsJSON = 5; // 访问地址 @link json:network_address\n\tbool isOn = 6; // 是否启用当前API节点\n\tbool restIsOn = 7; // 是否启用API\n\tbytes restHTTPJSON = 8; // API地址HTTP地址配置 @link json:http_protocol\n\tbytes restHTTPSJSON = 9;  // API地址HTTPS地址配置 @link json:https_protocol\n}",
      "doc": "创建API节点"
    },
    {
      "name": "CreateAPINodeResponse",
      "code": "message CreateAPINodeResponse {\n\tint64 apiNodeId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateAdminRequest",
      "code": "message CreateAdminRequest {\n\tstring username = 1;\n\tstring password = 2;\n\tstring fullname = 3;\n\tbytes modulesJSON = 4;\n\tbool isSuper = 5;\n\tbool canLogin = 6;\n}",
      "doc": "创建管理员"
    },
    {
      "name": "CreateAdminResponse",
      "code": "message CreateAdminResponse {\n\tint64 adminId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateBasicHTTPServerRequest",
      "code": "message CreateBasicHTTPServerRequest {\n\tint64 nodeClusterId = 1; // 部署的集群ID，用户创建时不需要指定此项\n\tint64 userId = 2; // 管理员创建网站时可以指定此用户ID，也可以为0表示不指定\n\trepeated string domains = 3; // 域名列表\n\trepeated int64 sslCertIds = 4; // HTTPS用到的证书ID列表\n\trepeated string originAddrs = 5; // 源站地址列表，每一个源站地址需要带协议部分，比如 http://example.com\n\n\tbool enableWebsocket = 6; // 可选项，是否启用Websocket\n}",
      "doc": "快速创建基本的HTTP网站"
    },
    {
      "name": "CreateBasicHTTPServerResponse",
      "code": "message CreateBasicHTTPServerResponse {\n\tint64 serverId = 1; // 所创建的网站ID\n}",
      "doc": ""
    },
    {
      "name": "CreateBasicTCPServerRequest",
      "code": "message CreateBasicTCPServerRequest {\n\tint64 nodeClusterId = 1; // 部署的集群ID，用户创建时不需要指定此项\n\tint64 userId = 2; // 管理员创建网站时可以指定此用户ID，也可以为0表示不指定\n\trepeated int32 tcpPorts = 3; // TCP端口\n\trepeated int32 tlsPorts = 4; // TLS端口\n\trepeated int64 sslCertIds = 5; // TLS用到的证书ID列表\n\trepeated string originAddrs = 6; // 源站地址列表，每一个源站地址需要带协议部分，比如 tcp://example.com, tls://example.com\n}",
      "doc": "快速创建基本的TCP网站"
    },
    {
      "name": "CreateBasicTCPServerResponse",
      "code": "message CreateBasicTCPServerResponse {\n\tint64 serverId = 1; // 所创建的网站ID\n}",
      "doc": ""
    },
    {
      "name": "CreateClientAgentIPsRequest",
      "code": "message CreateClientAgentIPsRequest {\n\trepeated AgentIPInfo agentIPs = 1;\n\n\n\tmessage AgentIPInfo {\n\t\tstring agentCode = 1;\n\t\tstring ip = 2;\n\t\tstring ptr = 3;\n\t}\n}",
      "doc": "创建一组IP"
    },
    {
      "name": "CreateDBNodeRequest",
      "code": "message CreateDBNodeRequest {\n\tbool isOn = 1;\n\tstring name = 2;\n\tstring description = 3;\n\tstring host = 4;\n\tint32 port = 5;\n\tstring database = 6;\n\tstring username = 7;\n\tstring password = 8;\n\tstring charset = 9;\n}",
      "doc": "创建数据库节点"
    },
    {
      "name": "CreateDBNodeResponse",
      "code": "message CreateDBNodeResponse {\n\tint64 dbNodeId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateDNSDomainRequest",
      "code": "message CreateDNSDomainRequest {\n\tint64 dnsProviderId = 1;\n\tstring name = 2;\n}",
      "doc": "创建域名"
    },
    {
      "name": "CreateDNSDomainResponse",
      "code": "message CreateDNSDomainResponse {\n\tint64 dnsDomainId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateDNSProviderRequest",
      "code": "message CreateDNSProviderRequest {\n\tstring name = 1;\n\tstring type = 2;\n\tbytes apiParamsJSON = 3;\n}",
      "doc": "创建服务商"
    },
    {
      "name": "CreateDNSProviderResponse",
      "code": "message CreateDNSProviderResponse {\n\tint64 dnsProviderId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateEmptyHTTPFirewallPolicyRequest",
      "code": "message CreateEmptyHTTPFirewallPolicyRequest {\n\tbool isOn = 1;\n\tstring name = 2;\n\tstring description = 3;\n\tint64 serverId = 4;\n\tint64 serverGroupId = 5;\n}",
      "doc": "创建空防火墙策略"
    },
    {
      "name": "CreateEmptyHTTPFirewallPolicyResponse",
      "code": "message CreateEmptyHTTPFirewallPolicyResponse {\n\tint64 httpFirewallPolicyId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateFileChunkRequest",
      "code": "message CreateFileChunkRequest {\n\tint64 fileId = 1;\n\tbytes data = 2;\n}",
      "doc": "创建文件片段"
    },
    {
      "name": "CreateFileChunkResponse",
      "code": "message CreateFileChunkResponse {\n\tint64 fileChunkId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateFileRequest",
      "code": "message CreateFileRequest {\n\tstring filename = 1;\n\tint64 size = 2;\n\tbool isPublic = 3;\n\tstring mimeType = 4;\n\tstring type = 5;\n}",
      "doc": "创建文件"
    },
    {
      "name": "CreateFileResponse",
      "code": "message CreateFileResponse {\n\tint64 fileId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateFormalClientBrowserRequest",
      "code": "message CreateFormalClientBrowserRequest {\n\tstring name = 1;\n\trepeated string codes = 2;\n\tstring dataId = 3;\n}",
      "doc": "创建浏览器信息"
    },
    {
      "name": "CreateFormalClientBrowserResponse",
      "code": "message CreateFormalClientBrowserResponse {\n\tint64 formalClientBrowserId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateFormalClientSystemRequest",
      "code": "message CreateFormalClientSystemRequest {\n\tstring name = 1;\n\trepeated string codes = 2;\n\tstring dataId = 3;\n}",
      "doc": "创建操作系统信息"
    },
    {
      "name": "CreateFormalClientSystemResponse",
      "code": "message CreateFormalClientSystemResponse {\n\tint64 formalClientSystemId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPAccessLogPolicyRequest",
      "code": "message CreateHTTPAccessLogPolicyRequest {\n\tstring name = 1;\n\tstring type = 2;\n\tbytes optionsJSON = 3;\n\tbytes condsJSON = 4;\n\tbool isPublic = 5;\n\tbool firewallOnly = 6;\n\tbool disableDefaultDB = 7;\n}",
      "doc": "创建访问日志策略"
    },
    {
      "name": "CreateHTTPAccessLogPolicyResponse",
      "code": "message CreateHTTPAccessLogPolicyResponse {\n\tint64 httpAccessLogPolicyId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPAccessLogsRequest",
      "code": "message CreateHTTPAccessLogsRequest {\n\trepeated HTTPAccessLog httpAccessLogs = 1;\n}",
      "doc": "创建访问日志"
    },
    {
      "name": "CreateHTTPAccessLogsResponse",
      "code": "message CreateHTTPAccessLogsResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPAuthPolicyRequest",
      "code": "message CreateHTTPAuthPolicyRequest {\n\tstring name = 1;\n\tstring type = 2;\n\tbytes paramsJSON = 3;\n}",
      "doc": "创建策略"
    },
    {
      "name": "CreateHTTPAuthPolicyResponse",
      "code": "message CreateHTTPAuthPolicyResponse {\n\tint64 httpAuthPolicyId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPCachePolicyRequest",
      "code": "message CreateHTTPCachePolicyRequest {\n\tbool isOn = 1;\n\tstring name = 2;\n\tstring description = 3;\n\tbytes capacityJSON = 4;\n\tbytes maxSizeJSON = 6;\n\tstring type = 7;\n\tbytes optionsJSON = 8;\n\tbool syncCompressionCache = 9;\n\tbytes fetchTimeoutJSON = 10; // 预热超时时间\n}",
      "doc": "创建缓存策略"
    },
    {
      "name": "CreateHTTPCachePolicyResponse",
      "code": "message CreateHTTPCachePolicyResponse {\n\tint64 httpCachePolicyId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPCacheTaskRequest",
      "code": "message CreateHTTPCacheTaskRequest {\n\tstring type = 1; // 任务类型，值为 purge 或者 fetch；purge：删除缓存，fetch：预热缓存\n\tstring keyType = 2; // Key类型，值为 key 或者 prefix；如果是 key 表示处理的是URL，如果是 prefix 表示处理的是目录；预热的时候只能为 key\n\trepeated string keys = 3; // 要清理的Key，根据Key类型（keyType）来输入不同的内容\n}",
      "doc": "创建任务"
    },
    {
      "name": "CreateHTTPCacheTaskResponse",
      "code": "message CreateHTTPCacheTaskResponse {\n\tint64 httpCacheTaskId = 1; // 生成的任务ID\n\tint64 countKeys = 2; // 任务中包含的Key\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPFastcgiRequest",
      "code": "message CreateHTTPFastcgiRequest {\n\tbool isOn = 1;\n\tstring address = 2;\n\tbytes paramsJSON = 3;\n\tbytes readTimeoutJSON = 4;\n\tbytes connTimeoutJSON = 5;\n\tint32 poolSize = 6;\n\tstring pathInfoPattern = 7;\n}",
      "doc": "创建Fastcgi服务"
    },
    {
      "name": "CreateHTTPFastcgiResponse",
      "code": "message CreateHTTPFastcgiResponse {\n\tint64 httpFastcgiId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPFirewallPolicyRequest",
      "code": "message CreateHTTPFirewallPolicyRequest {\n\tbool isOn = 1;\n\tstring name = 2;\n\tstring description = 3;\n\trepeated string httpFirewallGroupCodes = 4;\n\tint64 serverId = 5;\n\tint64 serverGroupId = 6;\n}",
      "doc": "创建防火墙策略"
    },
    {
      "name": "CreateHTTPFirewallPolicyResponse",
      "code": "message CreateHTTPFirewallPolicyResponse {\n\tint64 httpFirewallPolicyId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPFirewallRuleGroupRequest",
      "code": "message CreateHTTPFirewallRuleGroupRequest {\n\tbool isOn = 1;\n\tstring name = 2;\n\tstring code = 4;\n\tstring description = 3;\n}",
      "doc": "创建分组"
    },
    {
      "name": "CreateHTTPFirewallRuleGroupResponse",
      "code": "message CreateHTTPFirewallRuleGroupResponse {\n\tint64 firewallRuleGroupId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPGzipRequest",
      "code": "message CreateHTTPGzipRequest {\n\tint32 level = 1;\n\tSizeCapacity minLength = 2;\n\tSizeCapacity maxLength = 3;\n\tbytes condsJSON = 4;\n}",
      "doc": "创建Gzip配置"
    },
    {
      "name": "CreateHTTPGzipResponse",
      "code": "message CreateHTTPGzipResponse {\n\tint64 httpGzipId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPHeaderPolicyRequest",
      "code": "message CreateHTTPHeaderPolicyRequest {\n\n}",
      "doc": "创建策略"
    },
    {
      "name": "CreateHTTPHeaderPolicyResponse",
      "code": "message CreateHTTPHeaderPolicyResponse {\n\tint64 httpHeaderPolicyId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPHeaderRequest",
      "code": "message CreateHTTPHeaderRequest {\n\tstring name = 1;\n\tstring value = 2;\n\trepeated int32 status = 3;\n\tbool disableRedirect = 4;\n\tbool shouldAppend = 5;\n\tbool shouldReplace = 6;\n\tbytes replaceValuesJSON = 7;\n\trepeated string methods = 8;\n\trepeated string domains = 9;\n}",
      "doc": "创建Header"
    },
    {
      "name": "CreateHTTPHeaderResponse",
      "code": "message CreateHTTPHeaderResponse {\n\tint64 headerId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPLocationRequest",
      "code": "message CreateHTTPLocationRequest {\n\tint64 parentId = 1;\n\tstring name = 2;\n\tstring description = 3;\n\tstring pattern = 4;\n\tbool isBreak = 5;\n\tbytes condsJSON = 6;\n\trepeated string domains = 7;\n}",
      "doc": "创建路径规则"
    },
    {
      "name": "CreateHTTPLocationResponse",
      "code": "message CreateHTTPLocationResponse {\n\tint64 locationId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPPageRequest",
      "code": "message CreateHTTPPageRequest {\n\trepeated string statusList = 1; // 状态码列表\n\tstring bodyType = 5; // 页面类型：html|url|redirectURL\n\tstring url = 2; // 读取或者跳转的URL\n\tstring body = 4; // HTML内容\n\tint32 newStatus = 3; // 新的状态码\n\tbytes exceptURLPatternsJSON = 6; // 例外URL列表\n\tbytes onlyURLPatternsJSON = 7; // 限制URL列表\n}",
      "doc": "创建Page"
    },
    {
      "name": "CreateHTTPPageResponse",
      "code": "message CreateHTTPPageResponse {\n\tint64 httpPageId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPRewriteRuleRequest",
      "code": "message CreateHTTPRewriteRuleRequest {\n\tstring pattern = 1;\n\tstring replace = 2;\n\tstring mode = 3;\n\tint32 redirectStatus = 4;\n\tbool isBreak = 5;\n\tstring proxyHost = 6;\n\tbool isOn = 7;\n\tbool withQuery = 8;\n\tbytes condsJSON = 9;\n}",
      "doc": "创建重写规则"
    },
    {
      "name": "CreateHTTPRewriteRuleResponse",
      "code": "message CreateHTTPRewriteRuleResponse {\n\tint64 rewriteRuleId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPWebRequest",
      "code": "message CreateHTTPWebRequest {\n\tbytes rootJSON = 1; // 可选，静态分发配置\n}",
      "doc": "创建Web配置"
    },
    {
      "name": "CreateHTTPWebResponse",
      "code": "message CreateHTTPWebResponse {\n\tint64 httpWebId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateHTTPWebsocketRequest",
      "code": "message CreateHTTPWebsocketRequest {\n\tbytes handshakeTimeoutJSON = 1;\n\tbool allowAllOrigins = 2;\n\trepeated string allowedOrigins = 3;\n\tbool requestSameOrigin = 4;\n\tstring requestOrigin = 5;\n}",
      "doc": "创建Websocket配置"
    },
    {
      "name": "CreateHTTPWebsocketResponse",
      "code": "message CreateHTTPWebsocketResponse {\n\tint64 websocketId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateIPItemRequest",
      "code": "message CreateIPItemRequest {\n\tint64 ipListId = 1; // 所属IP列表ID\n\tstring ipFrom = 2; // 开始IP\n\tstring ipTo = 3; // 结束IP（可选）\n\tint64 expiredAt = 4; // 过期时间戳（可选）\n\tstring reason = 5; // 加入理由（可选）\n\tstring type = 6; // IP类型，值为ipv4或ipv6\n\tstring eventLevel = 7; // 级别：debug, notice, warning, error, critical, fatal\n\n\tint64 nodeId = 8; // 可选项，所属节点ID\n\tint64 serverId = 9; // 可选项，所属网站ID\n\n\tint64 sourceNodeId = 10; // 可选项，来源节点\n\tint64 sourceServerId = 11;  // 可选项，来源网站ID\n\tint64 sourceHTTPFirewallPolicyId = 12; // 可选项，来源WAF策略ID\n\tint64 sourceHTTPFirewallRuleGroupId = 13; // 可选项，来源WAF规则分组ID\n\tint64 sourceHTTPFirewallRuleSetId = 14; // 可选项，来源WAF规则集ID\n}",
      "doc": "创建IP"
    },
    {
      "name": "CreateIPItemResponse",
      "code": "message CreateIPItemResponse {\n\tint64 ipItemId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateIPItemsRequest",
      "code": "message CreateIPItemsRequest {\n\trepeated IPItem ipItems = 1; // 要创建的IP列表\n\n\n\tmessage IPItem {\n\t\tint64 ipListId = 1; // IP列表ID\n\t\tstring ipFrom = 2; // 开始IP\n\t\tstring ipTo = 3; // 结束IP（可选）\n\t\tint64 expiredAt = 4; // 过期时间戳（可选）\n\t\tstring reason = 5; // 加入理由（可选）\n\t\tstring type = 6; // 类型\n\t\tstring eventLevel = 7; // 级别\n\n\t\tint64 nodeId = 8; // 所属节点ID\n\t\tint64 serverId = 9; // 所属服务ID\n\n\t\tint64 sourceNodeId = 10;\n\t\tint64 sourceServerId = 11;\n\t\tint64 sourceHTTPFirewallPolicyId = 12;\n\t\tint64 sourceHTTPFirewallRuleGroupId = 13;\n\t\tint64 sourceHTTPFirewallRuleSetId = 14;\n\t}\n}",
      "doc": "创建一组IP"
    },
    {
      "name": "CreateIPItemsResponse",
      "code": "message CreateIPItemsResponse {\n\trepeated int64 ipItemIds = 1; // 创建后的IP ID列表\n}",
      "doc": ""
    },
    {
      "name": "CreateIPLibraryArtifactRequest",
      "code": "message CreateIPLibraryArtifactRequest {\n\tint64 fileId = 1;\n\tbytes metaJSON = 2;\n\tstring name = 3;\n}",
      "doc": "创建制品"
    },
    {
      "name": "CreateIPLibraryArtifactResponse",
      "code": "message CreateIPLibraryArtifactResponse {\n\tint64 ipLibraryArtifactId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateIPLibraryFileRequest",
      "code": "message CreateIPLibraryFileRequest {\n\tstring name = 1;\n\tstring template = 2;\n\trepeated string emptyValues = 3;\n\tint64 fileId = 4;\n\tbytes countriesJSON = 5;\n\tbytes provincesJSON = 6;\n\tbytes citiesJSON = 7;\n\tbytes townsJSON = 8;\n\tbytes providersJSON = 9;\n\tstring password = 10; // 密码\n}",
      "doc": "创建IP库文件"
    },
    {
      "name": "CreateIPLibraryFileResponse",
      "code": "message CreateIPLibraryFileResponse {\n\tint64 ipLibraryFileId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateIPLibraryRequest",
      "code": "message CreateIPLibraryRequest {\n\tstring type = 1;\n\tint64 fileId = 3;\n}",
      "doc": "创建IP库"
    },
    {
      "name": "CreateIPLibraryResponse",
      "code": "message CreateIPLibraryResponse {\n\tint64 ipLibraryId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateIPListRequest",
      "code": "message CreateIPListRequest {\n\tstring type = 1;\n\tstring name = 2;\n\tstring code = 3;\n\tbytes timeoutJSON = 4;\n\tbool isPublic = 5;\n\tstring description = 6;\n\tbool isGlobal = 7;\n\tint64 serverId = 8;\n}",
      "doc": "创建IP列表"
    },
    {
      "name": "CreateIPListResponse",
      "code": "message CreateIPListResponse {\n\tint64 ipListId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateLogRequest",
      "code": "message CreateLogRequest {\n\tstring level = 1; // 级别：info, warn, error\n\tstring description = 2; // 描述\n\tstring action = 3; // 可选项，发生操作所在的页面URL\n\tstring ip = 4; // 可选项，操作用户IP\n\tstring langMessageCode = 5; // 多语言消息\n\tbytes langMessageArgsJSON = 6; // 多语言消息中的参数项，格式：[arg1, arg2, ...]\n}",
      "doc": "创建日志"
    },
    {
      "name": "CreateLogResponse",
      "code": "message CreateLogResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "CreateMessageMediaInstanceRequest",
      "code": "message CreateMessageMediaInstanceRequest {\n\tstring name = 1;\n\tstring mediaType = 2;\n\tbytes paramsJSON = 3;\n\trepeated int64 groupIds = 4;\n\tstring description = 5;\n\tbytes rateJSON = 6;\n\tint32 hashLife = 7;\n}",
      "doc": "创建接收人"
    },
    {
      "name": "CreateMessageMediaInstanceResponse",
      "code": "message CreateMessageMediaInstanceResponse {\n\tint64 messageMediaInstanceId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateMessageRecipientGroupRequest",
      "code": "message CreateMessageRecipientGroupRequest {\n\tstring name = 1;\n}",
      "doc": "创建分组"
    },
    {
      "name": "CreateMessageRecipientGroupResponse",
      "code": "message CreateMessageRecipientGroupResponse {\n\tint64 messageRecipientGroupId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateMessageRecipientRequest",
      "code": "message CreateMessageRecipientRequest {\n\tint64 adminId = 1; // 关联的管理员ID\n\tint64 messageMediaInstanceId = 2; // 媒介实例ID\n\trepeated int64 messageRecipientGroupIds = 3; // 所属分组ID列表\n\tstring description = 4; // 可选项，备注描述\n\tstring user = 5; // 用户标识\n\tstring timeFrom = 6; // 可选项，接收消息的，开始时间\n\tstring timeTo = 7; // 可选项，接收消息的，结束时间\n\n\trepeated int64  nodeClusterIds = 8; // 关联的CDN边缘节点集群ID列表\n}",
      "doc": "创建接收人"
    },
    {
      "name": "CreateMessageRecipientResponse",
      "code": "message CreateMessageRecipientResponse {\n\tint64 messageRecipientId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateMessageTaskRequest",
      "code": "message CreateMessageTaskRequest {\n\tint64 messageRecipientId = 1; // 接收人ID\n\tint64 messageMediaInstanceId = 2; // 媒介实例ID\n\tstring user = 3; // 用户标识\n\tstring subject = 4; // 标题\n\tstring body = 5; // 内容\n\tbool isPrimary = 6; // 是否优先发送\n}",
      "doc": "创建消息任务"
    },
    {
      "name": "CreateMessageTaskResponse",
      "code": "message CreateMessageTaskResponse {\n\tint64 messageTaskId = 1; // 消息任务ID\n}",
      "doc": ""
    },
    {
      "name": "CreateMetricChartRequest",
      "code": "message CreateMetricChartRequest {\n\tint64 metricItemId = 1;\n\tstring name = 2;\n\tstring type = 3;\n\tint32 widthDiv = 4;\n\tbytes paramsJSON = 5;\n\tint32 maxItems = 6;\n\tbool ignoreEmptyKeys = 7;\n\trepeated string ignoredKeys = 8;\n}",
      "doc": "创建图表"
    },
    {
      "name": "CreateMetricChartResponse",
      "code": "message CreateMetricChartResponse {\n\tint64 metricChartId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateMetricItemRequest",
      "code": "message CreateMetricItemRequest {\n\tstring code = 1;\n\tstring category = 2;\n\tstring name = 3;\n\trepeated string keys = 4;\n\tint32 period = 5;\n\tstring periodUnit = 6;\n\tint32 expiresPeriod = 9;\n\tstring value = 7;\n\tbool isPublic = 8;\n}",
      "doc": "创建指标"
    },
    {
      "name": "CreateMetricItemResponse",
      "code": "message CreateMetricItemResponse {\n\tint64 metricItemId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSAccessLogsRequest",
      "code": "message CreateNSAccessLogsRequest {\n\trepeated NSAccessLog nsAccessLogs = 1;\n}",
      "doc": "创建访问日志"
    },
    {
      "name": "CreateNSAccessLogsResponse",
      "code": "message CreateNSAccessLogsResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "CreateNSClusterRequest",
      "code": "message CreateNSClusterRequest {\n\tstring name = 1;\n\tbytes accessLogJSON = 2;\n\trepeated string hosts = 3;\n\tbytes soaJSON = 4;\n\tstring email = 5;\n}",
      "doc": "创建集群"
    },
    {
      "name": "CreateNSClusterResponse",
      "code": "message CreateNSClusterResponse {\n\tint64 nsClusterId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSDomainGroupRequest",
      "code": "message CreateNSDomainGroupRequest {\n\tstring name = 1;\n}",
      "doc": "创建分组"
    },
    {
      "name": "CreateNSDomainGroupResponse",
      "code": "message CreateNSDomainGroupResponse {\n\tint64 nsDomainGroupId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSDomainRequest",
      "code": "message CreateNSDomainRequest {\n\tint64 nsClusterId = 1; // 所属集群\n\tint64 userId = 2; // 所属用户\n\tstring name = 3; // 域名\n\trepeated int64 nsDomainGroupIds = 4; // 域名分组ID\n}",
      "doc": "创建单个域名"
    },
    {
      "name": "CreateNSDomainResponse",
      "code": "message CreateNSDomainResponse {\n\tint64 nsDomainId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSDomainsRequest",
      "code": "message CreateNSDomainsRequest {\n\tint64 nsClusterId = 1; // 所属集群\n\tint64 userId = 2; // 所属用户\n\trepeated string names = 3; // 一组域名\n\trepeated int64 nsDomainGroupIds = 4; // 域名分组ID\n}",
      "doc": "批量创建域名"
    },
    {
      "name": "CreateNSDomainsResponse",
      "code": "message CreateNSDomainsResponse {\n\trepeated int64 nsDomainIds = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSKeyRequest",
      "code": "message CreateNSKeyRequest {\n\tint64 nsDomainId = 1;\n\tint64 nsZoneId = 2;\n\tstring name = 3;\n\tstring algo = 4;\n\tstring secret = 5;\n\tstring secretType = 6;\n}",
      "doc": "创建密钥"
    },
    {
      "name": "CreateNSKeyResponse",
      "code": "message CreateNSKeyResponse {\n\tint64 nsKeyId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSNodeRequest",
      "code": "message CreateNSNodeRequest {\n\tstring name = 1;\n\tint64 nodeClusterId = 2;\n\tNodeLogin nodeLogin = 3;\n}",
      "doc": "创建NS节点"
    },
    {
      "name": "CreateNSNodeResponse",
      "code": "message CreateNSNodeResponse {\n\tint64 nsNodeId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSPlanRequest",
      "code": "message CreateNSPlanRequest {\n\tstring name = 1;\n\tfloat monthlyPrice = 2;\n\tfloat yearlyPrice = 3;\n\tbytes configJSON = 4;\n}",
      "doc": "创建DNS套餐"
    },
    {
      "name": "CreateNSPlanResponse",
      "code": "message CreateNSPlanResponse {\n\tint64 nsPlanId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSQuestionOptionRequest",
      "code": "message CreateNSQuestionOptionRequest {\n\tstring name = 1;\n\tbytes valuesJSON = 2;\n}",
      "doc": "创建选项"
    },
    {
      "name": "CreateNSQuestionOptionResponse",
      "code": "message CreateNSQuestionOptionResponse {\n\tint64 nsQuestionOptionId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSRecordRequest",
      "code": "message CreateNSRecordRequest {\n\tint64 nsDomainId = 1;\n\tstring description = 2;\n\tstring name = 3;\n\tstring type = 4;\n\tstring value = 5;\n\tint32 ttl = 6;\n\trepeated int64 nsRouteIds = 7 [deprecated = true];\n\trepeated string nsRouteCodes = 8; // 路线代号\n\tint32 weight = 15; // 权重\n\n\tint32 mxPriority = 9; // mx优先级\n\n\tint32 srvPriority = 10; // SRV优先级\n\tint32 srvWeight = 11; // SRV权重\n\tint32 srvPort = 12; // SRV端口\n\n\tint32 caaFlag = 13; // CAA Flag\n\tstring caaTag = 14; // CAA TAG\n}",
      "doc": "创建记录"
    },
    {
      "name": "CreateNSRecordResponse",
      "code": "message CreateNSRecordResponse {\n\tint64 nsRecordId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSRecordsRequest",
      "code": "message CreateNSRecordsRequest {\n\tint64 nsDomainId = 1;\n\tstring description = 2;\n\trepeated string names = 3;\n\tstring type = 4;\n\tstring value = 5;\n\tint32 ttl = 6;\n\trepeated string nsRouteCodes = 7; // 路线代号\n\tint32 weight = 14; // 权重\n\n\tint32 mxPriority = 8; // mx优先级\n\n\tint32 srvPriority = 9; // SRV优先级\n\tint32 srvWeight = 10; // SRV权重\n\tint32 srvPort = 11; // SRV端口\n\n\tint32 caaFlag = 12; // CAA Flag\n\tstring caaTag = 13; // CAA TAG\n}",
      "doc": "批量创建记录"
    },
    {
      "name": "CreateNSRecordsResponse",
      "code": "message CreateNSRecordsResponse {\n\trepeated int64 nsRecordIds = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSRecordsWithDomainNamesRequest",
      "code": "message CreateNSRecordsWithDomainNamesRequest {\n\trepeated string nsDomainNames = 1;\n\tbytes recordsJSON = 2;\n\tbool removeOld = 3;\n\tbool removeAll = 4;\n\tint64 userId = 5;\n}",
      "doc": "为一组域名批量创建记录"
    },
    {
      "name": "CreateNSRouteCategoryRequest",
      "code": "message CreateNSRouteCategoryRequest {\n\tstring name = 1;\n}",
      "doc": "创建线路分类"
    },
    {
      "name": "CreateNSRouteCategoryResponse",
      "code": "message CreateNSRouteCategoryResponse {\n\tint64 nsRouteCategoryId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSRouteRequest",
      "code": "message CreateNSRouteRequest {\n\tint64 nsClusterId = 1;\n\tint64 nsDomainId = 2;\n\tint64 userId = 3;\n\tstring name = 4;\n\tbytes rangesJSON = 5;\n\tbool isPublic = 6; // 是否公用\n\tint64 nsRouteCategoryId = 7; // 分类ID\n\tint32 priority = 8; // 优先级\n}",
      "doc": "创建自定义线路"
    },
    {
      "name": "CreateNSRouteResponse",
      "code": "message CreateNSRouteResponse {\n\tint64 nsRouteId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNSUserPlanRequest",
      "code": "message CreateNSUserPlanRequest {\n\tint64 userId = 1;\n\tint64 nsPlanId = 2;\n\tstring dayFrom = 3; // YYYYMMDD\n\tstring dayTo = 4; // YYYYMMDD\n\tstring periodUnit = 5; // yearly|monthly\n}",
      "doc": "创建用户套餐"
    },
    {
      "name": "CreateNSUserPlanResponse",
      "code": "message CreateNSUserPlanResponse {\n\tint64 nsUserPlanId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeActionRequest",
      "code": "message CreateNodeActionRequest {\n\tint64 nodeId = 1; // 节点ID\n\tstring role = 2; // 节点角色\n\tbytes condsJSON = 3; // 条件设置\n\tbytes actionJSON = 4; // 动作设置\n\tbytes durationJSON = 5; // 持续时间\n}",
      "doc": "添加动作"
    },
    {
      "name": "CreateNodeActionResponse",
      "code": "message CreateNodeActionResponse {\n\tint64 nodeActionId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeClusterFirewallActionRequest",
      "code": "message CreateNodeClusterFirewallActionRequest {\n\tint64 nodeClusterId = 1;\n\tstring name = 2;\n\tstring eventLevel = 3;\n\tstring type = 4;\n\tbytes paramsJSON = 5;\n}",
      "doc": "创建动作"
    },
    {
      "name": "CreateNodeClusterRequest",
      "code": "message CreateNodeClusterRequest {\n\tstring name = 1;\n\tint64 nodeGrantId = 2;\n\tstring installDir = 3;\n\tint64 dnsDomainId = 4;\n\tstring dnsName = 5;\n\tint32 dnsTTL = 9;\n\tint64 httpCachePolicyId = 6;\n\tint64 httpFirewallPolicyId = 7;\n\tbytes systemServicesJSON = 8; // 系统服务设置\n\tbytes globalServerConfigJSON = 10; // 服务全局设置\n\tbool autoInstallNftables = 11; // 自动安装nftables\n\tbool autoSystemTuning = 12; // 是否自动调节系统参数\n}",
      "doc": "创建集群"
    },
    {
      "name": "CreateNodeClusterResponse",
      "code": "message CreateNodeClusterResponse {\n\tint64 nodeClusterId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeGrantRequest",
      "code": "message CreateNodeGrantRequest {\n\tstring name = 1;\n\tstring method = 2;\n\tstring username = 3;\n\tstring password = 4;\n\tstring privateKey = 5;\n\tstring passphrase = 8;\n\tstring description = 6;\n\tint64 nodeId = 7;\n\tbool su = 9;\n}",
      "doc": "创建节点认证"
    },
    {
      "name": "CreateNodeGrantResponse",
      "code": "message CreateNodeGrantResponse {\n\tint64 nodeGrantId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeGroupRequest",
      "code": "message CreateNodeGroupRequest {\n\tint64 nodeClusterId = 1;\n\tstring name = 2;\n}",
      "doc": "创建分组"
    },
    {
      "name": "CreateNodeGroupResponse",
      "code": "message CreateNodeGroupResponse {\n\tint64 nodeGroupId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeIPAddressRequest",
      "code": "message CreateNodeIPAddressRequest {\n\tint64 nodeId = 1; // 节点ID\n\tstring role = 2; // 角色：node：边缘节点，dns：智能DNS节点\n\tstring name = 3; // 名称\n\tstring ip = 4; // IP地址\n\tbool canAccess = 5; // 是否能够访问\n\tbool isUp = 6; // 是否上线\n\trepeated int64 nodeClusterIds = 7; // 可选项，所属集群ID列表，如果没有指定，则表示应用于节点所属的所有集群\n}",
      "doc": "创建IP地址"
    },
    {
      "name": "CreateNodeIPAddressResponse",
      "code": "message CreateNodeIPAddressResponse {\n\tint64 nodeIPAddressId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeIPAddressThresholdRequest",
      "code": "message CreateNodeIPAddressThresholdRequest{\n\tint64 nodeIPAddressId = 1;\n\tbytes itemsJSON = 2;\n\tbytes actionsJSON = 3;\n}",
      "doc": "创建阈值"
    },
    {
      "name": "CreateNodeIPAddressThresholdResponse",
      "code": "message CreateNodeIPAddressThresholdResponse {\n\tint64 nodeIPAddressThresholdId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeIPAddressesRequest",
      "code": "message CreateNodeIPAddressesRequest {\n\tint64 nodeId = 1;\n\tstring role = 2;\n\tstring name = 3;\n\trepeated string ipList = 4;\n\tbool canAccess = 5;\n\tbool isUp = 6;\n\tstring groupValue = 7;\n\trepeated int64 nodeClusterIds = 8; // 可选项，所属集群ID列表，如果没有指定，则表示应用于节点所属的所有集群\n}",
      "doc": "批量创建IP地址"
    },
    {
      "name": "CreateNodeIPAddressesResponse",
      "code": "message CreateNodeIPAddressesResponse {\n\trepeated int64 nodeIPAddressIds = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeLogsRequest",
      "code": "message CreateNodeLogsRequest {\n\trepeated NodeLog nodeLogs = 1;\n}",
      "doc": "创建日志"
    },
    {
      "name": "CreateNodeLogsResponse",
      "code": "message CreateNodeLogsResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "CreateNodePriceItemRequest",
      "code": "message CreateNodePriceItemRequest {\n\tstring name = 1;\n\tstring type = 2;\n\tint64 bitsFrom = 3;\n\tint64 bitsTo = 4;\n}",
      "doc": "创建区域价格"
    },
    {
      "name": "CreateNodePriceItemResponse",
      "code": "message CreateNodePriceItemResponse {\n\tint64 NodePriceItemId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeRegionRequest",
      "code": "message CreateNodeRegionRequest {\n\tstring name = 1;\n\tstring description = 2;\n}",
      "doc": "创建区域"
    },
    {
      "name": "CreateNodeRegionResponse",
      "code": "message CreateNodeRegionResponse {\n\tint64 nodeRegionId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeRequest",
      "code": "message CreateNodeRequest {\n\tstring name = 1;\n\tint64 nodeClusterId = 2;\n\tNodeLogin nodeLogin = 3;\n\tint64 nodeGroupId = 4;\n\tint64 dnsDomainId = 5 [deprecated = true];\n\trepeated string dnsRoutes = 6;\n\tint64 nodeRegionId = 7;\n}",
      "doc": "创建节点"
    },
    {
      "name": "CreateNodeResponse",
      "code": "message CreateNodeResponse {\n\tint64 nodeId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeThresholdRequest",
      "code": "message CreateNodeThresholdRequest {\n\tstring role = 1;\n\tint64 nodeClusterId = 2;\n\tint64 nodeId = 3;\n\tstring item = 4;\n\tstring param = 5;\n\tstring operator = 6;\n\tbytes valueJSON = 7;\n\tstring message = 8;\n\tint32 duration = 9;\n\tstring durationUnit = 10;\n\tstring sumMethod = 11;\n\tint32 notifyDuration = 12;\n}",
      "doc": "创建阈值"
    },
    {
      "name": "CreateNodeThresholdResponse",
      "code": "message CreateNodeThresholdResponse {\n\tint64 nodeThresholdId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateNodeValueRequest",
      "code": "message CreateNodeValueRequest {\n\tstring item = 1;\n\tbytes valueJSON = 2;\n\tint64 createdAt = 3;\n}",
      "doc": "记录数据"
    },
    {
      "name": "CreateOrUpdateAdminRequest",
      "code": "message CreateOrUpdateAdminRequest {\n\tstring username = 1;\n\tstring password = 2;\n}",
      "doc": "创建或修改管理员"
    },
    {
      "name": "CreateOrUpdateAdminResponse",
      "code": "message CreateOrUpdateAdminResponse {\n\tint64 adminId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateOrUpdateHTTPFirewallRuleSetFromConfigRequest",
      "code": "message CreateOrUpdateHTTPFirewallRuleSetFromConfigRequest {\n\tbytes firewallRuleSetConfigJSON = 1;\n}",
      "doc": "根据配置创建或修改规则集"
    },
    {
      "name": "CreateOrUpdateHTTPFirewallRuleSetFromConfigResponse",
      "code": "message CreateOrUpdateHTTPFirewallRuleSetFromConfigResponse {\n\tint64 firewallRuleSetId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateOrderMethodRequest",
      "code": "message CreateOrderMethodRequest {\n\tstring name = 1; // 支付名称\n\tstring code = 2; // 支付代号\n\tstring description = 3; // 支付描述\n\n\tstring url = 4; // 自定义支付URL\n\n\tstring parentCode = 5; // 使用预设支付方式代号\n\tbytes paramsJSON = 6; // 预设支付方式参数\n\n\tstring clientType = 7;\n\tstring qrcodeTitle = 8;\n}",
      "doc": "创建支付方式"
    },
    {
      "name": "CreateOrderMethodResponse",
      "code": "message CreateOrderMethodResponse {\n\tint64 orderMethodId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateOriginRequest",
      "code": "message CreateOriginRequest {\n\tstring name = 1; // 名称，为可选项\n\tNetworkAddress addr = 2; // 源站网络地址\n\tbytes ossJSON = 15; // OSS配置信息，源站网络地址中protocol为oss:开头时需要设置此项\n\tstring description = 3; // 描述，为可选项\n\tint32 weight = 4; // 权重，不小于0，一般设置为10\n\tbool isOn = 5; // 是否启用\n\tbytes connTimeoutJSON = 6; // 可选项，连接超时时间\n\tbytes readTimeoutJSON = 7; // 可选项，读取超时时间\n\tbytes idleTimeoutJSON = 8; // 可选项，空闲超时时间\n\tint32 maxConns = 9; // 可选项，最大连接数\n\tint32 maxIdleConns = 10; // 可选项，最大空闲连接数\n\trepeated string domains = 11; // 可选项，专属域名列表\n\tbytes certRefJSON = 12; // 可选项，证书设置\n\tstring host = 13; // 可选项，回源主机名\n\tbool followPort = 14; // 可选项，是否跟随端口\n\tbool http2Enabled = 16; // 可选项，是否支持HTTP/2，只在HTTPS源站时生效\n}",
      "doc": "创建源站"
    },
    {
      "name": "CreateOriginResponse",
      "code": "message CreateOriginResponse {\n\tint64 originId = 1; // 创建的源站ID\n}",
      "doc": ""
    },
    {
      "name": "CreatePlanRequest",
      "code": "message CreatePlanRequest {\n\tstring name = 1;\n\tint64 clusterId = 2;\n\tbytes trafficLimitJSON = 3;\n\tbytes featuresJSON = 4;\n\tstring priceType = 5;\n\tbytes trafficPriceJSON = 6;\n\tbytes bandwidthPriceJSON = 10;\n\tfloat monthlyPrice = 7;\n\tfloat seasonallyPrice = 8;\n\tfloat yearlyPrice = 9;\n\tint32 totalServers = 11; // 可以添加的网站数\n\tint32 totalServerNamesPerServer = 12; // 每个网站可以添加的域名数\n\tint32 totalServerNames = 13; // 可以添加的域名总数\n\tint64 dailyRequests = 14; // 每日访问量额度\n\tint64 monthlyRequests = 15; // 每月访问量额度\n}",
      "doc": "创建套餐"
    },
    {
      "name": "CreatePlanResponse",
      "code": "message CreatePlanResponse {\n\tint64 planId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateReportNodeGroupRequest",
      "code": "message CreateReportNodeGroupRequest {\n\tstring name = 1;\n}",
      "doc": "创建分组"
    },
    {
      "name": "CreateReportNodeGroupResponse",
      "code": "message CreateReportNodeGroupResponse {\n\tint64 reportNodeGroupId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateReportNodeRequest",
      "code": "message CreateReportNodeRequest {\n\tstring name = 1;\n\tstring location = 2;\n\tstring isp = 3;\n\trepeated string allowIPs = 4;\n\trepeated int64 reportNodeGroupIds = 5;\n}",
      "doc": "添加终端"
    },
    {
      "name": "CreateReportNodeResponse",
      "code": "message CreateReportNodeResponse {\n\tint64 reportNodeId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateReverseProxyRequest",
      "code": "message CreateReverseProxyRequest {\n\tbytes schedulingJSON = 1; // 可选项，调度设置 @link json:scheduling\n\tbytes primaryOriginsJSON = 2; // 可选项，主要源站 @link json:origin_refs\n\tbytes backupOriginsJSON = 3; // 可选项，备用源站 @link json:origin_refs\n}",
      "doc": "创建反向代理"
    },
    {
      "name": "CreateReverseProxyResponse",
      "code": "message CreateReverseProxyResponse {\n\tint64 reverseProxyId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateSSLCertRequest",
      "code": "message CreateSSLCertRequest {\n\tbool isOn = 1;\n\tint64 userId = 12; // 所属用户，仅管理员才能指定\n\tstring name = 2;\n\tstring description = 3;\n\tstring serverName = 4;\n\tbool isCA = 5;\n\tbytes certData = 6;\n\tbytes keyData = 7;\n\tint64 timeBeginAt = 8;\n\tint64 timeEndAt = 9;\n\trepeated string dnsNames = 10;\n\trepeated string commonNames = 11;\n}",
      "doc": "创建证书"
    },
    {
      "name": "CreateSSLCertResponse",
      "code": "message CreateSSLCertResponse {\n\tint64 sslCertId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateSSLCertsRequest",
      "code": "message CreateSSLCertsRequest {\n\trepeated cert SSLCerts = 1; // 证书信息\n\tint64 userId = 2; // 用户ID\n\n\n\tmessage cert {\n\t\tbool isOn = 1;\n\t\tstring name = 2;\n\t\tstring description = 3;\n\t\tstring serverName = 4;\n\t\tbool isCA = 5;\n\t\tbytes certData = 6;\n\t\tbytes keyData = 7;\n\t\tint64 timeBeginAt = 8;\n\t\tint64 timeEndAt = 9;\n\t\trepeated string dnsNames = 10;\n\t\trepeated string commonNames = 11;\n\t}\n}",
      "doc": "创建一组证书"
    },
    {
      "name": "CreateSSLCertsResponse",
      "code": "message CreateSSLCertsResponse {\n\trepeated int64 sslCertIds = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateSSLPolicyRequest",
      "code": "message CreateSSLPolicyRequest {\n\tbool http2Enabled = 1; // 可选项，是否启用HTTP/2\n\tbool http3Enabled = 10; // 可选项，是否启用HTTP/3（在满足条件的基础上）\n\tstring minVersion = 2; // 支持的最低SSL版本，可选择值： SSL 3.0, TLS 1.0, TLS 1.1, TLS 1.2, TLS 1.3\n\tbytes sslCertsJSON = 3; // 可选项，关联的证书信息，可以在创建后再通过修改策略来配置 @link json:ssl_cert_refs\n\tbytes hstsJSON = 4; // 可选项，HSTS配置 @link json:hsts\n\tint32 clientAuthType = 5; // 可选项，客户端校验类型：0 无需证书，1 需要客户端证书，2 需要任一客户端证书，3 如果客户端上传了证书才校验，4 需要客户端证书而且需要校验\n\tbytes clientCACertsJSON = 6; // 可选项，CA证书内容\n\trepeated string cipherSuites = 7; // 可选项，自定义加密套件\n\tbool cipherSuitesIsOn = 8; // 可选项，是否启用自定义加密套件\n\tbool ocspIsOn = 9; // 可选项，是否启用OCSP\n}",
      "doc": "创建策略"
    },
    {
      "name": "CreateSSLPolicyResponse",
      "code": "message CreateSSLPolicyResponse {\n\tint64 sslPolicyId = 1; // 创建的策略ID\n}",
      "doc": ""
    },
    {
      "name": "CreateScriptRequest",
      "code": "message CreateScriptRequest {\n\tstring name = 1;\n\tstring filename = 2;\n\tstring code = 3;\n}",
      "doc": "添加脚本"
    },
    {
      "name": "CreateScriptResponse",
      "code": "message CreateScriptResponse {\n\tint64 scriptId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateServerGroupRequest",
      "code": "message CreateServerGroupRequest {\n\tstring name = 1;\n}",
      "doc": "创建分组"
    },
    {
      "name": "CreateServerGroupResponse",
      "code": "message CreateServerGroupResponse {\n\tint64 serverGroupId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateServerRequest",
      "code": "message CreateServerRequest {\n\tint64 userId = 1; // 可选项，用户ID，如果不想指定用户，此值可以为0\n\tint64 adminId = 2; // 可选项，管理员ID\n\tstring type = 3; // 类型：httpProxy（HTTP反向代理，一般CDN服务都选这个）、httpWeb（静态文件服务，只会从服务器上读取文件内容，不会转发到源站）、tcpProxy（TCP反向代理）、udpProxy（UDP反向代理）\n\tstring name = 4; // 网站名称，通常可以是一个域名\n\tstring description = 5; // 可选项，网站描述\n\n\t// 配置相关\n\tbytes serverNamesJSON = 8; // 域名列表 @link json:server_names\n\tbytes serverNamesJON = 19 [deprecated = true]; // 已过期，请使用 serverNamesJSON 代替\n\tbytes httpJSON = 9; // HTTP协议设置，当type为httpProxy或者httpWeb时填写 @link json:http_protocol\n\tbytes httpsJSON = 10;  // HTTPS协议设置，当type为httpProxy或者httpWeb时填写 @link json:https_protocol\n\tbytes tcpJSON = 11;  // TCP协议设置，当type为tcpProxy时填写 @link json:tcp_protocol\n\tbytes tlsJSON = 12;  // TLS协议设置，当type为tcpProxy时填写 @link json:tls_protocol\n\tbytes unixJSON = 13; // 备用参数，不用填写\n\tbytes udpJSON = 14; // UDP协议设置，当type为udpProxy时填写 @link json:udp_protocol\n\tint64 webId = 15; // 可选项，Web配置ID，当type为httpProxy或者httpWeb时填写，可以通过 /HTTPWebService/createHTTPWeb 接口创建；如果你需要配置缓存等信息时需要在 HTTPWebService 接口操作\n\tbytes reverseProxyJSON = 16; // 反向代理（包含源站）配置引用，此项可以在创建网站后再设置 @link json:reverse_proxy_ref\n\trepeated int64 serverGroupIds = 17; // 可选项，所属网站分组ID列表\n\tint64 userPlanId = 18; // 可选项，套餐ID\n\n\tint64 nodeClusterId = 30; // 所部署的集群ID\n\tbytes includeNodesJSON = 31; // 备用参数，不用填写\n\tbytes excludeNodesJSON = 32; // 备用参数，不用填写\n}",
      "doc": "创建网站"
    },
    {
      "name": "CreateServerResponse",
      "code": "message CreateServerResponse {\n\tint64 serverId = 1; // 所创建的网站ID\n}",
      "doc": ""
    },
    {
      "name": "CreateTrafficPackagePeriodRequest",
      "code": "message CreateTrafficPackagePeriodRequest {\n\tint32 count = 1;\n\tstring unit = 2; // month | year\n}",
      "doc": "创建有效期"
    },
    {
      "name": "CreateTrafficPackagePeriodResponse",
      "code": "message CreateTrafficPackagePeriodResponse {\n\tint64 trafficPackagePeriodId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateTrafficPackageRequest",
      "code": "message CreateTrafficPackageRequest {\n\tint32 size = 1; // 流量包尺寸\n\tstring unit = 2; // 单位：gb, tb, pb\n}",
      "doc": "创建流量包"
    },
    {
      "name": "CreateTrafficPackageResponse",
      "code": "message CreateTrafficPackageResponse {\n\tint64 trafficPackageId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateUserADInstanceRequest",
      "code": "message CreateUserADInstanceRequest {\n\tint64 userId = 1;\n\tint64 adPackageId = 2;\n\tint64 adPackagePeriodId = 3;\n\tint32 count = 4;\n}",
      "doc": "创建用户高防实例"
    },
    {
      "name": "CreateUserADInstanceResponse",
      "code": "message CreateUserADInstanceResponse {\n\trepeated int64 userADInstanceIds = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateUserAccessKeyRequest",
      "code": "message CreateUserAccessKeyRequest {\n\tint64 userId = 1;\n\tint64 adminId = 3;\n\tstring description = 2;\n}",
      "doc": "创建AccessKey"
    },
    {
      "name": "CreateUserAccessKeyResponse",
      "code": "message CreateUserAccessKeyResponse {\n\tint64 userAccessKeyId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateUserIdentityRequest",
      "code": "message CreateUserIdentityRequest {\n\tstring orgType = 1;\n\tstring type = 2;\n\tstring realName = 3;\n\tstring number = 4;\n\trepeated int64 fileIds = 5;\n}",
      "doc": "创建实名认证信息"
    },
    {
      "name": "CreateUserIdentityResponse",
      "code": "message CreateUserIdentityResponse {\n\tint64 userIdentityId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateUserNodeRequest",
      "code": "message CreateUserNodeRequest {\n\tstring name = 1;\n\tstring description = 2;\n\tbytes httpJSON = 3;\n\tbytes httpsJSON = 4;\n\tbytes accessAddrsJSON = 5;\n\tbool isOn = 6;\n}",
      "doc": "创建用户节点"
    },
    {
      "name": "CreateUserNodeResponse",
      "code": "message CreateUserNodeResponse {\n\tint64 userNodeId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateUserOrderRequest",
      "code": "message CreateUserOrderRequest {\n\tstring type = 1;\n\tstring orderMethodCode = 2;\n\tdouble amount = 3;\n\tbytes paramsJSON = 4;\n}",
      "doc": "创建订单"
    },
    {
      "name": "CreateUserOrderResponse",
      "code": "message CreateUserOrderResponse {\n\tstring code = 1;\n\tstring payURL = 2;\n}",
      "doc": ""
    },
    {
      "name": "CreateUserRequest",
      "code": "message CreateUserRequest {\n\tstring username = 1;\n\tstring password = 2;\n\tstring fullname = 3;\n\tstring mobile = 4;\n\tstring tel = 5;\n\tstring email = 6;\n\tstring remark = 7;\n\tstring source = 8;\n\tint64 nodeClusterId = 9;\n}",
      "doc": "创建用户"
    },
    {
      "name": "CreateUserResponse",
      "code": "message CreateUserResponse {\n\tint64 userId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateUserTicketCategoryRequest",
      "code": "message CreateUserTicketCategoryRequest {\n\tstring name = 1;\n}",
      "doc": "创建分类"
    },
    {
      "name": "CreateUserTicketCategoryResponse",
      "code": "message CreateUserTicketCategoryResponse {\n\tint64 userTicketCategoryId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateUserTicketLogRequest",
      "code": "message CreateUserTicketLogRequest {\n\tint64 userTicketId = 1;\n\tstring status = 2;\n\tstring comment = 3;\n}",
      "doc": "创建日志"
    },
    {
      "name": "CreateUserTicketLogResponse",
      "code": "message CreateUserTicketLogResponse {\n\tint64 userTicketLogId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateUserTicketRequest",
      "code": "message CreateUserTicketRequest {\n\tint64 userTicketCategoryId = 1;\n\tstring subject = 2;\n\tstring body = 3;\n}",
      "doc": "创建工单"
    },
    {
      "name": "CreateUserTicketResponse",
      "code": "message CreateUserTicketResponse {\n\tint64 userTicketId = 1;\n}",
      "doc": ""
    },
    {
      "name": "CreateUserTrafficPackageRequest",
      "code": "message CreateUserTrafficPackageRequest {\n\tint64 userId = 1;\n\tint64 trafficPackageId = 2;\n\tint64 nodeRegionId = 3;\n\tint64 trafficPackagePeriodId = 4;\n\tint32 count = 5;\n}",
      "doc": "创建用户流量包"
    },
    {
      "name": "CreateUserTrafficPackageResponse",
      "code": "message CreateUserTrafficPackageResponse {\n\trepeated int64 userTrafficPackageIds = 1;\n}",
      "doc": ""
    },
    {
      "name": "DBNode",
      "code": "message DBNode {\n\tint64 id = 1;\n\tstring name = 2;\n\tstring description = 3;\n\tbool isOn = 4;\n\tstring host = 5;\n\tint32 port = 6;\n\tstring database = 7;\n\tstring username = 8;\n\tstring password = 9;\n\tstring charset = 10;\n\tDBNodeStatus status = 30;\n}",
      "doc": ""
    },
    {
      "name": "DBNodeStatus",
      "code": "message DBNodeStatus {\n\tbool isOk = 1;\n\tint64 size = 2;\n\tstring error = 3;\n\tstring version = 4;\n}",
      "doc": ""
    },
    {
      "name": "DBTable",
      "code": "message DBTable {\n\tstring name = 1;\n\tstring schema = 2;\n\tstring type = 3;\n\tstring engine = 4;\n\tint64 rows = 5;\n\tint64 dataLength = 6;\n\tint64 indexLength = 7;\n\tstring comment = 8;\n\tstring collation = 9;\n\tbool isBaseTable = 10;\n\tbool canClean = 11;\n\tbool canDelete = 12;\n}",
      "doc": "数据表信息"
    },
    {
      "name": "DNSDomain",
      "code": "message DNSDomain {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tint64 dataUpdatedAt = 4;\n\tstring dataError = 5;\n\tint64 countServerRecords = 6;\n\tint64 countAllServers = 13;\n\tbool serversChanged = 7;\n\tint64 countNodeRecords = 8;\n\tint64 countAllNodes = 14;\n\tbool nodesChanged = 9;\n\trepeated DNSRoute routes = 10;\n\tint64 providerId = 11;\n\tint64 countNodeClusters = 12;\n\tbool isUp = 15;\n\tbool isDeleted = 16;\n}",
      "doc": ""
    },
    {
      "name": "DNSIssue",
      "code": "message DNSIssue {\n\tstring target = 1;\n\tint64 targetId = 2;\n\tstring type = 3;\n\tstring description = 4;\n\tmap\u003cstring, string\u003e params = 5;\n\tbool mustFix = 6; // 是否必须修复\n}",
      "doc": ""
    },
    {
      "name": "DNSProvider",
      "code": "message DNSProvider {\n\tint64 id = 1;\n\tstring name = 2;\n\tstring type = 3;\n\tstring typeName = 4;\n\tbytes apiParamsJSON = 5;\n\tint64 dataUpdatedAt = 6;\n}",
      "doc": ""
    },
    {
      "name": "DNSProviderType",
      "code": "message DNSProviderType {\n\tstring name = 1;\n\tstring code = 2;\n\tstring description = 3;\n}",
      "doc": ""
    },
    {
      "name": "DNSRecord",
      "code": "message DNSRecord {\n\tstring id = 1;\n\tstring name = 2;\n\tstring value = 3;\n\tstring type = 4;\n\tstring route = 5;\n}",
      "doc": ""
    },
    {
      "name": "DNSRoute",
      "code": "message DNSRoute {\n\tstring name = 1;\n\tstring code = 2;\n}",
      "doc": ""
    },
    {
      "name": "DNSTask",
      "code": "message DNSTask {\n\tint64 id = 1;\n\tstring type = 2;\n\tbool isDone = 3;\n\tbool isOk = 4;\n\tstring error = 5;\n\tint64 updatedAt = 6;\n\n\tNode node = 30;\n\tNodeCluster nodeCluster = 31;\n\tServer server = 32;\n\tDNSDomain dnsDomain = 33;\n}",
      "doc": "DNS相关同步任务"
    },
    {
      "name": "DebugAPINodeRequest",
      "code": "message DebugAPINodeRequest {\n\tbool debug = 1;\n}",
      "doc": "修改调试模式状态"
    },
    {
      "name": "DeleteACMEProviderAccountRequest",
      "code": "message DeleteACMEProviderAccountRequest {\n\tint64 acmeProviderAccountId = 1;\n}",
      "doc": "删除服务商账号"
    },
    {
      "name": "DeleteACMETaskRequest",
      "code": "message DeleteACMETaskRequest {\n\tint64 acmeTaskId = 1;\n}",
      "doc": "删除任务"
    },
    {
      "name": "DeleteACMEUserRequest",
      "code": "message DeleteACMEUserRequest {\n\tint64 acmeUserId = 1;\n}",
      "doc": "删除用户"
    },
    {
      "name": "DeleteADNetworkRequest",
      "code": "message DeleteADNetworkRequest {\n\tint64 adNetworkId = 1;\n}",
      "doc": "删除线路"
    },
    {
      "name": "DeleteADPackageInstanceRequest",
      "code": "message DeleteADPackageInstanceRequest {\n\tint64 adPackageInstanceId = 1;\n}",
      "doc": "删除实例"
    },
    {
      "name": "DeleteADPackagePeriodRequest",
      "code": "message DeleteADPackagePeriodRequest {\n\tint64 adPackagePeriodId = 1;\n}",
      "doc": "删除有效期"
    },
    {
      "name": "DeleteADPackageRequest",
      "code": "message DeleteADPackageRequest {\n\tint64 adPackageId = 1;\n}",
      "doc": "删除高防产品"
    },
    {
      "name": "DeleteAPINodeRequest",
      "code": "message DeleteAPINodeRequest {\n\tint64 apiNodeId = 1;\n}",
      "doc": "删除API节点"
    },
    {
      "name": "DeleteAdminRequest",
      "code": "message DeleteAdminRequest {\n\tint64 adminId = 1;\n}",
      "doc": "删除管理员"
    },
    {
      "name": "DeleteAllDNSTasksRequest",
      "code": "message DeleteAllDNSTasksRequest {\n\n}",
      "doc": "删除所有同步任务"
    },
    {
      "name": "DeleteAllNodeTasksRequest",
      "code": "message DeleteAllNodeTasksRequest {\n\n}",
      "doc": "删除所有任务"
    },
    {
      "name": "DeleteDBNodeRequest",
      "code": "message DeleteDBNodeRequest {\n\tint64 dbNodeId = 1;\n}",
      "doc": "删除节点"
    },
    {
      "name": "DeleteDBNodeTableRequest",
      "code": "message DeleteDBNodeTableRequest {\n\tint64 dbNodeId = 1;\n\tstring dbNodeTable = 2;\n}",
      "doc": "删除表"
    },
    {
      "name": "DeleteDBTableRequest",
      "code": "message DeleteDBTableRequest {\n\tstring dbTable = 1;\n}",
      "doc": "删除表"
    },
    {
      "name": "DeleteDNSDomainRequest",
      "code": "message DeleteDNSDomainRequest {\n\tint64 dnsDomainId = 1;\n}",
      "doc": "删除域名"
    },
    {
      "name": "DeleteDNSProviderRequest",
      "code": "message DeleteDNSProviderRequest {\n\tint64 dnsProviderId = 1;\n}",
      "doc": "删除服务商"
    },
    {
      "name": "DeleteDNSTaskRequest",
      "code": "message DeleteDNSTaskRequest {\n\tint64 dnsTaskId = 1;\n}",
      "doc": "删除任务"
    },
    {
      "name": "DeleteHTTPAccessLogPolicyRequest",
      "code": "message DeleteHTTPAccessLogPolicyRequest {\n\tint64 httpAccessLogPolicyId = 1;\n}",
      "doc": "删除策略"
    },
    {
      "name": "DeleteHTTPCachePolicyRequest",
      "code": "message DeleteHTTPCachePolicyRequest {\n\tint64 httpCachePolicyId = 1;\n}",
      "doc": "删除缓存策略"
    },
    {
      "name": "DeleteHTTPCacheTaskRequest",
      "code": "message DeleteHTTPCacheTaskRequest {\n\tint64 httpCacheTaskId = 1; // 任务ID\n}",
      "doc": "删除任务"
    },
    {
      "name": "DeleteHTTPFirewallPolicyRequest",
      "code": "message DeleteHTTPFirewallPolicyRequest {\n\tint64 httpFirewallPolicyId = 1;\n}",
      "doc": "删除某个防火墙策略"
    },
    {
      "name": "DeleteHTTPLocationRequest",
      "code": "message DeleteHTTPLocationRequest {\n\tint64 locationId = 1;\n}",
      "doc": "删除路径规则"
    },
    {
      "name": "DeleteIPItemRequest",
      "code": "message DeleteIPItemRequest {\n\tint64 ipItemId = 1; // IP条目的ID\n\n\tstring ipFrom = 2; // v0.4.8新增，开始IP，和ipItemId二选一\n\tstring ipTo = 3; // v0.4.8新增，结束IP，和ipItemId二选一\n\tint64 ipListId = 4; // v0.4.8新增，IP列表，IP所在的IP列表，如果不指定，则会删除所有IP列表中的相关IP信息\n}",
      "doc": "删除IP\n可以使用 ipItemId 删除，也可以使用 ipFrom+ipTo+ipListId 删除，如果只是单个IP，则不需要指定ipTo"
    },
    {
      "name": "DeleteIPItemsRequest",
      "code": "message DeleteIPItemsRequest {\n\trepeated int64 ipItemIds = 1;\n}",
      "doc": "批量删除IP"
    },
    {
      "name": "DeleteIPLibraryArtifactRequest",
      "code": "message DeleteIPLibraryArtifactRequest {\n\tint64 ipLibraryArtifactId = 1;\n}",
      "doc": "删除制品"
    },
    {
      "name": "DeleteIPLibraryFileRequest",
      "code": "message DeleteIPLibraryFileRequest {\n\tint64 ipLibraryFileId = 1;\n}",
      "doc": "删除IP库文件"
    },
    {
      "name": "DeleteIPLibraryRequest",
      "code": "message DeleteIPLibraryRequest {\n\tint64 ipLibraryId = 1;\n}",
      "doc": "删除IP库"
    },
    {
      "name": "DeleteIPListRequest",
      "code": "message DeleteIPListRequest {\n\tint64 ipListId = 1;\n}",
      "doc": "删除IP名单"
    },
    {
      "name": "DeleteLogPermanentlyRequest",
      "code": "message DeleteLogPermanentlyRequest {\n\tint64 logId = 1;\n}",
      "doc": "删除单条"
    },
    {
      "name": "DeleteLoginSessionRequest",
      "code": "message DeleteLoginSessionRequest {\n\tstring sid = 1;\n}",
      "doc": "删除SESSION"
    },
    {
      "name": "DeleteLogsPermanentlyRequest",
      "code": "message DeleteLogsPermanentlyRequest {\n\trepeated int64 logIds = 1;\n}",
      "doc": "批量删除"
    },
    {
      "name": "DeleteMessageMediaInstanceRequest",
      "code": "message DeleteMessageMediaInstanceRequest {\n\tint64 messageMediaInstanceId = 1;\n}",
      "doc": "删除接收人"
    },
    {
      "name": "DeleteMessageReceiverRequest",
      "code": "message DeleteMessageReceiverRequest {\n\tint64 messageReceiverId = 1; // 接收者ID\n}",
      "doc": "删除接收者"
    },
    {
      "name": "DeleteMessageRecipientGroupRequest",
      "code": "message DeleteMessageRecipientGroupRequest {\n\tint64 messageRecipientGroupId = 1;\n}",
      "doc": "删除分组"
    },
    {
      "name": "DeleteMessageRecipientRequest",
      "code": "message DeleteMessageRecipientRequest {\n\tint64 messageRecipientId = 1;\n}",
      "doc": "删除接收人"
    },
    {
      "name": "DeleteMessageTaskRequest",
      "code": "message DeleteMessageTaskRequest {\n\tint64 messageTaskId = 1; // 消息任务ID\n}",
      "doc": "删除消息任务"
    },
    {
      "name": "DeleteMetricChartRequest",
      "code": "message DeleteMetricChartRequest {\n\tint64 metricChartId = 1;\n}",
      "doc": "删除图表"
    },
    {
      "name": "DeleteMetricItemRequest",
      "code": "message DeleteMetricItemRequest {\n\tint64 metricItemId = 1;\n}",
      "doc": "删除指标"
    },
    {
      "name": "DeleteNSCluster",
      "code": "message DeleteNSCluster {\n\tint64 nsClusterId = 1;\n}",
      "doc": "删除集群"
    },
    {
      "name": "DeleteNSDomainGroupRequest",
      "code": "message DeleteNSDomainGroupRequest {\n\tint64 nsDomainGroupId = 1;\n}",
      "doc": "删除分组"
    },
    {
      "name": "DeleteNSDomainRequest",
      "code": "message DeleteNSDomainRequest {\n\tint64 nsDomainId = 1;\n}",
      "doc": "删除域名"
    },
    {
      "name": "DeleteNSDomainsRequest",
      "code": "message DeleteNSDomainsRequest {\n\trepeated string names = 1;\n\tint64 userId = 2; // 域名所属用户ID\n}",
      "doc": "批量删除域名"
    },
    {
      "name": "DeleteNSKeyRequest",
      "code": "message DeleteNSKeyRequest {\n\tint64 nsKeyId = 1;\n}",
      "doc": "删除密钥"
    },
    {
      "name": "DeleteNSNodeRequest",
      "code": "message DeleteNSNodeRequest {\n\tint64 nsNodeId = 1;\n}",
      "doc": "删除NS节点"
    },
    {
      "name": "DeleteNSPlanRequest",
      "code": "message DeleteNSPlanRequest {\n\tint64 nsPlanId = 1;\n}",
      "doc": "删除DNS套餐"
    },
    {
      "name": "DeleteNSQuestionOptionRequest",
      "code": "message DeleteNSQuestionOptionRequest {\n\tint64 nsQuestionOptionId = 1;\n}",
      "doc": "删除选项"
    },
    {
      "name": "DeleteNSRecordRequest",
      "code": "message DeleteNSRecordRequest {\n\tint64 nsRecordId = 1;\n}",
      "doc": "删除记录"
    },
    {
      "name": "DeleteNSRecordsWithDomainNamesRequest",
      "code": "message DeleteNSRecordsWithDomainNamesRequest {\n\trepeated string nsDomainNames = 1;\n\tstring searchName = 2;\n\tstring searchValue = 3;\n\tstring searchType = 4;\n\trepeated string searchNSRouteCodes = 5;\n\tint64 userId = 6;\n}",
      "doc": "批量删除一组域名的一组记录"
    },
    {
      "name": "DeleteNSRouteCategoryRequest",
      "code": "message DeleteNSRouteCategoryRequest {\n\tint64 nsRouteCategoryId = 1;\n}",
      "doc": "删除线路分类"
    },
    {
      "name": "DeleteNSRouteRequest",
      "code": "message DeleteNSRouteRequest {\n\tint64 nsRouteId = 1;\n}",
      "doc": "删除自定义线路"
    },
    {
      "name": "DeleteNSUserPlanRequest",
      "code": "message DeleteNSUserPlanRequest{\n\tint64 nsUserPlanId = 1;\n}",
      "doc": "删除用户套餐"
    },
    {
      "name": "DeleteNodeActionRequest",
      "code": "message DeleteNodeActionRequest {\n\tint64 nodeActionId = 1;\n}",
      "doc": "删除动作"
    },
    {
      "name": "DeleteNodeClusterFirewallActionRequest",
      "code": "message DeleteNodeClusterFirewallActionRequest {\n\tint64 nodeClusterFirewallActionId = 1;\n}",
      "doc": "删除动作"
    },
    {
      "name": "DeleteNodeClusterRequest",
      "code": "message DeleteNodeClusterRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "删除集群"
    },
    {
      "name": "DeleteNodeFromNodeClusterRequest",
      "code": "message DeleteNodeFromNodeClusterRequest {\n\tint64 nodeId = 1;\n\tint64 nodeClusterId = 2;\n}",
      "doc": "从集群中删除节点"
    },
    {
      "name": "DeleteNodeGroupRequest",
      "code": "message DeleteNodeGroupRequest {\n\tint64 nodeGroupId = 1;\n}",
      "doc": "删除分组"
    },
    {
      "name": "DeleteNodeIPAddressThresholdRequest",
      "code": "message DeleteNodeIPAddressThresholdRequest {\n\tint64 nodeIPAddressThresholdId = 1;\n}",
      "doc": "删除阈值"
    },
    {
      "name": "DeleteNodeLogsRequest",
      "code": "message DeleteNodeLogsRequest {\n\tint64 nodeClusterId = 15;\n\tint64 nodeId = 1;\n\tstring role = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n\n\tstring dayFrom = 5;\n\tstring dayTo = 6;\n\tstring keyword = 7;\n\tstring level = 8;\n\tint64 serverId = 9;\n\tint32 fixedState = 10;\n\tbool allServers = 11; // 是否获取所有服务相关的日志\n\tint64 originId = 12;\n\tbool isUnread = 13;\n\tstring tag = 14;\n}",
      "doc": "删除日志"
    },
    {
      "name": "DeleteNodePriceItemRequest",
      "code": "message DeleteNodePriceItemRequest {\n\tint64 NodePriceItemId = 1;\n}",
      "doc": "删除区域价格"
    },
    {
      "name": "DeleteNodeRegionRequest",
      "code": "message DeleteNodeRegionRequest {\n\tint64 nodeRegionId = 1;\n}",
      "doc": "删除区域"
    },
    {
      "name": "DeleteNodeRequest",
      "code": "message DeleteNodeRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "删除节点"
    },
    {
      "name": "DeleteNodeTaskRequest",
      "code": "message DeleteNodeTaskRequest {\n\tint64 nodeTaskId = 1;\n}",
      "doc": "删除任务"
    },
    {
      "name": "DeleteNodeTasksRequest",
      "code": "message DeleteNodeTasksRequest {\n\trepeated int64 nodeTaskIds = 1;\n}",
      "doc": "批量删除任务"
    },
    {
      "name": "DeleteNodeThresholdRequest",
      "code": "message DeleteNodeThresholdRequest {\n\tint64 nodeThresholdId = 1;\n}",
      "doc": "删除阈值"
    },
    {
      "name": "DeleteOrderMethodRequest",
      "code": "message DeleteOrderMethodRequest {\n\tint64 orderMethodId = 1;\n}",
      "doc": "删除支付方式"
    },
    {
      "name": "DeletePlanRequest",
      "code": "message DeletePlanRequest {\n\tint64 planId = 1;\n}",
      "doc": "删除套餐"
    },
    {
      "name": "DeleteReportNodeGroupRequest",
      "code": "message DeleteReportNodeGroupRequest {\n\tint64 reportNodeGroupId = 1;\n}",
      "doc": "删除分组"
    },
    {
      "name": "DeleteReportNodeRequest",
      "code": "message DeleteReportNodeRequest {\n\tint64 reportNodeId = 1;\n}",
      "doc": "删除终端"
    },
    {
      "name": "DeleteSSLCertRequest",
      "code": "message DeleteSSLCertRequest {\n\tint64 sslCertId = 1;\n}",
      "doc": "删除证书"
    },
    {
      "name": "DeleteScriptRequest",
      "code": "message DeleteScriptRequest {\n\tint64 scriptId = 1;\n}",
      "doc": "删除脚本"
    },
    {
      "name": "DeleteServerGroupRequest",
      "code": "message DeleteServerGroupRequest {\n\tint64 serverGroupId = 1;\n}",
      "doc": "删除分组"
    },
    {
      "name": "DeleteServerRequest",
      "code": "message DeleteServerRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "禁用网站"
    },
    {
      "name": "DeleteTrafficPackagePeriodRequest",
      "code": "message DeleteTrafficPackagePeriodRequest {\n\tint64 trafficPackagePeriodId = 1;\n}",
      "doc": "删除有效期"
    },
    {
      "name": "DeleteTrafficPackageRequest",
      "code": "message DeleteTrafficPackageRequest {\n\tint64 trafficPackageId = 1;\n}",
      "doc": "删除流量包"
    },
    {
      "name": "DeleteUserADInstanceRequest",
      "code": "message DeleteUserADInstanceRequest {\n\tint64 userADInstanceId = 1;\n}",
      "doc": "删除用户高防实例"
    },
    {
      "name": "DeleteUserAccessKeyRequest",
      "code": "message DeleteUserAccessKeyRequest {\n\tint64 userAccessKeyId = 1;\n}",
      "doc": "删除AccessKey"
    },
    {
      "name": "DeleteUserNodeRequest",
      "code": "message DeleteUserNodeRequest {\n\tint64 userNodeId = 1;\n}",
      "doc": "删除用户节点"
    },
    {
      "name": "DeleteUserPlanRequest",
      "code": "message DeleteUserPlanRequest {\n\tint64 userPlanId = 1;\n}",
      "doc": "删除已购套餐"
    },
    {
      "name": "DeleteUserRequest",
      "code": "message DeleteUserRequest {\n\tint64 userId = 1;\n}",
      "doc": "删除用户"
    },
    {
      "name": "DeleteUserTicketCategoryRequest",
      "code": "message DeleteUserTicketCategoryRequest {\n\tint64 userTicketCategoryId = 1;\n}",
      "doc": "删除分类"
    },
    {
      "name": "DeleteUserTicketLogRequest",
      "code": "message DeleteUserTicketLogRequest {\n\tint64 userTicketLogId = 1;\n}",
      "doc": "删除日志"
    },
    {
      "name": "DeleteUserTicketRequest",
      "code": "message DeleteUserTicketRequest {\n\tint64 userTicketId = 1;\n}",
      "doc": "删除工单"
    },
    {
      "name": "DeleteUserTrafficPackageRequest",
      "code": "message DeleteUserTrafficPackageRequest {\n\tint64 userTrafficPackageId = 1;\n}",
      "doc": "删除流量包"
    },
    {
      "name": "DisableAllNodeIPAddressesWithNodeIdRequest",
      "code": "message DisableAllNodeIPAddressesWithNodeIdRequest {\n\tint64 nodeId = 1;\n\tstring role = 2;\n}",
      "doc": "禁用节点的所有IP地址"
    },
    {
      "name": "DisableAllNodeIPAddressesWithNodeIdResponse",
      "code": "message DisableAllNodeIPAddressesWithNodeIdResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "DisableNodeClusterMetricItemRequest",
      "code": "message DisableNodeClusterMetricItemRequest {\n\tint64 nodeClusterId = 1;\n\tint64 metricItemId = 2;\n}",
      "doc": "禁用某个指标"
    },
    {
      "name": "DisableNodeGrantRequest",
      "code": "message DisableNodeGrantRequest {\n\tint64 nodeGrantId = 1;\n}",
      "doc": "禁用节点认证"
    },
    {
      "name": "DisableNodeGrantResponse",
      "code": "message DisableNodeGrantResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "DisableNodeIPAddressRequest",
      "code": "message DisableNodeIPAddressRequest {\n\tint64 nodeIPAddressId = 1;\n}",
      "doc": "禁用单个IP地址"
    },
    {
      "name": "DisableNodeIPAddressResponse",
      "code": "message DisableNodeIPAddressResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "DisableServerStatBoardChartRequest",
      "code": "message DisableServerStatBoardChartRequest {\n\tint64 serverStatBoardId = 1;\n\tint64 metricChartId = 2;\n}",
      "doc": "取消图表"
    },
    {
      "name": "DownloadFileChunkRequest",
      "code": "message DownloadFileChunkRequest {\n\tint64 fileChunkId = 1;\n}",
      "doc": "下载文件片段"
    },
    {
      "name": "DownloadFileChunkResponse",
      "code": "message DownloadFileChunkResponse {\n\tFileChunk fileChunk = 1;\n}",
      "doc": ""
    },
    {
      "name": "DownloadNSNodeInstallationFileRequest",
      "code": "message DownloadNSNodeInstallationFileRequest {\n\tstring os = 1;\n\tstring arch = 2;\n\tint64 chunkOffset = 3;\n}",
      "doc": "下载最新NS节点安装文件"
    },
    {
      "name": "DownloadNSNodeInstallationFileResponse",
      "code": "message DownloadNSNodeInstallationFileResponse {\n\tbytes chunkData = 1;\n\tstring sum = 2; // 文件的md5sum\n\tint64 offset = 3;\n\tstring version = 4;\n\tstring filename = 5;\n}",
      "doc": ""
    },
    {
      "name": "DownloadNodeInstallationFileRequest",
      "code": "message DownloadNodeInstallationFileRequest {\n\tstring os = 1;\n\tstring arch = 2;\n\tint64 chunkOffset = 3;\n}",
      "doc": "下载最新边缘节点安装文件"
    },
    {
      "name": "DownloadNodeInstallationFileResponse",
      "code": "message DownloadNodeInstallationFileResponse {\n\tbytes chunkData = 1;\n\tstring sum = 2; // 文件的md5sum\n\tint64 offset = 3;\n\tstring version = 4;\n\tstring filename = 5;\n}",
      "doc": ""
    },
    {
      "name": "EnableNodeClusterMetricItemRequest",
      "code": "message EnableNodeClusterMetricItemRequest {\n\tint64 nodeClusterId = 1;\n\tint64 metricItemId = 2;\n}",
      "doc": "启用某个指标"
    },
    {
      "name": "EnableServerStatBoardChartRequest",
      "code": "message EnableServerStatBoardChartRequest {\n\tint64 serverStatBoardId = 1;\n\tint64 metricChartId = 2;\n}",
      "doc": "添加图表"
    },
    {
      "name": "ExecuteNodeClusterHealthCheckRequest",
      "code": "message ExecuteNodeClusterHealthCheckRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "执行健康检查"
    },
    {
      "name": "ExecuteNodeClusterHealthCheckResponse",
      "code": "message ExecuteNodeClusterHealthCheckResponse {\n\trepeated Result results = 1;\n\n\n\tmessage Result {\n\t\tNode node = 1;\n\t\tstring nodeAddr = 2;\n\t\tbool isOk = 3;\n\t\tstring error = 4;\n\t\tfloat costMs = 5;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ExistAvailableDomainsRequest",
      "code": "message ExistAvailableDomainsRequest {\n\n}",
      "doc": "判断是否有域名可选"
    },
    {
      "name": "ExistAvailableDomainsResponse",
      "code": "message ExistAvailableDomainsResponse {\n\tbool exist = 1;\n}",
      "doc": ""
    },
    {
      "name": "ExistDNSDomainRecordRequest",
      "code": "message ExistDNSDomainRecordRequest {\n\tint64 dnsDomainId = 1;\n\tstring name = 2;\n\tstring type = 3; // 解析类型，比如A, CNAME等\n\tstring route = 4; // 线路\n\tstring value = 5; // 值\n}",
      "doc": "检查域名是否在记录中"
    },
    {
      "name": "ExistDNSDomainRecordResponse",
      "code": "message ExistDNSDomainRecordResponse {\n\tbool isOk = 1;\n}",
      "doc": ""
    },
    {
      "name": "ExistNSDomainsRequest",
      "code": "message ExistNSDomainsRequest {\n\trepeated string names = 1;\n\tint64 userId = 2;\n}",
      "doc": "检查一组域名是否在用户账户中存在"
    },
    {
      "name": "ExistNSDomainsResponse",
      "code": "message ExistNSDomainsResponse {\n\trepeated string existingNames = 1;\n}",
      "doc": ""
    },
    {
      "name": "ExistVerifiedNSDomainsRequest",
      "code": "message ExistVerifiedNSDomainsRequest {\n\trepeated string names = 1;\n}",
      "doc": "检查一组域名是否已通过验证"
    },
    {
      "name": "ExistVerifiedNSDomainsResponse",
      "code": "message ExistVerifiedNSDomainsResponse {\n\trepeated string existingNames = 1;\n}",
      "doc": ""
    },
    {
      "name": "ExistsDNSTasksRequest",
      "code": "message ExistsDNSTasksRequest {\n\n}",
      "doc": "检查是否有正在执行的任务"
    },
    {
      "name": "ExistsDNSTasksResponse",
      "code": "message ExistsDNSTasksResponse {\n\tbool existTasks = 1;\n\tbool existError = 2;\n}",
      "doc": ""
    },
    {
      "name": "ExistsEnabledIPItemRequest",
      "code": "message ExistsEnabledIPItemRequest {\n\tint64 ipItemId = 1;\n}",
      "doc": "检查IP是否存在"
    },
    {
      "name": "ExistsEnabledIPItemResponse",
      "code": "message ExistsEnabledIPItemResponse {\n\tbool exists = 1;\n}",
      "doc": ""
    },
    {
      "name": "ExistsEnabledIPListRequest",
      "code": "message ExistsEnabledIPListRequest {\n\tint64 ipListId = 1;\n}",
      "doc": "检查IPList是否存在"
    },
    {
      "name": "ExistsEnabledIPListResponse",
      "code": "message ExistsEnabledIPListResponse {\n\tbool exists = 1;\n}",
      "doc": ""
    },
    {
      "name": "ExistsNodeClusterMetricItemRequest",
      "code": "message ExistsNodeClusterMetricItemRequest {\n\tint64 nodeClusterId = 1;\n\tint64 metricItemId = 2;\n}",
      "doc": "检查是否已添加某个指标"
    },
    {
      "name": "ExistsNodeTasksRequest",
      "code": "message ExistsNodeTasksRequest {\n\trepeated string excludeTypes = 1;\n}",
      "doc": "检查是否有正在执行的任务"
    },
    {
      "name": "ExistsNodeTasksResponse",
      "code": "message ExistsNodeTasksResponse {\n\tbool existTasks = 1;\n\tbool existError = 2;\n}",
      "doc": ""
    },
    {
      "name": "File",
      "code": "message File {\n\tint64 id = 1;\n\tstring filename = 2;\n\tint64 size = 3;\n\tint64 createdAt = 4;\n\tbool isPublic = 5;\n\tstring mimeType = 6;\n\tstring type = 7;\n}",
      "doc": ""
    },
    {
      "name": "FileChunk",
      "code": "message FileChunk {\n\tbytes data = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindACMEAuthenticationKeyWithTokenRequest",
      "code": "message FindACMEAuthenticationKeyWithTokenRequest {\n\tstring token = 1;\n}",
      "doc": "获取Key"
    },
    {
      "name": "FindACMEAuthenticationKeyWithTokenResponse",
      "code": "message FindACMEAuthenticationKeyWithTokenResponse {\n\tstring key = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindACMEProviderWithCodeRequest",
      "code": "message FindACMEProviderWithCodeRequest{\n\tstring acmeProviderCode = 1;\n}",
      "doc": "根据代号查找服务商"
    },
    {
      "name": "FindACMEProviderWithCodeResponse",
      "code": "message FindACMEProviderWithCodeResponse {\n\tACMEProvider acmeProvider = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindACMETaskUserRequest",
      "code": "message FindACMETaskUserRequest {\n\tint64 acmeTaskId = 1; // 任务ID\n}",
      "doc": "查找任务所属用户"
    },
    {
      "name": "FindACMETaskUserResponse",
      "code": "message FindACMETaskUserResponse {\n\tUser user = 1; // 用户信息，只包含几个基本的信息\n}",
      "doc": ""
    },
    {
      "name": "FindADNetworkRequest",
      "code": "message FindADNetworkRequest {\n\tint64 adNetworkId = 1;\n}",
      "doc": "查找单个线路"
    },
    {
      "name": "FindADNetworkResponse",
      "code": "message FindADNetworkResponse {\n\tADNetwork adNetwork = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindADPackageInstanceRequest",
      "code": "message FindADPackageInstanceRequest {\n\tint64 adPackageInstanceId = 1;\n}",
      "doc": "查找单个实例"
    },
    {
      "name": "FindADPackageInstanceResponse",
      "code": "message FindADPackageInstanceResponse {\n\tADPackageInstance adPackageInstance = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindADPackagePeriodRequest",
      "code": "message FindADPackagePeriodRequest {\n\tint64 adPackagePeriodId = 1;\n}",
      "doc": "查找有效期"
    },
    {
      "name": "FindADPackagePeriodResponse",
      "code": "message FindADPackagePeriodResponse {\n\tADPackagePeriod adPackagePeriod = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindADPackagePriceRequest",
      "code": "message FindADPackagePriceRequest {\n\tint64 adPackageId = 1;\n\tint64 adPackagePeriodId = 2;\n\tint32 count = 3;\n}",
      "doc": "获取单个高防产品具体价格"
    },
    {
      "name": "FindADPackagePriceResponse",
      "code": "message FindADPackagePriceResponse {\n\tdouble price = 1; // 单价\n\tdouble amount = 2; // 总价\n}",
      "doc": ""
    },
    {
      "name": "FindADPackagePricesRequest",
      "code": "message FindADPackagePricesRequest {\n\tint64 adPackageId = 1;\n}",
      "doc": "查找高防产品价格"
    },
    {
      "name": "FindADPackagePricesResponse",
      "code": "message FindADPackagePricesResponse {\n\trepeated ADPackagePrice adPackagePrices = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindADPackageRequest",
      "code": "message FindADPackageRequest {\n\tint64 adPackageId = 1;\n}",
      "doc": "查找单个高防产品"
    },
    {
      "name": "FindADPackageResponse",
      "code": "message FindADPackageResponse {\n\tADPackage adPackage = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAPIMethodStatsWithDayRequest",
      "code": "message FindAPIMethodStatsWithDayRequest {\n\tstring day = 1; // YYYYMMDD\n}",
      "doc": "查找某天的统计"
    },
    {
      "name": "FindAPIMethodStatsWithDayResponse",
      "code": "message FindAPIMethodStatsWithDayResponse {\n\trepeated APIMethodStat apiMethodStats = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAPINodesWithNodeClusterRequest",
      "code": "message FindAPINodesWithNodeClusterRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "查找集群的API节点信息"
    },
    {
      "name": "FindAPINodesWithNodeClusterResponse",
      "code": "message FindAPINodesWithNodeClusterResponse {\n\tbool useAllAPINodes = 1;\n\trepeated APINode apiNodes = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindAdminFullnameRequest",
      "code": "message FindAdminFullnameRequest {\n\tint64 adminId = 1;\n}",
      "doc": "获取管理员名称"
    },
    {
      "name": "FindAdminFullnameResponse",
      "code": "message FindAdminFullnameResponse {\n\tstring fullname = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllACMEProviderAccountsWithProviderCodeRequest",
      "code": "message FindAllACMEProviderAccountsWithProviderCodeRequest {\n\tstring acmeProviderCode = 1;\n}",
      "doc": "使用代号查找服务商账号"
    },
    {
      "name": "FindAllACMEProviderAccountsWithProviderCodeResponse",
      "code": "message FindAllACMEProviderAccountsWithProviderCodeResponse {\n\trepeated ACMEProviderAccount acmeProviderAccounts = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllACMEProvidersRequest",
      "code": "message FindAllACMEProvidersRequest {\n\n}",
      "doc": "查找所有的服务商"
    },
    {
      "name": "FindAllACMEProvidersResponse",
      "code": "message FindAllACMEProvidersResponse {\n\trepeated ACMEProvider acmeProviders = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllACMEUsersRequest",
      "code": "message FindAllACMEUsersRequest {\n\tint64 adminId = 1;\n\tint64 userId = 2;\n\tstring acmeProviderCode = 3;\n}",
      "doc": "查找所有用户"
    },
    {
      "name": "FindAllACMEUsersResponse",
      "code": "message FindAllACMEUsersResponse {\n\trepeated ACMEUser acmeUsers = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllADNetworkRequest",
      "code": "message FindAllADNetworkRequest {\n\n}",
      "doc": "列出所有线路"
    },
    {
      "name": "FindAllADNetworkResponse",
      "code": "message FindAllADNetworkResponse {\n\trepeated ADNetwork adNetworks = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllADPackageInstancesRequest",
      "code": "message FindAllADPackageInstancesRequest {\n\tint64 adPackageId = 1;\n}",
      "doc": "列出单个高防产品所有实例"
    },
    {
      "name": "FindAllADPackageInstancesResponse",
      "code": "message FindAllADPackageInstancesResponse {\n\trepeated ADPackageInstance adPackageInstances = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllADPackagePeriodsRequest",
      "code": "message FindAllADPackagePeriodsRequest {\n\n}",
      "doc": "列出所有有效期"
    },
    {
      "name": "FindAllADPackagePeriodsResponse",
      "code": "message FindAllADPackagePeriodsResponse {\n\trepeated ADPackagePeriod adPackagePeriods = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllADPackagePricesRequest",
      "code": "message FindAllADPackagePricesRequest {\n\n}",
      "doc": "查找所有高防产品价格"
    },
    {
      "name": "FindAllADPackagePricesResponse",
      "code": "message FindAllADPackagePricesResponse {\n\trepeated ADPackagePrice adPackagePrices = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAdminModulesRequest",
      "code": "message FindAllAdminModulesRequest {\n\n}",
      "doc": "获取管理所有权限列表"
    },
    {
      "name": "FindAllAdminModulesResponse",
      "code": "message FindAllAdminModulesResponse {\n\trepeated AdminModuleList adminModules = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAgentNSRoutesRequest",
      "code": "message FindAllAgentNSRoutesRequest {\n\n}",
      "doc": "查找默认的搜索引擎线路"
    },
    {
      "name": "FindAllAgentNSRoutesResponse",
      "code": "message FindAllAgentNSRoutesResponse{\n\trepeated NSRoute nsRoutes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAvailableADNetworksRequest",
      "code": "message FindAllAvailableADNetworksRequest {\n\n}",
      "doc": "列出所有可用的线路"
    },
    {
      "name": "FindAllAvailableADNetworksResponse",
      "code": "message FindAllAvailableADNetworksResponse {\n\trepeated ADNetwork adNetworks = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAvailableADPackagePeriodsRequest",
      "code": "message FindAllAvailableADPackagePeriodsRequest {\n\n}",
      "doc": "列出所有可用有效期"
    },
    {
      "name": "FindAllAvailableADPackagePeriodsResponse",
      "code": "message FindAllAvailableADPackagePeriodsResponse {\n\trepeated ADPackagePeriod adPackagePeriods = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAvailableNSDomainGroupsRequest",
      "code": "message FindAllAvailableNSDomainGroupsRequest {\n\tint64 userId = 1;\n}",
      "doc": "查询所有启用分组"
    },
    {
      "name": "FindAllAvailableNSDomainGroupsResponse",
      "code": "message FindAllAvailableNSDomainGroupsResponse {\n\trepeated NSDomainGroup nsDomainGroups = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAvailableNodePriceItemsRequest",
      "code": "message FindAllAvailableNodePriceItemsRequest {\n\tstring type = 1;\n}",
      "doc": "查找所有启用的区域价格"
    },
    {
      "name": "FindAllAvailableNodePriceItemsResponse",
      "code": "message FindAllAvailableNodePriceItemsResponse {\n\trepeated NodePriceItem NodePriceItems = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAvailableNodeRegionsRequest",
      "code": "message FindAllAvailableNodeRegionsRequest {\n\n}",
      "doc": "查找所有启用的区域"
    },
    {
      "name": "FindAllAvailableNodeRegionsResponse",
      "code": "message FindAllAvailableNodeRegionsResponse {\n\trepeated NodeRegion nodeRegions = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAvailableOrderMethodsRequest",
      "code": "message FindAllAvailableOrderMethodsRequest {\n\n}",
      "doc": "查找所有已启用的支付方式"
    },
    {
      "name": "FindAllAvailableOrderMethodsResponse",
      "code": "message FindAllAvailableOrderMethodsResponse {\n\trepeated OrderMethod orderMethods = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAvailableTrafficPackagePeriodsRequest",
      "code": "message FindAllAvailableTrafficPackagePeriodsRequest {\n\n}",
      "doc": "列出所有可用有效期"
    },
    {
      "name": "FindAllAvailableTrafficPackagePeriodsResponse",
      "code": "message FindAllAvailableTrafficPackagePeriodsResponse {\n\trepeated TrafficPackagePeriod trafficPackagePeriods = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAvailableTrafficPackagesRequest",
      "code": "message FindAllAvailableTrafficPackagesRequest {\n\n}",
      "doc": "查找所有可用流量包"
    },
    {
      "name": "FindAllAvailableTrafficPackagesResponse",
      "code": "message FindAllAvailableTrafficPackagesResponse {\n\trepeated TrafficPackage trafficPackages = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllAvailableUserTicketCategoriesRequest",
      "code": "message FindAllAvailableUserTicketCategoriesRequest {\n\n}",
      "doc": "查找所有启用中的分类"
    },
    {
      "name": "FindAllAvailableUserTicketCategoriesResponse",
      "code": "message FindAllAvailableUserTicketCategoriesResponse {\n\trepeated UserTicketCategory userTicketCategories = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllBasicDNSDomainsWithDNSProviderIdRequest",
      "code": "message FindAllBasicDNSDomainsWithDNSProviderIdRequest {\n\tint64 dnsProviderId = 1;\n}",
      "doc": "列出服务商下的所有域名基本信息"
    },
    {
      "name": "FindAllBasicDNSDomainsWithDNSProviderIdResponse",
      "code": "message FindAllBasicDNSDomainsWithDNSProviderIdResponse {\n\trepeated DNSDomain dnsDomains = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllClientAgentsResponse",
      "code": "message FindAllClientAgentsResponse {\n\trepeated ClientAgent clientAgents = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllDBNodeTablesRequest",
      "code": "message FindAllDBNodeTablesRequest {\n\tint64 dbNodeId = 1;\n}",
      "doc": "获取所有表信息"
    },
    {
      "name": "FindAllDBNodeTablesResponse",
      "code": "message FindAllDBNodeTablesResponse {\n\trepeated DBTable dbNodeTables = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllDBTablesRequest",
      "code": "message FindAllDBTablesRequest {\n\n}",
      "doc": "获取所有表信息"
    },
    {
      "name": "FindAllDBTablesResponse",
      "code": "message FindAllDBTablesResponse {\n\trepeated DBTable dbTables = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllDNSDomainRoutesRequest",
      "code": "message FindAllDNSDomainRoutesRequest {\n\tint64 dnsDomainId = 1;\n}",
      "doc": "查看支持的线路"
    },
    {
      "name": "FindAllDNSDomainRoutesResponse",
      "code": "message FindAllDNSDomainRoutesResponse {\n\trepeated DNSRoute routes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllDNSDomainsWithDNSProviderIdRequest",
      "code": "message FindAllDNSDomainsWithDNSProviderIdRequest {\n\tint64 dnsProviderId = 1;\n}",
      "doc": "列出服务商下的所有域名"
    },
    {
      "name": "FindAllDNSDomainsWithDNSProviderIdResponse",
      "code": "message FindAllDNSDomainsWithDNSProviderIdResponse {\n\trepeated DNSDomain dnsDomains = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllDNSIssuesRequest",
      "code": "message FindAllDNSIssuesRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "查找问题"
    },
    {
      "name": "FindAllDNSIssuesResponse",
      "code": "message FindAllDNSIssuesResponse {\n\trepeated DNSIssue issues = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllDNSProviderTypesRequest",
      "code": "message FindAllDNSProviderTypesRequest {\n\n}",
      "doc": "取得所有服务商类型"
    },
    {
      "name": "FindAllDNSProviderTypesResponse",
      "code": "message FindAllDNSProviderTypesResponse {\n\trepeated DNSProviderType providerTypes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllDefaultChinaProvinceRoutesRequest",
      "code": "message FindAllDefaultChinaProvinceRoutesRequest {\n\n}",
      "doc": "查找默认的中国省份线路"
    },
    {
      "name": "FindAllDefaultChinaProvinceRoutesResponse",
      "code": "message FindAllDefaultChinaProvinceRoutesResponse {\n\trepeated NSRoute nsRoutes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllDefaultISPRoutesRequest",
      "code": "message FindAllDefaultISPRoutesRequest {\n\n}",
      "doc": "查找默认的ISP线路"
    },
    {
      "name": "FindAllDefaultISPRoutesResponse",
      "code": "message FindAllDefaultISPRoutesResponse {\n\trepeated NSRoute nsRoutes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllDefaultWorldRegionRoutesRequest",
      "code": "message FindAllDefaultWorldRegionRoutesRequest {\n\n}",
      "doc": "查找默认的世界区域线路"
    },
    {
      "name": "FindAllDefaultWorldRegionRoutesResponse",
      "code": "message FindAllDefaultWorldRegionRoutesResponse {\n\trepeated NSRoute nsRoutes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllDoingDNSTasksRequest",
      "code": "message FindAllDoingDNSTasksRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "查找需要通知的任务"
    },
    {
      "name": "FindAllDoingDNSTasksResponse",
      "code": "message FindAllDoingDNSTasksResponse {\n\trepeated DNSTask dnsTasks = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledAPINodesRequest",
      "code": "message FindAllEnabledAPINodesRequest {\n\n}",
      "doc": "列出所有可用API节点"
    },
    {
      "name": "FindAllEnabledAPINodesResponse",
      "code": "message FindAllEnabledAPINodesResponse {\n\trepeated APINode apiNodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledAPITokensRequest",
      "code": "message FindAllEnabledAPITokensRequest {\n\tstring role = 1;\n}",
      "doc": "获取API令牌"
    },
    {
      "name": "FindAllEnabledAPITokensResponse",
      "code": "message FindAllEnabledAPITokensResponse {\n\trepeated APIToken apiTokens = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledDNSProvidersRequest",
      "code": "message FindAllEnabledDNSProvidersRequest {\n\tint64 adminId = 1;\n\tint64 userId = 2;\n}",
      "doc": "查找所有的DNS服务商"
    },
    {
      "name": "FindAllEnabledDNSProvidersResponse",
      "code": "message FindAllEnabledDNSProvidersResponse {\n\trepeated DNSProvider dnsProviders = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledDNSProvidersWithTypeRequest",
      "code": "message FindAllEnabledDNSProvidersWithTypeRequest {\n\tstring providerTypeCode = 1;\n}",
      "doc": "取得某个类型的所有服务商"
    },
    {
      "name": "FindAllEnabledDNSProvidersWithTypeResponse",
      "code": "message FindAllEnabledDNSProvidersWithTypeResponse {\n\trepeated DNSProvider dnsProviders = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledHTTPCachePoliciesRequest",
      "code": "message FindAllEnabledHTTPCachePoliciesRequest {\n\n}",
      "doc": "获取所有可用策略"
    },
    {
      "name": "FindAllEnabledHTTPCachePoliciesResponse",
      "code": "message FindAllEnabledHTTPCachePoliciesResponse {\n\trepeated HTTPCachePolicy cachePolicies = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledHTTPFirewallPoliciesRequest",
      "code": "message FindAllEnabledHTTPFirewallPoliciesRequest {\n\n}",
      "doc": "获取所有可用策略"
    },
    {
      "name": "FindAllEnabledHTTPFirewallPoliciesResponse",
      "code": "message FindAllEnabledHTTPFirewallPoliciesResponse {\n\trepeated HTTPFirewallPolicy firewallPolicies = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledIPLibrariesWithTypeRequest",
      "code": "message FindAllEnabledIPLibrariesWithTypeRequest {\n\tstring type = 1;\n}",
      "doc": "列出某个类型的所有IP库"
    },
    {
      "name": "FindAllEnabledIPLibrariesWithTypeResponse",
      "code": "message FindAllEnabledIPLibrariesWithTypeResponse {\n\trepeated IPLibrary ipLibraries = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledMessageReceiversRequest",
      "code": "message FindAllEnabledMessageReceiversRequest {\n\tstring role = 4; // 集群角色：node 或 dns\n\tint64 nodeClusterId = 1; // 集群ID\n\tint64 nodeId = 2; // 节点ID\n\tint64 serverId = 3; // 网站ID\n}",
      "doc": "查找接收者"
    },
    {
      "name": "FindAllEnabledMessageReceiversResponse",
      "code": "message FindAllEnabledMessageReceiversResponse {\n\trepeated MessageReceiver messageReceivers = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledMessageReceiversWithMessageRecipientIdRequest",
      "code": "message FindAllEnabledMessageReceiversWithMessageRecipientIdRequest {\n\tint64 messageRecipientId = 1; // 关联的接收人ID\n}",
      "doc": "根据接收人查找关联的接收者"
    },
    {
      "name": "FindAllEnabledMessageReceiversWithMessageRecipientIdResponse",
      "code": "message FindAllEnabledMessageReceiversWithMessageRecipientIdResponse {\n\trepeated MessageReceiver messageReceivers = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledMessageRecipientGroupsRequest",
      "code": "message FindAllEnabledMessageRecipientGroupsRequest {\n\n}",
      "doc": "查找所有可用的分组"
    },
    {
      "name": "FindAllEnabledMessageRecipientGroupsResponse",
      "code": "message FindAllEnabledMessageRecipientGroupsResponse {\n\trepeated MessageRecipientGroup messageRecipientGroups = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNSPlansRequest",
      "code": "message FindAllEnabledNSPlansRequest {\n\n}",
      "doc": "查找所有可用DNS套餐"
    },
    {
      "name": "FindAllEnabledNSPlansResponse",
      "code": "message FindAllEnabledNSPlansResponse {\n\trepeated NSPlan nsPlans = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeClusterFirewallActionsRequest",
      "code": "message FindAllEnabledNodeClusterFirewallActionsRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "查询集群的所有动作"
    },
    {
      "name": "FindAllEnabledNodeClusterFirewallActionsResponse",
      "code": "message FindAllEnabledNodeClusterFirewallActionsResponse {\n\trepeated NodeClusterFirewallAction nodeClusterFirewallActions = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeClustersRequest",
      "code": "message FindAllEnabledNodeClustersRequest {\n\n}",
      "doc": "获取所有集群的信息"
    },
    {
      "name": "FindAllEnabledNodeClustersResponse",
      "code": "message FindAllEnabledNodeClustersResponse {\n\trepeated NodeCluster nodeClusters = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeClustersWithDNSDomainIdRequest",
      "code": "message FindAllEnabledNodeClustersWithDNSDomainIdRequest {\n\tint64 dnsDomainId = 1;\n}",
      "doc": "查找使用某个域名的所有集群"
    },
    {
      "name": "FindAllEnabledNodeClustersWithDNSDomainIdResponse",
      "code": "message FindAllEnabledNodeClustersWithDNSDomainIdResponse {\n\trepeated NodeCluster nodeClusters = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeClustersWithHTTPCachePolicyIdRequest",
      "code": "message FindAllEnabledNodeClustersWithHTTPCachePolicyIdRequest {\n\tint64 httpCachePolicyId = 1;\n}",
      "doc": "查找使用缓存策略的所有集群"
    },
    {
      "name": "FindAllEnabledNodeClustersWithHTTPCachePolicyIdResponse",
      "code": "message FindAllEnabledNodeClustersWithHTTPCachePolicyIdResponse {\n\trepeated NodeCluster nodeClusters = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeClustersWithHTTPFirewallPolicyIdRequest",
      "code": "message FindAllEnabledNodeClustersWithHTTPFirewallPolicyIdRequest {\n\tint64 httpFirewallPolicyId = 1;\n}",
      "doc": "查找使用某个WAF策略的所有集群"
    },
    {
      "name": "FindAllEnabledNodeClustersWithHTTPFirewallPolicyIdResponse",
      "code": "message FindAllEnabledNodeClustersWithHTTPFirewallPolicyIdResponse {\n\trepeated NodeCluster nodeClusters = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeClustersWithNodeGrantIdRequest",
      "code": "message FindAllEnabledNodeClustersWithNodeGrantIdRequest {\n\tint64 nodeGrantId = 1;\n}",
      "doc": "查找使用某个认证的所有集群"
    },
    {
      "name": "FindAllEnabledNodeClustersWithNodeGrantIdResponse",
      "code": "message FindAllEnabledNodeClustersWithNodeGrantIdResponse {\n\trepeated NodeCluster nodeClusters = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeGrantsRequest",
      "code": "message FindAllEnabledNodeGrantsRequest {\n\n}",
      "doc": "获取所有认证信息"
    },
    {
      "name": "FindAllEnabledNodeGrantsResponse",
      "code": "message FindAllEnabledNodeGrantsResponse {\n\trepeated NodeGrant nodeGrants = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeGroupsWithNodeClusterIdRequest",
      "code": "message FindAllEnabledNodeGroupsWithNodeClusterIdRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "查询所有分组"
    },
    {
      "name": "FindAllEnabledNodeGroupsWithNodeClusterIdResponse",
      "code": "message FindAllEnabledNodeGroupsWithNodeClusterIdResponse {\n\trepeated NodeGroup nodeGroups = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeIPAddressThresholdsRequest",
      "code": "message FindAllEnabledNodeIPAddressThresholdsRequest {\n\tint64 nodeIPAddressId = 1;\n}",
      "doc": "查找IP的所有阈值"
    },
    {
      "name": "FindAllEnabledNodeIPAddressThresholdsResponse",
      "code": "message FindAllEnabledNodeIPAddressThresholdsResponse {\n\trepeated NodeIPAddressThreshold nodeIPAddressThresholds = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeIPAddressesWithNodeIdRequest",
      "code": "message FindAllEnabledNodeIPAddressesWithNodeIdRequest {\n\tint64 nodeId = 1;\n\tstring role = 2;\n}",
      "doc": "查找节点的所有地址"
    },
    {
      "name": "FindAllEnabledNodeIPAddressesWithNodeIdResponse",
      "code": "message FindAllEnabledNodeIPAddressesWithNodeIdResponse {\n\trepeated NodeIPAddress nodeIPAddresses = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodePriceItemsRequest",
      "code": "message FindAllEnabledNodePriceItemsRequest {\n\tstring type = 1;\n}",
      "doc": "查找所有区域价格"
    },
    {
      "name": "FindAllEnabledNodePriceItemsResponse",
      "code": "message FindAllEnabledNodePriceItemsResponse {\n\trepeated NodePriceItem NodePriceItems = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeRegionsRequest",
      "code": "message FindAllEnabledNodeRegionsRequest {\n\n}",
      "doc": "查找所有区域"
    },
    {
      "name": "FindAllEnabledNodeRegionsResponse",
      "code": "message FindAllEnabledNodeRegionsResponse {\n\trepeated NodeRegion nodeRegions = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodeThresholdsRequest",
      "code": "message FindAllEnabledNodeThresholdsRequest {\n\tstring role = 1;\n\tint64 nodeClusterId = 2;\n\tint64 nodeId = 3;\n}",
      "doc": "查询阈值"
    },
    {
      "name": "FindAllEnabledNodeThresholdsResponse",
      "code": "message FindAllEnabledNodeThresholdsResponse {\n\trepeated NodeThreshold nodeThresholds = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodesDNSWithNodeClusterIdRequest",
      "code": "message FindAllEnabledNodesDNSWithNodeClusterIdRequest {\n\tint64 nodeClusterId = 1;\n\tbool isInstalled = 2;\n}",
      "doc": "取得某个集群下的所有节点DNS信息"
    },
    {
      "name": "FindAllEnabledNodesDNSWithNodeClusterIdResponse",
      "code": "message FindAllEnabledNodesDNSWithNodeClusterIdResponse {\n\trepeated NodeDNSInfo nodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodesWithNodeClusterIdRequest",
      "code": "message FindAllEnabledNodesWithNodeClusterIdRequest {\n\tint64 nodeClusterId = 1; // 集群ID\n\tbool includeSecondary = 2; // 是否检查节点的从集群，如果为false，则只检查主集群ID\n}",
      "doc": "根据集群查找所有节点"
    },
    {
      "name": "FindAllEnabledNodesWithNodeClusterIdResponse",
      "code": "message FindAllEnabledNodesWithNodeClusterIdResponse {\n\trepeated Node nodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledNodesWithNodeGrantIdRequest",
      "code": "message FindAllEnabledNodesWithNodeGrantIdRequest {\n\tint64 nodeGrantId = 1;\n}",
      "doc": "查找使用某个认证的所有节点"
    },
    {
      "name": "FindAllEnabledNodesWithNodeGrantIdResponse",
      "code": "message FindAllEnabledNodesWithNodeGrantIdResponse {\n\trepeated Node nodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledOrderMethodsRequest",
      "code": "message FindAllEnabledOrderMethodsRequest {\n\n}",
      "doc": "查找所有支付方式"
    },
    {
      "name": "FindAllEnabledOrderMethodsResponse",
      "code": "message FindAllEnabledOrderMethodsResponse {\n\trepeated OrderMethod orderMethods = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledRegionCitiesRequest",
      "code": "message FindAllEnabledRegionCitiesRequest {\n\tbool includeRegionProvince = 1;\n}",
      "doc": "查找所有城市"
    },
    {
      "name": "FindAllEnabledRegionCitiesResponse",
      "code": "message FindAllEnabledRegionCitiesResponse {\n\trepeated RegionCity regionCities = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledRegionCountriesRequest",
      "code": "message FindAllEnabledRegionCountriesRequest {\n\n}",
      "doc": "查找所有的国家/地区列表"
    },
    {
      "name": "FindAllEnabledRegionCountriesResponse",
      "code": "message FindAllEnabledRegionCountriesResponse {\n\trepeated RegionCountry regionCountries = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledRegionProvidersRequest",
      "code": "message FindAllEnabledRegionProvidersRequest {\n\n}",
      "doc": "查找所有ISP"
    },
    {
      "name": "FindAllEnabledRegionProvidersResponse",
      "code": "message FindAllEnabledRegionProvidersResponse {\n\trepeated RegionProvider regionProviders = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledRegionProvincesWithCountryIdRequest",
      "code": "message FindAllEnabledRegionProvincesWithCountryIdRequest {\n\tint64 regionCountryId = 1;\n}",
      "doc": "查找所有省份"
    },
    {
      "name": "FindAllEnabledRegionProvincesWithCountryIdResponse",
      "code": "message FindAllEnabledRegionProvincesWithCountryIdResponse {\n\trepeated RegionProvince regionProvinces = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledReportNodeGroupsRequest",
      "code": "message FindAllEnabledReportNodeGroupsRequest {\n\n}",
      "doc": "查找所有分组"
    },
    {
      "name": "FindAllEnabledReportNodeGroupsResponse",
      "code": "message FindAllEnabledReportNodeGroupsResponse {\n\trepeated ReportNodeGroup reportNodeGroups = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledServerGroupsRequest",
      "code": "message FindAllEnabledServerGroupsRequest {\n\tint64 userId = 1; // 可选项，用户ID，只有管理员才可以指定用户ID\n}",
      "doc": "查询所有分组"
    },
    {
      "name": "FindAllEnabledServerGroupsResponse",
      "code": "message FindAllEnabledServerGroupsResponse {\n\trepeated ServerGroup serverGroups = 1; // 分组列表\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledServerNamesWithUserIdRequest",
      "code": "message FindAllEnabledServerNamesWithUserIdRequest {\n\tint64 userId = 1;\n}",
      "doc": "查找一个用户下的所有域名列表"
    },
    {
      "name": "FindAllEnabledServerNamesWithUserIdResponse",
      "code": "message FindAllEnabledServerNamesWithUserIdResponse {\n\trepeated string serverNames = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledServerStatBoardChartsRequest",
      "code": "message FindAllEnabledServerStatBoardChartsRequest {\n\tint64 serverStatBoardId = 1;\n}",
      "doc": "读取看板中的图表"
    },
    {
      "name": "FindAllEnabledServerStatBoardChartsResponse",
      "code": "message FindAllEnabledServerStatBoardChartsResponse {\n\trepeated ServerStatBoardChart serverStatBoardCharts = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledServerStatBoardsRequest",
      "code": "message FindAllEnabledServerStatBoardsRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "读取所有看板"
    },
    {
      "name": "FindAllEnabledServerStatBoardsResponse",
      "code": "message FindAllEnabledServerStatBoardsResponse {\n\trepeated ServerStatBoard serverStatBoards = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledServersDNSWithNodeClusterIdRequest",
      "code": "message FindAllEnabledServersDNSWithNodeClusterIdRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "取得某个集群下的所有网站相关的DNS"
    },
    {
      "name": "FindAllEnabledServersDNSWithNodeClusterIdResponse",
      "code": "message FindAllEnabledServersDNSWithNodeClusterIdResponse {\n\trepeated ServerDNSInfo servers = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledServersWithSSLCertIdRequest",
      "code": "message FindAllEnabledServersWithSSLCertIdRequest {\n\tint64 sslCertId = 1;\n}",
      "doc": "查找使用某个SSL证书的所有网站"
    },
    {
      "name": "FindAllEnabledServersWithSSLCertIdResponse",
      "code": "message FindAllEnabledServersWithSSLCertIdResponse {\n\trepeated Server servers = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledUserAccessKeysRequest",
      "code": "message FindAllEnabledUserAccessKeysRequest {\n\tint64 userId = 1;\n\tint64 adminId = 2;\n}",
      "doc": "查找所有的AccessKey"
    },
    {
      "name": "FindAllEnabledUserAccessKeysResponse",
      "code": "message FindAllEnabledUserAccessKeysResponse {\n\trepeated UserAccessKey userAccessKeys = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledUserNodesRequest",
      "code": "message FindAllEnabledUserNodesRequest {\n\n}",
      "doc": "列出所有可用用户节点"
    },
    {
      "name": "FindAllEnabledUserNodesResponse",
      "code": "message FindAllEnabledUserNodesResponse {\n\trepeated UserNode userNodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllEnabledUserPlansForServerRequest",
      "code": "message FindAllEnabledUserPlansForServerRequest {\n\tint64 userId = 1;\n\tint64 serverId = 2;\n}",
      "doc": "查找所有服务可用的套餐"
    },
    {
      "name": "FindAllEnabledUserPlansForServerResponse",
      "code": "message FindAllEnabledUserPlansForServerResponse {\n\trepeated UserPlan userPlans = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllFileChunkIdsRequest",
      "code": "message FindAllFileChunkIdsRequest {\n\tint64 fileId = 1;\n}",
      "doc": "获取的一个文件的所有片段IDs"
    },
    {
      "name": "FindAllFileChunkIdsResponse",
      "code": "message FindAllFileChunkIdsResponse {\n\trepeated int64 fileChunkIds = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllFinishedIPLibraryFilesRequest",
      "code": "message FindAllFinishedIPLibraryFilesRequest {\n\n}",
      "doc": "查找所有已完成的IP库文件"
    },
    {
      "name": "FindAllFinishedIPLibraryFilesResponse",
      "code": "message FindAllFinishedIPLibraryFilesResponse {\n\trepeated IPLibraryFile ipLibraryFiles = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllIPLibraryArtifactsRequest",
      "code": "message FindAllIPLibraryArtifactsRequest {\n\n}",
      "doc": "查询所有制品"
    },
    {
      "name": "FindAllIPLibraryArtifactsResponse",
      "code": "message FindAllIPLibraryArtifactsResponse {\n\trepeated IPLibraryArtifact ipLibraryArtifacts = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllIdleADPackagesRequest",
      "code": "message FindAllIdleADPackagesRequest {\n\n}",
      "doc": "列出所有可用的高防产品"
    },
    {
      "name": "FindAllIdleADPackagesResponse",
      "code": "message FindAllIdleADPackagesResponse {\n\trepeated ADPackage adPackages = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllMessageMediasRequest",
      "code": "message FindAllMessageMediasRequest {\n\n}",
      "doc": "获取所有支持的媒介"
    },
    {
      "name": "FindAllMessageMediasResponse",
      "code": "message FindAllMessageMediasResponse {\n\trepeated MessageMedia messageMedias = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllNSClustersRequest",
      "code": "message FindAllNSClustersRequest {\n\n}",
      "doc": "查找所有可用集群"
    },
    {
      "name": "FindAllNSClustersResponse",
      "code": "message FindAllNSClustersResponse {\n\trepeated NSCluster nsClusters = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllNSDomainGroupsRequest",
      "code": "message FindAllNSDomainGroupsRequest {\n\tint64 userId = 1;\n}",
      "doc": "查询所有分组"
    },
    {
      "name": "FindAllNSDomainGroupsResponse",
      "code": "message FindAllNSDomainGroupsResponse {\n\trepeated NSDomainGroup nsDomainGroups = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllNSNodesWithNSClusterIdRequest",
      "code": "message FindAllNSNodesWithNSClusterIdRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "根据集群查找所有NS节点"
    },
    {
      "name": "FindAllNSNodesWithNSClusterIdResponse",
      "code": "message FindAllNSNodesWithNSClusterIdResponse {\n\trepeated NSNode nsNodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllNSPlansRequest",
      "code": "message FindAllNSPlansRequest {\n\n}",
      "doc": "查找所有DNS套餐"
    },
    {
      "name": "FindAllNSPlansResponse",
      "code": "message FindAllNSPlansResponse {\n\trepeated NSPlan nsPlans = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllNSRouteCategoriesRequest",
      "code": "message FindAllNSRouteCategoriesRequest {\n\n}",
      "doc": "列出所有线路分类"
    },
    {
      "name": "FindAllNSRouteCategoriesResponse",
      "code": "message FindAllNSRouteCategoriesResponse {\n\trepeated NSRouteCategory nsRouteCategories = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllNSRoutesRequest",
      "code": "message FindAllNSRoutesRequest {\n\tint64 nsClusterId = 1; // 集群ID\n\tint64 nsDomainId = 2; // 域名ID\n\tint64 userId = 3; // 用户ID\n\tint64 nsRouteCategoryId = 4; // 线路分类ID\n}",
      "doc": "读取所有自定义线路"
    },
    {
      "name": "FindAllNSRoutesResponse",
      "code": "message FindAllNSRoutesResponse {\n\trepeated NSRoute nsRoutes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllNodeActionsRequest",
      "code": "message FindAllNodeActionsRequest {\n\tint64 nodeId = 1; // 节点ID\n\tstring role = 2; // 节点角色\n}",
      "doc": "列出某个节点的所有动作"
    },
    {
      "name": "FindAllNodeActionsResponse",
      "code": "message FindAllNodeActionsResponse {\n\trepeated NodeAction nodeActions = 1; // 动作列表\n}",
      "doc": ""
    },
    {
      "name": "FindAllNodeClusterMetricItemsRequest",
      "code": "message FindAllNodeClusterMetricItemsRequest {\n\tint64 nodeClusterId = 1;\n\tstring category = 2;\n}",
      "doc": "查找集群中所有指标"
    },
    {
      "name": "FindAllNodeClusterMetricItemsResponse",
      "code": "message FindAllNodeClusterMetricItemsResponse {\n\trepeated MetricItem metricItems = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllNodeClustersWithMetricItemIdRequest",
      "code": "message FindAllNodeClustersWithMetricItemIdRequest {\n\tint64 metricItemId = 1;\n}",
      "doc": "查找使用指标的集群"
    },
    {
      "name": "FindAllNodeClustersWithMetricItemIdResponse",
      "code": "message FindAllNodeClustersWithMetricItemIdResponse {\n\trepeated NodeCluster nodeClusters = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllNodeScheduleInfoWithNodeClusterIdRequest",
      "code": "message FindAllNodeScheduleInfoWithNodeClusterIdRequest {\n\tint64 nodeClusterId = 1; // 集群ID\n}",
      "doc": "查找集群的节点调度信息"
    },
    {
      "name": "FindAllNodeScheduleInfoWithNodeClusterIdResponse",
      "code": "message FindAllNodeScheduleInfoWithNodeClusterIdResponse {\n\trepeated ScheduleInfo nodes = 1; // 调动信息列表\n\n\n\tmessage ScheduleInfo {\n\t\tint64 nodeId = 1; // 节点ID\n\t\tstring nodeName = 2; // 节点名称\n\t\tint64 nodeGroupId = 3; // 节点分组ID\n\t\tstring nodeGroupName = 4; // 节点分组名称\n\t\tstring offlineDay = 5; // 下线日期，格式YYYYMMDD\n\t\tbool isBackupForCluster = 6; // 是否为集群备份节点\n\t\tbool isBackupForGroup = 7; // 是否为分组备份节点\n\t\trepeated string backupIPs = 8; // 备用IP\n\t\tbytes actionStatusJSON = 9; // 动作状态\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindAllNotInstalledNodesWithNodeClusterIdRequest",
      "code": "message FindAllNotInstalledNodesWithNodeClusterIdRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "列出所有未安装的节点"
    },
    {
      "name": "FindAllNotInstalledNodesWithNodeClusterIdResponse",
      "code": "message FindAllNotInstalledNodesWithNodeClusterIdResponse {\n\trepeated Node nodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllPublicRoutesRequest",
      "code": "message FindAllPublicRoutesRequest {\n\n}",
      "doc": "读取所有公用的自定义线路"
    },
    {
      "name": "FindAllPublicRoutesResponse",
      "code": "message FindAllPublicRoutesResponse {\n\trepeated NSRoute nsRoutes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllRegionCitiesRequest",
      "code": "message FindAllRegionCitiesRequest {\n\tbool includeRegionProvince = 1;\n}",
      "doc": "查找所有城市"
    },
    {
      "name": "FindAllRegionCitiesResponse",
      "code": "message FindAllRegionCitiesResponse {\n\trepeated RegionCity regionCities = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllRegionCitiesWithRegionProvinceIdRequest",
      "code": "message FindAllRegionCitiesWithRegionProvinceIdRequest {\n\tint64 regionProvinceId = 1;\n}",
      "doc": "查找某个省份的所有城市"
    },
    {
      "name": "FindAllRegionCitiesWithRegionProvinceIdResponse",
      "code": "message FindAllRegionCitiesWithRegionProvinceIdResponse {\n\trepeated RegionCity regionCities = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllRegionCountriesRequest",
      "code": "message FindAllRegionCountriesRequest {\n\n}",
      "doc": "查找所有的国家/地区列表"
    },
    {
      "name": "FindAllRegionCountriesResponse",
      "code": "message FindAllRegionCountriesResponse {\n\trepeated RegionCountry regionCountries = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllRegionProvidersRequest",
      "code": "message FindAllRegionProvidersRequest {\n\n}",
      "doc": "查找所有ISP"
    },
    {
      "name": "FindAllRegionProvidersResponse",
      "code": "message FindAllRegionProvidersResponse {\n\trepeated RegionProvider regionProviders = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllRegionProvincesWithRegionCountryIdRequest",
      "code": "message FindAllRegionProvincesWithRegionCountryIdRequest {\n\tint64 regionCountryId = 1;\n}",
      "doc": "查找所有省份"
    },
    {
      "name": "FindAllRegionProvincesWithRegionCountryIdResponse",
      "code": "message FindAllRegionProvincesWithRegionCountryIdResponse {\n\trepeated RegionProvince regionProvinces = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllRegionTownsRequest",
      "code": "message FindAllRegionTownsRequest {\n\tbool includeRegionCity = 1;\n}",
      "doc": "查找所有区县"
    },
    {
      "name": "FindAllRegionTownsResponse",
      "code": "message FindAllRegionTownsResponse {\n\trepeated RegionTown regionTowns = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllRegionTownsWithRegionCityIdRequest",
      "code": "message FindAllRegionTownsWithRegionCityIdRequest {\n\tint64 regionCityId = 1;\n}",
      "doc": "查找某个城市的所有区县"
    },
    {
      "name": "FindAllRegionTownsWithRegionCityIdResponse",
      "code": "message FindAllRegionTownsWithRegionCityIdResponse {\n\trepeated RegionTown regionTowns = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllReportResultsRequest",
      "code": "message FindAllReportResultsRequest {\n\tstring type = 1;\n\tint64 targetId = 2;\n}",
      "doc": "查询某个对象的监控结果"
    },
    {
      "name": "FindAllReportResultsResponse",
      "code": "message FindAllReportResultsResponse {\n\trepeated ReportResult reportResults = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllTrafficPackagePeriodsRequest",
      "code": "message FindAllTrafficPackagePeriodsRequest {\n\n}",
      "doc": "列出所有有效期"
    },
    {
      "name": "FindAllTrafficPackagePeriodsResponse",
      "code": "message FindAllTrafficPackagePeriodsResponse {\n\trepeated TrafficPackagePeriod trafficPackagePeriods = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllTrafficPackagePricesRequest",
      "code": "message FindAllTrafficPackagePricesRequest {\n\n}",
      "doc": "查找所有流量包价格"
    },
    {
      "name": "FindAllTrafficPackagePricesResponse",
      "code": "message FindAllTrafficPackagePricesResponse {\n\trepeated TrafficPackagePrice trafficPackagePrices = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllTrafficPackagesRequest",
      "code": "message FindAllTrafficPackagesRequest {\n\n}",
      "doc": "查找所有流量包"
    },
    {
      "name": "FindAllTrafficPackagesResponse",
      "code": "message FindAllTrafficPackagesResponse {\n\trepeated TrafficPackage trafficPackages = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllUnfinishedIPLibraryFilesRequest",
      "code": "message FindAllUnfinishedIPLibraryFilesRequest {\n\n}",
      "doc": "查找所有未完成的IP库文件"
    },
    {
      "name": "FindAllUnfinishedIPLibraryFilesResponse",
      "code": "message FindAllUnfinishedIPLibraryFilesResponse {\n\trepeated IPLibraryFile ipLibraryFiles = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllUpgradeNodesWithNodeClusterIdRequest",
      "code": "message FindAllUpgradeNodesWithNodeClusterIdRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "列出所有需要升级的节点"
    },
    {
      "name": "FindAllUpgradeNodesWithNodeClusterIdResponse",
      "code": "message FindAllUpgradeNodesWithNodeClusterIdResponse {\n\trepeated NodeUpgrade nodes = 1;\n\n\n\tmessage NodeUpgrade {\n\t\tNode node = 1;\n\t\tstring os = 2;\n\t\tstring arch = 3;\n\t\tstring oldVersion = 4;\n\t\tstring newVersion = 5;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindAllUserFeatureDefinitionsRequest",
      "code": "message FindAllUserFeatureDefinitionsRequest {\n\n}",
      "doc": "获取所有的功能定义"
    },
    {
      "name": "FindAllUserFeatureDefinitionsResponse",
      "code": "message FindAllUserFeatureDefinitionsResponse {\n\trepeated UserFeature features = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAllUserServersRequest",
      "code": "message FindAllUserServersRequest {\n\tint64 userId = 1;\n}",
      "doc": "查找一个用户下的所有网站"
    },
    {
      "name": "FindAllUserServersResponse",
      "code": "message FindAllUserServersResponse {\n\trepeated Server servers = 1; // 只返回一些简要信息\n}",
      "doc": ""
    },
    {
      "name": "FindAllUserTicketCategoriesRequest",
      "code": "message FindAllUserTicketCategoriesRequest {\n\n}",
      "doc": "查找所有分类"
    },
    {
      "name": "FindAllUserTicketCategoriesResponse",
      "code": "message FindAllUserTicketCategoriesResponse {\n\trepeated UserTicketCategory userTicketCategories = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAndInitHTTPLocationReverseProxyConfigRequest",
      "code": "message FindAndInitHTTPLocationReverseProxyConfigRequest {\n\tint64 locationId = 1;\n}",
      "doc": "查找反向代理设置"
    },
    {
      "name": "FindAndInitHTTPLocationReverseProxyConfigResponse",
      "code": "message FindAndInitHTTPLocationReverseProxyConfigResponse {\n\tbytes reverseProxyJSON = 1;\n\tbytes reverseProxyRefJSON = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindAndInitHTTPLocationWebConfigRequest",
      "code": "message FindAndInitHTTPLocationWebConfigRequest {\n\tint64 locationId = 1;\n}",
      "doc": "初始化Web设置"
    },
    {
      "name": "FindAndInitHTTPLocationWebConfigResponse",
      "code": "message FindAndInitHTTPLocationWebConfigResponse {\n\tbytes webJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAndInitServerGroupHTTPReverseProxyConfigRequest",
      "code": "message FindAndInitServerGroupHTTPReverseProxyConfigRequest {\n\tint64 serverGroupId = 1;\n}",
      "doc": "查找HTTP反向代理设置"
    },
    {
      "name": "FindAndInitServerGroupHTTPReverseProxyConfigResponse",
      "code": "message FindAndInitServerGroupHTTPReverseProxyConfigResponse {\n\tbytes reverseProxyJSON = 1;\n\tbytes reverseProxyRefJSON = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindAndInitServerGroupTCPReverseProxyConfigRequest",
      "code": "message FindAndInitServerGroupTCPReverseProxyConfigRequest {\n\tint64 serverGroupId = 1;\n}",
      "doc": "查找TCP反向代理设置"
    },
    {
      "name": "FindAndInitServerGroupTCPReverseProxyConfigResponse",
      "code": "message FindAndInitServerGroupTCPReverseProxyConfigResponse {\n\tbytes reverseProxyJSON = 1;\n\tbytes reverseProxyRefJSON = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindAndInitServerGroupUDPReverseProxyConfigRequest",
      "code": "message FindAndInitServerGroupUDPReverseProxyConfigRequest {\n\tint64 serverGroupId = 1;\n}",
      "doc": "查找UDP反向代理设置"
    },
    {
      "name": "FindAndInitServerGroupUDPReverseProxyConfigResponse",
      "code": "message FindAndInitServerGroupUDPReverseProxyConfigResponse {\n\tbytes reverseProxyJSON = 1;\n\tbytes reverseProxyRefJSON = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindAndInitServerGroupWebConfigRequest",
      "code": "message FindAndInitServerGroupWebConfigRequest {\n\tint64 serverGroupId = 1;\n}",
      "doc": "初始化Web设置"
    },
    {
      "name": "FindAndInitServerGroupWebConfigResponse",
      "code": "message FindAndInitServerGroupWebConfigResponse {\n\tbytes webJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAndInitServerReverseProxyConfigRequest",
      "code": "message FindAndInitServerReverseProxyConfigRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "查找反向代理设置"
    },
    {
      "name": "FindAndInitServerReverseProxyConfigResponse",
      "code": "message FindAndInitServerReverseProxyConfigResponse {\n\tbytes reverseProxyJSON = 1;\n\tbytes reverseProxyRefJSON = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindAndInitServerWebConfigRequest",
      "code": "message FindAndInitServerWebConfigRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "初始化Web设置"
    },
    {
      "name": "FindAndInitServerWebConfigResponse",
      "code": "message FindAndInitServerWebConfigResponse {\n\tbytes webJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindAvailableNSHostsForUserRequest",
      "code": "message FindAvailableNSHostsForUserRequest {\n\tint64 userId = 1;\n}",
      "doc": "查找用户可以使用的主机地址"
    },
    {
      "name": "FindAvailableNSHostsForUserResponse",
      "code": "message FindAvailableNSHostsForUserResponse {\n\trepeated string hosts = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindBasicDNSDomainRequest",
      "code": "message FindBasicDNSDomainRequest {\n\tint64 dnsDomainId = 1;\n}",
      "doc": "查询单个域名的基础信息"
    },
    {
      "name": "FindBasicDNSDomainResponse",
      "code": "message FindBasicDNSDomainResponse {\n\tDNSDomain dnsDomain = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindCurrentAPINodeResponse",
      "code": "message FindCurrentAPINodeResponse {\n\tAPINode apiNode = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindCurrentAPINodeVersionRequest",
      "code": "message FindCurrentAPINodeVersionRequest {\n\n}",
      "doc": "获取当前API节点的版本"
    },
    {
      "name": "FindCurrentAPINodeVersionResponse",
      "code": "message FindCurrentAPINodeVersionResponse {\n\tstring version = 1; // 版本号\n\tstring os = 2; // 系统代号，比如linux\n\tstring arch = 3; // 架构，比如amd64\n\tstring role = 4; // 角色，通常为api\n}",
      "doc": ""
    },
    {
      "name": "FindCurrentNSNodeConfigRequest",
      "code": "message FindCurrentNSNodeConfigRequest {\n\n}",
      "doc": "获取当前NS节点信息"
    },
    {
      "name": "FindCurrentNSNodeConfigResponse",
      "code": "message FindCurrentNSNodeConfigResponse {\n\tbytes nsNodeJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindCurrentNodeConfigRequest",
      "code": "message FindCurrentNodeConfigRequest {\n\t// 由于登录信息中已经包含了节点信息，所以这里不需要nodeId\n\tint64 version = 1;\n\tbool compress = 2; // 是否压缩\n\tint64 nodeTaskVersion = 3; // 通知任务版本\n\tbool useDataMap = 4; // 是否使用公共的数据集\n}",
      "doc": "组合单个节点配置"
    },
    {
      "name": "FindCurrentNodeConfigResponse",
      "code": "message FindCurrentNodeConfigResponse {\n\tbytes nodeJSON = 1;\n\tbool isChanged = 2;\n\tbool isCompressed = 3;\n\tint64 dataSize = 4;\n\tint64 timestamp = 5;\n}",
      "doc": ""
    },
    {
      "name": "FindCurrentReportNodeConfigRequest",
      "code": "message FindCurrentReportNodeConfigRequest {\n\n}",
      "doc": "获取当前节点信息"
    },
    {
      "name": "FindCurrentReportNodeConfigResponse",
      "code": "message FindCurrentReportNodeConfigResponse {\n\tbytes reportNodeJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindCurrentUserNodeRequest",
      "code": "message FindCurrentUserNodeRequest {\n\n}",
      "doc": "获取当前用户节点"
    },
    {
      "name": "FindCurrentUserNodeResponse",
      "code": "message FindCurrentUserNodeResponse {\n\tUserNode userNode = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindDNSDomainRequest",
      "code": "message FindDNSDomainRequest {\n\tint64 dnsDomainId = 1;\n}",
      "doc": "查询单个域名信息"
    },
    {
      "name": "FindDNSDomainResponse",
      "code": "message FindDNSDomainResponse {\n\tDNSDomain dnsDomain = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindDailyServerBandwidthStatsBetweenDaysRequest",
      "code": "message FindDailyServerBandwidthStatsBetweenDaysRequest {\n\tint64 userId = 1; // 用户ID，和服务ID二选一\n\tint64 serverId = 2; // 服务ID，和用户ID二选一\n\tstring dayFrom = 3; // 开始日期 YYYYMMDD\n\tstring dayTo = 4; // 结束日期 YYYYMMDD\n\tint32 percentile = 5; // 可选项，百分位（nth）带宽位置，0-100之间\n\tint64 nodeRegionId = 6; // 区域ID，可选项（目前只有用户整体统计支持区域ID）\n\tstring algo = 7; // 带宽算法，目前支持secondly和avg\n}",
      "doc": "读取日期段内的带宽数据"
    },
    {
      "name": "FindDailyServerBandwidthStatsBetweenDaysResponse",
      "code": "message FindDailyServerBandwidthStatsBetweenDaysResponse {\n\trepeated Stat stats = 1;\n\tStat nthStat = 2;\n\n\n\tmessage Stat {\n\t\tstring day = 1;\n\t\tstring timeAt = 2;\n\t\tint64 bytes = 3; // 峰值字节/秒\n\t\tint64 bits = 4; // 峰值比特/秒\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindDailyServerBandwidthStatsRequest",
      "code": "message FindDailyServerBandwidthStatsRequest {\n\tint64 serverId = 1;\n\tint32 days = 2;\n\tstring algo = 3; // 带宽算法，目前支持secondly和avg\n}",
      "doc": "获取最近N天峰值带宽"
    },
    {
      "name": "FindDailyServerBandwidthStatsResponse",
      "code": "message FindDailyServerBandwidthStatsResponse {\n\trepeated Stat stats = 1;\n\tint32 percentile = 2; // 百分位\n\tStat nthStat = 3; // 百分位统计数据\n\n\n\tmessage Stat {\n\t\tstring day = 1;\n\t\tint64 bytes = 3; // 峰值字节/秒\n\t\tint64 bits = 4; // 峰值比特/秒\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindDoingHTTPCacheTaskKeysRequest",
      "code": "message FindDoingHTTPCacheTaskKeysRequest{\n\tint64 size = 1;\n}",
      "doc": "查找需要执行的Key"
    },
    {
      "name": "FindDoingHTTPCacheTaskKeysResponse",
      "code": "message FindDoingHTTPCacheTaskKeysResponse {\n\trepeated HTTPCacheTaskKey httpCacheTaskKeys = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledACMEProviderAccountRequest",
      "code": "message FindEnabledACMEProviderAccountRequest {\n\tint64 acmeProviderAccountId = 1;\n}",
      "doc": "查找单个服务商账号"
    },
    {
      "name": "FindEnabledACMEProviderAccountResponse",
      "code": "message FindEnabledACMEProviderAccountResponse {\n\tACMEProviderAccount acmeProviderAccount = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledACMETaskRequest",
      "code": "message FindEnabledACMETaskRequest {\n\tint64 acmeTaskId = 1;\n}",
      "doc": "查找单个任务信息"
    },
    {
      "name": "FindEnabledACMETaskResponse",
      "code": "message FindEnabledACMETaskResponse {\n\tACMETask acmeTask = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledACMEUserRequest",
      "code": "message FindEnabledACMEUserRequest {\n\tint64 acmeUserId = 1;\n}",
      "doc": "查找单个用户"
    },
    {
      "name": "FindEnabledACMEUserResponse",
      "code": "message FindEnabledACMEUserResponse {\n\tACMEUser acmeUser = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledAPINodeRequest",
      "code": "message FindEnabledAPINodeRequest {\n\tint64 apiNodeId = 1;\n}",
      "doc": "根据ID查找节点"
    },
    {
      "name": "FindEnabledAPINodeResponse",
      "code": "message FindEnabledAPINodeResponse {\n\tAPINode apiNode = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledAdminRequest",
      "code": "message FindEnabledAdminRequest {\n\tint64 adminId = 1;\n}",
      "doc": "获取管理员信息"
    },
    {
      "name": "FindEnabledAdminResponse",
      "code": "message FindEnabledAdminResponse {\n\tAdmin admin = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledBasicNodeRequest",
      "code": "message FindEnabledBasicNodeRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "获取单个节点基本信息"
    },
    {
      "name": "FindEnabledBasicNodeResponse",
      "code": "message FindEnabledBasicNodeResponse {\n\tBasicNode node = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledDBNodeRequest",
      "code": "message FindEnabledDBNodeRequest {\n\tint64 dbNodeId = 1;\n}",
      "doc": "根据ID查找可用的数据库节点"
    },
    {
      "name": "FindEnabledDBNodeResponse",
      "code": "message FindEnabledDBNodeResponse {\n\tDBNode dbNode = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledDNSProviderRequest",
      "code": "message FindEnabledDNSProviderRequest {\n\tint64 dnsProviderId = 1;\n}",
      "doc": "查找单个服务商"
    },
    {
      "name": "FindEnabledDNSProviderResponse",
      "code": "message FindEnabledDNSProviderResponse {\n\tDNSProvider dnsProvider = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledFileRequest",
      "code": "message FindEnabledFileRequest {\n\tint64 fileId = 1;\n}",
      "doc": "查找文件"
    },
    {
      "name": "FindEnabledFileResponse",
      "code": "message FindEnabledFileResponse {\n\tFile file = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledGzipConfigRequest",
      "code": "message FindEnabledGzipConfigRequest {\n\tint64 httpGzipId = 1;\n}",
      "doc": "查找Gzip配置"
    },
    {
      "name": "FindEnabledGzipConfigResponse",
      "code": "message FindEnabledGzipConfigResponse {\n\tbytes httpGzipJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPAuthPolicyRequest",
      "code": "message FindEnabledHTTPAuthPolicyRequest {\n\tint64 httpAuthPolicyId = 1;\n}",
      "doc": "查找策略信息"
    },
    {
      "name": "FindEnabledHTTPAuthPolicyResponse",
      "code": "message FindEnabledHTTPAuthPolicyResponse {\n\tHTTPAuthPolicy httpAuthPolicy = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPCachePolicyConfigRequest",
      "code": "message FindEnabledHTTPCachePolicyConfigRequest {\n\tint64 httpCachePolicyId = 1;\n}",
      "doc": "查找单个缓存策略配置"
    },
    {
      "name": "FindEnabledHTTPCachePolicyConfigResponse",
      "code": "message FindEnabledHTTPCachePolicyConfigResponse {\n\tbytes httpCachePolicyJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPCachePolicyRequest",
      "code": "message FindEnabledHTTPCachePolicyRequest {\n\tint64 httpCachePolicyId = 1;\n}",
      "doc": "查找单个缓存策略信息"
    },
    {
      "name": "FindEnabledHTTPCachePolicyResponse",
      "code": "message FindEnabledHTTPCachePolicyResponse {\n\tHTTPCachePolicy httpCachePolicy = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPCacheTaskRequest",
      "code": "message FindEnabledHTTPCacheTaskRequest {\n\tint64 httpCacheTaskId = 1; // 任务ID\n}",
      "doc": "查找单个任务"
    },
    {
      "name": "FindEnabledHTTPCacheTaskResponse",
      "code": "message FindEnabledHTTPCacheTaskResponse {\n\tHTTPCacheTask httpCacheTask = 1; // 任务信息\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPFastcgiConfigRequest",
      "code": "message FindEnabledHTTPFastcgiConfigRequest {\n\tint64 httpFastcgiId = 1;\n}",
      "doc": "获取Fastcgi配置"
    },
    {
      "name": "FindEnabledHTTPFastcgiConfigResponse",
      "code": "message FindEnabledHTTPFastcgiConfigResponse {\n\tbytes httpFastcgiJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPFastcgiRequest",
      "code": "message FindEnabledHTTPFastcgiRequest {\n\tint64 httpFastcgiId = 1;\n}",
      "doc": "获取Fastcgi详情"
    },
    {
      "name": "FindEnabledHTTPFastcgiResponse",
      "code": "message FindEnabledHTTPFastcgiResponse {\n\tHTTPFastcgi httpFastcgi = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPFirewallPolicyConfigRequest",
      "code": "message FindEnabledHTTPFirewallPolicyConfigRequest {\n\tint64 httpFirewallPolicyId = 1;\n}",
      "doc": "查找单个防火墙配置"
    },
    {
      "name": "FindEnabledHTTPFirewallPolicyConfigResponse",
      "code": "message FindEnabledHTTPFirewallPolicyConfigResponse {\n\tbytes httpFirewallPolicyJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPFirewallPolicyRequest",
      "code": "message FindEnabledHTTPFirewallPolicyRequest {\n\tint64 httpFirewallPolicyId = 1;\n}",
      "doc": "获取防火墙的基本信息"
    },
    {
      "name": "FindEnabledHTTPFirewallPolicyResponse",
      "code": "message FindEnabledHTTPFirewallPolicyResponse {\n\tHTTPFirewallPolicy httpFirewallPolicy = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPFirewallRuleGroupConfigRequest",
      "code": "message FindEnabledHTTPFirewallRuleGroupConfigRequest {\n\tint64 firewallRuleGroupId = 1;\n}",
      "doc": "获取分组配置"
    },
    {
      "name": "FindEnabledHTTPFirewallRuleGroupConfigResponse",
      "code": "message FindEnabledHTTPFirewallRuleGroupConfigResponse {\n\tbytes firewallRuleGroupJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPFirewallRuleGroupRequest",
      "code": "message FindEnabledHTTPFirewallRuleGroupRequest {\n\tint64 firewallRuleGroupId = 1;\n}",
      "doc": "获取分组信息"
    },
    {
      "name": "FindEnabledHTTPFirewallRuleGroupResponse",
      "code": "message FindEnabledHTTPFirewallRuleGroupResponse {\n\tHTTPFirewallRuleGroup firewallRuleGroup = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPFirewallRuleSetConfigRequest",
      "code": "message FindEnabledHTTPFirewallRuleSetConfigRequest {\n\tint64 firewallRuleSetId = 1;\n}",
      "doc": "查找规则集配置"
    },
    {
      "name": "FindEnabledHTTPFirewallRuleSetConfigResponse",
      "code": "message FindEnabledHTTPFirewallRuleSetConfigResponse {\n\tbytes firewallRuleSetJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPFirewallRuleSetRequest",
      "code": "message FindEnabledHTTPFirewallRuleSetRequest {\n\tint64 firewallRuleSetId = 1;\n}",
      "doc": "查找规则集"
    },
    {
      "name": "FindEnabledHTTPFirewallRuleSetResponse",
      "code": "message FindEnabledHTTPFirewallRuleSetResponse {\n\tHTTPFirewallRuleSet firewallRuleSet = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPHeaderConfigRequest",
      "code": "message FindEnabledHTTPHeaderConfigRequest {\n\tint64 headerId = 1;\n}",
      "doc": "查找配置"
    },
    {
      "name": "FindEnabledHTTPHeaderConfigResponse",
      "code": "message FindEnabledHTTPHeaderConfigResponse {\n\tbytes headerJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPHeaderPolicyConfigRequest",
      "code": "message FindEnabledHTTPHeaderPolicyConfigRequest {\n\tint64 httpHeaderPolicyId = 1;\n}",
      "doc": "查找策略"
    },
    {
      "name": "FindEnabledHTTPHeaderPolicyConfigResponse",
      "code": "message FindEnabledHTTPHeaderPolicyConfigResponse {\n\tbytes httpHeaderPolicyJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPLocationConfigRequest",
      "code": "message FindEnabledHTTPLocationConfigRequest {\n\tint64 locationId = 1;\n}",
      "doc": "查找路径规则配置"
    },
    {
      "name": "FindEnabledHTTPLocationConfigResponse",
      "code": "message FindEnabledHTTPLocationConfigResponse {\n\tbytes locationJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPPageConfigRequest",
      "code": "message FindEnabledHTTPPageConfigRequest {\n\tint64 httpPageId = 1;\n}",
      "doc": "查找单个Page配置"
    },
    {
      "name": "FindEnabledHTTPPageConfigResponse",
      "code": "message FindEnabledHTTPPageConfigResponse {\n\tbytes pageJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPWebConfigRequest",
      "code": "message FindEnabledHTTPWebConfigRequest {\n\tint64 httpWebId = 1;\n}",
      "doc": "查找Web配置"
    },
    {
      "name": "FindEnabledHTTPWebConfigResponse",
      "code": "message FindEnabledHTTPWebConfigResponse {\n\tbytes httpWebJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledHTTPWebRequest",
      "code": "message FindEnabledHTTPWebRequest {\n\tint64 httpWebId = 1;\n}",
      "doc": "查找Web信息"
    },
    {
      "name": "FindEnabledHTTPWebResponse",
      "code": "message FindEnabledHTTPWebResponse {\n\tHTTPWeb httpWeb = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledIPItemRequest",
      "code": "message FindEnabledIPItemRequest {\n\tint64 ipItemId = 1;\n}",
      "doc": "查找单个IP"
    },
    {
      "name": "FindEnabledIPItemResponse",
      "code": "message FindEnabledIPItemResponse {\n\tIPItem ipItem = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledIPLibraryRequest",
      "code": "message FindEnabledIPLibraryRequest {\n\tint64 ipLibraryId = 1;\n}",
      "doc": "查找单个IP库"
    },
    {
      "name": "FindEnabledIPLibraryResponse",
      "code": "message FindEnabledIPLibraryResponse {\n\tIPLibrary ipLibrary = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledIPListContainsIPRequest",
      "code": "message FindEnabledIPListContainsIPRequest {\n\tstring ip = 1;\n}",
      "doc": "根据IP来搜索IP名单"
    },
    {
      "name": "FindEnabledIPListContainsIPResponse",
      "code": "message FindEnabledIPListContainsIPResponse {\n\trepeated IPList ipLists = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledIPListRequest",
      "code": "message FindEnabledIPListRequest {\n\tint64 ipListId = 1;\n}",
      "doc": "查找IP列表信息"
    },
    {
      "name": "FindEnabledIPListResponse",
      "code": "message FindEnabledIPListResponse {\n\tIPList ipList = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledLoginRequest",
      "code": "message FindEnabledLoginRequest {\n\tint64 adminId = 1;\n\tint64 userId = 3;\n\tstring type = 2;\n}",
      "doc": "查找认证"
    },
    {
      "name": "FindEnabledLoginResponse",
      "code": "message FindEnabledLoginResponse {\n\tLogin login = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledMessageMediaInstanceRequest",
      "code": "message FindEnabledMessageMediaInstanceRequest {\n\tint64 messageMediaInstanceId = 1;\n}",
      "doc": "查找单个接收人信息"
    },
    {
      "name": "FindEnabledMessageMediaInstanceResponse",
      "code": "message FindEnabledMessageMediaInstanceResponse {\n\tMessageMediaInstance messageMediaInstance = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledMessageRecipientGroupRequest",
      "code": "message FindEnabledMessageRecipientGroupRequest {\n\tint64 messageRecipientGroupId = 1;\n}",
      "doc": "查找单个分组信息"
    },
    {
      "name": "FindEnabledMessageRecipientGroupResponse",
      "code": "message FindEnabledMessageRecipientGroupResponse {\n\tMessageRecipientGroup messageRecipientGroup = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledMessageRecipientRequest",
      "code": "message FindEnabledMessageRecipientRequest {\n\tint64 messageRecipientId = 1;\n}",
      "doc": "查找单个接收人信息"
    },
    {
      "name": "FindEnabledMessageRecipientResponse",
      "code": "message FindEnabledMessageRecipientResponse {\n\tMessageRecipient messageRecipient = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledMessageTaskRequest",
      "code": "message FindEnabledMessageTaskRequest {\n\tint64 messageTaskId = 1; // 消息任务ID\n}",
      "doc": "读取消息任务状态"
    },
    {
      "name": "FindEnabledMessageTaskResponse",
      "code": "message FindEnabledMessageTaskResponse {\n\tMessageTask messageTask = 1; // 消息任务信息\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledMetricChartRequest",
      "code": "message FindEnabledMetricChartRequest {\n\tint64 metricChartId = 1;\n}",
      "doc": "查找单个图表"
    },
    {
      "name": "FindEnabledMetricChartResponse",
      "code": "message FindEnabledMetricChartResponse {\n\tMetricChart metricChart = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledMetricItemRequest",
      "code": "message FindEnabledMetricItemRequest {\n\tint64 metricItemId = 1;\n}",
      "doc": "查找单个指标信息"
    },
    {
      "name": "FindEnabledMetricItemResponse",
      "code": "message FindEnabledMetricItemResponse {\n\tMetricItem metricItem = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeClusterConfigInfoRequest",
      "code": "message FindEnabledNodeClusterConfigInfoRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "取得集群的配置概要信息"
    },
    {
      "name": "FindEnabledNodeClusterConfigInfoResponse",
      "code": "message FindEnabledNodeClusterConfigInfoResponse {\n\tbool healthCheckIsOn = 1; // 启用了健康检查\n\tbool hasFirewallActions = 2; // 有防火墙动作设置\n\tbool hasThresholds = 3; // 有节点阈值设置\n\tbool hasMessageReceivers = 4; // 已设置消息通知接收人\n\tbool isTOAEnabled = 5; // 启用了TOA\n\tbool hasMetricItems = 6; // 有指标统计设置\n\tbool webpIsOn = 7; // 是否定义了WebP策略\n\tbool uamIsOn = 10; // 是否定义了UAM策略\n\tbool httpCCIsOn = 12; // 是否定义了CC策略\n\tbool hasSystemServices = 8; // 启用了系统服务\n\tbool hasDDoSProtection = 9; // 启用了DDoS防护\n\tbool hasHTTPPagesPolicy = 11; // 是否设置了自定义页面策略\n\tbool http3IsOn = 13; // 是否启用HTTP3\n\tbool hasNetworkSecurityPolicy = 14; // 设置了网络安全策略\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeClusterDNSRequest",
      "code": "message FindEnabledNodeClusterDNSRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "查找集群的DNS配置"
    },
    {
      "name": "FindEnabledNodeClusterDNSResponse",
      "code": "message FindEnabledNodeClusterDNSResponse {\n\tstring name = 1;\n\tDNSDomain domain = 2;\n\tDNSProvider provider = 3;\n\tstring defaultRoute = 6;\n\tbool nodesAutoSync = 4;\n\tbool serversAutoSync = 5;\n\trepeated string cnameRecords = 7;\n\tint32 ttl = 8;\n\tbool cnameAsDomain = 9;\n\tbool includingLnNodes = 10;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeClusterFirewallActionRequest",
      "code": "message FindEnabledNodeClusterFirewallActionRequest {\n\tint64 nodeClusterFirewallActionId = 1;\n}",
      "doc": "查询单个动作"
    },
    {
      "name": "FindEnabledNodeClusterFirewallActionResponse",
      "code": "message FindEnabledNodeClusterFirewallActionResponse {\n\tNodeClusterFirewallAction nodeClusterFirewallAction = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeClusterHTTPCCPolicyRequest",
      "code": "message FindEnabledNodeClusterHTTPCCPolicyRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "读取集群的HTTP CC策略"
    },
    {
      "name": "FindEnabledNodeClusterHTTPCCPolicyResponse",
      "code": "message FindEnabledNodeClusterHTTPCCPolicyResponse {\n\tbytes httpCCPolicyJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeClusterRequest",
      "code": "message FindEnabledNodeClusterRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "查找单个集群信息"
    },
    {
      "name": "FindEnabledNodeClusterResponse",
      "code": "message FindEnabledNodeClusterResponse {\n\tNodeCluster nodeCluster = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeClusterTOARequest",
      "code": "message FindEnabledNodeClusterTOARequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "查找集群的TOA配置"
    },
    {
      "name": "FindEnabledNodeClusterTOAResponse",
      "code": "message FindEnabledNodeClusterTOAResponse {\n\tbytes toaJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeClusterUAMPolicyRequest",
      "code": "message FindEnabledNodeClusterUAMPolicyRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "读取集群的UAM策略"
    },
    {
      "name": "FindEnabledNodeClusterUAMPolicyResponse",
      "code": "message FindEnabledNodeClusterUAMPolicyResponse {\n\tbytes uamPolicyJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeClusterWebPPolicyRequest",
      "code": "message FindEnabledNodeClusterWebPPolicyRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "读取集群WebP策略"
    },
    {
      "name": "FindEnabledNodeClusterWebPPolicyResponse",
      "code": "message FindEnabledNodeClusterWebPPolicyResponse {\n\tbytes webpPolicyJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeConfigInfoRequest",
      "code": "message FindEnabledNodeConfigInfoRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "取得节点的配置概要信息"
    },
    {
      "name": "FindEnabledNodeConfigInfoResponse",
      "code": "message FindEnabledNodeConfigInfoResponse {\n\tbool hasDNSInfo = 1; // 是否有DNS设置\n\tbool  hasCacheInfo = 2; // 是否有缓存设置\n\tbool  hasThresholds = 3; // 是否有阈值设置\n\tbool  hasSSH = 4; // 是否有SSH设置\n\tbool  hasSystemSettings = 5; // 是否有系统设置\n\tbool hasDDoSProtection = 6; // 是否有DDoS防护设置\n\tbool hasScheduleSettings = 7; // 是否有调度设置\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeDNSRequest",
      "code": "message FindEnabledNodeDNSRequest {\n\tint64 nodeId = 1;\n\tint64 nodeClusterId = 2;\n\tint64 nodeIPAddrId = 3;\n}",
      "doc": "查找单个节点的域名解析信息"
    },
    {
      "name": "FindEnabledNodeDNSResponse",
      "code": "message FindEnabledNodeDNSResponse {\n\tNodeDNSInfo node = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeGrantRequest",
      "code": "message FindEnabledNodeGrantRequest {\n\tint64 nodeGrantId = 1;\n}",
      "doc": "获取认证信息"
    },
    {
      "name": "FindEnabledNodeGrantResponse",
      "code": "message FindEnabledNodeGrantResponse {\n\tNodeGrant nodeGrant = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeGroupRequest",
      "code": "message FindEnabledNodeGroupRequest {\n\tint64 nodeGroupId = 1;\n}",
      "doc": "查找单个分组信息"
    },
    {
      "name": "FindEnabledNodeGroupResponse",
      "code": "message FindEnabledNodeGroupResponse {\n\tNodeGroup nodeGroup = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeIPAddressRequest",
      "code": "message FindEnabledNodeIPAddressRequest {\n\tint64 nodeIPAddressId = 1;\n}",
      "doc": "查找单个IP地址"
    },
    {
      "name": "FindEnabledNodeIPAddressResponse",
      "code": "message FindEnabledNodeIPAddressResponse {\n\tNodeIPAddress nodeIPAddress = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodePriceItemRequest",
      "code": "message FindEnabledNodePriceItemRequest {\n\tint64 NodePriceItemId = 1;\n}",
      "doc": "查找单个区域价格信息"
    },
    {
      "name": "FindEnabledNodePriceItemResponse",
      "code": "message FindEnabledNodePriceItemResponse {\n\tNodePriceItem NodePriceItem = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeRegionRequest",
      "code": "message FindEnabledNodeRegionRequest {\n\tint64 nodeRegionId = 1;\n}",
      "doc": "查找单个区域信息"
    },
    {
      "name": "FindEnabledNodeRegionResponse",
      "code": "message FindEnabledNodeRegionResponse {\n\tNodeRegion nodeRegion = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeRequest",
      "code": "message FindEnabledNodeRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "获取单个节点信息"
    },
    {
      "name": "FindEnabledNodeResponse",
      "code": "message FindEnabledNodeResponse {\n\tNode node = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodeThresholdRequest",
      "code": "message FindEnabledNodeThresholdRequest {\n\tint64 nodeThresholdId = 1;\n}",
      "doc": "查询单个阈值详情"
    },
    {
      "name": "FindEnabledNodeThresholdResponse",
      "code": "message FindEnabledNodeThresholdResponse {\n\tNodeThreshold nodeThreshold = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledNodesWithIdsRequest",
      "code": "message FindEnabledNodesWithIdsRequest {\n\trepeated int64 nodeIds = 1;\n}",
      "doc": "根据一组ID获取节点信息"
    },
    {
      "name": "FindEnabledNodesWithIdsResponse",
      "code": "message FindEnabledNodesWithIdsResponse {\n\trepeated Node nodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledOrderMethodRequest",
      "code": "message FindEnabledOrderMethodRequest {\n\tint64 orderMethodId = 1;\n}",
      "doc": "查找单个支付方式"
    },
    {
      "name": "FindEnabledOrderMethodResponse",
      "code": "message FindEnabledOrderMethodResponse {\n\tOrderMethod orderMethod = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledOrderMethodWithCodeRequest",
      "code": "message FindEnabledOrderMethodWithCodeRequest {\n\tstring code = 1;\n}",
      "doc": "根据代号查找支付方式"
    },
    {
      "name": "FindEnabledOrderMethodWithCodeResponse",
      "code": "message FindEnabledOrderMethodWithCodeResponse {\n\tOrderMethod orderMethod = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledOriginConfigRequest",
      "code": "message FindEnabledOriginConfigRequest {\n\tint64 originId = 1;\n}",
      "doc": "查找源站配置"
    },
    {
      "name": "FindEnabledOriginConfigResponse",
      "code": "message FindEnabledOriginConfigResponse {\n\tbytes originJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledOriginRequest",
      "code": "message FindEnabledOriginRequest {\n\tint64 originId = 1;\n}",
      "doc": "查找单个源站信息"
    },
    {
      "name": "FindEnabledOriginResponse",
      "code": "message FindEnabledOriginResponse {\n\tOrigin Origin = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledPlanRequest",
      "code": "message FindEnabledPlanRequest {\n\tint64 planId = 1;\n}",
      "doc": "查找单个套餐"
    },
    {
      "name": "FindEnabledPlanResponse",
      "code": "message FindEnabledPlanResponse {\n\tPlan plan = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledRegionCityRequest",
      "code": "message FindEnabledRegionCityRequest {\n\tint64 regionCityId = 1;\n}",
      "doc": "查找单个城市信息"
    },
    {
      "name": "FindEnabledRegionCityResponse",
      "code": "message FindEnabledRegionCityResponse {\n\tRegionCity regionCity = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledRegionCountryRequest",
      "code": "message FindEnabledRegionCountryRequest {\n\tint64 regionCountryId = 1;\n}",
      "doc": "查找单个国家/地区信息"
    },
    {
      "name": "FindEnabledRegionCountryResponse",
      "code": "message FindEnabledRegionCountryResponse {\n\tRegionCountry regionCountry = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledRegionProviderRequest",
      "code": "message FindEnabledRegionProviderRequest {\n\tint64 regionProviderId = 1;\n}",
      "doc": "查找单个ISP信息"
    },
    {
      "name": "FindEnabledRegionProviderResponse",
      "code": "message FindEnabledRegionProviderResponse {\n\tRegionProvider regionProvider = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledRegionProvinceRequest",
      "code": "message FindEnabledRegionProvinceRequest {\n\tint64 regionProvinceId = 1;\n}",
      "doc": "查找单个省份信息"
    },
    {
      "name": "FindEnabledRegionProvinceResponse",
      "code": "message FindEnabledRegionProvinceResponse {\n\tRegionProvince regionProvince = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledReportNodeGroupRequest",
      "code": "message FindEnabledReportNodeGroupRequest {\n\tint64 reportNodeGroupId = 1;\n}",
      "doc": "查找单个分组"
    },
    {
      "name": "FindEnabledReportNodeGroupResponse",
      "code": "message FindEnabledReportNodeGroupResponse {\n\tReportNodeGroup reportNodeGroup = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledReportNodeRequest",
      "code": "message FindEnabledReportNodeRequest{\n\tint64 reportNodeId = 1;\n}",
      "doc": "查找单个终端"
    },
    {
      "name": "FindEnabledReportNodeResponse",
      "code": "message FindEnabledReportNodeResponse {\n\tReportNode reportNode = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledReverseProxyConfigRequest",
      "code": "message FindEnabledReverseProxyConfigRequest {\n\tint64 reverseProxyId = 1;\n}",
      "doc": "查找反向代理配置"
    },
    {
      "name": "FindEnabledReverseProxyConfigResponse",
      "code": "message FindEnabledReverseProxyConfigResponse {\n\tbytes reverseProxyJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledReverseProxyRequest",
      "code": "message FindEnabledReverseProxyRequest {\n\tint64 reverseProxyId = 1;\n}",
      "doc": "查找反向代理"
    },
    {
      "name": "FindEnabledReverseProxyResponse",
      "code": "message FindEnabledReverseProxyResponse {\n\tReverseProxy reverseProxy = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledSSLCertConfigRequest",
      "code": "message FindEnabledSSLCertConfigRequest {\n\tint64 sslCertId = 1;\n}",
      "doc": "查找证书配置"
    },
    {
      "name": "FindEnabledSSLCertConfigResponse",
      "code": "message FindEnabledSSLCertConfigResponse {\n\tbytes sslCertJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledSSLPolicyConfigRequest",
      "code": "message FindEnabledSSLPolicyConfigRequest {\n\tint64 sslPolicyId = 1; // SSL策略ID\n\tbool ignoreData = 2; // 是否忽略证书内容数据\n}",
      "doc": "查找策略"
    },
    {
      "name": "FindEnabledSSLPolicyConfigResponse",
      "code": "message FindEnabledSSLPolicyConfigResponse {\n\tbytes sslPolicyJSON = 1; // 策略配置信息\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledScriptRequest",
      "code": "message FindEnabledScriptRequest {\n\tint64 scriptId = 1;\n}",
      "doc": "查找单个脚本"
    },
    {
      "name": "FindEnabledScriptResponse",
      "code": "message FindEnabledScriptResponse {\n\tScript script = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledServerConfigRequest",
      "code": "message FindEnabledServerConfigRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "查找网站配置"
    },
    {
      "name": "FindEnabledServerConfigResponse",
      "code": "message FindEnabledServerConfigResponse {\n\tbytes serverJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledServerDNSRequest",
      "code": "message FindEnabledServerDNSRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "查找单个网站的DNS信息"
    },
    {
      "name": "FindEnabledServerDNSResponse",
      "code": "message FindEnabledServerDNSResponse {\n\tstring dnsName = 1;\n\tDNSDomain domain = 2;\n\tbool supportCNAME = 3;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledServerGroupConfigInfoRequest",
      "code": "message FindEnabledServerGroupConfigInfoRequest {\n\tint64 serverGroupId = 1;\n\tint64 serverId = 2;\n}",
      "doc": "取得分组的配置概要信息"
    },
    {
      "name": "FindEnabledServerGroupConfigInfoResponse",
      "code": "message FindEnabledServerGroupConfigInfoResponse {\n\tbool hasHTTPReverseProxy = 1;\n\tbool hasTCPReverseProxy = 2;\n\tbool hasUDPReverseProxy = 3;\n\tint64 serverGroupId = 4;\n\tbool hasRootConfig = 5;\n\tbool hasWAFConfig = 6;\n\tbool hasCacheConfig = 7;\n\tbool hasCharsetConfig = 8;\n\tbool hasStatConfig = 9;\n\tbool hasCompressionConfig = 10;\n\tbool hasOptimizationConfig = 20;\n\tbool hasRequestHeadersConfig = 11;\n\tbool hasResponseHeadersConfig = 12;\n\tbool hasWebsocketConfig = 13;\n\tbool hasWebPConfig = 14;\n\tbool hasAccessLogConfig = 15;\n\tbool hasRemoteAddrConfig = 16;\n\tbool hasPagesConfig = 17;\n\tbool hasRequestLimitConfig = 18;\n\tbool hasRequestScriptsConfig = 19;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledServerGroupRequest",
      "code": "message FindEnabledServerGroupRequest {\n\tint64 serverGroupId = 1;\n}",
      "doc": "查找单个分组信息"
    },
    {
      "name": "FindEnabledServerGroupResponse",
      "code": "message FindEnabledServerGroupResponse {\n\tServerGroup serverGroup = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledServerRequest",
      "code": "message FindEnabledServerRequest {\n\tint64 serverId = 1; // 网站ID\n\tbool ignoreSSLCerts = 2; // 忽略SSL证书数据\n}",
      "doc": "查找单个网站"
    },
    {
      "name": "FindEnabledServerResponse",
      "code": "message FindEnabledServerResponse {\n\tServer server = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledServerTrafficLimitRequest",
      "code": "message FindEnabledServerTrafficLimitRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "查找流量限制"
    },
    {
      "name": "FindEnabledServerTrafficLimitResponse",
      "code": "message FindEnabledServerTrafficLimitResponse {\n\tbytes trafficLimitJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledServerTypeRequest",
      "code": "message FindEnabledServerTypeRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "查找网站的网站类型"
    },
    {
      "name": "FindEnabledServerTypeResponse",
      "code": "message FindEnabledServerTypeResponse {\n\tstring type = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledServerUAMRequest",
      "code": "message FindEnabledServerUAMRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "查找网站UAM（5秒盾）设置"
    },
    {
      "name": "FindEnabledServerUAMResponse",
      "code": "message FindEnabledServerUAMResponse {\n\tbytes uamJSON = 1; // UAM设置\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledUserAccountRequest",
      "code": "message FindEnabledUserAccountRequest {\n\tint64 userAccountId = 1;\n}",
      "doc": "查找单个账户"
    },
    {
      "name": "FindEnabledUserAccountResponse",
      "code": "message FindEnabledUserAccountResponse {\n\tUserAccount userAccount = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledUserAccountWithUserIdRequest",
      "code": "message FindEnabledUserAccountWithUserIdRequest {\n\tint64 userId = 1;\n}",
      "doc": "根据用户ID查找单个账户"
    },
    {
      "name": "FindEnabledUserAccountWithUserIdResponse",
      "code": "message FindEnabledUserAccountWithUserIdResponse {\n\tUserAccount userAccount = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledUserIdentityRequest",
      "code": "message FindEnabledUserIdentityRequest {\n\tint64 userIdentityId = 1;\n}",
      "doc": "查找单个实名认证信息"
    },
    {
      "name": "FindEnabledUserIdentityResponse",
      "code": "message FindEnabledUserIdentityResponse {\n\tUserIdentity userIdentity = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledUserIdentityWithOrgTypeRequest",
      "code": "message FindEnabledUserIdentityWithOrgTypeRequest {\n\tint64 userId = 1; // 用户端不需要设置此参数\n\tstring orgType = 2; // 阻止类型\n}",
      "doc": "查看某个类型的实名认证信息"
    },
    {
      "name": "FindEnabledUserIdentityWithOrgTypeResponse",
      "code": "message FindEnabledUserIdentityWithOrgTypeResponse {\n\tUserIdentity userIdentity = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledUserNodeRequest",
      "code": "message FindEnabledUserNodeRequest {\n\tint64 userNodeId = 1;\n}",
      "doc": "根据ID查找节点"
    },
    {
      "name": "FindEnabledUserNodeResponse",
      "code": "message FindEnabledUserNodeResponse {\n\tUserNode userNode = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledUserOrderRequest",
      "code": "message FindEnabledUserOrderRequest {\n\tstring code = 1;\n}",
      "doc": "查看订单"
    },
    {
      "name": "FindEnabledUserOrderResponse",
      "code": "message FindEnabledUserOrderResponse {\n\tUserOrder userOrder = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledUserPlanRequest",
      "code": "message FindEnabledUserPlanRequest {\n\tint64 userPlanId = 1;\n}",
      "doc": "查找单个已购套餐信息"
    },
    {
      "name": "FindEnabledUserPlanResponse",
      "code": "message FindEnabledUserPlanResponse {\n\tUserPlan userPlan = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledUserRequest",
      "code": "message FindEnabledUserRequest {\n\tint64 userId = 1;\n}",
      "doc": "查询单个用户信息"
    },
    {
      "name": "FindEnabledUserResponse",
      "code": "message FindEnabledUserResponse {\n\tUser user = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindEnabledUserServerBasicRequest",
      "code": "message FindEnabledUserServerBasicRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "查找用户网站基本信息"
    },
    {
      "name": "FindEnabledUserServerBasicResponse",
      "code": "message FindEnabledUserServerBasicResponse {\n\tServer server = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindFormalClientBrowserWithDataIdRequest",
      "code": "message FindFormalClientBrowserWithDataIdRequest {\n\tstring dataId = 1;\n}",
      "doc": "通过dataId查询浏览器信息"
    },
    {
      "name": "FindFormalClientBrowserWithDataIdResponse",
      "code": "message FindFormalClientBrowserWithDataIdResponse {\n\tFormalClientBrowser formalClientBrowser = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindFormalClientSystemWithDataIdRequest",
      "code": "message FindFormalClientSystemWithDataIdRequest {\n\tstring dataId = 1;\n}",
      "doc": "通过dataId查询操作系统信息"
    },
    {
      "name": "FindFormalClientSystemWithDataIdResponse",
      "code": "message FindFormalClientSystemWithDataIdResponse {\n\tFormalClientSystem formalClientSystem = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindFreePortInNodeClusterRequest",
      "code": "message FindFreePortInNodeClusterRequest {\n\tint64 nodeClusterId = 1;\n\tstring protocolFamily = 2;\n}",
      "doc": "获取集群中可以使用的端口"
    },
    {
      "name": "FindFreePortInNodeClusterResponse",
      "code": "message FindFreePortInNodeClusterResponse {\n\tint32 port = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindHTTPAccessLogPartitionsRequest",
      "code": "message FindHTTPAccessLogPartitionsRequest {\n\tstring day = 1; // YYYYMMDD\n}",
      "doc": "查找日志分区"
    },
    {
      "name": "FindHTTPAccessLogPartitionsResponse",
      "code": "message FindHTTPAccessLogPartitionsResponse {\n\trepeated int32  partitions = 1;\n\trepeated int32 reversePartitions = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindHTTPAccessLogPolicyRequest",
      "code": "message FindHTTPAccessLogPolicyRequest {\n\tint64 httpAccessLogPolicyId = 1;\n}",
      "doc": "查找单个访问日志策略"
    },
    {
      "name": "FindHTTPAccessLogPolicyResponse",
      "code": "message FindHTTPAccessLogPolicyResponse {\n\tHTTPAccessLogPolicy httpAccessLogPolicy = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindHTTPAccessLogRequest",
      "code": "message FindHTTPAccessLogRequest {\n\tstring requestId = 1;\n}",
      "doc": "查找单个日志"
    },
    {
      "name": "FindHTTPAccessLogResponse",
      "code": "message FindHTTPAccessLogResponse {\n\tHTTPAccessLog httpAccessLog = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindHTTPWebCCRequest",
      "code": "message FindHTTPWebCCRequest {\n\tint64 httpWebId = 1;\n}",
      "doc": "查找网站CC设置"
    },
    {
      "name": "FindHTTPWebCCResponse",
      "code": "message FindHTTPWebCCResponse {\n\tbytes ccJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindHTTPWebHostRedirectsRequest",
      "code": "message FindHTTPWebHostRedirectsRequest {\n\tint64 httpWebId = 1;\n}",
      "doc": "查找主机跳转设置"
    },
    {
      "name": "FindHTTPWebHostRedirectsResponse",
      "code": "message FindHTTPWebHostRedirectsResponse {\n\tbytes hostRedirectsJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindHTTPWebReferersRequest",
      "code": "message FindHTTPWebReferersRequest {\n\tint64 httpWebId = 1;\n}",
      "doc": "查找防盗链设置"
    },
    {
      "name": "FindHTTPWebReferersResponse",
      "code": "message FindHTTPWebReferersResponse {\n\tbytes referersJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindHTTPWebRequestLimitRequest",
      "code": "message FindHTTPWebRequestLimitRequest {\n\tint64 httpWebId = 1;\n}",
      "doc": "查找请求限制"
    },
    {
      "name": "FindHTTPWebRequestLimitResponse",
      "code": "message FindHTTPWebRequestLimitResponse {\n\tbytes requestLimitJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindHTTPWebRequestScriptsRequest",
      "code": "message FindHTTPWebRequestScriptsRequest {\n\tint64 httpWebId = 1;\n}",
      "doc": "查找请求脚本"
    },
    {
      "name": "FindHTTPWebRequestScriptsResponse",
      "code": "message FindHTTPWebRequestScriptsResponse {\n\tbytes requestScriptsJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindHTTPWebUAMRequest",
      "code": "message FindHTTPWebUAMRequest {\n\tint64 httpWebId = 1;\n}",
      "doc": "查找网站UAM设置"
    },
    {
      "name": "FindHTTPWebUAMResponse",
      "code": "message FindHTTPWebUAMResponse {\n\tbytes uamJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindHTTPWebUserAgentRequest",
      "code": "message FindHTTPWebUserAgentRequest {\n\tint64 httpWebId = 1;\n}",
      "doc": "查找UserAgent设置"
    },
    {
      "name": "FindHTTPWebUserAgentResponse",
      "code": "message FindHTTPWebUserAgentResponse {\n\tbytes userAgentJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindHourlyServerBandwidthStatsRequest",
      "code": "message FindHourlyServerBandwidthStatsRequest {\n\tint64 serverId = 1;\n\tint32 hours = 2;\n\tstring algo = 3; // 带宽算法，目前支持secondly和avg\n}",
      "doc": "获取最近N小时峰值带宽"
    },
    {
      "name": "FindHourlyServerBandwidthStatsResponse",
      "code": "message FindHourlyServerBandwidthStatsResponse {\n\trepeated Stat stats = 1;\n\tint32 percentile = 2; // 百分位\n\tStat nthStat = 3; // 百分位统计数据\n\n\n\tmessage Stat {\n\t\tstring day = 1;\n\t\tint32 hour = 2;\n\t\tint64 bytes = 3; // 峰值字节/秒\n\t\tint64 bits = 4; // 峰值比特/秒\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindIPLibraryArtifactRequest",
      "code": "message FindIPLibraryArtifactRequest {\n\tint64 ipLibraryArtifactId = 1;\n}",
      "doc": "查找单个制品信息"
    },
    {
      "name": "FindIPLibraryArtifactResponse",
      "code": "message FindIPLibraryArtifactResponse {\n\tIPLibraryArtifact ipLibraryArtifact = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindIPLibraryFileRequest",
      "code": "message FindIPLibraryFileRequest {\n\tint64 ipLibraryFileId = 1;\n}",
      "doc": "查找单个IP库文件"
    },
    {
      "name": "FindIPLibraryFileResponse",
      "code": "message FindIPLibraryFileResponse {\n\tIPLibraryFile ipLibraryFile = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindLatestDeployFilesRequest",
      "code": "message FindLatestDeployFilesRequest {\n\n}",
      "doc": "查找已有节点安装文件信息"
    },
    {
      "name": "FindLatestDeployFilesResponse",
      "code": "message FindLatestDeployFilesResponse {\n\trepeated DeployFile nodeDeployFiles = 1; // 边缘节点\n\trepeated DeployFile nsNodeDeployFiles = 2; // NS节点\n\n\n\tmessage DeployFile {\n\t\tstring os = 1; // 操作系统代号\n\t\tstring arch = 2; // 架构\n\t\tstring version = 3; // 版本号\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindLatestIPLibraryWithTypeRequest",
      "code": "message FindLatestIPLibraryWithTypeRequest {\n\tstring type = 1;\n}",
      "doc": "查找最新的IP库"
    },
    {
      "name": "FindLatestIPLibraryWithTypeResponse",
      "code": "message FindLatestIPLibraryWithTypeResponse {\n\tIPLibrary ipLibrary = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindLatestNSNodeVersionRequest",
      "code": "message FindLatestNSNodeVersionRequest {\n\n}",
      "doc": "取得最新的版本号"
    },
    {
      "name": "FindLatestNSNodeVersionResponse",
      "code": "message FindLatestNSNodeVersionResponse {\n\tstring version = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindLatestNSRecordsHourlyStatsRequest",
      "code": "message FindLatestNSRecordsHourlyStatsRequest {\n\tint64 nsRecordId = 1; // 记录ID\n}",
      "doc": "获取单个记录24小时内的统计"
    },
    {
      "name": "FindLatestNSRecordsHourlyStatsResponse",
      "code": "message FindLatestNSRecordsHourlyStatsResponse {\n\trepeated NSRecordHourlyStat nsRecordHourlyStats = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindLatestNodeClustersRequest",
      "code": "message FindLatestNodeClustersRequest {\n\tint64 size = 1;\n}",
      "doc": "查找最近访问的集群"
    },
    {
      "name": "FindLatestNodeClustersResponse",
      "code": "message FindLatestNodeClustersResponse {\n\trepeated NodeCluster nodeClusters = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindLatestReportNodeVersionRequest",
      "code": "message FindLatestReportNodeVersionRequest {\n\n}",
      "doc": "取得最新的版本号"
    },
    {
      "name": "FindLatestReportNodeVersionResponse",
      "code": "message FindLatestReportNodeVersionResponse {\n\tstring version = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindLatestServerDailyStatsRequest",
      "code": "message FindLatestServerDailyStatsRequest {\n\tint64 serverId = 1;\n\tint64 nodeRegionId = 3; // 区域ID，可选\n\tint32 days = 2; // 天数\n}",
      "doc": "读取最近N日的统计数据"
    },
    {
      "name": "FindLatestServerDailyStatsResponse",
      "code": "message FindLatestServerDailyStatsResponse {\n\trepeated DailyStat stats = 1;\n\n\n\tmessage DailyStat {\n\t\tstring day = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindLatestServerHourlyStatsRequest",
      "code": "message FindLatestServerHourlyStatsRequest {\n\tint64 serverId = 1;\n\tint32 hours = 2; // 小时数\n}",
      "doc": "按小时读取统计数据"
    },
    {
      "name": "FindLatestServerHourlyStatsResponse",
      "code": "message FindLatestServerHourlyStatsResponse {\n\trepeated HourlyStat stats = 1;\n\n\n\tmessage HourlyStat {\n\t\tstring hour = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindLatestServerMinutelyStatsRequest",
      "code": "message FindLatestServerMinutelyStatsRequest {\n\tint64 serverId = 1;\n\tint32 minutes = 2; // 分钟数\n}",
      "doc": "按分钟读取统计数据"
    },
    {
      "name": "FindLatestServerMinutelyStatsResponse",
      "code": "message FindLatestServerMinutelyStatsResponse {\n\trepeated MinutelyStat stats = 1;\n\n\n\tmessage MinutelyStat {\n\t\tstring minute = 1;\n\t\tint64 bytes = 2;\n\t\tint64 cachedBytes = 3;\n\t\tint64 countRequests = 4;\n\t\tint64 countCachedRequests = 5;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindLatestServersRequest",
      "code": "message FindLatestServersRequest {\n\tint64 size = 1;\n}",
      "doc": "查找最近访问的网站"
    },
    {
      "name": "FindLatestServersResponse",
      "code": "message FindLatestServersResponse {\n\trepeated Server servers = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindLatestUserEmailVerificationRequest",
      "code": "message FindLatestUserEmailVerificationRequest {\n\n}",
      "doc": "查找用户正在等待激活的认证"
    },
    {
      "name": "FindLatestUserEmailVerificationResponse",
      "code": "message FindLatestUserEmailVerificationResponse {\n\tUserEmailVerification userEmailVerification = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindLoginSessionRequest",
      "code": "message FindLoginSessionRequest {\n\tstring sid = 1;\n}",
      "doc": "查找SESSION"
    },
    {
      "name": "FindLoginSessionResponse",
      "code": "message FindLoginSessionResponse {\n\tLoginSession loginSession = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSAccessLogRequest",
      "code": "message FindNSAccessLogRequest {\n\tstring requestId = 1;\n}",
      "doc": "查找单个日志"
    },
    {
      "name": "FindNSAccessLogResponse",
      "code": "message FindNSAccessLogResponse {\n\tNSAccessLog nsAccessLog = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterAccessLogRequest",
      "code": "message FindNSClusterAccessLogRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "查找集群访问日志配置"
    },
    {
      "name": "FindNSClusterAccessLogResponse",
      "code": "message FindNSClusterAccessLogResponse {\n\tbytes AccessLogJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterAnswerConfigRequest",
      "code": "message FindNSClusterAnswerConfigRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "查找应答模式"
    },
    {
      "name": "FindNSClusterAnswerConfigResponse",
      "code": "message FindNSClusterAnswerConfigResponse {\n\tbytes answerJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterDDoSProtectionRequest",
      "code": "message FindNSClusterDDoSProtectionRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "获取集群的DDoS设置"
    },
    {
      "name": "FindNSClusterDDoSProtectionResponse",
      "code": "message FindNSClusterDDoSProtectionResponse {\n\tbytes ddosProtectionJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterDoHConfigRequest",
      "code": "message FindNSClusterDoHConfigRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "查找集群的DoH设置"
    },
    {
      "name": "FindNSClusterDoHConfigResponse",
      "code": "message FindNSClusterDoHConfigResponse {\n\tbytes dohJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterHostsRequest",
      "code": "message FindNSClusterHostsRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "查找NS集群的主机地址"
    },
    {
      "name": "FindNSClusterHostsResponse",
      "code": "message FindNSClusterHostsResponse {\n\trepeated string hosts = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterRecursionConfigRequest",
      "code": "message FindNSClusterRecursionConfigRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "读取递归DNS配置"
    },
    {
      "name": "FindNSClusterRecursionConfigResponse",
      "code": "message FindNSClusterRecursionConfigResponse {\n\tbytes recursionJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterRequest",
      "code": "message FindNSClusterRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "查找单个可用集群信息"
    },
    {
      "name": "FindNSClusterResponse",
      "code": "message FindNSClusterResponse {\n\tNSCluster nsCluster = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterSOAConfigRequest",
      "code": "message FindNSClusterSOAConfigRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "查找SOA配置"
    },
    {
      "name": "FindNSClusterSOAConfigResponse",
      "code": "message FindNSClusterSOAConfigResponse {\n\tbytes soaJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterTCPConfigRequest",
      "code": "message FindNSClusterTCPConfigRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "查找集群的TCP设置"
    },
    {
      "name": "FindNSClusterTCPConfigResponse",
      "code": "message FindNSClusterTCPConfigResponse {\n\tbytes tcpJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterTLSConfigRequest",
      "code": "message FindNSClusterTLSConfigRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "查找集群的TLS设置"
    },
    {
      "name": "FindNSClusterTLSConfigResponse",
      "code": "message FindNSClusterTLSConfigResponse {\n\tbytes tlsJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSClusterUDPConfigRequest",
      "code": "message FindNSClusterUDPConfigRequest {\n\tint64 nsClusterId = 1;\n}",
      "doc": "查找集群的UDP设置"
    },
    {
      "name": "FindNSClusterUDPConfigResponse",
      "code": "message FindNSClusterUDPConfigResponse {\n\tbytes udpJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSDomainGroupRequest",
      "code": "message FindNSDomainGroupRequest {\n\tint64 nsDomainGroupId = 1;\n}",
      "doc": "查找单个分组"
    },
    {
      "name": "FindNSDomainGroupResponse",
      "code": "message FindNSDomainGroupResponse {\n\tNSDomainGroup nsDomainGroup = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSDomainRecordsHealthCheckRequest",
      "code": "message FindNSDomainRecordsHealthCheckRequest {\n\tint64 nsDomainId = 1; // 域名ID\n}",
      "doc": "查询记录健康检查全局设置"
    },
    {
      "name": "FindNSDomainRecordsHealthCheckResponse",
      "code": "message FindNSDomainRecordsHealthCheckResponse {\n\tbytes nsDomainRecordsHealthCheckJSON = 1; // 健康检查设置\n}",
      "doc": ""
    },
    {
      "name": "FindNSDomainRequest",
      "code": "message FindNSDomainRequest {\n\tint64 nsDomainId = 1; // 域名ID\n}",
      "doc": "查找单个域名"
    },
    {
      "name": "FindNSDomainResponse",
      "code": "message FindNSDomainResponse {\n\tNSDomain nsDomain = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSDomainTSIGRequest",
      "code": "message FindNSDomainTSIGRequest {\n\tint64 nsDomainId = 1;\n}",
      "doc": "查找TSIG配置"
    },
    {
      "name": "FindNSDomainTSIGResponse",
      "code": "message FindNSDomainTSIGResponse {\n\tbytes tsigJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSDomainVerifyingInfoRequest",
      "code": "message FindNSDomainVerifyingInfoRequest {\n\tint64 nsDomainId = 1; // 要验证的域名ID\n}",
      "doc": "获取域名验证信息"
    },
    {
      "name": "FindNSDomainVerifyingInfoResponse",
      "code": "message FindNSDomainVerifyingInfoResponse {\n\tbool requireTXT = 4; // 是否需要TXT验证，如果不需要（值false），则表示用户不需要手动设置TXT，此时 txt 字段内容可能为空\n\tstring txt = 1; // TXT记录\n\tint64 expiresAt = 2; // TXT过期时间\n\tstring status = 3; // 当前状态\n}",
      "doc": ""
    },
    {
      "name": "FindNSDomainWithNameRequest",
      "code": "message FindNSDomainWithNameRequest {\n\tint64 userId = 2; // 用户ID，只有管理员才能指定用户\n\tstring name = 1; // 域名\n}",
      "doc": "根据域名名称查找域名"
    },
    {
      "name": "FindNSDomainWithNameResponse",
      "code": "message FindNSDomainWithNameResponse {\n\tNSDomain nsDomain = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSKeyRequest",
      "code": "message FindNSKeyRequest {\n\tint64 nsKeyId = 1;\n}",
      "doc": "查找单个密钥"
    },
    {
      "name": "FindNSKeyResponse",
      "code": "message FindNSKeyResponse {\n\tNSKey nsKey = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSNodeAPIConfigRequest",
      "code": "message FindNSNodeAPIConfigRequest {\n\tint64 nsNodeId = 1;\n}",
      "doc": "查找单个节点的API相关配置"
    },
    {
      "name": "FindNSNodeAPIConfigResponse",
      "code": "message FindNSNodeAPIConfigResponse {\n\tbytes apiNodeAddrsJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSNodeDDoSProtectionRequest",
      "code": "message FindNSNodeDDoSProtectionRequest {\n\tint64 nsNodeId = 1;\n}",
      "doc": "获取NS节点的DDoS设置"
    },
    {
      "name": "FindNSNodeDDoSProtectionResponse",
      "code": "message FindNSNodeDDoSProtectionResponse {\n\tbytes ddosProtectionJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSNodeInstallStatusRequest",
      "code": "message FindNSNodeInstallStatusRequest {\n\tint64 nsNodeId = 1;\n}",
      "doc": "读取NS节点安装状态"
    },
    {
      "name": "FindNSNodeInstallStatusResponse",
      "code": "message FindNSNodeInstallStatusResponse {\n\tNodeInstallStatus installStatus = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSNodeRequest",
      "code": "message FindNSNodeRequest {\n\tint64 nsNodeId = 1;\n}",
      "doc": "获取单个NS节点信息"
    },
    {
      "name": "FindNSNodeResponse",
      "code": "message FindNSNodeResponse {\n\tNSNode nsNode = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSPlanRequest",
      "code": "message FindNSPlanRequest {\n\tint64 nsPlanId = 1;\n}",
      "doc": "查找DNS套餐"
    },
    {
      "name": "FindNSPlanResponse",
      "code": "message FindNSPlanResponse {\n\tNSPlan nsPlan = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSQuestionOptionRequest",
      "code": "message FindNSQuestionOptionRequest {\n\tint64 nsQuestionOptionId = 1;\n}",
      "doc": "读取选项"
    },
    {
      "name": "FindNSQuestionOptionResponse",
      "code": "message FindNSQuestionOptionResponse {\n\tNSQuestionOption nsQuestionOption = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSRecordHealthCheckRequest",
      "code": "message FindNSRecordHealthCheckRequest {\n\tint64 nsRecordId = 1; // 记录ID\n}",
      "doc": "查询记录健康检查设置"
    },
    {
      "name": "FindNSRecordHealthCheckResponse",
      "code": "message FindNSRecordHealthCheckResponse {\n\tbytes nsRecordHealthCheckJSON = 1; // 记录健康检查配置\n}",
      "doc": ""
    },
    {
      "name": "FindNSRecordHourlyStatRequest",
      "code": "message FindNSRecordHourlyStatRequest {\n\tint64 nsRecordId = 1; // 记录ID\n\tstring hour = 2; // YYYYMMDDHH\n}",
      "doc": "获取单个记录单个小时的统计"
    },
    {
      "name": "FindNSRecordHourlyStatResponse",
      "code": "message FindNSRecordHourlyStatResponse {\n\tNSRecordHourlyStat nsRecordHourlyStat = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSRecordHourlyStatWithRecordIdsRequest",
      "code": "message FindNSRecordHourlyStatWithRecordIdsRequest {\n\trepeated int64 nsRecordIds = 1;\n\tstring hour = 2;\n}",
      "doc": "批量获取一组记录的统计"
    },
    {
      "name": "FindNSRecordHourlyStatWithRecordIdsResponse",
      "code": "message FindNSRecordHourlyStatWithRecordIdsResponse {\n\trepeated NSRecordHourlyStat nsRecordHourlyStats = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSRecordRequest",
      "code": "message FindNSRecordRequest {\n\tint64 nsRecordId = 1;\n}",
      "doc": "查询单个记录信息"
    },
    {
      "name": "FindNSRecordResponse",
      "code": "message FindNSRecordResponse {\n\tNSRecord nsRecord = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSRecordWithNameAndTypeRequest",
      "code": "message FindNSRecordWithNameAndTypeRequest {\n\tint64 nsDomainId = 1;\n\tstring name = 2;\n\tstring type = 3;\n}",
      "doc": "使用名称和类型查询单个记录信息"
    },
    {
      "name": "FindNSRecordWithNameAndTypeResponse",
      "code": "message FindNSRecordWithNameAndTypeResponse {\n\tNSRecord nsRecord = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSRecordsWithNameAndTypeRequest",
      "code": "message FindNSRecordsWithNameAndTypeRequest {\n\tint64 nsDomainId = 1;\n\tstring name = 2;\n\tstring type = 3;\n}",
      "doc": "使用名称和类型查询多个记录信息"
    },
    {
      "name": "FindNSRecordsWithNameAndTypeResponse",
      "code": "message FindNSRecordsWithNameAndTypeResponse {\n\trepeated NSRecord nsRecords = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSRouteCategoryRequest",
      "code": "message FindNSRouteCategoryRequest {\n\tint64 nsRouteCategoryId = 1;\n}",
      "doc": "查找单个线路分类"
    },
    {
      "name": "FindNSRouteCategoryResponse",
      "code": "message FindNSRouteCategoryResponse {\n\tNSRouteCategory nsRouteCategory = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSRouteRequest",
      "code": "message FindNSRouteRequest {\n\tint64 nsRouteId = 1;\n}",
      "doc": "获取单个自定义路线信息"
    },
    {
      "name": "FindNSRouteResponse",
      "code": "message FindNSRouteResponse {\n\tNSRoute nsRoute = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNSUserPlanRequest",
      "code": "message FindNSUserPlanRequest {\n\tint64 userId = 1;  // 和 nsUserPlanId 二选一\n\tint64 nsUserPlanId = 2;\n}",
      "doc": "读取用户套餐"
    },
    {
      "name": "FindNSUserPlanResponse",
      "code": "message FindNSUserPlanResponse {\n\tNSUserPlan nsUserPlan = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNearbyServersRequest",
      "code": "message FindNearbyServersRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "查找某个网站附近的网站"
    },
    {
      "name": "FindNearbyServersResponse",
      "code": "message FindNearbyServersResponse {\n\tstring scope = 1; // 范围 cluster|group\n\trepeated GroupInfo groups = 2;\n\n\n\tmessage GroupInfo {\n\t\tstring name = 1;\n\t\trepeated Server servers = 2;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindNodeAPIConfigRequest",
      "code": "message FindNodeAPIConfigRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "查找单个节点的API相关配置"
    },
    {
      "name": "FindNodeAPIConfigResponse",
      "code": "message FindNodeAPIConfigResponse {\n\tbytes apiNodeAddrsJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeActionRequest",
      "code": "message FindNodeActionRequest {\n\tint64 nodeActionId = 1; // 动作ID\n}",
      "doc": "查找单个节点动作"
    },
    {
      "name": "FindNodeActionResponse",
      "code": "message FindNodeActionResponse {\n\tNodeAction nodeAction = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeClusterDDoSProtectionRequest",
      "code": "message FindNodeClusterDDoSProtectionRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "获取集群的DDoS设置"
    },
    {
      "name": "FindNodeClusterDDoSProtectionResponse",
      "code": "message FindNodeClusterDDoSProtectionResponse {\n\tbytes ddosProtectionJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeClusterGlobalServerConfigRequest",
      "code": "message FindNodeClusterGlobalServerConfigRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "获取集群的全局服务设置"
    },
    {
      "name": "FindNodeClusterGlobalServerConfigResponse",
      "code": "message FindNodeClusterGlobalServerConfigResponse {\n\tbytes globalServerConfigJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeClusterHTTP3PolicyRequest",
      "code": "message FindNodeClusterHTTP3PolicyRequest {\n\tint64 nodeClusterId = 1; // 集群ID\n}",
      "doc": "获取集群的HTTP3设置"
    },
    {
      "name": "FindNodeClusterHTTP3PolicyResponse",
      "code": "message FindNodeClusterHTTP3PolicyResponse {\n\tbytes http3PolicyJSON = 1; // HTTP3策略配置\n}",
      "doc": ""
    },
    {
      "name": "FindNodeClusterHTTPPagesPolicyRequest",
      "code": "message FindNodeClusterHTTPPagesPolicyRequest {\n\tint64 nodeClusterId = 1; // 集群ID\n}",
      "doc": "获取集群的自定义页面设置"
    },
    {
      "name": "FindNodeClusterHTTPPagesPolicyResponse",
      "code": "message FindNodeClusterHTTPPagesPolicyResponse {\n\tbytes httpPagesPolicyJSON = 1; // HTTP自定义页面策略配置\n}",
      "doc": ""
    },
    {
      "name": "FindNodeClusterHealthCheckConfigRequest",
      "code": "message FindNodeClusterHealthCheckConfigRequest {\n\tint64 nodeClusterId = 1;\n}",
      "doc": "查找集群的健康检查配置"
    },
    {
      "name": "FindNodeClusterHealthCheckConfigResponse",
      "code": "message FindNodeClusterHealthCheckConfigResponse {\n\tbytes healthCheckJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeClusterNetworkSecurityPolicyRequest",
      "code": "message FindNodeClusterNetworkSecurityPolicyRequest {\n\tint64 nodeClusterId = 1; // 集群ID\n}",
      "doc": "获取集群的网络安全策略"
    },
    {
      "name": "FindNodeClusterNetworkSecurityPolicyResponse",
      "code": "message FindNodeClusterNetworkSecurityPolicyResponse {\n\tbytes networkSecurityPolicyJSON = 1; // 网络安全策略配置\n}",
      "doc": ""
    },
    {
      "name": "FindNodeClusterSystemServiceRequest",
      "code": "message FindNodeClusterSystemServiceRequest {\n\tint64 nodeClusterId = 1;\n\tstring type = 2;\n}",
      "doc": "查找集群的系统服务设置"
    },
    {
      "name": "FindNodeClusterSystemServiceResponse",
      "code": "message FindNodeClusterSystemServiceResponse {\n\tbytes paramsJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeClusterTasksRequest",
      "code": "message FindNodeClusterTasksRequest {\n\n}",
      "doc": "获取所有正在同步的集群信息"
    },
    {
      "name": "FindNodeClusterTasksResponse",
      "code": "message FindNodeClusterTasksResponse {\n\trepeated ClusterTask clusterTasks = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeDDoSProtectionRequest",
      "code": "message FindNodeDDoSProtectionRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "获取节点的DDoS设置"
    },
    {
      "name": "FindNodeDDoSProtectionResponse",
      "code": "message FindNodeDDoSProtectionResponse {\n\tbytes ddosProtectionJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeDNSResolverRequest",
      "code": "message FindNodeDNSResolverRequest{\n\tint64 nodeId = 1;\n}",
      "doc": "读取节点DNS Resolver"
    },
    {
      "name": "FindNodeDNSResolverResponse",
      "code": "message FindNodeDNSResolverResponse {\n\tbytes dnsResolverJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeGlobalServerConfigRequest",
      "code": "message FindNodeGlobalServerConfigRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "取得节点的服务全局配置"
    },
    {
      "name": "FindNodeGlobalServerConfigResponse",
      "code": "message FindNodeGlobalServerConfigResponse {\n\tbytes globalServerConfigJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeHTTP3PoliciesResponse",
      "code": "message FindNodeHTTP3PoliciesResponse {\n\trepeated HTTP3Policy http3Policies = 1; // HTTP3策略列表\n\n\n\tmessage HTTP3Policy {\n\t\tint64 nodeClusterId = 1; // 集群ID\n\t\tbytes http3PolicyJSON = 2; // HTTP3策略配置\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindNodeHTTPCCPoliciesResponse",
      "code": "message FindNodeHTTPCCPoliciesResponse {\n\trepeated HTTPCCPolicy httpCCPolicies = 1; // HTTP CC策略列表\n\n\n\tmessage HTTPCCPolicy {\n\t\tint64 nodeClusterId = 1; // 集群ID\n\t\tbytes httpCCPolicyJSON = 2; // HTTP CC策略配置\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindNodeHTTPPagesPoliciesResponse",
      "code": "message FindNodeHTTPPagesPoliciesResponse {\n\trepeated HTTPPagesPolicy httpPagesPolicies = 1; // 自定义页面策略列表\n\n\n\tmessage HTTPPagesPolicy {\n\t\tint64 nodeClusterId = 1; // 集群ID\n\t\tbytes httpPagesPolicyJSON = 2; // 自定义页面策略配置\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindNodeInstallStatusRequest",
      "code": "message FindNodeInstallStatusRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "读取节点安装状态"
    },
    {
      "name": "FindNodeInstallStatusResponse",
      "code": "message FindNodeInstallStatusResponse {\n\tNodeInstallStatus installStatus = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeLevelInfoResponse",
      "code": "message FindNodeLevelInfoResponse {\n\tint32 level = 1;\n\tbytes parentNodesMapJSON = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeLoginSuggestPortsRequest",
      "code": "message FindNodeLoginSuggestPortsRequest {\n\tstring host = 1;\n}",
      "doc": "读取建议的端口"
    },
    {
      "name": "FindNodeLoginSuggestPortsResponse",
      "code": "message FindNodeLoginSuggestPortsResponse {\n\trepeated int32 ports = 1;\n\trepeated int32 availablePorts = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeNetworkSecurityPolicyResponse",
      "code": "message FindNodeNetworkSecurityPolicyResponse {\n\tbytes networkSecurityPolicyJSON = 1; // 网络安全策略\n}",
      "doc": ""
    },
    {
      "name": "FindNodeScheduleInfoRequest",
      "code": "message FindNodeScheduleInfoRequest {\n\tint64 nodeId = 1; // 节点ID\n}",
      "doc": "查找节点调度信息"
    },
    {
      "name": "FindNodeScheduleInfoResponse",
      "code": "message FindNodeScheduleInfoResponse {\n\tScheduleInfo scheduleInfo = 1; // 调度信息\n\n\n\tmessage ScheduleInfo {\n\t\tstring offlineDay = 1; // 下线日期，格式YYYYMMDD\n\t\tbool isBackupForCluster = 2; // 是否为集群备份节点\n\t\tbool isBackupForGroup = 3; // 是否为分组备份节点\n\t\trepeated string backupIPs = 4; // 备用IP\n\t\tbytes actionStatusJSON = 5; // 动作状态\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindNodeTOAConfigResponse",
      "code": "message FindNodeTOAConfigResponse {\n\tbytes toaJSON = 1; // TOA配置\n}",
      "doc": ""
    },
    {
      "name": "FindNodeTasksRequest",
      "code": "message FindNodeTasksRequest {\n\tint64 version = 1; // 上一次执行的版本\n}",
      "doc": "获取单节点同步任务"
    },
    {
      "name": "FindNodeTasksResponse",
      "code": "message FindNodeTasksResponse {\n\trepeated NodeTask nodeTasks = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindNodeUAMPoliciesResponse",
      "code": "message FindNodeUAMPoliciesResponse {\n\trepeated UAMPolicy uamPolicies = 1; // UAM策略列表\n\n\n\tmessage UAMPolicy {\n\t\tint64 nodeClusterId = 1; // 集群ID\n\t\tbytes uamPolicyJSON = 2; // UAM策略配置\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindNotifyingNodeTasksRequest",
      "code": "message FindNotifyingNodeTasksRequest {\n\tint64 size = 1;\n}",
      "doc": "查找需要通知的任务"
    },
    {
      "name": "FindNotifyingNodeTasksResponse",
      "code": "message FindNotifyingNodeTasksResponse {\n\trepeated NodeTask nodeTasks = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindPublicIPLibraryArtifactRequest",
      "code": "message FindPublicIPLibraryArtifactRequest {\n\n}",
      "doc": "查找当前正在使用的制品"
    },
    {
      "name": "FindPublicIPLibraryArtifactResponse",
      "code": "message FindPublicIPLibraryArtifactResponse {\n\tIPLibraryArtifact ipLibraryArtifact = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindRegionCityRequest",
      "code": "message FindRegionCityRequest {\n\tint64 regionCityId = 1;\n}",
      "doc": "查找单个城市信息"
    },
    {
      "name": "FindRegionCityResponse",
      "code": "message FindRegionCityResponse {\n\tRegionCity regionCity = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindRegionCountryRequest",
      "code": "message FindRegionCountryRequest {\n\tint64 regionCountryId = 1;\n}",
      "doc": "查找单个国家/地区信息"
    },
    {
      "name": "FindRegionCountryResponse",
      "code": "message FindRegionCountryResponse {\n\tRegionCountry regionCountry = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindRegionProviderRequest",
      "code": "message FindRegionProviderRequest {\n\tint64 regionProviderId = 1;\n}",
      "doc": "查找单个ISP信息"
    },
    {
      "name": "FindRegionProviderResponse",
      "code": "message FindRegionProviderResponse {\n\tRegionProvider regionProvider = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindRegionProvinceRequest",
      "code": "message FindRegionProvinceRequest {\n\tint64 regionProvinceId = 1;\n}",
      "doc": "查找单个省份信息"
    },
    {
      "name": "FindRegionProvinceResponse",
      "code": "message FindRegionProvinceResponse {\n\tRegionProvince regionProvince = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindRegionTownRequest",
      "code": "message FindRegionTownRequest {\n\tint64 regionTownId = 1;\n}",
      "doc": "查找单个区县信息"
    },
    {
      "name": "FindRegionTownResponse",
      "code": "message FindRegionTownResponse {\n\tRegionTown regionTown = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindReportNodeTasksRequest",
      "code": "message FindReportNodeTasksRequest {\n\n}",
      "doc": "读取任务"
    },
    {
      "name": "FindReportNodeTasksResponse",
      "code": "message FindReportNodeTasksResponse {\n\tbytes ipAddrTasksJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindSSLCertUserRequest",
      "code": "message FindSSLCertUserRequest {\n\tint64 sslCertId = 1; // 证书ID\n}",
      "doc": "查找证书所属用户"
    },
    {
      "name": "FindSSLCertUserResponse",
      "code": "message FindSSLCertUserResponse {\n\tUser user = 1; // 用户信息，只包含几个基本的信息\n}",
      "doc": ""
    },
    {
      "name": "FindServer5MinutelyStatsWithDayRequest",
      "code": "message FindServer5MinutelyStatsWithDayRequest {\n\tint64 serverId = 1;\n\tstring day = 2; // 必需，格式：YYYYMMDD\n\tstring timeFrom = 3; // 可选，开始时间，格式：HHIISS，比如 130000\n\tstring timeTo = 4; // 可选，结束时间，格式：HHIISS，比如 130459\n}",
      "doc": "读取某天的5分钟间隔流量"
    },
    {
      "name": "FindServer5MinutelyStatsWithDayResponse",
      "code": "message FindServer5MinutelyStatsWithDayResponse {\n\trepeated Stat stats = 1;\n\n\n\tmessage Stat {\n\t\tstring day = 1;\n\t\tstring timeFrom = 2;\n\t\tstring timeTo = 3;\n\t\tint64 bytes = 4;\n\t\tint64 cachedBytes = 5;\n\t\tint64 countRequests = 6;\n\t\tint64 countCachedRequests = 7;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindServerAuditingPromptRequest",
      "code": "message FindServerAuditingPromptRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "获取域名审核时的提示文字"
    },
    {
      "name": "FindServerAuditingPromptResponse",
      "code": "message FindServerAuditingPromptResponse {\n\tstring promptText = 1; // 提示文字\n}",
      "doc": ""
    },
    {
      "name": "FindServerBandwidthStatsRequest",
      "code": "message FindServerBandwidthStatsRequest {\n\tint64 serverId = 1; // 服务ID\n\tstring month = 2; // YYYYMM，month和day二选一\n\tstring day = 3; // YYYYMMDD\n\tstring algo = 4; // 带宽算法，目前支持secondly和avg\n}",
      "doc": "获取服务的峰值带宽"
    },
    {
      "name": "FindServerBandwidthStatsResponse",
      "code": "message FindServerBandwidthStatsResponse {\n\trepeated ServerBandwidthStat serverBandwidthStats = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindServerDailyStatsBetweenDaysRequest",
      "code": "message FindServerDailyStatsBetweenDaysRequest {\n\tint64 userId = 1; // 用户ID，和服务ID二选一\n\tint64 serverId = 2; // 服务ID，和用户ID二选一\n\tstring dayFrom = 3; // 开始日期 YYYYMMDD\n\tstring dayTo = 4; // 结束日期 YYYYMMDD\n\tint64 nodeRegionId = 5; // 区域ID\n}",
      "doc": "读取日期段内的流量数据"
    },
    {
      "name": "FindServerDailyStatsBetweenDaysResponse",
      "code": "message FindServerDailyStatsBetweenDaysResponse {\n\trepeated Stat stats = 1;\n\n\n\tmessage Stat {\n\t\tstring day = 1;\n\t\tstring timeFrom = 2;\n\t\tstring timeTo = 3;\n\t\tstring timeAt = 4;\n\t\tint64 bytes = 5;\n\t\tint64 cachedBytes = 6;\n\t\tint64 countRequests = 7;\n\t\tint64 countCachedRequests = 8;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindServerIdWithDNSNameRequest",
      "code": "message FindServerIdWithDNSNameRequest {\n\tint64 nodeClusterId = 1;\n\tstring dnsName = 2;\n}",
      "doc": "使用CNAME查找网站"
    },
    {
      "name": "FindServerIdWithDNSNameResponse",
      "code": "message FindServerIdWithDNSNameResponse {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": ""
    },
    {
      "name": "FindServerNamesRequest",
      "code": "message FindServerNamesRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "查找网站的域名设置"
    },
    {
      "name": "FindServerNamesResponse",
      "code": "message FindServerNamesResponse {\n\tbytes serverNamesJSON = 1; // 域名列表 @link json:server_names\n\tbool isAuditing = 2;\n\tint64 auditingAt = 5;\n\tbytes auditingServerNamesJSON = 3;\n\tServerNameAuditingResult auditingResult = 4;\n}",
      "doc": ""
    },
    {
      "name": "FindServerUserPlanRequest",
      "code": "message FindServerUserPlanRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "获取网站套餐信息"
    },
    {
      "name": "FindServerUserPlanResponse",
      "code": "message FindServerUserPlanResponse {\n\tUserPlan userPlan = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindSuggestNodeGrantsRequest",
      "code": "message FindSuggestNodeGrantsRequest {\n\tint64 nodeClusterId = 1; // 边缘节点集群\n\tint64 nsClusterId = 2; // NS节点集群\n}",
      "doc": "查找集群推荐的认证"
    },
    {
      "name": "FindSuggestNodeGrantsResponse",
      "code": "message FindSuggestNodeGrantsResponse {\n\trepeated NodeGrant nodeGrants = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindTopServerClientBrowserMonthlyStatsRequest",
      "code": "message FindTopServerClientBrowserMonthlyStatsRequest {\n\tint64 serverId = 1;\n\tstring month = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n}",
      "doc": "查找前N个浏览器"
    },
    {
      "name": "FindTopServerClientBrowserMonthlyStatsResponse",
      "code": "message FindTopServerClientBrowserMonthlyStatsResponse {\n\trepeated Stat stats = 1;\n\n\n\tmessage Stat {\n\t\tClientBrowser clientBrowser = 1;\n\t\tstring version = 2;\n\t\tint64 count = 3;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindTopServerClientSystemMonthlyStatsRequest",
      "code": "message FindTopServerClientSystemMonthlyStatsRequest {\n\tint64 serverId = 1;\n\tstring month = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n}",
      "doc": "查找前N个操作系统"
    },
    {
      "name": "FindTopServerClientSystemMonthlyStatsResponse",
      "code": "message FindTopServerClientSystemMonthlyStatsResponse {\n\trepeated Stat stats = 1;\n\n\n\tmessage Stat {\n\t\tClientSystem clientSystem = 1;\n\t\tstring version = 2;\n\t\tint64 count = 3;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindTopServerRegionCityMonthlyStatsRequest",
      "code": "message FindTopServerRegionCityMonthlyStatsRequest {\n\tstring month = 1; // YYYYMM\n\tint64 serverId = 2;\n\tint64 countryId = 3;\n\tint64 provinceId = 4;\n\tint64 offset = 5;\n\tint64 size = 6;\n}",
      "doc": "查找前N个城市"
    },
    {
      "name": "FindTopServerRegionCityMonthlyStatsResponse",
      "code": "message FindTopServerRegionCityMonthlyStatsResponse {\n\trepeated Stat stats = 1;\n\n\n\tmessage Stat {\n\t\tRegionCountry regionCountry = 1;\n\t\tRegionProvince regionProvince = 2;\n\t\tRegionCity regionCity = 3;\n\t\tint64 count = 4;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindTopServerRegionCountryMonthlyStatsRequest",
      "code": "message FindTopServerRegionCountryMonthlyStatsRequest {\n\tstring month = 1; // YYYYMM\n\tint64 serverId = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n}",
      "doc": "查找前N个城市"
    },
    {
      "name": "FindTopServerRegionCountryMonthlyStatsResponse",
      "code": "message FindTopServerRegionCountryMonthlyStatsResponse {\n\trepeated Stat stats = 1;\n\n\n\tmessage Stat {\n\t\tRegionCountry regionCountry = 1;\n\t\tint64 count = 2;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindTopServerRegionProviderMonthlyStatsRequest",
      "code": "message FindTopServerRegionProviderMonthlyStatsRequest {\n\tstring month = 1; // YYYYMM\n\tint64 serverId = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n}",
      "doc": "查找前N个城市"
    },
    {
      "name": "FindTopServerRegionProviderMonthlyStatsResponse",
      "code": "message FindTopServerRegionProviderMonthlyStatsResponse {\n\trepeated Stat stats = 1;\n\n\n\tmessage Stat {\n\t\tRegionProvider regionProvider = 1;\n\t\tint64 count = 2;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindTopServerRegionProvinceMonthlyStatsRequest",
      "code": "message FindTopServerRegionProvinceMonthlyStatsRequest {\n\tstring month = 1; // YYYYMM\n\tint64 serverId = 2;\n\tint64 countryId = 3;\n\tint64 offset = 4;\n\tint64 size = 5;\n}",
      "doc": "查找前N个城市"
    },
    {
      "name": "FindTopServerRegionProvinceMonthlyStatsResponse",
      "code": "message FindTopServerRegionProvinceMonthlyStatsResponse {\n\trepeated Stat stats = 1;\n\n\n\tmessage Stat {\n\t\tRegionCountry regionCountry = 1;\n\t\tRegionProvince regionProvince = 2;\n\t\tint64 count = 3;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "FindTrafficDailyStatWithDayRequest",
      "code": "message FindTrafficDailyStatWithDayRequest {\n\tstring day = 1; // YYYYMMDD\n\tstring minute = 2; // HHIISS，可选项\n}",
      "doc": "查找某日统计"
    },
    {
      "name": "FindTrafficDailyStatWithDayResponse",
      "code": "message FindTrafficDailyStatWithDayResponse {\n\tTrafficDailyStat trafficDailyStat = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindTrafficPackagePeriodRequest",
      "code": "message FindTrafficPackagePeriodRequest {\n\tint64 trafficPackagePeriodId = 1;\n}",
      "doc": "查找有效期"
    },
    {
      "name": "FindTrafficPackagePeriodResponse",
      "code": "message FindTrafficPackagePeriodResponse {\n\tTrafficPackagePeriod trafficPackagePeriod = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindTrafficPackagePriceRequest",
      "code": "message FindTrafficPackagePriceRequest {\n\tint64 trafficPackageId = 1;\n\tint64 nodeRegionId = 2;\n\tint64 trafficPackagePeriodId = 3;\n\tint32 count = 4;\n}",
      "doc": "获取单个流量包具体价格"
    },
    {
      "name": "FindTrafficPackagePriceResponse",
      "code": "message FindTrafficPackagePriceResponse {\n\tdouble price = 1; // 单价\n\tdouble amount = 2; // 总价\n}",
      "doc": ""
    },
    {
      "name": "FindTrafficPackagePricesRequest",
      "code": "message FindTrafficPackagePricesRequest {\n\tint64 trafficPackageId = 1;\n}",
      "doc": "查找流量包价格"
    },
    {
      "name": "FindTrafficPackagePricesResponse",
      "code": "message FindTrafficPackagePricesResponse {\n\trepeated TrafficPackagePrice trafficPackagePrices = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindTrafficPackageRequest",
      "code": "message FindTrafficPackageRequest {\n\tint64 trafficPackageId = 1;\n}",
      "doc": "查找流量包"
    },
    {
      "name": "FindTrafficPackageResponse",
      "code": "message FindTrafficPackageResponse {\n\tTrafficPackage trafficPackage = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindUpdatingServerListsRequest",
      "code": "message FindUpdatingServerListsRequest {\n\tint64 lastId = 1; // 上一次读取的列表ID\n}",
      "doc": "查找要更新的服务配置"
    },
    {
      "name": "FindUpdatingServerListsResponse",
      "code": "message FindUpdatingServerListsResponse {\n\tbytes serversJSON = 1; // 服务配置列表\n\tint64 maxId = 2; // 最大的一个列表ID\n}",
      "doc": ""
    },
    {
      "name": "FindUserADInstanceRequest",
      "code": "message FindUserADInstanceRequest {\n\tint64 userADInstanceId = 1;\n}",
      "doc": "查找单个用户高防实例"
    },
    {
      "name": "FindUserADInstanceResponse",
      "code": "message FindUserADInstanceResponse {\n\tUserADInstance userADInstance = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindUserBillRequest",
      "code": "message FindUserBillRequest {\n\tint64 userBillId = 1; // ID，和单号二选一\n\tstring code = 2; // 单号\n}",
      "doc": "查找账单信息"
    },
    {
      "name": "FindUserBillResponse",
      "code": "message FindUserBillResponse {\n\tUserBill userBill = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindUserFeaturesRequest",
      "code": "message FindUserFeaturesRequest {\n\tint64 userId = 1;\n}",
      "doc": "获取用户所有的功能列表"
    },
    {
      "name": "FindUserFeaturesResponse",
      "code": "message FindUserFeaturesResponse {\n\trepeated UserFeature features = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindUserNodeAccessAddrRequest",
      "code": "message FindUserNodeAccessAddrRequest {\n\n}",
      "doc": "获取用户节点访问地址"
    },
    {
      "name": "FindUserNodeAccessAddrResponse",
      "code": "message FindUserNodeAccessAddrResponse {\n\tstring accessAddr = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindUserNodeClusterIdRequest",
      "code": "message FindUserNodeClusterIdRequest {\n\tint64 userId = 1;\n}",
      "doc": "获取用户所在的集群ID"
    },
    {
      "name": "FindUserNodeClusterIdResponse",
      "code": "message FindUserNodeClusterIdResponse {\n\tint64 nodeClusterId = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindUserPriceInfoRequest",
      "code": "message FindUserPriceInfoRequest {\n\tint64 userId = 1;\n}",
      "doc": "读取用户计费信息"
    },
    {
      "name": "FindUserPriceInfoResponse",
      "code": "message FindUserPriceInfoResponse {\n\tstring priceType = 1;\n\tstring pricePeriod = 2;\n}",
      "doc": ""
    },
    {
      "name": "FindUserTicketCategoryRequest",
      "code": "message FindUserTicketCategoryRequest {\n\tint64 userTicketCategoryId = 1;\n}",
      "doc": "查询单个分类"
    },
    {
      "name": "FindUserTicketCategoryResponse",
      "code": "message FindUserTicketCategoryResponse {\n\tUserTicketCategory userTicketCategory = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindUserTicketRequest",
      "code": "message FindUserTicketRequest {\n\tint64 userTicketId = 1;\n}",
      "doc": "查找单个工单"
    },
    {
      "name": "FindUserTicketResponse",
      "code": "message FindUserTicketResponse {\n\tUserTicket userTicket = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindUserTrafficBillsRequest",
      "code": "message FindUserTrafficBillsRequest {\n\tint64 userBillId = 1;\n}",
      "doc": "列出某个账单下的流量带宽子账单"
    },
    {
      "name": "FindUserTrafficBillsResponse",
      "code": "message FindUserTrafficBillsResponse {\n\trepeated UserTrafficBill userTrafficBills = 1;\n}",
      "doc": ""
    },
    {
      "name": "FindUserVerifiedEmailWithUsernameRequest",
      "code": "message FindUserVerifiedEmailWithUsernameRequest {\n\tstring username = 1; // 用户名\n}",
      "doc": "根据用户名查询用户绑定的邮箱"
    },
    {
      "name": "FindUserVerifiedEmailWithUsernameResponse",
      "code": "message FindUserVerifiedEmailWithUsernameResponse {\n\tstring email = 1; // 已绑定邮箱地址\n}",
      "doc": ""
    },
    {
      "name": "FindVerifiedNSDomainOnClusterRequest",
      "code": "message FindVerifiedNSDomainOnClusterRequest {\n\tint64 nsClusterId = 1; // 集群ID\n\tstring name = 2; // 域名\n}",
      "doc": "根据域名名称查找集群中的已验证域名"
    },
    {
      "name": "FindVerifiedNSDomainOnClusterResponse",
      "code": "message FindVerifiedNSDomainOnClusterResponse {\n\tNSDomain nsDomain = 1;\n}",
      "doc": ""
    },
    {
      "name": "FinishUserOrderRequest",
      "code": "message FinishUserOrderRequest {\n\tstring code = 1;\n}",
      "doc": "完成订单"
    },
    {
      "name": "FixAllNodeLogsRequest",
      "code": "message FixAllNodeLogsRequest {\n\n}",
      "doc": "设置所有日志为已修复"
    },
    {
      "name": "FixNodeLogsRequest",
      "code": "message FixNodeLogsRequest {\n\trepeated int64 nodeLogIds = 1;\n}",
      "doc": "设置日志为已修复"
    },
    {
      "name": "FormalClientBrowser",
      "code": "message FormalClientBrowser {\n\tint64 id = 1;\n\tstring name = 2;\n\trepeated string codes = 3;\n\tstring dataId = 4;\n\tint32 state = 5;\n}",
      "doc": ""
    },
    {
      "name": "FormalClientSystem",
      "code": "message FormalClientSystem {\n\tint64 id = 1;\n\tstring name = 2;\n\trepeated string codes = 3;\n\tstring dataId = 4;\n\tint32 state = 5;\n}",
      "doc": ""
    },
    {
      "name": "GenerateAllUserBillsRequest",
      "code": "message GenerateAllUserBillsRequest {\n\tstring month = 1;\n\tstring day = 2;\n}",
      "doc": "手工生成账单"
    },
    {
      "name": "GenerateIPLibraryFileRequest",
      "code": "message GenerateIPLibraryFileRequest {\n\tint64 ipLibraryFileId = 1;\n}",
      "doc": "生成IP库文件"
    },
    {
      "name": "GetAPIAccessTokenRequest",
      "code": "message GetAPIAccessTokenRequest {\n\tstring type = 1;\n\tstring accessKeyId = 2;\n\tstring accessKey = 3;\n}",
      "doc": "获取AccessToken"
    },
    {
      "name": "GetAPIAccessTokenResponse",
      "code": "message GetAPIAccessTokenResponse {\n\tstring token = 1;\n\tint64 expiresAt = 2;\n}",
      "doc": ""
    },
    {
      "name": "HTTPAccessLog",
      "code": "message HTTPAccessLog {\n\tstring requestId = 48;\n\n\tint64 serverId = 1;\n\tint64 nodeId = 2;\n\tint64 locationId = 3;\n\tint64 rewriteId = 4;\n\tint64 originId = 5;\n\n\tstring remoteAddr = 6;\n\tstring rawRemoteAddr = 7;\n\tint32 remotePort = 8;\n\tstring remoteUser = 9;\n\tstring requestURI = 10;\n\tstring requestPath = 11;\n\tint64 requestLength = 12;\n\tdouble requestTime = 13;\n\tstring requestMethod = 14;\n\tstring requestFilename = 15;\n\tbytes requestBody = 51;\n\tstring scheme = 16;\n\tstring proto = 17;\n\tint64 bytesSent = 18;\n\tint64 bodyBytesSent = 19;\n\tint32 status = 20;\n\tstring statusMessage = 21;\n\tmap\u003cstring, Strings\u003e sentHeader = 22;\n\n\tstring timeISO8601 = 23;\n\tstring timeLocal = 24;\n\tdouble msec = 25;\n\tint64 timestamp = 26;\n\tstring host = 27;\n\tstring referer = 28;\n\tstring userAgent = 29;\n\tstring request = 30;\n\tstring contentType = 31;\n\tmap\u003cstring, string\u003e cookie = 32;\n\tstring args = 34;\n\tstring queryString = 35;\n\tmap\u003cstring, Strings\u003e header = 36;\n\tstring serverName = 37;\n\tint32 serverPort = 38;\n\tstring serverProtocol = 39;\n\tstring hostname = 40;\n\n\t// 源站相关\n\tstring originAddress = 41;\n\tint32 originStatus = 52;\n\n\t// 错误信息\n\trepeated string errors = 42;\n\n\t// 扩展\n\tmap\u003cstring, string\u003e attrs = 43;\n\n\t// WAF相关\n\tint64 firewallPolicyId = 44;\n\tint64 firewallRuleGroupId = 45;\n\tint64 firewallRuleSetId = 46;\n\tint64 firewallRuleId = 47;\n\n\trepeated string firewallActions = 49;\n\trepeated string tags = 50;\n\n\t// 详情\n\tNode node = 100;\n\n}",
      "doc": "HTTP访问日志"
    },
    {
      "name": "HTTPAccessLogPolicy",
      "code": "message HTTPAccessLogPolicy {\n\tint64 id = 1; // 策略ID\n\tstring name = 2; // 策略名称\n\tbool isOn = 3; // 是否启用\n\tstring type = 4; // 策略类型\n\tbytes optionsJSON = 5; // 策略选项\n\tbytes condsJSON = 6; // 记录条件选项\n\tbool isPublic = 7; // 是否公用\n\tbool firewallOnly = 8; // 是否只记录WAF相关访问日志\n\tbool disableDefaultDB = 9; // 停用默认数据库存储\n}",
      "doc": ""
    },
    {
      "name": "HTTPAuthPolicy",
      "code": "message HTTPAuthPolicy {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring type = 4;\n\tbytes paramsJSON = 5;\n}",
      "doc": "服务认证策略"
    },
    {
      "name": "HTTPCachePolicy",
      "code": "message HTTPCachePolicy {\n\tint64 id = 1; // ID\n\tstring name = 2; // 名称\n\tbool isOn = 3; // 是否启用\n\tbytes maxBytesJSON = 4; // 内容最大尺寸配置\n}",
      "doc": ""
    },
    {
      "name": "HTTPCacheTask",
      "code": "message HTTPCacheTask {\n\tint64 id = 1; // 任务ID\n\tint64 userId = 2;\n\tstring type = 3;\n\tstring keyType = 4;\n\tint64 createdAt = 5;\n\tint64 doneAt = 6;\n\tbool isDone = 7;\n\tbool isOk = 8;\n\tstring description = 9;\n\n\tUser user = 30; // 所属用户\n\trepeated HTTPCacheTaskKey httpCacheTaskKeys = 31; // 包含的Key\n}",
      "doc": ""
    },
    {
      "name": "HTTPCacheTaskKey",
      "code": "message HTTPCacheTaskKey {\n\tint64 id = 1; // 缓存键ID\n\tint64 taskId = 2; // 任务ID\n\tstring key = 3; // 缓存键\n\tstring type = 4; // 操作类型：purge|fetch\n\tstring keyType = 5; // 键类型：key|prefix\n\tbool isDone = 6; // 是否已完成\n\tbool isDoing = 9; // 是否执行中\n\tbytes errorsJSON = 7; // 错误信息\n\tint64 nodeClusterId = 8; // 所属集群ID\n}",
      "doc": ""
    },
    {
      "name": "HTTPFastcgi",
      "code": "message HTTPFastcgi {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring address = 3;\n\tbytes paramsJSON = 4;\n\tbytes readTimeoutJSON = 5;\n\tbytes connTimeoutJSON = 6;\n\tint32 poolSize = 7;\n\tstring pathInfoPattern = 8;\n}",
      "doc": "HTTP Fastcgi定义"
    },
    {
      "name": "HTTPFirewallPolicy",
      "code": "message HTTPFirewallPolicy {\n\tint64 id = 1;\n\tstring name = 2;\n\tstring mode = 7;\n\tbool isOn = 3;\n\tstring description = 4;\n\tbytes inboundJSON = 5;\n\tbytes outboundJSON = 6;\n\tint64 serverId = 8;\n\tbool useLocalFirewall = 9;\n\tbytes synFloodJSON = 10;\n}",
      "doc": ""
    },
    {
      "name": "HTTPFirewallRuleGroup",
      "code": "message HTTPFirewallRuleGroup {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tstring description = 4;\n\tstring code = 5;\n}",
      "doc": ""
    },
    {
      "name": "HTTPFirewallRuleSet",
      "code": "message HTTPFirewallRuleSet {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tstring description = 4;\n\tstring code = 5;\n}",
      "doc": ""
    },
    {
      "name": "HTTPGzip",
      "code": "message HTTPGzip {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tint32 level = 3;\n\tSizeCapacity minLength = 4;\n\tSizeCapacity maxLength = 5;\n\tbytes condsJSON = 6;\n}",
      "doc": ""
    },
    {
      "name": "HTTPWeb",
      "code": "message HTTPWeb {\n\tint64 id = 1;\n\tbool isOn = 2;\n}",
      "doc": ""
    },
    {
      "name": "IPAddrReportTask",
      "code": "message IPAddrReportTask {\n\tstring ip = 1;\n\tint32 port = 2;\n\tfloat costMs = 3;\n\tstring level = 4;\n\tfloat connectivity = 5;\n\n\tNodeIPAddress nodeIPAddress = 30;\n}",
      "doc": "IP地址任务"
    },
    {
      "name": "IPItem",
      "code": "message IPItem {\n\tint64 id = 1;\n\tstring ipFrom = 2;\n\tstring ipTo = 3;\n\tint64 version = 4;\n\tint64 expiredAt = 5;\n\tstring reason = 6;\n\tint64 listId = 7;\n\tbool isDeleted = 8;\n\tstring type = 9;\n\tstring eventLevel = 10; // 级别\n\tstring listType = 11; // 所在名单类型，来自名单\n\tbool isGlobal = 20; // 是否全局，来自名单\n\tint64 createdAt = 12;\n\n\tint64 nodeId = 13;\n\tint64 serverId = 14;\n\n\tint64 sourceNodeId = 15;\n\tint64 sourceServerId = 16;\n\tint64 sourceHTTPFirewallPolicyId = 17;\n\tint64 sourceHTTPFirewallRuleGroupId = 18;\n\tint64 sourceHTTPFirewallRuleSetId = 19;\n\n\tbool isRead = 21;\n\n\tServer sourceServer = 30;\n\tServer server = 34;\n\tHTTPFirewallPolicy  sourceHTTPFirewallPolicy = 31;\n\tHTTPFirewallRuleGroup sourceHTTPFirewallRuleGroup = 32;\n\tHTTPFirewallRuleSet sourceHTTPFirewallRuleSet = 33;\n\tNode sourceNode = 35;\n\n}",
      "doc": ""
    },
    {
      "name": "IPLibrary",
      "code": "message IPLibrary {\n\tint64 id = 1;\n\tstring type = 2;\n\tint64 createdAt = 3;\n\n\tFile file = 30;\n}",
      "doc": ""
    },
    {
      "name": "IPLibraryArtifact",
      "code": "message IPLibraryArtifact {\n\tint64 id = 1;\n\tint64 fileId = 2;\n\tint64 createdAt = 3;\n\tbytes metaJSON = 4;\n\tbool isPublic = 5; // 是否公开\n\tstring name = 6;\n\tstring code = 7;\n\n\tFile file = 30; // 文件信息\n}",
      "doc": ""
    },
    {
      "name": "IPLibraryFile",
      "code": "message IPLibraryFile {\n\tint64 id = 1;\n\tstring name = 2;\n\tint64 fileId = 3;\n\tstring template = 4;\n\trepeated string emptyValues = 5;\n\tint64 generatedFileId = 6;\n\tint64 generatedAt = 7;\n\tbool isFinished = 8;\n\tint64 createdAt = 9;\n\trepeated string countryNames = 10;\n\trepeated Province provinces = 11;\n\trepeated City cities = 12;\n\trepeated Town towns = 13;\n\trepeated string providerNames = 14;\n\tstring password = 15; // 密码\n\n\n\tmessage Province {\n\t\tstring countryName = 1;\n\t\tstring provinceName = 2;\n\t}\n\n\n\tmessage City {\n\t\tstring countryName = 1;\n\t\tstring provinceName = 2;\n\t\tstring cityName = 3;\n\t}\n\n\n\tmessage Town {\n\t\tstring countryName = 1;\n\t\tstring provinceName = 2;\n\t\tstring cityName = 3;\n\t\tstring townName = 4;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "IPList",
      "code": "message IPList {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring type = 3;\n\tstring name = 4;\n\tstring code = 5;\n\tbytes timeoutJSON = 6;\n\tbool isPublic = 7;\n\tstring description = 8;\n\tbool isGlobal = 9;\n}",
      "doc": ""
    },
    {
      "name": "IPRegion",
      "code": "message IPRegion {\n\tstring country = 1; // 国家/地区名称\n\tstring region = 2; // 区域名称\n\tstring province = 3; // 省份名称\n\tstring city = 4; // 城市名称\n\tstring isp = 5; // 运营商名称\n\tint64 countryId = 6; // 国家/地区ID\n\tint64 provinceId = 7; // 省份ID\n\tint64 cityId = 9; // 城市ID\n\tint64 townId = 10; // 区县ID\n\tint64 providerId = 11; // 运营商ID\n\tstring summary = 8; // 完整的地区组合\n}",
      "doc": "IP信息"
    },
    {
      "name": "IgnoreSSLCertsWithOCSPErrorRequest",
      "code": "message IgnoreSSLCertsWithOCSPErrorRequest {\n\trepeated int64 sslCertIds = 1;\n}",
      "doc": "忽略一组OCSP证书错误"
    },
    {
      "name": "ImportHTTPFirewallPolicyRequest",
      "code": "message ImportHTTPFirewallPolicyRequest {\n\tint64 httpFirewallPolicyId = 1;\n\tbytes httpFirewallPolicyJSON = 2;\n}",
      "doc": "导入策略数据"
    },
    {
      "name": "ImportNSRecordsRequest",
      "code": "message ImportNSRecordsRequest {\n\trepeated Record nsRecords = 1;\n\tint64 userId = 2;\n\n\n\tmessage Record {\n\t\tstring nsDomainName = 1;\n\t\tstring name = 2;\n\t\tstring type = 3;\n\t\tstring value = 4;\n\t\tint32 ttl = 5;\n\t\tint32 mxPriority = 6; // MX优先级\n\t\tint32 weight = 12; // 权重\n\n\t\tint32 srvPriority = 7; // SRV优先级\n\t\tint32 srvWeight = 8; // SRV权重\n\t\tint32 srvPort = 9; // SRV端口\n\n\t\tint32 caaFlag = 10; // CAA Flag\n\t\tstring caaTag = 11; // CAA TAG\n\t}\n}",
      "doc": "导入域名解析"
    },
    {
      "name": "IncreaseLatestItemRequest",
      "code": "message IncreaseLatestItemRequest {\n\tstring itemType = 1;\n\tint64 itemId = 2;\n}",
      "doc": "记录最近使用的条目"
    },
    {
      "name": "InstallNSNodeRequest",
      "code": "message InstallNSNodeRequest {\n\tint64 nsNodeId = 1;\n}",
      "doc": "安装NS节点"
    },
    {
      "name": "InstallNSNodeResponse",
      "code": "message InstallNSNodeResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "InstallNodeRequest",
      "code": "message InstallNodeRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "安装节点"
    },
    {
      "name": "InstallNodeResponse",
      "code": "message InstallNodeResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "ListACMEUsersRequest",
      "code": "message ListACMEUsersRequest {\n\tint64 adminId = 1;\n\tint64 userId = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n}",
      "doc": "列出单页用户"
    },
    {
      "name": "ListACMEUsersResponse",
      "code": "message ListACMEUsersResponse {\n\trepeated ACMEUser acmeUsers = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListADPackageInstancesRequest",
      "code": "message ListADPackageInstancesRequest {\n\tint64 adNetworkId = 1; // 可选，线路\n\tint64 adPackageId = 2; // 可选，如果不填则表示获取所有实例数量\n\tint64 userId = 3; // 可选，用户ID\n\tstring ip = 4; // 可选，高防IP\n\tint64 offset = 5;\n\tint64 size = 6;\n}",
      "doc": "列出单页实例"
    },
    {
      "name": "ListADPackageInstancesResponse",
      "code": "message ListADPackageInstancesResponse {\n\trepeated ADPackageInstance adPackageInstances = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListADPackagesRequest",
      "code": "message ListADPackagesRequest {\n\tint64 adNetworkId = 1;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页高防产品"
    },
    {
      "name": "ListADPackagesResponse",
      "code": "message ListADPackagesResponse {\n\trepeated ADPackage adPackages = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListAllEnabledIPItemsRequest",
      "code": "message ListAllEnabledIPItemsRequest {\n\tstring keyword = 8; // 关键词\n\tstring ip = 1; // 单个IP，搜索单个IP时需要\n\tbool globalOnly = 2;  // 是否为自动添加的IP\n\tbool unread = 5; // 是否未读\n\tstring eventLevel = 6; // 事件级别\n\tstring listType = 7; // 列表类型：black|white\n\tint64 userId = 9; // 用户ID，只有管理员才有权限指定用户ID\n\tint64 offset = 3; // 读取位置，从0开始\n\tint64 size = 4; // 每次读取数量\n}",
      "doc": "列出所有名单中的IP"
    },
    {
      "name": "ListAllEnabledIPItemsResponse",
      "code": "message ListAllEnabledIPItemsResponse {\n\trepeated Result results = 1;\n\n\n\tmessage Result {\n\t\tIPList ipList = 1; // 所属名单\n\t\tIPItem ipItem = 2; // IP信息\n\t\tServer server = 3; // 所属服务\n\t\tHTTPFirewallPolicy httpFirewallPolicy = 4; // 所属WAF策略\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ListBasicDNSDomainsWithDNSProviderIdRequest",
      "code": "message ListBasicDNSDomainsWithDNSProviderIdRequest {\n\tint64 dnsProviderId = 1;\n\tbool isDeleted = 2;\n\tbool isDown = 3;\n\tint64 offset = 4;\n\tint64 size = 5;\n}",
      "doc": "列出服务商下的单页域名信息"
    },
    {
      "name": "ListClientAgentIPsAfterIdRequest",
      "code": "message ListClientAgentIPsAfterIdRequest {\n\tint64 id = 1;\n\tint64 size = 2;\n}",
      "doc": "查询最新的IP"
    },
    {
      "name": "ListClientAgentIPsAfterIdResponse",
      "code": "message ListClientAgentIPsAfterIdResponse {\n\trepeated ClientAgentIP clientAgentIPs = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListDNSDomainsWithDNSProviderIdResponse",
      "code": "message ListDNSDomainsWithDNSProviderIdResponse {\n\trepeated DNSDomain dnsDomains = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledACMEProviderAccountsRequest",
      "code": "message ListEnabledACMEProviderAccountsRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n}",
      "doc": "列出单页服务商账号"
    },
    {
      "name": "ListEnabledACMEProviderAccountsResponse",
      "code": "message ListEnabledACMEProviderAccountsResponse {\n\trepeated ACMEProviderAccount acmeProviderAccounts = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledACMETasksRequest",
      "code": "message ListEnabledACMETasksRequest {\n\tint64 adminId = 1;\n\tint64 userId = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n\tbool isAvailable = 5;\n\tbool isExpired = 6;\n\tint32 expiringDays = 7;\n\tstring keyword = 8;\n\tbool userOnly = 9; // 可选项，是否只列出用户上传的证书\n}",
      "doc": "列出单页任务"
    },
    {
      "name": "ListEnabledACMETasksResponse",
      "code": "message ListEnabledACMETasksResponse {\n\trepeated ACMETask acmeTasks = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledAPINodesRequest",
      "code": "message ListEnabledAPINodesRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n}",
      "doc": "列出单页的API节点"
    },
    {
      "name": "ListEnabledAPINodesResponse",
      "code": "message ListEnabledAPINodesResponse {\n\trepeated APINode apiNodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledAdminsRequest",
      "code": "message ListEnabledAdminsRequest {\n\tstring keyword = 3; // 可选项，查询关键词\n\tbool hasWeakPassword = 4; // 可选项，筛选有弱密码的管理员，只有超级管理员才能查询\n\tint64 offset = 1; // 读取位置，从0开始\n\tint64 size = 2; // 读取数量\n}",
      "doc": "列出单页的管理员"
    },
    {
      "name": "ListEnabledAdminsResponse",
      "code": "message ListEnabledAdminsResponse {\n\trepeated Admin admins = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledDBNodesRequest",
      "code": "message ListEnabledDBNodesRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n}",
      "doc": "列出单页的数据库节点"
    },
    {
      "name": "ListEnabledDBNodesResponse",
      "code": "message ListEnabledDBNodesResponse {\n\trepeated DBNode dbNodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledDNSProvidersRequest",
      "code": "message ListEnabledDNSProvidersRequest {\n\tint64 adminId = 1;\n\tint64 userId = 2;\n\tstring keyword = 5;\n\tstring domain = 6;\n\tstring type = 7;\n\tint64 offset = 3;\n\tint64 size = 4;\n}",
      "doc": "列出单页的服务商信息"
    },
    {
      "name": "ListEnabledDNSProvidersResponse",
      "code": "message ListEnabledDNSProvidersResponse {\n\trepeated DNSProvider dnsProviders = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledHTTPCachePoliciesRequest",
      "code": "message ListEnabledHTTPCachePoliciesRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n\tstring keyword = 3;\n\tint64 nodeClusterId = 4;\n\tstring type = 5;\n}",
      "doc": "列出单页的缓存策略"
    },
    {
      "name": "ListEnabledHTTPCachePoliciesResponse",
      "code": "message ListEnabledHTTPCachePoliciesResponse {\n\tbytes httpCachePoliciesJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledHTTPFirewallPoliciesRequest",
      "code": "message ListEnabledHTTPFirewallPoliciesRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n\tstring keyword = 3;\n\tint64 nodeClusterId = 4;\n}",
      "doc": "列出单页的防火墙策略"
    },
    {
      "name": "ListEnabledHTTPFirewallPoliciesResponse",
      "code": "message ListEnabledHTTPFirewallPoliciesResponse {\n\trepeated HTTPFirewallPolicy httpFirewallPolicies = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledIPListsRequest",
      "code": "message ListEnabledIPListsRequest {\n\tstring type = 1;\n\tbool isPublic = 2;\n\tstring keyword = 3;\n\tint64 offset = 4;\n\tint64 size = 5;\n}",
      "doc": "列出单页名单"
    },
    {
      "name": "ListEnabledIPListsResponse",
      "code": "message ListEnabledIPListsResponse {\n\trepeated IPList ipLists = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledMessageMediaInstancesRequest",
      "code": "message ListEnabledMessageMediaInstancesRequest {\n\tstring mediaType = 1;\n\tstring keyword = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n}",
      "doc": "列出单页接收人"
    },
    {
      "name": "ListEnabledMessageMediaInstancesResponse",
      "code": "message ListEnabledMessageMediaInstancesResponse {\n\trepeated MessageMediaInstance messageMediaInstances = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledMessageRecipientsRequest",
      "code": "message ListEnabledMessageRecipientsRequest {\n\tint64 adminId = 1;\n\tstring mediaType = 2;\n\tint64 messageRecipientGroupId = 3;\n\tstring keyword = 4;\n\tint64 offset = 5;\n\tint64 size = 6;\n}",
      "doc": "列出单页接收人"
    },
    {
      "name": "ListEnabledMessageRecipientsResponse",
      "code": "message ListEnabledMessageRecipientsResponse {\n\trepeated MessageRecipient messageRecipients = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledMetricChartsRequest",
      "code": "message ListEnabledMetricChartsRequest {\n\tint64 metricItemId = 1;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页图表"
    },
    {
      "name": "ListEnabledMetricChartsResponse",
      "code": "message ListEnabledMetricChartsResponse {\n\trepeated MetricChart metricCharts = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledMetricItemsRequest",
      "code": "message ListEnabledMetricItemsRequest {\n\tstring category = 1;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页指标"
    },
    {
      "name": "ListEnabledMetricItemsResponse",
      "code": "message ListEnabledMetricItemsResponse {\n\trepeated MetricItem metricItems = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledNodeClustersRequest",
      "code": "message ListEnabledNodeClustersRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n\tstring keyword = 3;\n}",
      "doc": "列出单页集群"
    },
    {
      "name": "ListEnabledNodeClustersResponse",
      "code": "message ListEnabledNodeClustersResponse {\n\trepeated NodeCluster nodeClusters = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledNodeGrantsRequest",
      "code": "message ListEnabledNodeGrantsRequest {\n\tstring keyword = 3;\n\tint64 offset = 1;\n\tint64 size = 2;\n}",
      "doc": "列出单页认证"
    },
    {
      "name": "ListEnabledNodeGrantsResponse",
      "code": "message ListEnabledNodeGrantsResponse {\n\trepeated NodeGrant nodeGrants = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledNodeIPAddressesRequest",
      "code": "message ListEnabledNodeIPAddressesRequest {\n\tint64 nodeClusterId = 1;\n\tstring role = 2;\n\tint32 upState = 3;\n\tstring keyword = 4;\n\tint64 offset = 5;\n\tint64 size = 6;\n}",
      "doc": "列出单页IP地址"
    },
    {
      "name": "ListEnabledNodeIPAddressesResponse",
      "code": "message ListEnabledNodeIPAddressesResponse {\n\trepeated NodeIPAddress nodeIPAddresses = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledNodesMatchRequest",
      "code": "message ListEnabledNodesMatchRequest {\n\tint64 offset = 1; // 读取位置\n\tint64 size = 2; // 读取数量\n\tint64 nodeClusterId = 3; // 集群ID\n\tint32 installState = 4; // 安装状态\n\tint32 activeState = 5; // 在线状态\n\tstring keyword = 6; // 关键词\n\tint64 nodeGroupId = 7; // 节点分组ID\n\tint64 nodeRegionId = 8; // 节点区域ID\n\tint32 level = 9; // 节点级别，目前只有1（L1）和2（L2）\n\n\tbool cpuAsc = 20;\n\tbool cpuDesc = 21;\n\tbool memoryAsc = 22;\n\tbool memoryDesc = 23;\n\tbool trafficInAsc = 24;\n\tbool trafficInDesc = 25;\n\tbool trafficOutAsc = 26;\n\tbool trafficOutDesc = 27;\n\tbool loadAsc = 28;\n\tbool loadDesc = 29;\n\tbool connectionsAsc = 30;\n\tbool connectionsDesc = 31;\n}",
      "doc": "列出单页节点"
    },
    {
      "name": "ListEnabledNodesMatchResponse",
      "code": "message ListEnabledNodesMatchResponse {\n\trepeated Node nodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledPlansRequest",
      "code": "message ListEnabledPlansRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n}",
      "doc": "列出单页套餐"
    },
    {
      "name": "ListEnabledPlansResponse",
      "code": "message ListEnabledPlansResponse {\n\trepeated Plan plans = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledReportNodesRequest",
      "code": "message ListEnabledReportNodesRequest {\n\tstring keyword = 1;\n\tint64 reportNodeGroupId = 4;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页终端"
    },
    {
      "name": "ListEnabledReportNodesResponse",
      "code": "message ListEnabledReportNodesResponse {\n\trepeated ReportNode reportNodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledScriptsRequest",
      "code": "message ListEnabledScriptsRequest {\n\tint64 userId = 1;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页脚本"
    },
    {
      "name": "ListEnabledScriptsResponse",
      "code": "message ListEnabledScriptsResponse {\n\trepeated Script scripts = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledServersMatchRequest",
      "code": "message ListEnabledServersMatchRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n\tint64 serverGroupId = 3;  // 网站分组ID，如果为-1表示查找未分组\n\tstring keyword = 4;\n\tint64 userId = 5;\n\tint64 nodeClusterId = 6;\n\tint32 auditingFlag = 7;\n\tstring protocolFamily = 8;\n\tbool trafficOutAsc = 9; // 是否流量正排序\n\tbool trafficOutDesc = 10; // 是否流量倒排序\n\tbool requestsAsc = 13; // 请求数正排序\n\tbool requestsDesc = 14; // 请求数倒排序\n\tbool attackRequestsAsc = 15; // 攻击请求数正排序\n\tbool attackRequestsDesc = 16; // 攻击请求数倒排序\n\tbool ignoreServerNames = 11; // 忽略域名\n\tbool ignoreSSLCerts = 12; // 忽略证书\n}",
      "doc": "列出单页网站"
    },
    {
      "name": "ListEnabledServersMatchResponse",
      "code": "message ListEnabledServersMatchResponse {\n\trepeated Server servers = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledUserNodesRequest",
      "code": "message ListEnabledUserNodesRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n}",
      "doc": "列出单页的用户节点"
    },
    {
      "name": "ListEnabledUserNodesResponse",
      "code": "message ListEnabledUserNodesResponse {\n\trepeated UserNode userNodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledUserOrdersRequest",
      "code": "message ListEnabledUserOrdersRequest {\n\tint64 userId = 1;\n\tstring keyword = 2;\n\tstring status = 3;\n\tint64 offset = 4;\n\tint64 size = 5;\n}",
      "doc": "列出单页订单"
    },
    {
      "name": "ListEnabledUserOrdersResponse",
      "code": "message ListEnabledUserOrdersResponse {\n\trepeated UserOrder userOrders = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledUserPlansRequest",
      "code": "message ListEnabledUserPlansRequest {\n\tbool isAvailable = 1;\n\tbool isExpired = 2;\n\tint32 expiringDays = 3;\n\tint64 userId = 4;\n\tint64 offset = 5;\n\tint64 size = 6;\n}",
      "doc": "列出单页已购套餐"
    },
    {
      "name": "ListEnabledUserPlansResponse",
      "code": "message ListEnabledUserPlansResponse {\n\trepeated UserPlan userPlans = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListEnabledUsersRequest",
      "code": "message ListEnabledUsersRequest {\n\tstring keyword = 1;\n\tbool isVerifying = 4;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页用户"
    },
    {
      "name": "ListEnabledUsersResponse",
      "code": "message ListEnabledUsersResponse {\n\trepeated User users = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListFormalClientBrowsersRequest",
      "code": "message ListFormalClientBrowsersRequest {\n\tstring keyword = 1; // 可选\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页浏览器信息"
    },
    {
      "name": "ListFormalClientBrowsersResponse",
      "code": "message ListFormalClientBrowsersResponse {\n\trepeated FormalClientBrowser formalClientBrowsers = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListFormalClientSystemsRequest",
      "code": "message ListFormalClientSystemsRequest {\n\tstring keyword = 1; // 可选\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页操作系统信息"
    },
    {
      "name": "ListFormalClientSystemsResponse",
      "code": "message ListFormalClientSystemsResponse {\n\trepeated FormalClientSystem formalClientSystems = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListHTTPAccessLogPoliciesRequest",
      "code": "message ListHTTPAccessLogPoliciesRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n}",
      "doc": "列出单页访问日志策略"
    },
    {
      "name": "ListHTTPAccessLogPoliciesResponse",
      "code": "message ListHTTPAccessLogPoliciesResponse {\n\trepeated HTTPAccessLogPolicy httpAccessLogPolicies = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListHTTPAccessLogsRequest",
      "code": "message ListHTTPAccessLogsRequest {\n\tstring requestId = 1; // 上一页请求ID，可选\n\tint64 serverId = 2; // 服务ID\n\tint64 size = 3; // 单页条数\n\tstring day = 4; // 日期，格式YYYYMMDD\n\tstring hourFrom = 17; // 开始小时\n\tstring hourTo = 18; // 结束小时\n\tbool reverse = 5; // 是否反向查找，可选\n\tbool hasError = 6; // 是否有错误，可选\n\tint64 firewallPolicyId = 7; // WAF策略ID，可选\n\tint64 firewallRuleGroupId = 8; // WAF分组ID，可选\n\tint64 firewallRuleSetId = 9; // WAF规则集ID，可选\n\tint64 userId = 10; // 用户ID\n\tbool hasFirewallPolicy = 11; // 是否有WAF策略\n\tstring keyword = 12; // 关键词\n\tstring ip = 13;\n\tstring domain = 14;\n\tint64 nodeClusterId = 15;\n\tint64 nodeId = 16;\n\tint32 partition = 19; // 分区\n}",
      "doc": "列出往前的单页访问日志"
    },
    {
      "name": "ListHTTPAccessLogsResponse",
      "code": "message ListHTTPAccessLogsResponse {\n\trepeated HTTPAccessLog accessLogs = 1 [deprecated = true];\n\trepeated HTTPAccessLog httpAccessLogs = 4;\n\tstring requestId = 2;\n\tbool hasMore = 3;\n}",
      "doc": ""
    },
    {
      "name": "ListHTTPCacheTasksRequest",
      "code": "message ListHTTPCacheTasksRequest {\n\tint64 offset = 1; // 查询起始位置\n\tint64 size = 2; // 查询条数\n}",
      "doc": "列出单页任务"
    },
    {
      "name": "ListHTTPCacheTasksResponse",
      "code": "message ListHTTPCacheTasksResponse {\n\trepeated HTTPCacheTask httpCacheTasks = 1; // 一组任务信息\n}",
      "doc": ""
    },
    {
      "name": "ListIPItemsAfterVersionRequest",
      "code": "message ListIPItemsAfterVersionRequest {\n\tint64 version = 1;\n\tint64 size = 2;\n}",
      "doc": "根据版本列出一组IP"
    },
    {
      "name": "ListIPItemsAfterVersionResponse",
      "code": "message ListIPItemsAfterVersionResponse {\n\trepeated IPItem ipItems = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListIPItemsWithListIdRequest",
      "code": "message ListIPItemsWithListIdRequest {\n\tint64 ipListId = 1;\n\tstring keyword = 4;\n\tstring ipFrom = 5;\n\tstring ipTo = 6;\n\tstring eventLevel = 7;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页的IP"
    },
    {
      "name": "ListIPItemsWithListIdResponse",
      "code": "message ListIPItemsWithListIdResponse {\n\trepeated IPItem ipItems = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListLogsRequest",
      "code": "message ListLogsRequest {\n\tint64 offset = 1; // 读取位置，从0开始\n\tint64 size = 2; // 读取数量\n\tstring dayFrom = 3; // 可选项，开始日期\n\tstring dayTo = 4; // 可选项，结束日期\n\tstring keyword = 5; // 可选项，关键词\n\tstring userType = 6; // 可选项，用户类型：admin|user；用户端固定为user\n\tstring level = 7; // 可选项，错误级别：info, warn, error\n}",
      "doc": "列出单页日志"
    },
    {
      "name": "ListLogsResponse",
      "code": "message ListLogsResponse {\n\trepeated Log logs = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListMessageTaskLogsRequest",
      "code": "message ListMessageTaskLogsRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n}",
      "doc": "列出当页日志"
    },
    {
      "name": "ListMessageTaskLogsResponse",
      "code": "message ListMessageTaskLogsResponse {\n\trepeated MessageTaskLog messageTaskLogs = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListMessageTasksWithStatusResponse",
      "code": "message ListMessageTasksWithStatusResponse {\n\trepeated MessageTask messageTasks = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListMetricStatsRequest",
      "code": "message ListMetricStatsRequest {\n\tint64 metricItemId = 1;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "读取单页指标数据"
    },
    {
      "name": "ListMetricStatsResponse",
      "code": "message ListMetricStatsResponse {\n\trepeated MetricStat metricStats = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNSAccessLogsRequest",
      "code": "message ListNSAccessLogsRequest {\n\tstring requestId = 1; // 上一页请求ID，可选\n\tint64 nsClusterId = 9; // 集群\n\tint64 nsNodeId = 2; // 节点ID\n\tint64 nsDomainId = 3; // 域名ID\n\tint64 nsRecordId = 4; // 记录ID\n\tint64 size = 5; // 单页条数\n\tstring day = 6; // 日期，格式YYYYMMDD\n\tbool reverse = 7; // 是否反向查找，可选\n\tstring keyword = 8; // 关键词\n\tstring recordType = 10; // 记录类型\n}",
      "doc": "列出往前的单页访问日志"
    },
    {
      "name": "ListNSAccessLogsResponse",
      "code": "message ListNSAccessLogsResponse {\n\trepeated NSAccessLog nsAccessLogs = 1;\n\tstring requestId = 2;\n\tbool hasMore = 3;\n}",
      "doc": ""
    },
    {
      "name": "ListNSClustersRequest",
      "code": "message ListNSClustersRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n}",
      "doc": "列出单页可用集群"
    },
    {
      "name": "ListNSClustersResponse",
      "code": "message ListNSClustersResponse {\n\trepeated NSCluster nsClusters = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNSDomainsAfterVersionRequest",
      "code": "message ListNSDomainsAfterVersionRequest {\n\tint64 version = 1;\n\tint64 size = 2;\n}",
      "doc": "根据版本列出一组域名"
    },
    {
      "name": "ListNSDomainsAfterVersionResponse",
      "code": "message ListNSDomainsAfterVersionResponse {\n\trepeated NSDomain nsDomains = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNSDomainsRequest",
      "code": "message ListNSDomainsRequest {\n\tint64 userId = 1;\n\tint64 nsClusterId = 2;\n\tstring keyword = 3;\n\tint64 nsDomainGroupId = 6;\n\tint64 offset = 4;\n\tint64 size = 5;\n}",
      "doc": "列出单页域名"
    },
    {
      "name": "ListNSDomainsResponse",
      "code": "message ListNSDomainsResponse {\n\trepeated NSDomain nsDomains = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNSKeysAfterVersionRequest",
      "code": "message ListNSKeysAfterVersionRequest {\n\tint64 version = 1;\n\tint64 size = 2;\n}",
      "doc": "根据版本列出一组密钥"
    },
    {
      "name": "ListNSKeysAfterVersionResponse",
      "code": "message ListNSKeysAfterVersionResponse {\n\trepeated NSKey nsKeys = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNSKeysRequest",
      "code": "message ListNSKeysRequest {\n\tint64 nsDomainId = 1;\n\tint64 nsZoneId = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n}",
      "doc": "列出单页密钥"
    },
    {
      "name": "ListNSKeysResponse",
      "code": "message ListNSKeysResponse {\n\trepeated NSKey nsKeys = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNSNodesMatchRequest",
      "code": "message ListNSNodesMatchRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n\tint64 nsClusterId = 3;\n\tint32 installState = 4;\n\tint32 activeState = 5;\n\tstring keyword = 6;\n\t//int64 nodeGroupId = 7;\n\t//int64 nodeRegionId = 8;\n}",
      "doc": "列出单页NS节点"
    },
    {
      "name": "ListNSNodesMatchResponse",
      "code": "message ListNSNodesMatchResponse {\n\trepeated NSNode nsNodes = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNSRecordsAfterVersionRequest",
      "code": "message ListNSRecordsAfterVersionRequest {\n\tint64 version = 1;\n\tint64 size = 2;\n}",
      "doc": "根据版本列出一组记录"
    },
    {
      "name": "ListNSRecordsAfterVersionResponse",
      "code": "message ListNSRecordsAfterVersionResponse {\n\trepeated NSRecord nsRecords = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNSRecordsRequest",
      "code": "message ListNSRecordsRequest {\n\tint64 nsDomainId = 1;\n\tstring type = 2;\n\tint64 nsRouteId = 3 [deprecated = true]; // 使用nsRouteCode代替\n\tstring nsRouteCode = 7;\n\tstring keyword = 4;\n\n\tbool nameAsc = 8;\n\tbool nameDesc = 9;\n\tbool typeAsc = 10;\n\tbool typeDesc = 11;\n\tbool ttlAsc = 12;\n\tbool ttlDesc = 13;\n\tbool upAsc = 14;\n\tbool upDesc = 15;\n\n\tint64 offset = 5;\n\tint64 size = 6;\n}",
      "doc": "读取单页记录"
    },
    {
      "name": "ListNSRecordsResponse",
      "code": "message ListNSRecordsResponse {\n\trepeated NSRecord nsRecords = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNSRoutesAfterVersionRequest",
      "code": "message ListNSRoutesAfterVersionRequest {\n\tint64 version = 1;\n\tint64 size = 2;\n}",
      "doc": "根据版本列出一组自定义线路"
    },
    {
      "name": "ListNSRoutesAfterVersionResponse",
      "code": "message ListNSRoutesAfterVersionResponse {\n\trepeated NSRoute nsRoutes = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNSUserPlansRequest",
      "code": "message ListNSUserPlansRequest {\n\tint64 userId = 1;\n\tint64 nsPlanId = 2;\n\tstring periodUnit = 3;\n\tbool isExpired = 4;\n\tint32 expireDays = 5;\n\tint64 offset = 6;\n\tint64 size = 7;\n}",
      "doc": "列出单页套餐"
    },
    {
      "name": "ListNSUserPlansResponse",
      "code": "message ListNSUserPlansResponse {\n\trepeated NSUserPlan nsUserPlans = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNodeIPAddressLogsRequest",
      "code": "message ListNodeIPAddressLogsRequest {\n\tint64 nodeIPAddressId = 1;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页日志"
    },
    {
      "name": "ListNodeIPAddressLogsResponse",
      "code": "message ListNodeIPAddressLogsResponse {\n\trepeated NodeIPAddressLog nodeIPAddressLogs = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNodeLogsRequest",
      "code": "message ListNodeLogsRequest {\n\tint64 nodeClusterId = 15;\n\tint64 nodeId = 1;\n\tstring role = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n\n\tstring dayFrom = 5;\n\tstring dayTo = 6;\n\tstring keyword = 7;\n\tstring level = 8;\n\tint64 serverId = 9;\n\tint32 fixedState = 10;\n\tbool allServers = 11; // 是否获取所有服务相关的日志\n\tint64 originId = 12;\n\tbool isUnread = 13;\n\tstring tag = 14;\n}",
      "doc": "列出单页日志"
    },
    {
      "name": "ListNodeLogsResponse",
      "code": "message ListNodeLogsResponse {\n\trepeated NodeLog nodeLogs = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListNodeRegionInfoRequest",
      "code": "message ListNodeRegionInfoRequest {\n\tint64 nodeRegionId = 1; // 区域ID，可选\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页节点区域信息"
    },
    {
      "name": "ListNodeRegionInfoResponse",
      "code": "message ListNodeRegionInfoResponse {\n\trepeated Info infoList = 1;\n\n\n\tmessage Info {\n\t\tint64 id = 1;\n\t\tstring name = 2;\n\n\t\tNodeRegion nodeRegion = 10;\n\t\tNodeCluster nodeCluster = 11;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ListNodeValuesRequest",
      "code": "message ListNodeValuesRequest {\n\tstring role = 1;\n\tint64 nodeId = 2;\n\tstring item = 3;\n\n\tstring range = 10;\n}",
      "doc": "读取数据"
    },
    {
      "name": "ListNodeValuesResponse",
      "code": "message ListNodeValuesResponse {\n\trepeated NodeValue nodeValues = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListReportNodeTasksRequest",
      "code": "message ListReportNodeTasksRequest {\n\tstring role = 1;\n\tint64 nodeClusterId = 2;\n\tstring type = 3;\n\tint64 offset = 4;\n\tint64 size = 5;\n}",
      "doc": "列出单页任务"
    },
    {
      "name": "ListReportNodeTasksResponse",
      "code": "message ListReportNodeTasksResponse {\n\trepeated IPAddrReportTask ipAddrReportTasks = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListReportResultsRequest",
      "code": "message ListReportResultsRequest {\n\tint64 reportNodeId = 1;\n\tint32 okState = 2;\n\tstring level = 3;\n\tint64 offset = 4;\n\tint64 size = 5;\n}",
      "doc": "列出单页监控结果"
    },
    {
      "name": "ListReportResultsResponse",
      "code": "message ListReportResultsResponse {\n\trepeated ReportResult reportResults = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListSSLCertsRequest",
      "code": "message ListSSLCertsRequest {\n\tbool isCA = 1; // 可选项，是否为CA证书\n\tbool isAvailable = 2; // 可选项，是否可用（在有效期内）\n\tbool isExpired = 3; //可选项， 是否已过期\n\tint32 expiringDays = 4; // 可选项，离过期日的天数\n\tstring keyword = 5; // 可选项，关键词\n\tint64 userId = 8; // 可选项，用户ID，不填则表示读取管理员上传的证书\n\trepeated string domains = 9; // 可选项，搜索使用的域名列表\n\tint64 offset = 6; // 读取位置\n\tint64 size = 7; // 读取长度，不能小于0\n\tbool userOnly = 10; // 可选项，只列出用户上传的证书\n}",
      "doc": "列出单页匹配的证书"
    },
    {
      "name": "ListSSLCertsResponse",
      "code": "message ListSSLCertsResponse {\n\tbytes sslCertsJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListSSLCertsWithOCSPErrorRequest",
      "code": "message ListSSLCertsWithOCSPErrorRequest {\n\tstring keyword = 1;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出有OCSP错误的证书"
    },
    {
      "name": "ListSSLCertsWithOCSPErrorResponse",
      "code": "message ListSSLCertsWithOCSPErrorResponse {\n\trepeated SSLCert sslCerts = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListServerBillsRequest",
      "code": "message ListServerBillsRequest {\n\tint64 userId = 1;\n\tstring month = 2;\n\tint64 offset = 3;\n\tint64 size = 4;\n}",
      "doc": "查询服务账单列表"
    },
    {
      "name": "ListServerBillsResponse",
      "code": "message ListServerBillsResponse {\n\trepeated ServerBill serverBills = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListTopServerDomainStatsWithServerIdRequest",
      "code": "message ListTopServerDomainStatsWithServerIdRequest{\n\tint64 nodeClusterId = 1;\n\tint64 nodeId = 2;\n\tint64 serverId = 3;\n\tstring hourFrom = 4;\n\tstring hourTo = 5;\n\tint64 size = 6;\n}",
      "doc": "读取域名排行"
    },
    {
      "name": "ListTopServerDomainStatsWithServerIdResponse",
      "code": "message ListTopServerDomainStatsWithServerIdResponse {\n\trepeated ServerDomainHourlyStat  domainStats = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListUnreadMessagesRequest",
      "code": "message ListUnreadMessagesRequest {\n\tint64 offset = 1;\n\tint64 size = 2;\n}",
      "doc": "列出单页未读消息"
    },
    {
      "name": "ListUnreadMessagesResponse",
      "code": "message ListUnreadMessagesResponse {\n\trepeated Message messages = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListUpdatedSSLCertOCSPRequest",
      "code": "message ListUpdatedSSLCertOCSPRequest {\n\tint64 version = 1;\n\tint32 size = 2;\n}",
      "doc": "读取证书的OCSP"
    },
    {
      "name": "ListUpdatedSSLCertOCSPResponse",
      "code": "message ListUpdatedSSLCertOCSPResponse {\n\trepeated SSLCertOCSP sslCertOCSP = 1;\n\n\n\tmessage SSLCertOCSP {\n\t\tint64 sslCertId = 1;\n\t\tbytes data = 2;\n\t\tint64 version = 3;\n\t\tint64 expiresAt = 4;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ListUserADInstancesRequest",
      "code": "message ListUserADInstancesRequest {\n\tint64 adNetworkId = 1; // 线路ID\n\tint64 userId = 2; // 用户ID\n\tint64 adPackagePeriodId = 3;\n\tstring expiresDay = 4;\n\tbool availableOnly = 5; // 是否只查询有效的高防实例\n\tint64 offset = 6;\n\tint64 size = 7;\n}",
      "doc": "列出单页用户高防实例"
    },
    {
      "name": "ListUserADInstancesResponse",
      "code": "message ListUserADInstancesResponse {\n\trepeated UserADInstance userADInstances = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListUserAccountDailyStatsRequest",
      "code": "message ListUserAccountDailyStatsRequest {\n\tstring dayFrom = 1;\n\tstring dayTo = 2;\n}",
      "doc": "列出按天统计"
    },
    {
      "name": "ListUserAccountDailyStatsResponse",
      "code": "message ListUserAccountDailyStatsResponse {\n\trepeated Stat stats = 1;\n\n\n\tmessage Stat {\n\t\tstring day = 1; // YYYYMMDD\n\t\tfloat income = 2;\n\t\tfloat expense = 3;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ListUserAccountLogsRequest",
      "code": "message ListUserAccountLogsRequest {\n\tint64 userAccountId = 1;\n\tstring keyword = 2;\n\tstring eventType = 3;\n\tint64 offset = 4;\n\tint64 size = 5;\n}",
      "doc": "列出单页日志"
    },
    {
      "name": "ListUserAccountLogsResponse",
      "code": "message ListUserAccountLogsResponse {\n\trepeated UserAccountLog userAccountLogs = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListUserAccountMonthlyStatsRequest",
      "code": "message ListUserAccountMonthlyStatsRequest {\n\tstring dayFrom = 1;\n\tstring dayTo = 2;\n}",
      "doc": "列出按月统计"
    },
    {
      "name": "ListUserAccountMonthlyStatsResponse",
      "code": "message ListUserAccountMonthlyStatsResponse {\n\trepeated Stat stats = 1;\n\n\n\tmessage Stat {\n\t\tstring month = 1; // YYYYMM\n\t\tfloat income = 2;\n\t\tfloat expense = 3;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ListUserAccountsRequest",
      "code": "message ListUserAccountsRequest  {\n\tstring keyword = 1;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页账户"
    },
    {
      "name": "ListUserAccountsResponse",
      "code": "message ListUserAccountsResponse {\n\trepeated UserAccount userAccounts = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListUserBillsRequest",
      "code": "message ListUserBillsRequest {\n\tint32 paidFlag = 1;\n\tint64 userId = 2;\n\tstring month = 5;\n\n\tint64 offset = 3;\n\tint64 size = 4;\n}",
      "doc": "列出单页账单"
    },
    {
      "name": "ListUserBillsResponse",
      "code": "message ListUserBillsResponse {\n\trepeated UserBill userBills = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListUserTicketLogsRequest",
      "code": "message ListUserTicketLogsRequest {\n\tint64 userTicketId = 1;\n\tint64 offset = 2;\n\tint64 size = 3;\n}",
      "doc": "列出单页日志"
    },
    {
      "name": "ListUserTicketLogsResponse",
      "code": "message ListUserTicketLogsResponse {\n\trepeated UserTicketLog userTicketLogs = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListUserTicketsRequest",
      "code": "message ListUserTicketsRequest {\n\tint64 userId = 1;\n\tint64 userTicketCategoryId = 2;\n\tstring status = 3;\n\tint64 offset = 4;\n\tint64 size = 5;\n}",
      "doc": "列出单页工单"
    },
    {
      "name": "ListUserTicketsResponse",
      "code": "message ListUserTicketsResponse {\n\trepeated UserTicket userTickets = 1;\n}",
      "doc": ""
    },
    {
      "name": "ListUserTrafficPackagesRequest",
      "code": "message ListUserTrafficPackagesRequest {\n\tint64 trafficPackageId = 1;\n\tint64 userId = 2;\n\tint64 nodeRegionId = 3;\n\tint64 trafficPackagePeriodId = 4;\n\tstring expiresDay = 5;\n\tbool availableOnly = 6; // 是否只查询有效的流量包\n\tint64 offset = 7;\n\tint64 size = 8;\n}",
      "doc": "列出单页流量包"
    },
    {
      "name": "ListUserTrafficPackagesResponse",
      "code": "message ListUserTrafficPackagesResponse {\n\trepeated UserTrafficPackage userTrafficPackages = 1;\n}",
      "doc": ""
    },
    {
      "name": "Log",
      "code": "message Log {\n\tint64 id = 1;\n\tstring level = 2;\n\tstring action = 3;\n\tint64 adminId = 4;\n\tint64 userId = 5;\n\tint64 providerId = 6;\n\tint64 createdAt = 7;\n\tstring type = 8;\n\tstring ip = 9;\n\tstring userName = 10;\n\tstring description = 11;\n}",
      "doc": ""
    },
    {
      "name": "Login",
      "code": "message Login {\n\tint64 id = 1;\n\tstring type = 2;\n\tbytes paramsJSON = 3;\n\tbool isOn = 4;\n\tint64 adminId = 5;\n\tint64 userId = 6;\n}",
      "doc": ""
    },
    {
      "name": "LoginAdminRequest",
      "code": "message LoginAdminRequest {\n\tstring username = 1;\n\tstring password = 2;\n}",
      "doc": "登录"
    },
    {
      "name": "LoginAdminResponse",
      "code": "message LoginAdminResponse {\n\tint64 adminId = 1;\n\tbool isOk = 2;\n\tstring message = 3;\n}",
      "doc": ""
    },
    {
      "name": "LoginSession",
      "code": "message LoginSession {\n\tint64 id = 1;\n\tint64 adminId = 2;\n\tint64 userId = 3;\n\tstring sid = 4;\n\tbytes valuesJSON = 5;\n\tstring ip = 6;\n\tint64 createdAt = 7;\n\tint64 expiresAt = 8;\n}",
      "doc": "登录SESSION"
    },
    {
      "name": "LoginUserRequest",
      "code": "message LoginUserRequest {\n\tstring username = 1;\n\tstring password = 2;\n}",
      "doc": "登录"
    },
    {
      "name": "LoginUserResponse",
      "code": "message LoginUserResponse {\n\tint64 userId = 1;\n\tbool isOk = 2;\n\tstring message = 3;\n}",
      "doc": ""
    },
    {
      "name": "LookupIPRegionRequest",
      "code": "message LookupIPRegionRequest {\n\tstring ip = 1;\n}",
      "doc": "查询某个IP信息"
    },
    {
      "name": "LookupIPRegionResponse",
      "code": "message LookupIPRegionResponse {\n\tIPRegion ipRegion = 1;\n}",
      "doc": ""
    },
    {
      "name": "LookupIPRegionsRequest",
      "code": "message LookupIPRegionsRequest {\n\trepeated string ipList = 1;\n}",
      "doc": "查询一组IP信息"
    },
    {
      "name": "LookupIPRegionsResponse",
      "code": "message LookupIPRegionsResponse {\n\tmap\u003cstring, IPRegion\u003e ipRegionMap = 1;\n}",
      "doc": ""
    },
    {
      "name": "Message",
      "code": "message Message {\n\tint64 id = 1;\n\tstring type = 2;\n\tstring body = 3;\n\tstring level = 4;\n\tbytes paramsJSON = 5;\n\tbool isRead = 6;\n\tint64 createdAt = 7;\n\tstring role = 8;\n\n\tNodeCluster nodeCluster = 30;\n\tNode node = 31;\n}",
      "doc": ""
    },
    {
      "name": "MessageMedia",
      "code": "message MessageMedia {\n\tint64 id = 1;\n\tstring type = 2;\n\tstring name = 3;\n\tstring description = 4;\n\tstring userDescription = 5;\n\tbool isOn = 6;\n}",
      "doc": ""
    },
    {
      "name": "MessageMediaInstance",
      "code": "message MessageMediaInstance {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tMessageMedia messageMedia = 4;\n\tbytes paramsJSON = 5;\n\tstring description = 6;\n\tbytes rateJSON = 7;\n\tint32 hashLife = 8;\n}",
      "doc": ""
    },
    {
      "name": "MessageReceiver",
      "code": "message MessageReceiver {\n\tint64 id = 1;\n\tint64 clusterId = 2;\n\tint64 nodeId = 3;\n\tint64 serverId = 4;\n\tstring type = 5;\n\tbytes paramsJSON = 6;\n\tstring role = 9; // 集群角色：node 或 dns\n\n\tMessageRecipient messageRecipient = 7;\n\tMessageRecipientGroup messageRecipientGroup = 8;\n}",
      "doc": ""
    },
    {
      "name": "MessageRecipient",
      "code": "message MessageRecipient {\n\tint64 id = 1;\n\tAdmin admin = 2;\n\tMessageMediaInstance messageMediaInstance = 3;\n\tbool isOn = 4;\n\trepeated MessageRecipientGroup messageRecipientGroups = 5;\n\tstring description = 6;\n\tstring user = 7;\n\tstring timeFrom = 8;\n\tstring timeTo = 9;\n}",
      "doc": ""
    },
    {
      "name": "MessageRecipientGroup",
      "code": "message MessageRecipientGroup {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n}",
      "doc": ""
    },
    {
      "name": "MessageTask",
      "code": "message MessageTask {\n\tint64 id = 1;\n\tMessageRecipient messageRecipient = 2;\n\tstring user = 3;\n\tstring subject = 4;\n\tstring body = 5;\n\tint64 createdAt = 6;\n\tint32 status = 7;\n\tint64 sentAt = 8;\n\tMessageTaskResult result = 9;\n\tMessageMediaInstance messageMediaInstance = 10;\n}",
      "doc": ""
    },
    {
      "name": "MessageTaskLog",
      "code": "message MessageTaskLog {\n\tint64 id = 1;\n\tint64 createdAt = 2;\n\tbool isOk = 3;\n\tstring error = 4;\n\tstring response = 5;\n\tMessageTask messageTask = 6;\n}",
      "doc": "消息任务日志"
    },
    {
      "name": "MessageTaskResult",
      "code": "message MessageTaskResult {\n\tbool isOk = 1;\n\tstring error = 2;\n\tstring response = 3;\n}",
      "doc": ""
    },
    {
      "name": "MetricChart",
      "code": "message MetricChart {\n\tint64 id = 1;\n\tstring name = 2;\n\tstring type = 3;\n\tint32 widthDiv = 4;\n\tbytes paramsJSON = 5;\n\tbool isOn = 6;\n\tint32 maxItems = 7;\n\tbool ignoreEmptyKeys = 8;\n\trepeated string ignoredKeys = 9;\n\n\tMetricItem metricItem = 30;\n}",
      "doc": "指标图表"
    },
    {
      "name": "MetricDataChart",
      "code": "message MetricDataChart {\n\tMetricChart metricChart = 1;\n\trepeated MetricStat metricStats = 2;\n}",
      "doc": "矩阵数据"
    },
    {
      "name": "MetricItem",
      "code": "message MetricItem {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring code = 3;\n\tstring category = 4;\n\tstring name = 5;\n\trepeated string keys = 6;\n\tint32 period = 7;\n\tstring periodUnit = 8;\n\tint32 expiresPeriod = 12;\n\tstring value = 10;\n\tbool isPublic = 11;\n}",
      "doc": "指标定义"
    },
    {
      "name": "MetricStat",
      "code": "message MetricStat {\n\tint64 id = 1;\n\tstring hash = 2;\n\tint64 serverId = 3;\n\tint64 itemId = 4;\n\trepeated string keys = 5;\n\tfloat value = 6;\n\tstring time = 7;\n\tint32 version = 8;\n\n\tNodeCluster nodeCluster = 30;\n\tNode node = 31;\n\tServer server = 32;\n\n\tint64 sumCount = 40;\n\tfloat sumTotal = 41;\n}",
      "doc": "统计数据"
    },
    {
      "name": "NSAccessLog",
      "code": "message NSAccessLog {\n\tint64 nsNodeId = 1;\n\tint64 nsDomainId = 2;\n\tint64 nsRecordId = 3;\n\trepeated int64 nsRouteIds = 4 [deprecated = true];\n\trepeated string nsRouteCodes = 17;\n\trepeated NSRoute nsRoutes = 18; // 仅供查看访问日志时使用\n\tstring remoteAddr = 5;\n\tstring questionName = 6;\n\tstring questionType = 7;\n\tstring recordName = 8;\n\tstring recordType = 9;\n\tstring recordValue = 10;\n\tstring networking = 11;\n\tstring serverAddr = 12;\n\tint64 timestamp = 13;\n\tstring requestId = 14;\n\tstring timeLocal = 15;\n\tstring error = 16;\n\tbool isRecursive = 19;\n}",
      "doc": "域名服务访问记录"
    },
    {
      "name": "NSCluster",
      "code": "message NSCluster {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring installDir = 4;\n\tbytes tcpJSON = 5; // TCP设置\n\tbytes tlsJSON = 6; // TLS设置\n\tbytes udpJSON = 7; // UDP设置\n\tbytes dohJSON = 16; // DoH设置\n\trepeated string hosts = 8;\n\tbytes soaJSON = 12;\n\tstring email = 13;\n\tbool autoRemoteStart = 9;\n\tstring timeZone = 10;\n\tbytes answerJSON = 11;\n\tbool detectAgents = 14;\n\tbool checkingPorts = 15; // 检查端口连通性\n}",
      "doc": "域名服务集群"
    },
    {
      "name": "NSDomain",
      "code": "message NSDomain {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tint64 createdAt = 4;\n\tbool isDeleted = 5;\n\tint64 version = 6;\n\tbytes tsigJSON = 7;\n\trepeated int64 nsDomainGroupIds = 8;\n\tstring status = 9;\n\tint64 userId = 10; // 用户ID\n\tbytes recordsHealthCheckJSON = 11; // 健康检查设置\n\n\tNSCluster nsCluster = 30;\n\tUser user = 31;\n\trepeated NSDomainGroup nsDomainGroups = 32;\n}",
      "doc": "DNS域名"
    },
    {
      "name": "NSDomainGroup",
      "code": "message NSDomainGroup {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tint64 userId = 4;\n}",
      "doc": "域名分组"
    },
    {
      "name": "NSKey",
      "code": "message NSKey {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring algo = 4;\n\tstring secret = 5;\n\tstring secretType = 6;\n\tbool isDeleted = 7;\n\tint64 version = 8;\n\n\tNSDomain nsDomain = 30;\n\tNSZone nsZone = 31;\n}",
      "doc": "NS密钥"
    },
    {
      "name": "NSNode",
      "code": "message NSNode {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tstring uniqueId = 4;\n\tstring secret = 5;\n\tbytes statusJSON = 6;\n\tbool isInstalled = 7;\n\tstring installDir = 9;\n\tbool isUp = 8;\n\tbool isActive = 10;\n\trepeated int64 connectedAPINodeIds = 11;\n\tbytes apiNodeAddrsJSON = 12;\n\n\tNSCluster nsCluster = 32;\n\tNodeLogin nodeLogin = 33;\n\tNodeInstallStatus installStatus = 34;\n\t//repeated NodeIPAddress ipAddresses = 35;\n\t//NodeGroup nodeGroup = 36;\n\t//NodeRegion region = 37;\n}",
      "doc": "域名服务节点"
    },
    {
      "name": "NSNodeStreamMessage",
      "code": "message NSNodeStreamMessage {\n\tint64 nsNodeId = 1;\n\tint64 requestId = 2;\n\tint32 timeoutSeconds = 3;\n\tstring code = 4;\n\tbytes dataJSON = 5;\n\tbool isOk = 6;\n\tstring message = 7;\n}",
      "doc": "NS节点stream"
    },
    {
      "name": "NSPlan",
      "code": "message NSPlan {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tfloat monthlyPrice = 4;\n\tfloat yearlyPrice = 5;\n\tbytes configJSON = 6;\n}",
      "doc": ""
    },
    {
      "name": "NSQuestionOption",
      "code": "message NSQuestionOption {\n\tint64 id = 1;\n\tstring name = 2;\n\tbytes valuesJSON = 3;\n}",
      "doc": "DNS查询选项"
    },
    {
      "name": "NSRecord",
      "code": "message NSRecord {\n\tint64 id = 1; // 记录ID\n\tstring description = 2; // 备注\n\tstring name = 3; // 记录名\n\tstring type = 4; // 记录类型\n\tstring value = 5; // 记录值\n\n\tint32 mxPriority = 12; // mx优先级\n\n\tint32 srvPriority = 13; // SRV优先级\n\tint32 srvWeight = 14; // SRV权重\n\tint32 srvPort = 15; // SRV端口\n\n\tint32 caaFlag = 16; // CAA Flag\n\tstring caaTag = 17; // CAA TAG\n\n\tint32 ttl = 6; // TTL\n\tint32 weight = 7; // 权重\n\tint64 createdAt = 8;\n\tbool isDeleted = 9;\n\tint64 version = 10;\n\tbool isOn = 11; // 是否启用\n\n\tbytes healthCheckJSON = 18; // 健康检查配置\n\tbool isUp = 19; // 是否在线（根据健康检查结果）\n\n\tNSDomain nsDomain = 30; // 所属域名\n\trepeated NSRoute nsRoutes = 31; // 线路\n}",
      "doc": "域名记录"
    },
    {
      "name": "NSRecordHourlyStat",
      "code": "message NSRecordHourlyStat {\n\tint64 nsClusterId = 1;\n\tint64 nsNodeId = 2;\n\tint64 nsDomainId = 3;\n\tint64 nsRecordId = 4;\n\tint64 bytes = 5;\n\tint64 countRequests = 6;\n\tint64 createdAt = 7;\n\tstring hour = 8;\n}",
      "doc": ""
    },
    {
      "name": "NSRoute",
      "code": "message NSRoute {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tbytes rangesJSON = 4;\n\tbool isDeleted = 5;\n\tint32 order = 6;\n\tint64 version = 7;\n\tstring code = 8;\n\tbool isPublic = 9;\n\tint32 priority = 10; // 优先级\n\tint64 userId = 11; // 所属用户ID\n\n\tNSCluster nsCluster = 30;\n\tNSDomain nsDomain = 31;\n\tNSRouteCategory nsRouteCategory = 32;\n}",
      "doc": "线路"
    },
    {
      "name": "NSRouteCategory",
      "code": "message NSRouteCategory {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tint32 order = 4;\n}",
      "doc": "线路分类"
    },
    {
      "name": "NSUserPlan",
      "code": "message NSUserPlan {\n\tint64 id = 1;\n\tint64 nsPlanId = 2;\n\tint64 userId = 3;\n\tstring dayFrom = 4;\n\tstring dayTo = 5;\n\tstring periodUnit = 6;\n\n\tNSPlan nsPlan = 30;\n\tUser user = 31;\n}",
      "doc": ""
    },
    {
      "name": "NSZone",
      "code": "message NSZone {\n\tint64 id = 1;\n}",
      "doc": "DNS子域"
    },
    {
      "name": "NetworkAddress",
      "code": "message NetworkAddress {\n\tstring protocol = 1;\n\tstring host = 2;\n\tstring portRange = 3;\n}",
      "doc": ""
    },
    {
      "name": "Node",
      "code": "message Node {\n\tint64 id = 1;\n\tstring name = 2;\n\tbytes statusJSON = 3;\n\tstring installDir = 4;\n\tbool isInstalled = 5;\n\tstring code = 6;\n\tstring uniqueId = 7;\n\tstring secret = 8;\n\tint64 version = 9;\n\tint64 latestVersion = 10;\n\trepeated int64 connectedAPINodeIds = 11;\n\tint32 maxCPU = 12;\n\tbool isOn = 13;\n\tbool isUp = 14;\n\trepeated DNSRoute dnsRoutes = 15;\n\tbool isActive = 16;\n\tSizeCapacity maxCacheDiskCapacity = 17;\n\tSizeCapacity maxCacheMemoryCapacity = 18;\n\tstring cacheDiskDir = 19;\n\tbytes cacheDiskSubDirsJSON = 23;\n\tint32 level = 20;\n\trepeated string lnAddrs = 21; // Ln访问地址\n\tbool enableIPLists = 22;\n\tbytes apiNodeAddrsJSON = 24;\n\tstring offlineDay = 25; // 下线日期\n\tbool isBackupForCluster = 26; // 是否为集群备用节点\n\tbool isBackupForGroup = 27; // 是否为分组备用节点\n\n\tNodeCluster nodeCluster = 32; // 主集群\n\tNodeLogin nodeLogin = 33;\n\tNodeInstallStatus installStatus = 34;\n\trepeated NodeIPAddress ipAddresses = 35;\n\tNodeGroup nodeGroup = 36;\n\tNodeRegion nodeRegion = 37;\n\trepeated NodeCluster secondaryNodeClusters = 38; // 从集群\n}",
      "doc": ""
    },
    {
      "name": "NodeAction",
      "code": "message NodeAction {\n\tint64 id = 1;\n\tint64 nodeId = 2;\n\tstring role = 3;\n\tbool isOn = 4; // 是否启用\n\tbytes condsJSON = 5; // 条件定义\n\tbytes actionJSON = 6; // 动作定义\n\tbytes durationJSON = 7; // 持续时间\n}",
      "doc": "节点动作"
    },
    {
      "name": "NodeCluster",
      "code": "message NodeCluster {\n\tint64 id = 1;\n\tstring name = 2;\n\tint64 createdAt = 3;\n\tint64 nodeGrantId = 4;\n\tstring installDir = 5;\n\tstring uniqueId = 6;\n\tstring secret = 7;\n\tstring dnsName = 8;\n\tint64 dnsDomainId = 9;\n\tstring dnsDefaultRoute = 22; // DNS默认线路\n\tint64 httpCachePolicyId = 10;\n\tint64 httpFirewallPolicyId = 11;\n\tbool isOn = 12;\n\tstring timeZone = 13;\n\tint32 nodeMaxThreads = 14;\n\tbool autoOpenPorts = 16;\n\tbool isPinned = 17;\n\tbytes clockJSON = 18;\n\tbool autoRemoteStart = 19;\n\tbool autoInstallNftables = 20;\n\tbytes sshParamsJSON = 21;\n\tbool autoSystemTuning = 23; // 是否自动调节系统参数\n}",
      "doc": ""
    },
    {
      "name": "NodeClusterFirewallAction",
      "code": "message NodeClusterFirewallAction {\n\tint64 id = 1;\n\tint64 nodeClusterId = 2;\n\tstring name = 3;\n\tstring eventLevel = 4;\n\tbytes paramsJSON = 5;\n\tstring type = 6;\n}",
      "doc": ""
    },
    {
      "name": "NodeClusterFirewallActionResponse",
      "code": "message NodeClusterFirewallActionResponse {\n\tint64 nodeClusterFirewallActionId = 1;\n}",
      "doc": ""
    },
    {
      "name": "NodeDNSInfo",
      "code": "message NodeDNSInfo {\n\tint64 id = 1;\n\tstring name = 2;\n\tstring ipAddr = 3;\n\tint64 nodeIPAddressId = 9;\n\trepeated DNSRoute routes = 4;\n\tint64 nodeClusterId = 5;\n\tint64 dnsDomainId = 6;\n\tstring dnsDomainName = 7;\n\tstring nodeClusterDNSName = 8;\n\tbool isBackupForCluster = 10; // 是否为集群备份节点\n\tbool isBackupForGroup = 11; // 是否为分组备份节点\n\tbool isOffline = 12; // 是否下线\n}",
      "doc": ""
    },
    {
      "name": "NodeGrant",
      "code": "message NodeGrant {\n\tint64 id = 1;\n\tstring name = 2;\n\tstring method = 3;\n\tstring username = 4;\n\tstring password = 5;\n\tbool su = 6;\n\tstring privateKey = 7;\n\tstring passphrase = 10;\n\tstring description = 8;\n\tint64 nodeId = 9;\n}",
      "doc": ""
    },
    {
      "name": "NodeGroup",
      "code": "message NodeGroup {\n\tint64 id = 1;\n\tstring name = 2;\n}",
      "doc": ""
    },
    {
      "name": "NodeIPAddress",
      "code": "message NodeIPAddress {\n\tint64 id = 1;\n\tint64 nodeId = 2;\n\tstring name = 3;\n\tstring ip = 4;\n\tstring description = 5;\n\tint64 state = 6;\n\tint64 order = 7;\n\tbool canAccess = 8;\n\tbool isOn = 9;\n\tbool isUp = 10;\n\tstring role = 12;\n\tstring backupIP = 13;\n\tbool isHealthy = 14;\n\n\trepeated NodeCluster nodeClusters = 30;\n}",
      "doc": "节点地址"
    },
    {
      "name": "NodeIPAddressLog",
      "code": "message NodeIPAddressLog {\n\tint64 id = 1;\n\tstring description = 2;\n\tint64 createdAt = 3;\n\tbool isUp = 4;\n\tbool isOn = 5;\n\tbool canAccess = 6;\n\tstring backupIP = 7;\n\n\tNodeIPAddress nodeIPAddress = 30;\n\tAdmin admin = 31;\n}",
      "doc": ""
    },
    {
      "name": "NodeIPAddressThreshold",
      "code": "message NodeIPAddressThreshold {\n\tint64 id = 1;\n\tbytes itemsJSON = 2;\n\tbytes actionsJSON = 3;\n}",
      "doc": ""
    },
    {
      "name": "NodeInstallStatus",
      "code": "message NodeInstallStatus {\n\tbool isRunning = 1;\n\tbool isFinished = 2;\n\tbool isOk = 3;\n\tstring error = 4;\n\tstring errorCode = 6;\n\tint64 updatedAt = 5;\n}",
      "doc": ""
    },
    {
      "name": "NodeLog",
      "code": "message NodeLog {\n\tint64 id = 1;\n\tstring role = 2;\n\tstring tag = 3;\n\tstring description = 4;\n\tstring level = 5;\n\tint64 nodeId = 6;\n\tint64 createdAt = 7;\n\tint32 count = 8;\n\tint64 serverId = 9;\n\tbool isFixed = 10;\n\tint64 originId = 11;\n\tbool isRead = 12;\n\tbytes paramsJSON = 13;\n\tstring type = 14;\n}",
      "doc": ""
    },
    {
      "name": "NodeLogin",
      "code": "message NodeLogin {\n\tint64 id = 1;\n\tstring name = 2;\n\tstring type = 3;\n\tbytes params = 4;\n}",
      "doc": ""
    },
    {
      "name": "NodePriceItem",
      "code": "message NodePriceItem {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring type = 4;\n\tint64 bitsFrom = 5;\n\tint64 bitsTo = 6;\n}",
      "doc": ""
    },
    {
      "name": "NodeRegion",
      "code": "message NodeRegion {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring description = 4;\n\tbytes pricesJSON = 5;\n}",
      "doc": ""
    },
    {
      "name": "NodeStreamMessage",
      "code": "message NodeStreamMessage {\n\tint64 nodeId = 1;\n\tint64 requestId = 2;\n\tint32 timeoutSeconds = 3;\n\tstring code = 4;\n\tbytes dataJSON = 5;\n\tbool isOk = 6;\n\tstring message = 7;\n}",
      "doc": "节点stream"
    },
    {
      "name": "NodeTask",
      "code": "message NodeTask {\n\tint64 id = 1;\n\tstring type = 2;\n\tbool isDone = 3;\n\tbool isOk = 4;\n\tstring error = 5;\n\tint64 updatedAt = 6;\n\tint64 version = 7;\n\tbool isPrimary = 8; // 是否为主节点，非主节点稍等再同步有利于提升同步速度\n\tint64 serverId = 9;\n\tint64 userId = 10;\n\n\tNode node = 30;\n\tNodeCluster nodeCluster = 31;\n\tNodeCluster server = 32;\n}",
      "doc": "节点相关同步任务"
    },
    {
      "name": "NodeThreshold",
      "code": "message NodeThreshold {\n\tint64 id = 1;\n\tint64 clusterId = 2;\n\tNode node = 3;\n\tstring item = 4;\n\tstring param = 5;\n\tstring operator = 6;\n\tbytes valueJSON = 7;\n\tstring message = 8;\n\tint32 duration = 9;\n\tstring durationUnit = 10;\n\tstring sumMethod = 11;\n\tbool isOn = 12;\n\tint32 notifyDuration = 13;\n}",
      "doc": ""
    },
    {
      "name": "NodeValue",
      "code": "message NodeValue {\n\tbytes valueJSON = 1;\n\tint64 createdAt = 2;\n}",
      "doc": "节点监控值"
    },
    {
      "name": "NotifyHTTPFirewallEventRequest",
      "code": "message NotifyHTTPFirewallEventRequest {\n\tint64 serverId = 1;\n\tint64 httpFirewallPolicyId = 2;\n\tint64 httpFirewallRuleGroupId = 3;\n\tint64 httpFirewallRuleSetId = 4;\n\tint64 createdAt = 5;\n}",
      "doc": "发送告警(notify)消息"
    },
    {
      "name": "NotifyServersChangeRequest",
      "code": "message NotifyServersChangeRequest {\n\n}",
      "doc": "通知更新"
    },
    {
      "name": "NotifyServersChangeResponse",
      "code": "message NotifyServersChangeResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "NotifyUserOrderPaymentRequest",
      "code": "message NotifyUserOrderPaymentRequest {\n\tstring payMethod = 1;\n\tbytes formData = 2;\n}",
      "doc": "订单支付通知"
    },
    {
      "name": "OrderMethod",
      "code": "message OrderMethod {\n\tint64 id = 1;\n\tstring name = 2;\n\tstring code = 3;\n\tstring description = 4;\n\tstring secret = 6;\n\tbool isOn = 7;\n\n\tstring url = 5;\n\n\tstring parentCode = 8;\n\tbytes params = 9;\n\n\tstring clientType = 10;\n\tstring qrcodeTitle = 11;\n}",
      "doc": "订单支付方式"
    },
    {
      "name": "Origin",
      "code": "message Origin {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tNetworkAddress addr = 4; // 源站网络地址\n\tbytes ossJSON = 9; // 源站网络地址为oss:开头时有此内容\n\tstring description = 5;\n\trepeated string domains = 6;\n\tstring host = 7;\n\tbool followPort = 8;\n\tbool http2Enabled = 10; // 是否支持HTTP/2，只在HTTPS源站时生效\n}",
      "doc": ""
    },
    {
      "name": "PayUserBillRequest",
      "code": "message PayUserBillRequest {\n\tint64 userBillId = 1;\n}",
      "doc": "支付账单"
    },
    {
      "name": "PingRequest",
      "code": "message PingRequest {\n\n}",
      "doc": "发起Ping"
    },
    {
      "name": "PingResponse",
      "code": "message PingResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "Plan",
      "code": "message Plan {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tint64 clusterId = 4;\n\tbytes trafficLimitJSON = 5;\n\tbytes featuresJSON = 6;\n\tstring priceType = 7;\n\tbytes trafficPriceJSON = 8;\n\tbytes bandwidthPriceJSON = 12;\n\tdouble monthlyPrice = 9;\n\tdouble seasonallyPrice = 10;\n\tdouble yearlyPrice = 11;\n\tint32 totalServers = 13; // 可以添加的网站数\n\tint32 totalServerNamesPerServer = 14; // 每个网站可以添加的域名数\n\tint32 totalServerNames = 15; // 可以添加的域名总数\n\tint64 dailyRequests = 16; // 每日访问量额度\n\tint64 monthlyRequests = 17; // 每月访问量额度\n}",
      "doc": ""
    },
    {
      "name": "PublishScriptsRequest",
      "code": "message PublishScriptsRequest {\n\tint64  userId = 1;\n}",
      "doc": "发布脚本"
    },
    {
      "name": "PurgeServerCacheRequest",
      "code": "message PurgeServerCacheRequest {\n\trepeated string keys = 2;\n\trepeated string prefixes = 3;\n\tstring description = 4; // 任务描述\n}",
      "doc": "清除缓存"
    },
    {
      "name": "PurgeServerCacheResponse",
      "code": "message PurgeServerCacheResponse {\n\tbool isOk = 1;\n\tstring message = 2;\n}",
      "doc": ""
    },
    {
      "name": "RPCCountResponse",
      "code": "message RPCCountResponse {\n\tint64 count = 1;\n}",
      "doc": "返回数量"
    },
    {
      "name": "RPCExists",
      "code": "message RPCExists {\n\tbool exists = 1;\n}",
      "doc": "是否存在"
    },
    {
      "name": "RPCSuccess",
      "code": "message RPCSuccess {\n\n}",
      "doc": "操作成功"
    },
    {
      "name": "ReadReportNodeGlobalSettingResponse",
      "code": "message ReadReportNodeGlobalSettingResponse {\n\tbytes settingJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "ReadSysSettingRequest",
      "code": "message ReadSysSettingRequest {\n\tstring code = 1;\n}",
      "doc": "读取配置"
    },
    {
      "name": "ReadSysSettingResponse",
      "code": "message ReadSysSettingResponse {\n\tbytes valueJSON = 1;\n}",
      "doc": ""
    },
    {
      "name": "RecoverDNSDomainRequest",
      "code": "message RecoverDNSDomainRequest {\n\tint64 dnsDomainId = 1;\n}",
      "doc": "恢复删除的域名"
    },
    {
      "name": "RegenerateServerDNSNameRequest",
      "code": "message RegenerateServerDNSNameRequest {\n\tint64 serverId = 1; // 网站ID\n}",
      "doc": "重新生成CNAME"
    },
    {
      "name": "RegionCity",
      "code": "message RegionCity {\n\tint64 id = 1;\n\tstring name = 2;\n\trepeated string codes = 3;\n\tint64 regionProvinceId = 4;\n\tstring customName = 5;\n\trepeated string customCodes = 6;\n\tstring displayName = 7;\n\n\tRegionProvince regionProvince = 30;\n}",
      "doc": ""
    },
    {
      "name": "RegionCountry",
      "code": "message RegionCountry {\n\tint64 id = 1;\n\tstring name = 2;\n\trepeated string codes = 3;\n\trepeated string pinyin = 4;\n\tstring customName = 5;\n\trepeated string customCodes = 6;\n\tstring displayName = 7;\n\tbool isCommon = 8; // 是否常用\n}",
      "doc": "国家/地区"
    },
    {
      "name": "RegionProvider",
      "code": "message RegionProvider {\n\tint64 id = 1;\n\tstring name = 2;\n\trepeated string codes = 3;\n\tstring customName = 4;\n\trepeated string customCodes = 5;\n\tstring displayName = 6;\n}",
      "doc": ""
    },
    {
      "name": "RegionProvince",
      "code": "message RegionProvince {\n\tint64 id = 1;\n\tstring name = 2;\n\trepeated string codes = 3;\n\tint64 regionCountryId = 4;\n\tstring customName = 5;\n\trepeated string customCodes = 6;\n\tstring displayName = 7;\n}",
      "doc": ""
    },
    {
      "name": "RegionTown",
      "code": "message RegionTown {\n\tint64 id = 1;\n\tstring name = 2;\n\trepeated string codes = 3;\n\tint64 regionCityId = 4;\n\tstring customName = 5;\n\trepeated string customCodes = 6;\n\tstring displayName = 7;\n\n\tRegionCity regionCity = 30;\n}",
      "doc": ""
    },
    {
      "name": "RegisterClusterNodeRequest",
      "code": "message RegisterClusterNodeRequest {\n\tstring name = 1;\n}",
      "doc": "注册集群节点"
    },
    {
      "name": "RegisterClusterNodeResponse",
      "code": "message RegisterClusterNodeResponse {\n\tstring uniqueId = 1;\n\tstring secret = 2;\n\trepeated string endpoints = 3;\n}",
      "doc": ""
    },
    {
      "name": "RegisterUserRequest",
      "code": "message RegisterUserRequest {\n\tstring username = 1;\n\tstring password = 2;\n\tstring mobile = 3;\n\tstring email = 4;\n\tstring fullname = 5;\n\tstring ip = 6;\n\tstring source = 7;\n}",
      "doc": "注册用户"
    },
    {
      "name": "RegisterUserResponse",
      "code": "message RegisterUserResponse {\n\tint64 userId = 1;\n\tbool requireEmailVerification = 2; // 是否需要激活邮件\n}",
      "doc": ""
    },
    {
      "name": "RejectUserIdentityRequest",
      "code": "message RejectUserIdentityRequest {\n\tint64 userIdentityId = 1;\n\tstring reason = 2;\n}",
      "doc": "拒绝用户实名认证信息"
    },
    {
      "name": "RenewUserADInstanceRequest",
      "code": "message RenewUserADInstanceRequest {\n\tint64 userADInstanceId = 1;\n\tint64 adPackagePeriodId = 2;\n}",
      "doc": "续期用户高防实例"
    },
    {
      "name": "RenewUserPlanRequest",
      "code": "message RenewUserPlanRequest {\n\tint64 userPlanId = 1;\n\tstring dayTo = 3;\n\tstring period = 4;\n\tint32  countPeriod = 5;\n}",
      "doc": "续费套餐"
    },
    {
      "name": "RenewUserServersStateRequest",
      "code": "message RenewUserServersStateRequest {\n\tint64 userId = 1;\n}",
      "doc": "更新用户服务可用状态"
    },
    {
      "name": "RenewUserServersStateResponse",
      "code": "message RenewUserServersStateResponse {\n\tbool isEnabled = 1;\n}",
      "doc": ""
    },
    {
      "name": "ReportNode",
      "code": "message ReportNode {\n\tint64 id = 1;\n\tstring uniqueId = 2;\n\tstring secret = 3;\n\tbool isOn = 4;\n\tstring name = 5;\n\tstring location = 6;\n\tstring isp = 7;\n\tbool isActive = 8;\n\tbytes statusJSON = 9;\n\trepeated string allowIPs = 10;\n\trepeated ReportNodeGroup reportNodeGroups = 11;\n}",
      "doc": ""
    },
    {
      "name": "ReportNodeGroup",
      "code": "message ReportNodeGroup {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n}",
      "doc": "监控节点分组"
    },
    {
      "name": "ReportNodeStreamMessage",
      "code": "message ReportNodeStreamMessage {\n\tint64 reportNodeId = 1;\n\tint64 requestId = 2;\n\tint32 timeoutSeconds = 3;\n\tstring code = 4;\n\tbytes dataJSON = 5;\n\tbool isOk = 6;\n\tstring message = 7;\n}",
      "doc": "终端stream"
    },
    {
      "name": "ReportNodeTaskDoneRequest",
      "code": "message ReportNodeTaskDoneRequest {\n\tint64 nodeTaskId = 1;\n\tbool isOk = 2;\n\tstring error = 3;\n}",
      "doc": "报告同步任务结果"
    },
    {
      "name": "ReportResult",
      "code": "message ReportResult {\n\tint64 id = 1;\n\tstring type = 2;\n\tint64 targetId = 3;\n\tstring targetDesc = 4;\n\tint64 reportNodeId = 5;\n\tbool isOk = 6;\n\tfloat costMs = 7;\n\tstring error = 8;\n\tint64 updatedAt = 9;\n\tstring level =10;\n}",
      "doc": ""
    },
    {
      "name": "ResetAllSSLCertsWithOCSPErrorRequest",
      "code": "message ResetAllSSLCertsWithOCSPErrorRequest {\n\n}",
      "doc": "重置所有证书OCSP错误状态"
    },
    {
      "name": "ResetHTTPCacheTaskRequest",
      "code": "message ResetHTTPCacheTaskRequest {\n\tint64 httpCacheTaskId = 1; // 任务ID\n}",
      "doc": "重置任务状态"
    },
    {
      "name": "ResetNodeActionStatusRequest",
      "code": "message ResetNodeActionStatusRequest {\n\tint64 nodeId = 1; // 节点ID\n}",
      "doc": "重置节点动作状态"
    },
    {
      "name": "ResetSSLCertsWithOCSPErrorRequest",
      "code": "message ResetSSLCertsWithOCSPErrorRequest {\n\trepeated int64 sslCertIds = 1;\n}",
      "doc": "重置一组证书OCSP错误状态"
    },
    {
      "name": "ResetUserIdentityRequest",
      "code": "message ResetUserIdentityRequest {\n\tint64 userIdentityId = 1;\n}",
      "doc": "重置用户实名认证信息"
    },
    {
      "name": "RestoreNodeIPAddressBackupIPRequest",
      "code": "message RestoreNodeIPAddressBackupIPRequest {\n\tint64 nodeIPAddressId = 1;\n}",
      "doc": "还原备用IP状态"
    },
    {
      "name": "ReverseProxy",
      "code": "message ReverseProxy {\n\tint64 id = 1;\n\tbytes schedulingJSON = 2;\n\tbytes primaryOriginsJSON = 3;\n\tbytes backupOriginsJSON = 4;\n}",
      "doc": ""
    },
    {
      "name": "RunACMETaskRequest",
      "code": "message RunACMETaskRequest {\n\tint64 acmeTaskId = 1;\n}",
      "doc": "运行某个任务"
    },
    {
      "name": "RunACMETaskResponse",
      "code": "message RunACMETaskResponse {\n\tbool isOk = 1;\n\tstring error = 2;\n\tint64 sslCertId = 3;\n}",
      "doc": ""
    },
    {
      "name": "SSLCert",
      "code": "message SSLCert {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tint64 timeBeginAt = 4;\n\tint64 timeEndAt = 5;\n\trepeated string dnsNames = 6;\n\trepeated string commonNames = 7;\n\tbool isACME = 8;\n\tint64 acmeTaskId = 17;\n\tbytes ocsp = 9;\n\tbool ocspIsUpdated = 10;\n\tstring ocspError = 11;\n\tstring description = 12;\n\tbool isCA = 13;\n\tstring serverName = 14;\n\tint64 createdAt = 15;\n\tint64 updatedAt = 16;\n}",
      "doc": ""
    },
    {
      "name": "Script",
      "code": "message Script {\n\tint64 id = 1;\n\tint64 userId = 2;\n\tbool isOn = 3;\n\tstring name = 4;\n\tstring filename = 5;\n\tstring code = 6;\n\tint64 updatedAt = 7;\n}",
      "doc": ""
    },
    {
      "name": "SendMediaMessageRequest",
      "code": "message SendMediaMessageRequest {\n\tstring mediaType = 1; // 媒介类型\n\tbytes optionsJSON = 2; // 媒介参数\n\tstring user = 3; // 接收用户\n\tstring subject = 4; // 标题\n\tstring body = 5; // 内容\n}",
      "doc": "发送媒介信息"
    },
    {
      "name": "SendMessageTaskRequest",
      "code": "message SendMessageTaskRequest {\n\tint64 messageMediaInstanceId = 1; // 媒介实例ID\n\tstring user = 2; // 用户标识\n\tstring subject = 3; // 标题\n\tstring body = 4; // 内容\n}",
      "doc": "发送某个消息任务\n与创建消息任务放入到后台任务队列不同，此API是直接发送"
    },
    {
      "name": "SendMessageTaskResponse",
      "code": "message SendMessageTaskResponse {\n\tbool isOk = 1; // 是否成功\n\tstring error = 2; // 失败时的提示信息\n\tstring response = 3; // 发送成功后响应内容\n}",
      "doc": ""
    },
    {
      "name": "SendUserEmailVerificationRequest",
      "code": "message SendUserEmailVerificationRequest {\n\tstring email = 1; // 待验证邮箱\n}",
      "doc": "发送邮箱认证"
    },
    {
      "name": "SendUserVerifyCodeRequest",
      "code": "message SendUserVerifyCodeRequest {\n\tstring type = 1; // 类型：重置密码（resetPassword）\n\tstring email = 2; // 已验证邮箱地址\n\tstring mobile = 3; // 已验证手机号\n}",
      "doc": "发送重置密码验证码"
    },
    {
      "name": "SendUserVerifyCodeResponse",
      "code": "message SendUserVerifyCodeResponse {\n\tint32 codeLength = 1; // 验证码长度\n}",
      "doc": ""
    },
    {
      "name": "Server",
      "code": "message Server {\n\tint64 id = 1;\n\tbool isOn = 18;\n\tstring type = 2;\n\tstring name = 3;\n\tstring description = 4;\n\tbytes includeNodes = 5;\n\tbytes excludeNodes = 6;\n\tint64 createdAt = 7;\n\tstring dnsName = 19;\n\tbool supportCNAME = 23;\n\tint64 userPlanId = 24;\n\tint64 userId = 29; // 所属用户ID\n\n\t// 配置相关\n\tbytes config = 17;\n\tbytes serverNamesJSON = 8;\n\tstring firstServerName = 33;\n\tint32 countServerNames = 28;\n\tbool isAuditing = 20;\n\tint64 auditingAt = 25;\n\tbytes auditingServerNamesJSON = 21;\n\tServerNameAuditingResult auditingResult = 22;\n\n\tbytes httpJSON = 9;\n\tbytes httpsJSON = 10;\n\tbytes tcpJSON = 11;\n\tbytes tlsJSON = 12;\n\tbytes unixJSON = 13;\n\tbytes udpJSON = 14;\n\tint64 webId = 15;\n\tbytes reverseProxyJSON = 16;\n\n\tstring bandwidthTime = 26; // 带宽时间\n\tint64 bandwidthBytes = 27; // 带宽字节数\n\tint64 countRequests = 34; // 最近（通常5分钟内）访问量\n\tint64 countAttackRequests = 35; // 最近识别到的攻击访问量\n\n\tNodeCluster nodeCluster = 30;\n\trepeated ServerGroup serverGroups = 31;\n\tUser user = 32;\n}",
      "doc": ""
    },
    {
      "name": "ServerBandwidthStat",
      "code": "message ServerBandwidthStat {\n\tint64 id = 1; // ID\n\tint64 userId = 2; // 用户ID\n\tint64 serverId = 3; //服务ID\n\tstring day = 4; // 日期，格式YYYYMMDD\n\tstring timeAt = 5; // 时间，格式HHII\n\tint64 bytes = 6; // 峰值带宽字节\n\tint64 totalBytes = 9; // 总流量\n\tint64 bits = 7; // 峰值带宽比特\n\tint64 nodeRegionId = 8; // 节点所在区域ID\n\tint64 cachedBytes = 10; // 总缓存流量\n\tint64 attackBytes = 11; // 总攻击流量\n\tint64 countRequests = 12; // 总请求数\n\tint64 countCachedRequests = 13; // 总缓存请求数\n\tint64 countAttackRequests = 14; // 总攻击请求数\n\tint64 userPlanId = 15; // 绑定的用户套餐ID\n}",
      "doc": "带宽统计数据"
    },
    {
      "name": "ServerBill",
      "code": "message ServerBill {\n\tint64 id = 1;\n\tint64 userId = 2;\n\tint64 serverId = 3;\n\tfloat amount = 4;\n\tint64 createdAt = 5;\n\tint64 userPlanId = 6;\n\tint64 planId = 7;\n\tint64 totalTrafficBytes = 8;\n\tint64 bandwidthPercentileBytes = 9;\n\tint32 bandwidthPercentile = 10;\n\tstring priceType = 11;\n\n\tUserPlan userPlan = 30;\n\tPlan plan = 31;\n\tUser user = 32;\n\tServer server = 33;\n}",
      "doc": ""
    },
    {
      "name": "ServerDNSInfo",
      "code": "message ServerDNSInfo {\n\tint64 id = 1;\n\tstring name = 2;\n\tstring dnsName = 3;\n}",
      "doc": ""
    },
    {
      "name": "ServerDailyStat",
      "code": "message ServerDailyStat {\n\tint64 serverId = 1;\n\tint64 userId = 16; // 用户ID\n\tint64 nodeRegionId = 2;\n\tint64 bytes = 3;\n\tint64 cachedBytes = 5;\n\tint64 countRequests = 6;\n\tint64 countCachedRequests = 7;\n\tint64 createdAt = 4;\n\tint64 countAttackRequests = 8;\n\tint64 attackBytes = 9;\n\tbool checkTrafficLimiting = 10;\n\tint64 planId = 11;\n\tstring day = 12;\n\tstring hour = 13;\n\tstring timeFrom = 14;\n\tstring timeTo = 15;\n}",
      "doc": "服务每日统计"
    },
    {
      "name": "ServerDomainHourlyStat",
      "code": "message ServerDomainHourlyStat {\n\tint64 serverId = 1;\n\tstring domain = 2;\n\tint64 countRequests = 3;\n\tint64 bytes = 4;\n\tint64 countAttackRequests = 6;\n\tint64 attackBytes = 7;\n}",
      "doc": "单个小时统计"
    },
    {
      "name": "ServerGroup",
      "code": "message ServerGroup {\n\tint64 id = 1; // ID\n\tstring name = 2;  // 分组名称\n\tint64 userId = 3; // 所属用户ID\n\tbool isOn = 4; // 是否启用\n}",
      "doc": ""
    },
    {
      "name": "ServerNameAuditingResult",
      "code": "message ServerNameAuditingResult {\n\tbool isOk = 1;\n\tstring reason = 2;\n\tint64 createdAt = 3;\n}",
      "doc": ""
    },
    {
      "name": "ServerStatBoard",
      "code": "message ServerStatBoard {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n}",
      "doc": "统计看板"
    },
    {
      "name": "ServerStatBoardChart",
      "code": "message ServerStatBoardChart {\n\tint64 id = 1;\n\n\tMetricChart metricChart = 30;\n}",
      "doc": "统计看板条目"
    },
    {
      "name": "SizeCapacity",
      "code": "message SizeCapacity {\n\tint64 count = 1;\n\tstring unit = 2;\n}",
      "doc": ""
    },
    {
      "name": "SortNSPlansRequest",
      "code": "message SortNSPlansRequest {\n\trepeated int64 nsPlanIds = 1;\n}",
      "doc": "修改DNS套餐顺序"
    },
    {
      "name": "SortPlansRequest",
      "code": "message SortPlansRequest {\n\trepeated int64 planIds = 1;\n}",
      "doc": "对套餐进行排序"
    },
    {
      "name": "StartNSNodeRequest",
      "code": "message StartNSNodeRequest {\n\tint64 nsNodeId = 1;\n}",
      "doc": "启动NS节点"
    },
    {
      "name": "StartNSNodeResponse",
      "code": "message StartNSNodeResponse {\n\tbool isOk = 1;\n\tstring error = 2;\n}",
      "doc": ""
    },
    {
      "name": "StartNodeRequest",
      "code": "message StartNodeRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "启动节点"
    },
    {
      "name": "StartNodeResponse",
      "code": "message StartNodeResponse {\n\tbool isOk = 1;\n\tstring error = 2;\n}",
      "doc": ""
    },
    {
      "name": "StopNSNodeRequest",
      "code": "message StopNSNodeRequest {\n\tint64 nsNodeId = 1;\n}",
      "doc": "停止NS节点"
    },
    {
      "name": "StopNSNodeResponse",
      "code": "message StopNSNodeResponse {\n\tbool isOk = 1;\n\tstring error = 2;\n}",
      "doc": ""
    },
    {
      "name": "StopNodeRequest",
      "code": "message StopNodeRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "停止节点"
    },
    {
      "name": "StopNodeResponse",
      "code": "message StopNodeResponse {\n\tbool isOk = 1;\n\tstring error = 2;\n}",
      "doc": ""
    },
    {
      "name": "Strings",
      "code": "message Strings {\n\trepeated string values = 1;\n}",
      "doc": ""
    },
    {
      "name": "SubmitUserIdentityRequest",
      "code": "message SubmitUserIdentityRequest {\n\tint64 userIdentityId = 1;\n}",
      "doc": "提交审核实名认证信息"
    },
    {
      "name": "SumAllNodeValueStatsRequest",
      "code": "message SumAllNodeValueStatsRequest {\n\n}",
      "doc": "读取所有节点的最新数据"
    },
    {
      "name": "SumAllNodeValueStatsResponse",
      "code": "message SumAllNodeValueStatsResponse {\n\tint64 totalTrafficBytesPerSecond = 1;\n\tfloat avgCPUUsage = 2;\n\tfloat maxCPUUsage = 3;\n\tint32 totalCPUCores = 4;\n\tfloat avgMemoryUsage = 5;\n\tfloat maxMemoryUsage = 6;\n\tint64 totalMemoryBytes = 7;\n\tfloat avgLoad1min = 8;\n\tfloat maxLoad1min = 9;\n\tfloat avgLoad5min = 10;\n}",
      "doc": ""
    },
    {
      "name": "SumCurrentServerDailyStatsRequest",
      "code": "message SumCurrentServerDailyStatsRequest {\n\tint64 serverId = 1;\n}",
      "doc": "查找单个服务当前时刻（N分钟内）统计数据"
    },
    {
      "name": "SumCurrentServerDailyStatsResponse",
      "code": "message SumCurrentServerDailyStatsResponse {\n\tServerDailyStat serverDailyStat = 1;\n}",
      "doc": ""
    },
    {
      "name": "SumLogsResponse",
      "code": "message SumLogsResponse {\n\tint64 sizeBytes = 1;\n}",
      "doc": ""
    },
    {
      "name": "SumLogsSizeRequest",
      "code": "message SumLogsSizeRequest {\n\n}",
      "doc": "计算日志容量大小"
    },
    {
      "name": "SumServerDailyStatsRequest",
      "code": "message SumServerDailyStatsRequest {\n\tint64 userId = 3;\n\tint64 serverId = 1;\n\tint64 nodeRegionId = 6;\n\n\tstring day = 2; // YYYYMMDD\n\n\tstring dayFrom = 4; // day 和 dayFrom+dayTo 二选一， YYYYMMDD\n\tstring dayTo = 5; // day 和 dayFrom+dayTo 二选一，YYYYMMDD\n}",
      "doc": "计算单个服务的日统计"
    },
    {
      "name": "SumServerDailyStatsResponse",
      "code": "message SumServerDailyStatsResponse {\n\tServerDailyStat serverDailyStat = 1;\n}",
      "doc": ""
    },
    {
      "name": "SumServerMonthlyStatsRequest",
      "code": "message SumServerMonthlyStatsRequest {\n\tint64 serverId = 1;\n\tstring month = 2; // YYYYMM\n}",
      "doc": "计算单个服务的月统计"
    },
    {
      "name": "SumServerMonthlyStatsResponse",
      "code": "message SumServerMonthlyStatsResponse {\n\tServerDailyStat serverMonthlyStat = 1;\n}",
      "doc": ""
    },
    {
      "name": "SumUserUnpaidBillsRequest",
      "code": "message SumUserUnpaidBillsRequest {\n\tint64 userId = 1;\n}",
      "doc": "计算用户所有未支付账单总额"
    },
    {
      "name": "SumUserUnpaidBillsResponse",
      "code": "message SumUserUnpaidBillsResponse {\n\tdouble amount = 1;\n}",
      "doc": ""
    },
    {
      "name": "SyncDNSDomainDataRequest",
      "code": "message SyncDNSDomainDataRequest {\n\tint64 dnsDomainId = 1;\n\tint64 nodeClusterId = 2; // 如果指定，表示只更新单个集群ID\n\tbool checkNodeIssues = 3; // 是否检查节点问题\n}",
      "doc": "同步域名数据"
    },
    {
      "name": "SyncDNSDomainDataResponse",
      "code": "message SyncDNSDomainDataResponse {\n\tbool isOk = 1;\n\tstring error = 2;\n\tbool shouldFix = 3;\n}",
      "doc": ""
    },
    {
      "name": "SyncDNSDomainsFromProviderRequest",
      "code": "message SyncDNSDomainsFromProviderRequest {\n\tint64 dnsProviderId = 1;\n}",
      "doc": "从服务商同步域名"
    },
    {
      "name": "SyncDNSDomainsFromProviderResponse",
      "code": "message SyncDNSDomainsFromProviderResponse {\n\tbool hasChanges = 1;\n}",
      "doc": ""
    },
    {
      "name": "SysLockerLockRequest",
      "code": "message SysLockerLockRequest {\n\tstring key = 1;\n\tint64 timeoutSeconds = 2;\n}",
      "doc": "获得锁"
    },
    {
      "name": "SysLockerLockResponse",
      "code": "message SysLockerLockResponse {\n\tbool ok = 1;\n}",
      "doc": ""
    },
    {
      "name": "SysLockerUnlockRequest",
      "code": "message SysLockerUnlockRequest {\n\tstring key = 1;\n}",
      "doc": "释放锁"
    },
    {
      "name": "TestNodeGrantRequest",
      "code": "message TestNodeGrantRequest {\n\tint64 nodeGrantId = 1;\n\tstring host = 2;\n\tint32 port = 3;\n}",
      "doc": "测试连接"
    },
    {
      "name": "TestNodeGrantResponse",
      "code": "message TestNodeGrantResponse {\n\tbool isOk = 1;\n\tstring error = 2;\n}",
      "doc": ""
    },
    {
      "name": "TrafficDailyStat",
      "code": "message TrafficDailyStat {\n\tint64 id = 1;\n\tstring day = 2;\n\tint64 cachedBytes = 3;\n\tint64 bytes = 4;\n\tint64 countRequests = 5;\n\tint64 countCachedRequests = 6;\n\tint64 countAttackRequests = 7;\n\tint64 attackBytes = 8;\n}",
      "doc": ""
    },
    {
      "name": "TrafficPackage",
      "code": "message TrafficPackage {\n\tint64 id = 1;\n\tint32 size = 2;\n\tstring unit = 3;\n\tint64 bytes = 4;\n\tbool isOn = 5;\n}",
      "doc": "流量包"
    },
    {
      "name": "TrafficPackagePeriod",
      "code": "message TrafficPackagePeriod {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tint32 count = 3;\n\tstring unit = 4;\n\tint32 months = 5;\n}",
      "doc": "流量包有效期"
    },
    {
      "name": "TrafficPackagePrice",
      "code": "message TrafficPackagePrice {\n\tint64 trafficPackageId = 1;\n\tint64 nodeRegionId = 2;\n\tint64 trafficPackagePeriodId = 3;\n\tdouble price = 4;\n}",
      "doc": "流量包价格定义"
    },
    {
      "name": "TruncateDBNodeTableRequest",
      "code": "message TruncateDBNodeTableRequest {\n\tint64 dbNodeId = 1;\n\tstring dbNodeTable = 2;\n}",
      "doc": "清空表"
    },
    {
      "name": "TruncateDBTableRequest",
      "code": "message TruncateDBTableRequest {\n\tstring dbTable = 1;\n}",
      "doc": "清空表"
    },
    {
      "name": "UpdateACMEProviderAccountRequest",
      "code": "message UpdateACMEProviderAccountRequest {\n\tint64 acmeProviderAccountId = 1;\n\tstring name = 2;\n\tstring eabKid = 3;\n\tstring eabKey = 4;\n}",
      "doc": "修改服务商账号"
    },
    {
      "name": "UpdateACMETaskRequest",
      "code": "message UpdateACMETaskRequest {\n\tint64 acmeTaskId = 1;\n\tint64 acmeUserId = 2;\n\tint64 dnsProviderId = 3;\n\tstring dnsDomain = 4;\n\trepeated string domains = 5;\n\tbool autoRenew = 6;\n\tstring authURL = 7;\n}",
      "doc": "修改任务"
    },
    {
      "name": "UpdateACMEUserRequest",
      "code": "message UpdateACMEUserRequest {\n\tint64 acmeUserId = 1;\n\tstring description = 2;\n}",
      "doc": "修改用户"
    },
    {
      "name": "UpdateADNetworkRequest",
      "code": "message UpdateADNetworkRequest {\n\tint64 adNetworkId = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring description = 4;\n}",
      "doc": "修改线路"
    },
    {
      "name": "UpdateADPackageInstanceRequest",
      "code": "message UpdateADPackageInstanceRequest {\n\tint64 adPackageInstanceId = 1;\n\tint64 nodeClusterId = 2;\n\trepeated int64 nodeIds = 3;\n\trepeated string ipAddresses = 4;\n\tbool isOn = 5;\n}",
      "doc": "修改实例"
    },
    {
      "name": "UpdateADPackagePeriodRequest",
      "code": "message UpdateADPackagePeriodRequest {\n\tint64 adPackagePeriodId = 1;\n\tbool isOn = 2;\n}",
      "doc": "修改有效期"
    },
    {
      "name": "UpdateADPackagePriceRequest",
      "code": "message UpdateADPackagePriceRequest {\n\tint64 adPackageId = 1;\n\tint64 adPackagePeriodId = 2;\n\tdouble price = 3;\n}",
      "doc": "设置高防产品价格"
    },
    {
      "name": "UpdateADPackageRequest",
      "code": "message UpdateADPackageRequest {\n\tint64 adPackageId = 1;\n\tbool isOn = 2;\n\tint64 adNetworkId = 3;\n\tint32 protectionBandwidthSize = 4;\n\tstring protectionBandwidthUnit = 5;\n\tint32  serverBandwidthSize = 6;\n\tstring serverBandwidthUnit = 7;\n}",
      "doc": "修改高防产品"
    },
    {
      "name": "UpdateAPINodeRequest",
      "code": "message UpdateAPINodeRequest {\n\tint64 apiNodeId = 1; // API节点ID\n\tstring name = 2; // API节点名称\n\tstring description = 3; // API节点描述\n\tbytes httpJSON = 4; // 监听HTTP地址配置 @link json:http_protocol\n\tbytes httpsJSON = 5; // 监听HTTPS地址配置 @link json:https_protocol\n\tbytes accessAddrsJSON = 6; // 访问地址 @link json:network_address\n\tbool isOn = 7; // 是否启用当前API节点\n\tbool restIsOn = 8; // 是否启用API\n\tbytes restHTTPJSON = 9; // API地址HTTP地址配置 @link json:http_protocol\n\tbytes restHTTPSJSON = 10; // API地址HTTPS地址配置 @link json:https_protocol\n\tbool isPrimary = 11; // 是否为主要API节点，日常任务主要运行在主要API节点上\n}",
      "doc": "修改API节点"
    },
    {
      "name": "UpdateAdminInfoRequest",
      "code": "message UpdateAdminInfoRequest {\n\tint64 adminId = 1;\n\tstring fullname = 2;\n}",
      "doc": "修改管理员信息"
    },
    {
      "name": "UpdateAdminLoginRequest",
      "code": "message UpdateAdminLoginRequest {\n\tint64 adminId = 1;\n\tstring username = 2;\n\tstring password = 3;\n}",
      "doc": "修改管理员登录信息"
    },
    {
      "name": "UpdateAdminRequest",
      "code": "message UpdateAdminRequest {\n\tint64 adminId = 1;\n\tstring username = 2;\n\tstring password = 3;\n\tstring fullname = 4;\n\tbytes modulesJSON = 5;\n\tbool isSuper = 6;\n\tbool isOn = 7;\n\tbool canLogin = 8;\n}",
      "doc": "修改管理员"
    },
    {
      "name": "UpdateAdminThemeRequest",
      "code": "message UpdateAdminThemeRequest {\n\tint64 adminId = 1;\n\tstring theme = 2;\n}",
      "doc": "修改管理员使用的界面风格"
    },
    {
      "name": "UpdateAllMessagesReadRequest",
      "code": "message UpdateAllMessagesReadRequest {\n\n}",
      "doc": "设置所有消息为已读"
    },
    {
      "name": "UpdateAllNodeIPAddressThresholdsRequest",
      "code": "message UpdateAllNodeIPAddressThresholdsRequest {\n\tint64 nodeIPAddressId = 1;\n\tbytes nodeIPAddressThresholdsJSON = 2;\n}",
      "doc": "批量更新阈值"
    },
    {
      "name": "UpdateAllNodeLogsReadRequest",
      "code": "message UpdateAllNodeLogsReadRequest {\n\n}",
      "doc": "设置所有日志未已读"
    },
    {
      "name": "UpdateAllUsersFeaturesRequest",
      "code": "message UpdateAllUsersFeaturesRequest {\n\trepeated string featureCodes = 1;\n\tbool overwrite = 2;\n}",
      "doc": "设置所有用户能使用的功能"
    },
    {
      "name": "UpdateDBNodeRequest",
      "code": "message UpdateDBNodeRequest {\n\tint64 dbNodeId = 1;\n\tstring name = 2;\n\tstring description = 3;\n\tbool isOn = 4;\n\tstring host = 5;\n\tint32 port = 6;\n\tstring database = 7;\n\tstring username = 8;\n\tstring password = 9;\n\tstring charset = 10;\n}",
      "doc": "修改数据库节点"
    },
    {
      "name": "UpdateDNSDomainRequest",
      "code": "message UpdateDNSDomainRequest {\n\tint64 dnsDomainId = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n}",
      "doc": "修改域名"
    },
    {
      "name": "UpdateDNSProviderRequest",
      "code": "message UpdateDNSProviderRequest {\n\tint64 dnsProviderId = 1;\n\tstring name = 2;\n\tbytes apiParamsJSON = 3;\n}",
      "doc": "修改服务商"
    },
    {
      "name": "UpdateEnabledUserServerBasicRequest",
      "code": "message UpdateEnabledUserServerBasicRequest {\n\tint64 serverId = 1; // 网站ID\n\tstring name = 2;\n}",
      "doc": "修改用户网站基本信息"
    },
    {
      "name": "UpdateFileFinishedRequest",
      "code": "message UpdateFileFinishedRequest {\n\tint64 fileId = 1;\n}",
      "doc": "将文件置为已完成"
    },
    {
      "name": "UpdateFormalClientBrowserRequest",
      "code": "message UpdateFormalClientBrowserRequest {\n\tint64 formalClientBrowserId = 1;\n\tstring name = 2;\n\trepeated string codes = 3;\n\tstring dataId = 4;\n}",
      "doc": "修改浏览器信息"
    },
    {
      "name": "UpdateFormalClientSystemRequest",
      "code": "message UpdateFormalClientSystemRequest {\n\tint64 formalClientSystemId = 1;\n\tstring name = 2;\n\trepeated string codes = 3;\n\tstring dataId = 4;\n}",
      "doc": "修改操作系统信息"
    },
    {
      "name": "UpdateHTTPAccessLogPolicyRequest",
      "code": "message UpdateHTTPAccessLogPolicyRequest {\n\tint64 httpAccessLogPolicyId = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tbytes optionsJSON = 4;\n\tbytes condsJSON = 5;\n\tbool isPublic = 6;\n\tbool firewallOnly = 7;\n\tbool disableDefaultDB = 8;\n}",
      "doc": "修改访问日志策略"
    },
    {
      "name": "UpdateHTTPAuthPolicyRequest",
      "code": "message UpdateHTTPAuthPolicyRequest {\n\tint64 httpAuthPolicyId = 1;\n\tstring name = 2;\n\tbytes paramsJSON = 3;\n\tbool isOn = 4;\n}",
      "doc": "修改策略"
    },
    {
      "name": "UpdateHTTPCachePolicyRefsRequest",
      "code": "message UpdateHTTPCachePolicyRefsRequest {\n\tint64 httpCachePolicyId = 1;\n\tbytes refsJSON = 2;\n}",
      "doc": "设置缓存策略的默认条件"
    },
    {
      "name": "UpdateHTTPCachePolicyRequest",
      "code": "message UpdateHTTPCachePolicyRequest {\n\tint64 httpCachePolicyId = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring description = 4;\n\tbytes capacityJSON = 5;\n\tbytes maxSizeJSON = 7;\n\tstring type = 8;\n\tbytes optionsJSON = 9;\n\tbool syncCompressionCache = 10;\n\tbytes fetchTimeoutJSON = 11; // 预热超时时间\n}",
      "doc": "修改缓存策略"
    },
    {
      "name": "UpdateHTTPCacheTaskKeysStatusRequest",
      "code": "message UpdateHTTPCacheTaskKeysStatusRequest {\n\trepeated KeyResult keyResults = 1;\n\n\n\tmessage KeyResult {\n\t\tint64 id = 1;\n\t\tint64 nodeClusterId = 2; // 特意设置的冗余数据\n\t\tstring error = 3;\n\t}\n}",
      "doc": "更新一组Key状态"
    },
    {
      "name": "UpdateHTTPFastcgiRequest",
      "code": "message UpdateHTTPFastcgiRequest {\n\tint64 httpFastcgiId = 1;\n\tbool isOn = 2;\n\tstring address = 3;\n\tbytes paramsJSON = 4;\n\tbytes readTimeoutJSON = 5;\n\tbytes connTimeoutJSON = 6;\n\tint32 poolSize = 7;\n\tstring pathInfoPattern = 8;\n}",
      "doc": "修改Fastcgi服务"
    },
    {
      "name": "UpdateHTTPFirewallInboundConfigRequest",
      "code": "message UpdateHTTPFirewallInboundConfigRequest {\n\tint64 httpFirewallPolicyId = 1;\n\tbytes inboundJSON = 2;\n}",
      "doc": "修改inbound信息"
    },
    {
      "name": "UpdateHTTPFirewallPolicyGroupsRequest",
      "code": "message UpdateHTTPFirewallPolicyGroupsRequest {\n\tint64 httpFirewallPolicyId = 1;\n\tbytes inboundJSON = 2;\n\tbytes outboundJSON = 3;\n}",
      "doc": "修改分组信息"
    },
    {
      "name": "UpdateHTTPFirewallPolicyRequest",
      "code": "message UpdateHTTPFirewallPolicyRequest {\n\tint64 httpFirewallPolicyId = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring description = 4;\n\trepeated string firewallGroupCodes = 5;\n\tbytes blockOptionsJSON = 6;\n\tbytes captchaOptionsJSON = 11;\n\tstring mode = 7;\n\tbool useLocalFirewall = 8; // 是否使用本地防火墙\n\tbytes synFloodJSON = 9; // SYN Flood相关配置\n\tbytes LogJSON = 10; // 日志相关配置\n\tint64 maxRequestBodySize = 12; // 最大文件尺寸，单位为字节\n\tstring denyCountryHTML = 13; // 区域封禁提示\n\tstring denyProvinceHTML = 14; // 省份封禁提示\n}",
      "doc": "修改防火墙策略"
    },
    {
      "name": "UpdateHTTPFirewallRuleGroupIsOnRequest",
      "code": "message UpdateHTTPFirewallRuleGroupIsOnRequest {\n\tint64 firewallRuleGroupId = 1;\n\tbool isOn = 2;\n}",
      "doc": "设置是否启用分组"
    },
    {
      "name": "UpdateHTTPFirewallRuleGroupRequest",
      "code": "message UpdateHTTPFirewallRuleGroupRequest {\n\tint64 firewallRuleGroupId = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring description = 4;\n\tstring code = 5;\n}",
      "doc": "修改分组"
    },
    {
      "name": "UpdateHTTPFirewallRuleGroupSetsRequest",
      "code": "message UpdateHTTPFirewallRuleGroupSetsRequest {\n\tint64 firewallRuleGroupId = 1;\n\tbytes firewallRuleSetsJSON = 2;\n}",
      "doc": "修改分组的规则集"
    },
    {
      "name": "UpdateHTTPFirewallRuleSetIsOnRequest",
      "code": "message UpdateHTTPFirewallRuleSetIsOnRequest {\n\tint64 firewallRuleSetId = 1;\n\tbool isOn = 2;\n}",
      "doc": "设置开启状态"
    },
    {
      "name": "UpdateHTTPGzipRequest",
      "code": "message UpdateHTTPGzipRequest {\n\tint64 httpGzipId = 1;\n\tint32 level = 2;\n\tSizeCapacity minLength = 3;\n\tSizeCapacity maxLength = 4;\n\tbytes condsJSON = 5;\n}",
      "doc": "修改Gzip配置"
    },
    {
      "name": "UpdateHTTPHeaderPolicyAddingHeadersRequest",
      "code": "message UpdateHTTPHeaderPolicyAddingHeadersRequest {\n\tint64 httpHeaderPolicyId = 1;\n\tbytes headersJSON = 2;\n}",
      "doc": "修改AddHeaders"
    },
    {
      "name": "UpdateHTTPHeaderPolicyAddingTrailersRequest",
      "code": "message UpdateHTTPHeaderPolicyAddingTrailersRequest {\n\tint64 httpHeaderPolicyId = 1;\n\tbytes headersJSON = 2;\n}",
      "doc": "修改AddTrailers"
    },
    {
      "name": "UpdateHTTPHeaderPolicyCORSRequest",
      "code": "message UpdateHTTPHeaderPolicyCORSRequest {\n\tint64 httpHeaderPolicyId = 1;\n\tbytes corsJSON = 2;\n}",
      "doc": "修改策略CORS设置"
    },
    {
      "name": "UpdateHTTPHeaderPolicyDeletingHeadersRequest",
      "code": "message UpdateHTTPHeaderPolicyDeletingHeadersRequest {\n\tint64 httpHeaderPolicyId = 1;\n\trepeated string headerNames = 2;\n}",
      "doc": "修改删除的Headers"
    },
    {
      "name": "UpdateHTTPHeaderPolicyNonStandardHeadersRequest",
      "code": "message UpdateHTTPHeaderPolicyNonStandardHeadersRequest {\n\tint64 httpHeaderPolicyId = 1; // Header策略ID\n\trepeated string headerNames = 2; // 非标Header名称列表\n}",
      "doc": "修改非标的Headers"
    },
    {
      "name": "UpdateHTTPHeaderPolicyReplacingHeadersRequest",
      "code": "message UpdateHTTPHeaderPolicyReplacingHeadersRequest {\n\tint64 httpHeaderPolicyId = 1;\n\tbytes headersJSON = 2;\n}",
      "doc": "修改ReplaceHeaders"
    },
    {
      "name": "UpdateHTTPHeaderPolicySettingHeadersRequest",
      "code": "message UpdateHTTPHeaderPolicySettingHeadersRequest {\n\tint64 httpHeaderPolicyId = 1;\n\tbytes headersJSON = 2;\n}",
      "doc": "修改SetHeaders"
    },
    {
      "name": "UpdateHTTPHeaderRequest",
      "code": "message UpdateHTTPHeaderRequest {\n\tint64 headerId = 1;\n\tstring name = 2;\n\tstring value = 3;\n\trepeated int32 status = 4;\n\tbool disableRedirect = 5;\n\tbool shouldAppend = 6;\n\tbool shouldReplace = 7;\n\tbytes replaceValuesJSON = 8;\n\trepeated string methods = 9;\n\trepeated string domains = 10;\n}",
      "doc": "修改Header"
    },
    {
      "name": "UpdateHTTPLocationRequest",
      "code": "message UpdateHTTPLocationRequest {\n\tint64 locationId = 1;\n\tstring name = 2;\n\tstring description = 3;\n\tstring pattern = 4;\n\tbool isOn = 5;\n\tbool isBreak = 6;\n\tbytes condsJSON = 7;\n\trepeated string domains = 8;\n}",
      "doc": "修改路径规则"
    },
    {
      "name": "UpdateHTTPLocationReverseProxyRequest",
      "code": "message UpdateHTTPLocationReverseProxyRequest {\n\tint64 locationId = 1;\n\tbytes reverseProxyJSON = 2;\n}",
      "doc": "修改反向代理设置"
    },
    {
      "name": "UpdateHTTPPageRequest",
      "code": "message UpdateHTTPPageRequest {\n\tint64 httpPageId = 1;\n\trepeated string statusList = 2;\n\tstring bodyType = 6; // 页面类型：html|url|redirectURL\n\tstring url = 3;\n\tstring body = 5;\n\tint32 newStatus = 4;\n\tbytes exceptURLPatternsJSON = 7; // 例外URL列表\n\tbytes onlyURLPatternsJSON = 8; // 限制URL列表\n}",
      "doc": "修改Page"
    },
    {
      "name": "UpdateHTTPRewriteRuleRequest",
      "code": "message UpdateHTTPRewriteRuleRequest {\n\tint64 rewriteRuleId = 1;\n\tstring pattern = 2;\n\tstring replace = 3;\n\tstring mode = 4;\n\tint32 redirectStatus = 5;\n\tbool isBreak = 6;\n\tstring proxyHost = 7;\n\tbool isOn = 8;\n\tbool withQuery = 9;\n\tbytes condsJSON = 10;\n}",
      "doc": "修改重写规则"
    },
    {
      "name": "UpdateHTTPWebAccessLogRequest",
      "code": "message UpdateHTTPWebAccessLogRequest {\n\tint64 httpWebId = 1;\n\tbytes accessLogJSON = 2; // @link json:http_access_log_ref\n}",
      "doc": "更改访问日志配置"
    },
    {
      "name": "UpdateHTTPWebAuthRequest",
      "code": "message UpdateHTTPWebAuthRequest {\n\tint64 httpWebId = 1;\n\tbytes authJSON = 2;\n}",
      "doc": "更改认证设置"
    },
    {
      "name": "UpdateHTTPWebCCRequest",
      "code": "message UpdateHTTPWebCCRequest {\n\tint64 httpWebId = 1;\n\tbytes ccJSON = 2;\n}",
      "doc": "修改网站CC设置"
    },
    {
      "name": "UpdateHTTPWebCacheRequest",
      "code": "message UpdateHTTPWebCacheRequest {\n\tint64 httpWebId = 1;\n\tbytes cacheJSON = 2; // @link json:http_cache_config\n}",
      "doc": "更改缓存配置"
    },
    {
      "name": "UpdateHTTPWebCharsetRequest",
      "code": "message UpdateHTTPWebCharsetRequest {\n\tint64 httpWebId = 1;\n\tbytes charsetJSON = 2;\n}",
      "doc": "更改字符集配置"
    },
    {
      "name": "UpdateHTTPWebCommonRequest",
      "code": "message UpdateHTTPWebCommonRequest {\n\tint64 httpWebId = 1;\n\tbool mergeSlashes = 2;\n}",
      "doc": "更改通用设置"
    },
    {
      "name": "UpdateHTTPWebCompressionRequest",
      "code": "message UpdateHTTPWebCompressionRequest {\n\tint64 httpWebId = 1;\n\tbytes compressionJSON = 2;\n}",
      "doc": "更改压缩配置"
    },
    {
      "name": "UpdateHTTPWebFastcgiRequest",
      "code": "message UpdateHTTPWebFastcgiRequest {\n\tint64 httpWebId = 1;\n\tbytes fastcgiJSON = 2;\n}",
      "doc": "更改Fastcgi设置"
    },
    {
      "name": "UpdateHTTPWebFirewallRequest",
      "code": "message UpdateHTTPWebFirewallRequest {\n\tint64 httpWebId = 1;\n\tbytes firewallJSON = 2; // @link json:http_firewall_ref\n}",
      "doc": "更改防火墙设置"
    },
    {
      "name": "UpdateHTTPWebHostRedirectsRequest",
      "code": "message UpdateHTTPWebHostRedirectsRequest {\n\tint64 httpWebId = 1;\n\tbytes hostRedirectsJSON = 2;\n}",
      "doc": "更改主机跳转设置"
    },
    {
      "name": "UpdateHTTPWebLocationsRequest",
      "code": "message UpdateHTTPWebLocationsRequest {\n\tint64 httpWebId = 1;\n\tbytes locationsJSON = 3;\n}",
      "doc": "更改路径规则配置"
    },
    {
      "name": "UpdateHTTPWebOptimizationRequest",
      "code": "message UpdateHTTPWebOptimizationRequest {\n\tint64 httpWebId = 1;\n\tbytes optimizationJSON = 2;\n}",
      "doc": "更改页面优化配置"
    },
    {
      "name": "UpdateHTTPWebPagesRequest",
      "code": "message UpdateHTTPWebPagesRequest {\n\tint64 httpWebId = 1;\n\tbytes pagesJSON = 2;\n}",
      "doc": "更改Pages"
    },
    {
      "name": "UpdateHTTPWebRedirectToHTTPSRequest",
      "code": "message UpdateHTTPWebRedirectToHTTPSRequest {\n\tint64 httpWebId = 1;\n\tbytes redirectToHTTPSJSON = 2;\n}",
      "doc": "更改跳转到HTTPS设置"
    },
    {
      "name": "UpdateHTTPWebReferersRequest",
      "code": "message UpdateHTTPWebReferersRequest {\n\tint64 httpWebId = 1;\n\tbytes referersJSON = 2;\n}",
      "doc": "修改防盗链设置"
    },
    {
      "name": "UpdateHTTPWebRemoteAddrRequest",
      "code": "message UpdateHTTPWebRemoteAddrRequest {\n\tint64 httpWebId = 1;\n\tbytes remoteAddrJSON = 2; // @link json:http_remote_addr_config\n}",
      "doc": "更改RemoteAddr配置"
    },
    {
      "name": "UpdateHTTPWebRequest",
      "code": "message UpdateHTTPWebRequest {\n\tint64 httpWebId = 1;\n\tbytes rootJSON = 2;\n}",
      "doc": "更改Web配置"
    },
    {
      "name": "UpdateHTTPWebRequestHeaderRequest",
      "code": "message UpdateHTTPWebRequestHeaderRequest {\n\tint64 httpWebId = 1;\n\tbytes headerJSON = 2;\n}",
      "doc": "更改请求Header策略"
    },
    {
      "name": "UpdateHTTPWebRequestLimitRequest",
      "code": "message UpdateHTTPWebRequestLimitRequest {\n\tint64 httpWebId = 1;\n\tbytes requestLimitJSON = 2;\n}",
      "doc": "修改请求限制"
    },
    {
      "name": "UpdateHTTPWebRequestScriptsRequest",
      "code": "message UpdateHTTPWebRequestScriptsRequest {\n\tint64 httpWebId = 1;\n\tbytes requestScriptsJSON = 2;\n}",
      "doc": "修改请求脚本"
    },
    {
      "name": "UpdateHTTPWebResponseHeaderRequest",
      "code": "message UpdateHTTPWebResponseHeaderRequest {\n\tint64 httpWebId = 1;\n\tbytes headerJSON = 2;\n}",
      "doc": "更改响应Header策略"
    },
    {
      "name": "UpdateHTTPWebRewriteRulesRequest",
      "code": "message UpdateHTTPWebRewriteRulesRequest {\n\tint64 httpWebId = 1;\n\tbytes rewriteRulesJSON = 2;\n}",
      "doc": "更改重写规则设置"
    },
    {
      "name": "UpdateHTTPWebShutdownRequest",
      "code": "message UpdateHTTPWebShutdownRequest {\n\tint64 httpWebId = 1;\n\tbytes shutdownJSON = 2;\n}",
      "doc": "更改Shutdown"
    },
    {
      "name": "UpdateHTTPWebStatRequest",
      "code": "message UpdateHTTPWebStatRequest {\n\tint64 httpWebId = 1;\n\tbytes statJSON = 2; // @link json:http_stat_stat_ref\n}",
      "doc": "更改统计配置"
    },
    {
      "name": "UpdateHTTPWebUAMRequest",
      "code": "message UpdateHTTPWebUAMRequest {\n\tint64 httpWebId = 1;\n\tbytes uamJSON = 2;\n}",
      "doc": "修改网站UAM设置"
    },
    {
      "name": "UpdateHTTPWebUserAgentRequest",
      "code": "message UpdateHTTPWebUserAgentRequest {\n\tint64 httpWebId = 1;\n\tbytes userAgentJSON = 2;\n}",
      "doc": "修改防盗链设置"
    },
    {
      "name": "UpdateHTTPWebWebPRequest",
      "code": "message UpdateHTTPWebWebPRequest {\n\tint64 httpWebId = 1;\n\tbytes webpJSON = 2;\n}",
      "doc": "更改WebP配置"
    },
    {
      "name": "UpdateHTTPWebWebsocketRequest",
      "code": "message UpdateHTTPWebWebsocketRequest {\n\tint64 httpWebId = 1;\n\tbytes websocketJSON = 2; // @link json:http_websocket_ref\n}",
      "doc": "更改Websocket设置"
    },
    {
      "name": "UpdateHTTPWebsocketRequest",
      "code": "message UpdateHTTPWebsocketRequest {\n\tint64 websocketId = 1;\n\tbytes handshakeTimeoutJSON = 2;\n\tbool allowAllOrigins = 3;\n\trepeated string allowedOrigins = 4;\n\tbool requestSameOrigin = 5;\n\tstring requestOrigin = 6;\n}",
      "doc": "修改Websocket配置"
    },
    {
      "name": "UpdateIPItemRequest",
      "code": "message UpdateIPItemRequest {\n\tint64 ipItemId = 1;\n\tstring ipFrom = 2;\n\tstring ipTo = 3;\n\tint64 expiredAt = 4;\n\tstring reason = 5;\n\tstring type = 6; // 类型\n\tstring eventLevel = 7; // 级别\n}",
      "doc": "修改IP"
    },
    {
      "name": "UpdateIPItemsReadRequest",
      "code": "message UpdateIPItemsReadRequest {\n\n}",
      "doc": "设置所有为已读"
    },
    {
      "name": "UpdateIPLibraryArtifactIsPublicRequest",
      "code": "message UpdateIPLibraryArtifactIsPublicRequest {\n\tint64 ipLibraryArtifactId = 1;\n\tbool isPublic = 2;\n}",
      "doc": "使用/取消使用制品"
    },
    {
      "name": "UpdateIPLibraryFileFinishedRequest",
      "code": "message UpdateIPLibraryFileFinishedRequest {\n\tint64 ipLibraryFileId = 1;\n}",
      "doc": "设置某个IP库为已完成"
    },
    {
      "name": "UpdateIPListRequest",
      "code": "message UpdateIPListRequest {\n\tint64 ipListId = 1;\n\tstring name = 2;\n\tstring code = 3;\n\tbytes timeoutJSON = 4;\n\tstring description = 5;\n}",
      "doc": "修改IP列表"
    },
    {
      "name": "UpdateLoginRequest",
      "code": "message UpdateLoginRequest {\n\tLogin login = 1;\n}",
      "doc": "修改认证"
    },
    {
      "name": "UpdateMessageMediaInstanceRequest",
      "code": "message UpdateMessageMediaInstanceRequest {\n\tint64 messageMediaInstanceId = 1;\n\tstring name = 2;\n\tstring mediaType = 3;\n\tbytes paramsJSON = 4;\n\tstring description = 5;\n\tbytes rateJSON = 7;\n\tint32 hashLife = 8;\n\tbool isOn = 6;\n}",
      "doc": "修改接收人"
    },
    {
      "name": "UpdateMessageReadRequest",
      "code": "message UpdateMessageReadRequest {\n\tint64 messageId = 1;\n\tbool isRead = 2;\n}",
      "doc": "设置消息已读状态"
    },
    {
      "name": "UpdateMessageReceiversRequest",
      "code": "message UpdateMessageReceiversRequest {\n\tstring role = 7;\n\tint64 nodeClusterId = 1;\n\tint64 nodeId = 2;\n\tint64 serverId = 3;\n\tbytes paramsJSON = 5;\n\tmap\u003cstring, RecipientOptions\u003e recipientOptions = 6; // type =\u003e options，type为recipient或者group\n\n\n\tmessage RecipientOption {\n\t\tint64 messageRecipientId = 1;\n\t\tint64 messageRecipientGroupId = 2;\n\t}\n\n\n\tmessage RecipientOptions {\n\t\trepeated RecipientOption recipientOptions = 1;\n\t}\n}",
      "doc": "修改接收者"
    },
    {
      "name": "UpdateMessageRecipientGroupRequest",
      "code": "message UpdateMessageRecipientGroupRequest {\n\tint64 messageRecipientGroupId = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n}",
      "doc": "修改分组"
    },
    {
      "name": "UpdateMessageRecipientRequest",
      "code": "message UpdateMessageRecipientRequest {\n\tint64 messageRecipientId = 1;\n\tint64 adminId = 2;\n\tint64 messageMediaInstanceId = 3;\n\trepeated int64 messageRecipientGroupIds = 4;\n\tstring description = 5;\n\tbool isOn = 6;\n\tstring user = 7;\n\tstring timeFrom = 8;\n\tstring timeTo = 9;\n\n\trepeated int64  nodeClusterIds = 10; // 关联的CDN边缘节点集群ID列表\n}",
      "doc": "修改接收人"
    },
    {
      "name": "UpdateMessagesReadRequest",
      "code": "message UpdateMessagesReadRequest {\n\trepeated int64 messageIds = 1;\n\tbool isRead = 2;\n}",
      "doc": "设置一组消息已读状态"
    },
    {
      "name": "UpdateMetricChartRequest",
      "code": "message UpdateMetricChartRequest {\n\tint64 metricChartId = 1;\n\tstring name = 2;\n\tstring type = 3;\n\tint32 widthDiv = 4;\n\tbytes paramsJSON = 5;\n\tbool isOn = 6;\n\tint32 maxItems = 7;\n\tbool ignoreEmptyKeys = 8;\n\trepeated string ignoredKeys = 9;\n}",
      "doc": "修改图表"
    },
    {
      "name": "UpdateMetricItemRequest",
      "code": "message UpdateMetricItemRequest {\n\tint64 metricItemId = 1;\n\tstring name = 2;\n\trepeated string keys = 3;\n\tint32 period = 4;\n\tstring periodUnit = 5;\n\tint32 expiresPeriod = 9;\n\tstring value = 6;\n\tbool isOn = 7;\n\tbool isPublic = 8;\n}",
      "doc": "修改指标"
    },
    {
      "name": "UpdateNSClusterAccessLogRequest",
      "code": "message UpdateNSClusterAccessLogRequest {\n\tint64 nsClusterId = 1;\n\tbytes accessLogJSON = 2;\n}",
      "doc": "修改集群访问日志配置"
    },
    {
      "name": "UpdateNSClusterAnswerConfigRequest",
      "code": "message UpdateNSClusterAnswerConfigRequest {\n\tint64 nsClusterId = 1;\n\tbytes answerJSON = 2;\n}",
      "doc": "设置应答模式"
    },
    {
      "name": "UpdateNSClusterDDoSProtectionRequest",
      "code": "message UpdateNSClusterDDoSProtectionRequest {\n\tint64 nsClusterId = 1;\n\tbytes ddosProtectionJSON = 2;\n}",
      "doc": "修改集群的DDoS设置"
    },
    {
      "name": "UpdateNSClusterDoHRequest",
      "code": "message UpdateNSClusterDoHRequest {\n\tint64 nsClusterId = 1;\n\tbytes dohJSON = 2;\n}",
      "doc": "修改集群的DoH设置"
    },
    {
      "name": "UpdateNSClusterRecursionConfigRequest",
      "code": "message UpdateNSClusterRecursionConfigRequest {\n\tint64 nsClusterId = 1;\n\tbytes recursionJSON = 2;\n}",
      "doc": "设置递归DNS配置"
    },
    {
      "name": "UpdateNSClusterRequest",
      "code": "message UpdateNSClusterRequest {\n\tint64 nsClusterId = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\trepeated string hosts = 4;\n\tstring email = 8;\n\tbool autoRemoteStart = 5;\n\tstring timeZone = 6;\n\tbool detectAgents = 7;\n\tbool checkingPorts = 9; // 是否检查端口连通性（目前仅在节点列表上）\n}",
      "doc": "修改集群"
    },
    {
      "name": "UpdateNSClusterSOAConfigRequest",
      "code": "message UpdateNSClusterSOAConfigRequest {\n\tint64 nsClusterId = 1;\n\tbytes soaJSON = 2;\n}",
      "doc": "设置SOA配置"
    },
    {
      "name": "UpdateNSClusterTCPRequest",
      "code": "message UpdateNSClusterTCPRequest {\n\tint64 nsClusterId = 1;\n\tbytes tcpJSON = 2;\n}",
      "doc": "修改集群的TCP设置"
    },
    {
      "name": "UpdateNSClusterTLSRequest",
      "code": "message UpdateNSClusterTLSRequest {\n\tint64 nsClusterId = 1;\n\tbytes tlsJSON = 2;\n}",
      "doc": "修改集群的TLS设置"
    },
    {
      "name": "UpdateNSClusterUDPRequest",
      "code": "message UpdateNSClusterUDPRequest {\n\tint64 nsClusterId = 1;\n\tbytes udpJSON = 2;\n}",
      "doc": "修改集群的UDP设置"
    },
    {
      "name": "UpdateNSDomainGroupRequest",
      "code": "message UpdateNSDomainGroupRequest {\n\tint64 nsDomainGroupId = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n}",
      "doc": "修改分组"
    },
    {
      "name": "UpdateNSDomainRecordsHealthCheckRequest",
      "code": "message UpdateNSDomainRecordsHealthCheckRequest {\n\tint64 nsDomainId = 1; // 域名ID\n\tbytes nsDomainRecordsHealthCheckJSON = 2; // 健康检查设置\n}",
      "doc": "修改记录健康检查全局设置"
    },
    {
      "name": "UpdateNSDomainRequest",
      "code": "message UpdateNSDomainRequest {\n\tint64 nsDomainId = 1;\n\tint64 nsClusterId = 2;\n\tint64 userId = 3;\n\trepeated int64 nsDomainGroupIds = 5; // 域名分组ID\n\tbool isOn = 4;\n}",
      "doc": "修改域名\n注意：名称不允许修改"
    },
    {
      "name": "UpdateNSDomainStatusRequest",
      "code": "message UpdateNSDomainStatusRequest {\n\tint64 nsDomainId = 1;\n\tstring status = 2;\n}",
      "doc": "修改域名状态"
    },
    {
      "name": "UpdateNSDomainTSIGRequest",
      "code": "message UpdateNSDomainTSIGRequest {\n\tint64 nsDomainId = 1;\n\tbytes tsigJSON = 2;\n}",
      "doc": "修改TSIG配置"
    },
    {
      "name": "UpdateNSKeyRequest",
      "code": "message UpdateNSKeyRequest {\n\tint64 nsKeyId = 1;\n\tstring name = 2;\n\tstring algo = 3;\n\tstring secret = 4;\n\tstring secretType = 5;\n\tbool isOn = 6;\n}",
      "doc": "修改密钥"
    },
    {
      "name": "UpdateNSNodeAPIConfigRequest",
      "code": "message UpdateNSNodeAPIConfigRequest {\n\tint64 nsNodeId = 1;\n\tbytes apiNodeAddrsJSON = 2;\n}",
      "doc": "修改某个节点的API相关配置"
    },
    {
      "name": "UpdateNSNodeConnectedAPINodesRequest",
      "code": "message UpdateNSNodeConnectedAPINodesRequest {\n\trepeated int64 apiNodeIds = 1;\n}",
      "doc": "更改NS节点连接的API节点信息"
    },
    {
      "name": "UpdateNSNodeDDoSProtectionRequest",
      "code": "message UpdateNSNodeDDoSProtectionRequest {\n\tint64 nsNodeId = 1;\n\tbytes ddosProtectionJSON = 2;\n}",
      "doc": "修改NS节点的DDoS设置"
    },
    {
      "name": "UpdateNSNodeIsInstalledRequest",
      "code": "message UpdateNSNodeIsInstalledRequest {\n\tint64 nsNodeId = 1;\n\tbool isInstalled = 2;\n}",
      "doc": "修改NS节点安装状态"
    },
    {
      "name": "UpdateNSNodeLoginRequest",
      "code": "message UpdateNSNodeLoginRequest {\n\tint64 nsNodeId = 1;\n\tNodeLogin nodeLogin = 2;\n}",
      "doc": "修改NS节点登录信息"
    },
    {
      "name": "UpdateNSNodeRequest",
      "code": "message UpdateNSNodeRequest {\n\tint64 nsNodeId = 1;\n\tstring name = 2;\n\tint64 nsClusterId = 3;\n\tNodeLogin nodeLogin = 4;\n\tbool isOn = 6;\n}",
      "doc": "修改NS节点"
    },
    {
      "name": "UpdateNSNodeStatusRequest",
      "code": "message UpdateNSNodeStatusRequest {\n\tint64 nodeId = 1;\n\tbytes statusJSON = 2;\n}",
      "doc": "更新NS节点状态"
    },
    {
      "name": "UpdateNSPlanRequest",
      "code": "message UpdateNSPlanRequest {\n\tint64 nsPlanId = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tfloat monthlyPrice = 4;\n\tfloat yearlyPrice = 5;\n\tbytes configJSON = 6;\n}",
      "doc": "修改DNS套餐"
    },
    {
      "name": "UpdateNSRecordHealthCheckRequest",
      "code": "message UpdateNSRecordHealthCheckRequest {\n\tint64 nsRecordId = 1; // 记录ID\n\tbytes nsRecordHealthCheckJSON = 2; // 记录健康检查配置\n}",
      "doc": "修改记录健康检查设置"
    },
    {
      "name": "UpdateNSRecordIsUpRequest",
      "code": "message UpdateNSRecordIsUpRequest {\n\tint64 nsRecordId = 1; // 记录ID\n\tbool isUp = 2;  // 是否在线\n}",
      "doc": "手动修改记录在线状态"
    },
    {
      "name": "UpdateNSRecordRequest",
      "code": "message UpdateNSRecordRequest {\n\tint64 nsRecordId = 1;\n\tstring description = 2;\n\tstring name = 3;\n\tstring type = 4;\n\tstring value = 5;\n\tint32 ttl = 6;\n\trepeated int64 nsRouteIds = 7 [deprecated = true];\n\tbool isOn = 8;\n\trepeated string nsRouteCodes = 9; // 路线代号\n\tint32 weight = 16; // 权重\n\n\tint32 mxPriority = 10; // mx优先级\n\n\tint32 srvPriority = 11; // SRV优先级\n\tint32 srvWeight = 12; // SRV权重\n\tint32 srvPort = 13; // SRV端口\n\n\tint32 caaFlag = 14; // CAA Flag\n\tstring caaTag = 15; // CAA TAG\n}",
      "doc": "修改记录"
    },
    {
      "name": "UpdateNSRecordsIsOnWithDomainNamesRequest",
      "code": "message UpdateNSRecordsIsOnWithDomainNamesRequest {\n\trepeated string nsDomainNames = 1;\n\tstring searchName = 2;\n\tstring searchValue = 3;\n\tstring searchType = 4;\n\trepeated string searchNSRouteCodes = 5;\n\tbool isOn = 6;\n\tint64 userId = 7;\n}",
      "doc": "批量一组域名的一组记录启用状态"
    },
    {
      "name": "UpdateNSRecordsWithDomainNamesRequest",
      "code": "message UpdateNSRecordsWithDomainNamesRequest {\n\trepeated string nsDomainNames = 1;\n\tstring searchName = 2;\n\tstring searchValue = 3;\n\tstring searchType = 4;\n\trepeated string searchNSRouteCodes = 5;\n\tstring newName = 6;\n\tstring newValue = 7;\n\tstring newType = 8;\n\trepeated string newNSRouteCodes = 9;\n\tint64 userId = 10;\n}",
      "doc": "批量修改一组域名的一组记录"
    },
    {
      "name": "UpdateNSRouteCategoryOrders",
      "code": "message UpdateNSRouteCategoryOrders {\n\trepeated int64 nsRouteCategoryIds = 1;\n}",
      "doc": "对线路分类进行排序"
    },
    {
      "name": "UpdateNSRouteCategoryRequest",
      "code": "message UpdateNSRouteCategoryRequest {\n\tint64 nsRouteCategoryId = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n}",
      "doc": "修改线路分类"
    },
    {
      "name": "UpdateNSRouteOrdersRequest",
      "code": "message UpdateNSRouteOrdersRequest {\n\trepeated int64 nsRouteIds = 1;\n}",
      "doc": "设置自定义线路排序"
    },
    {
      "name": "UpdateNSRouteRequest",
      "code": "message UpdateNSRouteRequest {\n\tint64 nsRouteId = 1;\n\tstring name = 2;\n\tbytes rangesJSON = 3;\n\tbool isPublic = 4; // 是否公用\n\tint64 nsRouteCategoryId = 5; // 分类ID\n\tint32 priority = 7; // 优先级\n\tbool isOn = 6;\n}",
      "doc": "修改自定义线路"
    },
    {
      "name": "UpdateNSUserPlanRequest",
      "code": "message UpdateNSUserPlanRequest {\n\tint64 nsUserPlanId = 1;\n\tint64 nsPlanId = 2;\n\tstring dayFrom = 3; // YYYYMMDD\n\tstring dayTo = 4; // YYYYMMDD\n\tstring periodUnit = 5; // yearly|monthly\n}",
      "doc": "修改用户套餐"
    },
    {
      "name": "UpdateNodeAPIConfigRequest",
      "code": "message UpdateNodeAPIConfigRequest {\n\tint64 nodeId = 1;\n\tbytes apiNodeAddrsJSON = 2;\n}",
      "doc": "修改某个节点的API相关配置"
    },
    {
      "name": "UpdateNodeActionOrdersRequest",
      "code": "message UpdateNodeActionOrdersRequest {\n\trepeated int64 nodeActionIds = 1; // 节点动作ID列表\n}",
      "doc": "设置节点动作排序"
    },
    {
      "name": "UpdateNodeActionRequest",
      "code": "message UpdateNodeActionRequest {\n\tint64 nodeActionId = 1; // 动作ID\n\tbytes condsJSON = 2;\n\tbytes actionJSON = 3;\n\tbytes durationJSON = 4; // 持续时间\n\tbool isOn = 5; // 是否启用\n}",
      "doc": "修改动作"
    },
    {
      "name": "UpdateNodeCacheRequest",
      "code": "message UpdateNodeCacheRequest {\n\tint64 nodeId = 1; // 节点ID\n\tSizeCapacity maxCacheDiskCapacity = 2; // 磁盘容量限制\n\tSizeCapacity maxCacheMemoryCapacity = 3; // 内存容量限制\n\tstring cacheDiskDir = 4; // 磁盘缓存目录\n\tbytes cacheDiskSubDirsJSON = 5; // 磁盘缓存子目录\n}",
      "doc": "修改节点缓存设置"
    },
    {
      "name": "UpdateNodeClusterDDoSProtectionRequest",
      "code": "message UpdateNodeClusterDDoSProtectionRequest {\n\tint64 nodeClusterId = 1;\n\tbytes ddosProtectionJSON = 2;\n}",
      "doc": "修改集群的DDoS设置"
    },
    {
      "name": "UpdateNodeClusterDNSRequest",
      "code": "message UpdateNodeClusterDNSRequest {\n\tint64 nodeClusterId = 1;\n\tstring dnsName = 2;\n\tint64 dnsDomainId = 3;\n\tbool nodesAutoSync = 4;\n\tbool serversAutoSync = 5;\n\trepeated string cnameRecords = 6;\n\tint32 ttl = 7;\n\tbool cnameAsDomain = 8;\n\tbool includingLnNodes = 9;\n}",
      "doc": "修改集群的域名设置"
    },
    {
      "name": "UpdateNodeClusterFirewallActionRequest",
      "code": "message UpdateNodeClusterFirewallActionRequest {\n\tint64 nodeClusterFirewallActionId = 1;\n\tstring name = 2;\n\tstring eventLevel = 3;\n\tstring type = 4;\n\tbytes paramsJSON = 5;\n}",
      "doc": "修改动作"
    },
    {
      "name": "UpdateNodeClusterGlobalServerConfigRequest",
      "code": "message UpdateNodeClusterGlobalServerConfigRequest {\n\tint64 nodeClusterId = 1; // 集群ID\n\tbytes globalServerConfigJSON = 2; // 网站全局配置\n}",
      "doc": "修改集群的全局服务设置"
    },
    {
      "name": "UpdateNodeClusterHTTP3PolicyRequest",
      "code": "message UpdateNodeClusterHTTP3PolicyRequest {\n\tint64 nodeClusterId = 1; // 集群ID\n\tbytes http3PolicyJSON = 2; // HTTP3策略配置\n}",
      "doc": "修改集群的HTTP3设置"
    },
    {
      "name": "UpdateNodeClusterHTTPCCPolicyRequest",
      "code": "message UpdateNodeClusterHTTPCCPolicyRequest {\n\tint64 nodeClusterId = 1;\n\tbytes httpCCPolicyJSON = 2;\n}",
      "doc": "设置集群的HTTP CC策略"
    },
    {
      "name": "UpdateNodeClusterHTTPCachePolicyIdRequest",
      "code": "message UpdateNodeClusterHTTPCachePolicyIdRequest {\n\tint64 nodeClusterId = 1;\n\tint64 httpCachePolicyId = 2;\n}",
      "doc": "修改集群的缓存策略"
    },
    {
      "name": "UpdateNodeClusterHTTPFirewallPolicyIdRequest",
      "code": "message UpdateNodeClusterHTTPFirewallPolicyIdRequest {\n\tint64 nodeClusterId = 1;\n\tint64 httpFirewallPolicyId = 2;\n}",
      "doc": "修改集群的WAF策略"
    },
    {
      "name": "UpdateNodeClusterHTTPPagesPolicyRequest",
      "code": "message UpdateNodeClusterHTTPPagesPolicyRequest {\n\tint64 nodeClusterId = 1; // 集群ID\n\tbytes httpPagesPolicyJSON = 2; // HTTP自定义页面策略配置\n}",
      "doc": "修改集群的自定义页面设置"
    },
    {
      "name": "UpdateNodeClusterHealthCheckRequest",
      "code": "message UpdateNodeClusterHealthCheckRequest {\n\tint64 nodeClusterId = 1;\n\tbytes healthCheckJSON = 2;\n}",
      "doc": "修改集群健康检查设置"
    },
    {
      "name": "UpdateNodeClusterNetworkSecurityPolicyRequest",
      "code": "message UpdateNodeClusterNetworkSecurityPolicyRequest {\n\tint64 nodeClusterId = 1; // 集群ID\n\tbytes networkSecurityPolicyJSON = 2; // 网络安全策略配置\n}",
      "doc": "修改集群的网络安全策略"
    },
    {
      "name": "UpdateNodeClusterPinnedRequest",
      "code": "message UpdateNodeClusterPinnedRequest {\n\tint64 nodeClusterId = 1;\n\tbool isPinned = 2;\n}",
      "doc": "设置集群是否置顶"
    },
    {
      "name": "UpdateNodeClusterRequest",
      "code": "message UpdateNodeClusterRequest {\n\tint64 nodeClusterId = 1;\n\tstring name = 2;\n\tint64 nodeGrantId = 3;\n\tstring installDir = 4;\n\tstring timeZone = 5;\n\tint32 nodeMaxThreads = 6;\n\tbool autoOpenPorts = 8;\n\tbytes clockJSON = 9;\n\tbool autoRemoteStart = 10;\n\tbool autoInstallNftables = 11;\n\tbytes sshParamsJSON = 12;\n\tbool autoSystemTuning = 13; // 是否自动调节系统参数\n}",
      "doc": "修改集群"
    },
    {
      "name": "UpdateNodeClusterSystemServiceRequest",
      "code": "message UpdateNodeClusterSystemServiceRequest {\n\tint64 nodeClusterId = 1;\n\tstring type = 2;\n\tbytes paramsJSON = 3;\n}",
      "doc": "修改集群的系统服务设置"
    },
    {
      "name": "UpdateNodeClusterTOARequest",
      "code": "message UpdateNodeClusterTOARequest {\n\tint64 nodeClusterId = 1;\n\tbytes toaJSON = 2;\n}",
      "doc": "修改集群的TOA设置"
    },
    {
      "name": "UpdateNodeClusterUAMPolicyRequest",
      "code": "message UpdateNodeClusterUAMPolicyRequest {\n\tint64 nodeClusterId = 1;\n\tbytes uamPolicyJSON = 2;\n}",
      "doc": "设置集群的UAM策略"
    },
    {
      "name": "UpdateNodeClusterWebPPolicyRequest",
      "code": "message UpdateNodeClusterWebPPolicyRequest {\n\tint64 nodeClusterId = 1;\n\tbytes webpPolicyJSON = 2;\n}",
      "doc": "设置集群WebP策略"
    },
    {
      "name": "UpdateNodeConnectedAPINodesRequest",
      "code": "message UpdateNodeConnectedAPINodesRequest {\n\trepeated int64 apiNodeIds = 1;\n}",
      "doc": "更改节点连接的API节点信息"
    },
    {
      "name": "UpdateNodeDDoSProtectionRequest",
      "code": "message UpdateNodeDDoSProtectionRequest {\n\tint64 nodeId = 1;\n\tbytes ddosProtectionJSON = 2;\n}",
      "doc": "修改节点的DDoS设置"
    },
    {
      "name": "UpdateNodeDNSRequest",
      "code": "message UpdateNodeDNSRequest {\n\tint64 nodeId = 1;\n\tstring ipAddr = 2;\n\tint64 nodeIPAddressId = 5;\n\tint64 dnsDomainId = 3;\n\trepeated string routes = 4;\n}",
      "doc": "修改节点的DNS信息"
    },
    {
      "name": "UpdateNodeDNSResolverRequest",
      "code": "message UpdateNodeDNSResolverRequest {\n\tint64 nodeId = 1;\n\tbytes dnsResolverJSON = 2;\n}",
      "doc": "修改DNS Resolver"
    },
    {
      "name": "UpdateNodeGrantRequest",
      "code": "message UpdateNodeGrantRequest {\n\tint64 nodeGrantId = 8;\n\tstring name = 1;\n\tstring method = 2;\n\tstring username = 3;\n\tstring password = 4;\n\tstring privateKey = 5;\n\tstring passphrase = 9;\n\tstring description = 6;\n\tint64 nodeId = 7;\n\tbool su = 10;\n}",
      "doc": "修改节点认证"
    },
    {
      "name": "UpdateNodeGroupOrdersRequest",
      "code": "message UpdateNodeGroupOrdersRequest {\n\trepeated int64 nodeGroupIds = 1;\n}",
      "doc": "修改分组排序"
    },
    {
      "name": "UpdateNodeGroupRequest",
      "code": "message UpdateNodeGroupRequest {\n\tint64 nodeGroupId = 1;\n\tstring name = 2;\n}",
      "doc": "修改分组"
    },
    {
      "name": "UpdateNodeIPAddressIsUpRequest",
      "code": "message UpdateNodeIPAddressIsUpRequest {\n\tint64 nodeIPAddressId = 1;\n\tbool isUp = 2;\n}",
      "doc": "设置上下线状态"
    },
    {
      "name": "UpdateNodeIPAddressNodeIdRequest",
      "code": "message UpdateNodeIPAddressNodeIdRequest {\n\tint64 nodeIPAddressId = 1;\n\tint64 nodeId = 2;\n}",
      "doc": "修改IP地址所属节点"
    },
    {
      "name": "UpdateNodeIPAddressRequest",
      "code": "message UpdateNodeIPAddressRequest {\n\tint64 nodeIPAddressId = 1; // IP地址ID\n\tstring name = 2;\n\tstring ip = 3;\n\tbool canAccess = 4; // 是否能够访问\n\tbool isOn = 5; // 是否启用\n\tbool isUp = 6; // 是否上线\n\trepeated int64 clusterIds = 7; // 可选项，所属集群ID列表，如果没有指定，则表示应用于节点所属的所有集群\n}",
      "doc": "修改IP地址"
    },
    {
      "name": "UpdateNodeIPAddressThresholdRequest",
      "code": "message UpdateNodeIPAddressThresholdRequest {\n\tint64 nodeIPAddressThresholdId = 1;\n\tbytes itemsJSON = 2;\n\tbytes actionsJSON = 3;\n}",
      "doc": "修改阈值"
    },
    {
      "name": "UpdateNodeIsInstalledRequest",
      "code": "message UpdateNodeIsInstalledRequest {\n\tint64 nodeId = 1;\n\tbool isInstalled = 2;\n}",
      "doc": "修改节点安装状态"
    },
    {
      "name": "UpdateNodeLoginRequest",
      "code": "message UpdateNodeLoginRequest {\n\tint64 nodeId = 1;\n\tNodeLogin nodeLogin = 2;\n}",
      "doc": "修改节点登录信息"
    },
    {
      "name": "UpdateNodeLogsReadRequest",
      "code": "message UpdateNodeLogsReadRequest {\n\trepeated int64 nodeLogIds = 1;\n\n\tint64 nodeId = 2;\n\tstring role = 3;\n}",
      "doc": "设置日志为已读"
    },
    {
      "name": "UpdateNodePriceItemRequest",
      "code": "message UpdateNodePriceItemRequest {\n\tint64 NodePriceItemId = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tint64 bitsFrom = 4;\n\tint64 bitsTo = 5;\n}",
      "doc": "修改区域价格"
    },
    {
      "name": "UpdateNodeRegionInfoRequest",
      "code": "message UpdateNodeRegionInfoRequest {\n\tint64 nodeId = 1;\n\tint64 nodeRegionId = 2;\n}",
      "doc": "修改节点区域信息"
    },
    {
      "name": "UpdateNodeRegionOrdersRequest",
      "code": "message UpdateNodeRegionOrdersRequest {\n\trepeated int64 nodeRegionIds = 1;\n}",
      "doc": "排序"
    },
    {
      "name": "UpdateNodeRegionPriceRequest",
      "code": "message UpdateNodeRegionPriceRequest {\n\tint64 nodeRegionId = 1;\n\tint64 nodeItemId = 2;\n\tfloat price = 3;\n}",
      "doc": "修改价格项价格"
    },
    {
      "name": "UpdateNodeRegionRequest",
      "code": "message UpdateNodeRegionRequest {\n\tint64 nodeRegionId = 1;\n\tstring name = 2;\n\tstring description = 3;\n\tbool isOn = 4;\n}",
      "doc": "修改区域"
    },
    {
      "name": "UpdateNodeRequest",
      "code": "message UpdateNodeRequest {\n\tint64 nodeId = 1;\n\tstring name = 2;\n\tint64 nodeClusterId = 3;\n\trepeated int64 secondaryNodeClusterIds = 13;\n\tbool isOn = 6;\n\tint64 nodeGroupId = 7;\n\tint64 nodeRegionId = 10;\n\tint32 level = 14;\n\trepeated string lnAddrs = 15; // Ln节点访问地址\n\tbool enableIPLists = 16; // 是否启用IP名单\n}",
      "doc": "修改节点"
    },
    {
      "name": "UpdateNodeScheduleInfoRequest",
      "code": "message UpdateNodeScheduleInfoRequest {\n\tint64 nodeId = 1; // 节点ID\n\tstring offlineDay = 2; // 下线日期，格式YYYYMMDD\n\tbool isBackupForCluster = 3; // 是否为集群备份节点\n\tbool isBackupForGroup = 4; // 是否为分组备份节点\n\trepeated string backupIPs = 5; // 备用IP\n}",
      "doc": "修改节点调度信息"
    },
    {
      "name": "UpdateNodeStatusRequest",
      "code": "message UpdateNodeStatusRequest {\n\tint64 nodeId = 1;\n\tbytes statusJSON = 2;\n}",
      "doc": "更新节点状态"
    },
    {
      "name": "UpdateNodeSystemRequest",
      "code": "message UpdateNodeSystemRequest {\n\tint64 nodeId = 1;\n\tint32 maxCPU = 2;\n}",
      "doc": "修改节点系统信息"
    },
    {
      "name": "UpdateNodeTasksNotifiedRequest",
      "code": "message UpdateNodeTasksNotifiedRequest {\n\trepeated int64 nodeTaskIds = 1;\n}",
      "doc": "设置任务已通知"
    },
    {
      "name": "UpdateNodeThresholdRequest",
      "code": "message UpdateNodeThresholdRequest {\n\tint64 nodeThresholdId = 1;\n\tstring item = 2;\n\tstring param = 3;\n\tstring operator = 4;\n\tbytes valueJSON = 5;\n\tstring message = 6;\n\tint32 duration = 7;\n\tstring durationUnit = 8;\n\tstring sumMethod = 9;\n\tbool isOn = 10;\n\tint32 notifyDuration = 11;\n}",
      "doc": "修改阈值"
    },
    {
      "name": "UpdateNodeUpRequest",
      "code": "message UpdateNodeUpRequest {\n\tint64 nodeId = 1;\n\tbool isUp = 2;\n}",
      "doc": "设置节点上线状态"
    },
    {
      "name": "UpdateOrderMethodRequest",
      "code": "message UpdateOrderMethodRequest {\n\tint64 orderMethodId = 1;\n\tstring name = 2;\n\tstring code = 3;\n\tstring description = 4;\n\n\tstring url = 5;\n\n\tbytes paramsJSON = 7; // 预设支付方式参数\n\n\tbool isOn = 6;\n\tstring clientType = 8;\n\tstring qrcodeTitle = 9;\n}",
      "doc": "修改支付方式\n不允许修改父级支付方式"
    },
    {
      "name": "UpdateOriginRequest",
      "code": "message UpdateOriginRequest {\n\tint64 originId = 1; // 源站ID\n\tstring name = 2; // 可选项\n\tNetworkAddress addr = 3; // 源站网络地址\n\tbytes ossJSON = 16; // OSS配置信息，源站网络地址中protocol为oss:开头时需要设置此项\n\tstring description = 4; // 可选项\n\tint32 weight = 5; // 权重，不小于0，一般设置为10\n\tbool isOn = 6; // 是否启用\n\tbytes connTimeoutJSON = 7; // 可选项\n\tbytes readTimeoutJSON = 8; // 可选项\n\tbytes idleTimeoutJSON = 9; // 可选项\n\tint32 maxConns = 10; // 可选项\n\tint32 maxIdleConns = 11; // 可选项\n\trepeated string domains = 12; // 可选项\n\tbytes certRefJSON = 13; // 可选项\n\tstring host = 14; // 可选项\n\tbool followPort = 15; // 可选项\n\tbool http2Enabled = 17; // 可选项，是否支持HTTP/2，只在HTTPS源站时生效\n}",
      "doc": "修改源站"
    },
    {
      "name": "UpdatePlanRequest",
      "code": "message UpdatePlanRequest {\n\tint64 planId = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n\tint64 clusterId = 4;\n\tbytes trafficLimitJSON = 5;\n\tbytes featuresJSON = 6;\n\tstring priceType = 7;\n\tbytes trafficPriceJSON = 8;\n\tbytes bandwidthPriceJSON = 12;\n\tfloat monthlyPrice = 9;\n\tfloat seasonallyPrice = 10;\n\tfloat yearlyPrice = 11;\n\tint32 totalServers = 13; // 可以添加的网站数\n\tint32 totalServerNamesPerServer = 14; // 每个网站可以添加的域名数\n\tint32 totalServerNames = 15; // 可以添加的域名总数\n\tint64 dailyRequests = 16; // 每日访问量额度\n\tint64 monthlyRequests = 17; // 每月访问量额度\n}",
      "doc": "修改套餐"
    },
    {
      "name": "UpdateRegionCityCustomRequest",
      "code": "message UpdateRegionCityCustomRequest {\n\tint64 regionCityId = 1;\n\tstring customName = 2;\n\trepeated string customCodes = 3;\n}",
      "doc": "修改城市定制信息"
    },
    {
      "name": "UpdateRegionCountryCustomRequest",
      "code": "message UpdateRegionCountryCustomRequest {\n\tint64 regionCountryId = 1;\n\tstring customName = 2;\n\trepeated string customCodes = 3;\n}",
      "doc": "修改国家/地区定制信息"
    },
    {
      "name": "UpdateRegionProviderCustomRequest",
      "code": "message UpdateRegionProviderCustomRequest {\n\tint64 regionProviderId = 1;\n\tstring customName = 2;\n\trepeated string customCodes = 3;\n}",
      "doc": "修改ISP定制信息"
    },
    {
      "name": "UpdateRegionProvinceCustomRequest",
      "code": "message UpdateRegionProvinceCustomRequest {\n\tint64 regionProvinceId = 1;\n\tstring customName = 2;\n\trepeated string customCodes = 3;\n}",
      "doc": "修改省份定制信息"
    },
    {
      "name": "UpdateRegionTownCustomRequest",
      "code": "message UpdateRegionTownCustomRequest {\n\tint64 regionTownId = 1;\n\tstring customName = 2;\n\trepeated string customCodes = 3;\n}",
      "doc": "修改区县定制信息"
    },
    {
      "name": "UpdateReportNodeGlobalSetting",
      "code": "message UpdateReportNodeGlobalSetting {\n\tbytes settingJSON = 1;\n}",
      "doc": "修改全局设置"
    },
    {
      "name": "UpdateReportNodeGroupRequest",
      "code": "message UpdateReportNodeGroupRequest {\n\tint64 reportNodeGroupId = 1;\n\tstring name = 2;\n}",
      "doc": "修改分组"
    },
    {
      "name": "UpdateReportNodeRequest",
      "code": "message UpdateReportNodeRequest{\n\tint64 reportNodeId = 1;\n\tstring name = 2;\n\tstring location = 3;\n\tstring isp = 4;\n\trepeated string allowIPs = 5;\n\tbool isOn = 6;\n\trepeated int64 reportNodeGroupIds = 7;\n}",
      "doc": "修改终端"
    },
    {
      "name": "UpdateReportNodeStatusRequest",
      "code": "message UpdateReportNodeStatusRequest {\n\tbytes statusJSON = 1;\n}",
      "doc": "更新节点状态"
    },
    {
      "name": "UpdateReportResultsRequest",
      "code": "message UpdateReportResultsRequest {\n\trepeated ReportResult reportResults = 1;\n}",
      "doc": "上传报告结果"
    },
    {
      "name": "UpdateReverseProxyBackupOriginsRequest",
      "code": "message UpdateReverseProxyBackupOriginsRequest {\n\tint64 reverseProxyId = 1;\n\tbytes originsJSON = 2;\n}",
      "doc": "修改备用源站信息"
    },
    {
      "name": "UpdateReverseProxyPrimaryOriginsRequest",
      "code": "message UpdateReverseProxyPrimaryOriginsRequest {\n\tint64 reverseProxyId = 1;\n\tbytes originsJSON = 2;\n}",
      "doc": "修改主要源站信息"
    },
    {
      "name": "UpdateReverseProxyRequest",
      "code": "message UpdateReverseProxyRequest {\n\tint64 reverseProxyId = 1; // 反向代理ID\n\tint32 requestHostType = 6; // 可选参数，回源主机名类型：0 跟随CDN域名，1跟随源站，2自定义\n\tstring requestHost = 2; // 可选参数，自定义回源主机名\n\tbool requestHostExcludingPort = 15; // 可选参数，回源主机名中去除端口\n\tstring requestURI = 3; // 可选参数，请求URI\n\tstring stripPrefix = 4; // 可选参数，去除URI前缀\n\tbool autoFlush = 5; // 可选参数，自动刷新\n\trepeated string addHeaders = 7; // 可选参数，可以添加的请求报头\n\tbytes connTimeoutJSON = 8; // 可选参数，连接超时时间\n\tbytes readTimeoutJSON = 9; // 可选参数，读取超时时间\n\tbytes idleTimeoutJSON = 10; // 可选参数，空闲连接超时时间\n\tint32 maxConns = 11; // 可选参数，最大连接数\n\tint32 maxIdleConns = 12; // 可选参数，最大空闲连接数\n\tbytes proxyProtocolJSON = 13; // 可选参数，PROXY Protocol设置\n\tbool followRedirects = 14; // 可选参数，跳转跟随\n\tbool retry50X = 16; // 可选参数，启用50X重试\n}",
      "doc": "修改反向代理设置"
    },
    {
      "name": "UpdateReverseProxySchedulingRequest",
      "code": "message UpdateReverseProxySchedulingRequest {\n\tint64 reverseProxyId = 1;\n\tbytes schedulingJSON = 2;\n}",
      "doc": "修改反向代理调度算法"
    },
    {
      "name": "UpdateSSLCertRequest",
      "code": "message UpdateSSLCertRequest {\n\tint64 sslCertId = 1;\n\tbool isOn = 2;\n\tstring name = 3;\n\tstring description = 4;\n\tstring serverName = 5;\n\tbool isCA = 6;\n\tbytes certData = 7;\n\tbytes keyData = 8;\n\tint64 timeBeginAt = 9;\n\tint64 timeEndAt = 10;\n\trepeated string dnsNames = 11;\n\trepeated string commonNames = 12;\n}",
      "doc": "修改证书"
    },
    {
      "name": "UpdateSSLPolicyRequest",
      "code": "message UpdateSSLPolicyRequest {\n\tint64 sslPolicyId = 1; // 策略ID\n\tbool http2Enabled = 2; // 可选项，是否启用HTTP/2\n\tbool http3Enabled = 11; // 可选项，是否启用HTTP/3（在满足条件的基础上）\n\tstring minVersion = 3; // 支持的最低SSL版本，可选择值： SSL 3.0, TLS 1.0, TLS 1.1, TLS 1.2, TLS 1.3\n\tbytes sslCertsJSON = 4; // 关联的证书信息 @link json:ssl_cert_refs\n\tbytes hstsJSON = 5; // 可选项，HSTS配置 @link json:hsts\n\tint32 clientAuthType = 6; // 可选项，客户端校验类型：0 无需证书，1 需要客户端证书，2 需要任一客户端证书，3 如果客户端上传了证书才校验，4 需要客户端证书而且需要校验\n\tbytes clientCACertsJSON = 7; // 可选项，CA证书内容\n\trepeated string cipherSuites = 8; // 可选项，自定义加密套件\n\tbool cipherSuitesIsOn = 9; // 可选项，是否启用自定义加密套件\n\tbool ocspIsOn = 10; // 可选项，是否启用OCSP\n}",
      "doc": "修改策略"
    },
    {
      "name": "UpdateScriptRequest",
      "code": "message UpdateScriptRequest {\n\tint64 scriptId = 1;\n\tstring name = 2;\n\tstring filename = 3;\n\tstring code = 4;\n\tbool isOn = 5;\n}",
      "doc": "修改脚本"
    },
    {
      "name": "UpdateServerBasicRequest",
      "code": "message UpdateServerBasicRequest {\n\tint64 serverId = 1; // 网站ID\n\tstring name = 2; // 网站名称\n\tstring description = 3; // 可选项，网站描述\n\tint64 nodeClusterId = 4; // 集群ID\n\tbool keepOldConfigs = 7; // 可选项，是否在老节点上保留一段时间配置\n\tbool isOn = 5; // 是否启用\n\trepeated int64 serverGroupIds = 6; // 可选项，网站分组ID列表\n}",
      "doc": "修改网站基本信息"
    },
    {
      "name": "UpdateServerDNSNameRequest",
      "code": "message UpdateServerDNSNameRequest {\n\tint64 serverId = 1; // 网站ID\n\tstring dnsName = 2;\n}",
      "doc": "修改网站的CNAME"
    },
    {
      "name": "UpdateServerDNSRequest",
      "code": "message UpdateServerDNSRequest {\n\tint64 serverId = 1; // 网站ID\n\tbool supportCNAME = 2;\n}",
      "doc": "修改网站的DNS相关设置"
    },
    {
      "name": "UpdateServerGroupHTTPReverseProxyRequest",
      "code": "message UpdateServerGroupHTTPReverseProxyRequest {\n\tint64 serverGroupId = 1;\n\tbytes reverseProxyJSON = 2;\n}",
      "doc": "修改分组的HTTP反向代理设置"
    },
    {
      "name": "UpdateServerGroupIdsRequest",
      "code": "message UpdateServerGroupIdsRequest {\n\tint64 serverId = 1; // 网站ID\n\trepeated int64 serverGroupIds = 2;\n}",
      "doc": "修改网站所在分组"
    },
    {
      "name": "UpdateServerGroupOrdersRequest",
      "code": "message UpdateServerGroupOrdersRequest {\n\trepeated int64 serverGroupIds = 1;\n}",
      "doc": "修改分组排序"
    },
    {
      "name": "UpdateServerGroupRequest",
      "code": "message UpdateServerGroupRequest {\n\tint64 serverGroupId = 1;\n\tstring name = 2;\n}",
      "doc": "修改分组"
    },
    {
      "name": "UpdateServerGroupTCPReverseProxyRequest",
      "code": "message UpdateServerGroupTCPReverseProxyRequest {\n\tint64 serverGroupId = 1;\n\tbytes reverseProxyJSON = 2;\n}",
      "doc": "修改分组的TCP反向代理设置"
    },
    {
      "name": "UpdateServerGroupUDPReverseProxyRequest",
      "code": "message UpdateServerGroupUDPReverseProxyRequest {\n\tint64 serverGroupId = 1;\n\tbytes reverseProxyJSON = 2;\n}",
      "doc": "修改分组的UDP反向代理设置"
    },
    {
      "name": "UpdateServerHTTPRequest",
      "code": "message UpdateServerHTTPRequest {\n\tint64 serverId = 1; // 网站ID\n\tbytes httpJSON = 2; // HTTP协议设置，当type为httpProxy或者httpWeb时填写 @link json:http_protocol\n}",
      "doc": "修改网站的HTTP等设置"
    },
    {
      "name": "UpdateServerHTTPSRequest",
      "code": "message UpdateServerHTTPSRequest {\n\tint64 serverId = 1; // 网站ID\n\tbytes httpsJSON = 2; // HTTPS协议设置，当type为httpProxy或者httpWeb时填写 @link json:https_protocol\n}",
      "doc": ""
    },
    {
      "name": "UpdateServerIsOnRequest",
      "code": "message UpdateServerIsOnRequest {\n\tint64 serverId = 1; // 网站ID\n\tbool isOn = 2;\n}",
      "doc": "修改网站启是否启用"
    },
    {
      "name": "UpdateServerNameRequest",
      "code": "message UpdateServerNameRequest {\n\tint64 serverId = 1; // 网站ID\n\tstring name = 2; // 网站名称\n}",
      "doc": "修改网站名称"
    },
    {
      "name": "UpdateServerNamesAuditingRequest",
      "code": "message UpdateServerNamesAuditingRequest {\n\tint64 serverId = 1; // 网站ID\n\tServerNameAuditingResult auditingResult = 2;\n}",
      "doc": "审核网站的域名设置"
    },
    {
      "name": "UpdateServerNamesRequest",
      "code": "message UpdateServerNamesRequest {\n\tint64 serverId = 1; // 网站ID\n\tbytes serverNamesJSON = 2; // 域名列表 @link json:server_names\n}",
      "doc": "修改网站的域名设置"
    },
    {
      "name": "UpdateServerReverseProxyRequest",
      "code": "message UpdateServerReverseProxyRequest {\n\tint64 serverId = 1; // 网站ID\n\tbytes reverseProxyJSON = 2; // 反向代理（包含源站）配置引用，此项可以在创建网站后再设置 @link json:reverse_proxy_ref\n}",
      "doc": "修改网站的反向代理设置"
    },
    {
      "name": "UpdateServerTCPRequest",
      "code": "message UpdateServerTCPRequest {\n\tint64 serverId = 1; // 网站ID\n\tbytes tcpJSON = 2; // TCP协议设置，当type为tcpProxy时填写 @link json:tcp_protocol\n}",
      "doc": ""
    },
    {
      "name": "UpdateServerTLSRequest",
      "code": "message UpdateServerTLSRequest {\n\tint64 serverId = 1; // 网站ID\n\tbytes tlsJSON = 2; // TLS协议设置，当type为tcpProxy时填写 @link json:tls_protocol\n}",
      "doc": ""
    },
    {
      "name": "UpdateServerTrafficLimitRequest",
      "code": "message UpdateServerTrafficLimitRequest {\n\tint64 serverId = 1; // 网站ID\n\tbytes trafficLimitJSON = 2;\n}",
      "doc": "设置流量限制"
    },
    {
      "name": "UpdateServerUAMRequest",
      "code": "message UpdateServerUAMRequest {\n\tint64 serverId = 1; // 网站ID\n\tbytes uamJSON = 2;\n}",
      "doc": "修改网站UAM（5秒盾）设置"
    },
    {
      "name": "UpdateServerUDPRequest",
      "code": "message UpdateServerUDPRequest {\n\tint64 serverId = 1; // 网站ID\n\tbytes udpJSON = 2; // UDP协议设置，当type为udpProxy时填写 @link json:udp_protocol\n}",
      "doc": ""
    },
    {
      "name": "UpdateServerUnixRequest",
      "code": "message UpdateServerUnixRequest {\n\tint64 serverId = 1; // 网站ID\n\tbytes unixJSON = 2;\n}",
      "doc": ""
    },
    {
      "name": "UpdateServerUserPlanRequest",
      "code": "message UpdateServerUserPlanRequest {\n\tint64 serverId = 1; // 网站ID\n\tint64 userPlanId = 2;\n}",
      "doc": "修改网站套餐"
    },
    {
      "name": "UpdateServerUserRequest",
      "code": "message UpdateServerUserRequest {\n\tint64 serverId = 1; // 网站ID\n\tint64 userId = 2; // 用户ID\n}",
      "doc": "修改网站所属用户"
    },
    {
      "name": "UpdateServerWebRequest",
      "code": "message UpdateServerWebRequest {\n\tint64 serverId = 1; // 网站ID\n\tint64 webId = 2;\n}",
      "doc": ""
    },
    {
      "name": "UpdateSysSettingRequest",
      "code": "message UpdateSysSettingRequest {\n\tstring code = 1;\n\tbytes valueJSON = 2;\n}",
      "doc": "更改配置"
    },
    {
      "name": "UpdateTrafficPackagePeriodRequest",
      "code": "message UpdateTrafficPackagePeriodRequest {\n\tint64 trafficPackagePeriodId = 1;\n\tbool isOn = 2;\n}",
      "doc": "修改有效期"
    },
    {
      "name": "UpdateTrafficPackagePriceRequest",
      "code": "message UpdateTrafficPackagePriceRequest {\n\tint64 trafficPackageId = 1;\n\tint64 nodeRegionId = 2;\n\tint64 trafficPackagePeriodId = 3;\n\tdouble price = 4;\n}",
      "doc": "设置流量包价格"
    },
    {
      "name": "UpdateTrafficPackageRequest",
      "code": "message UpdateTrafficPackageRequest {\n\tint64 trafficPackageId = 1;\n\tbool isOn = 2;\n}",
      "doc": "修改流量包"
    },
    {
      "name": "UpdateUserADInstanceObjectsRequest",
      "code": "message UpdateUserADInstanceObjectsRequest {\n\tint64 userADInstanceId = 1;\n\trepeated string objectCodes = 2;\n}",
      "doc": "修改实例防护对象"
    },
    {
      "name": "UpdateUserAccessKeyIsOnRequest",
      "code": "message UpdateUserAccessKeyIsOnRequest {\n\tint64 userAccessKeyId = 1;\n\tbool isOn = 2;\n}",
      "doc": "设置是否启用AccessKey"
    },
    {
      "name": "UpdateUserAccountRequest",
      "code": "message UpdateUserAccountRequest {\n\tint64 userAccountId = 1;\n\tdouble delta = 2;\n\tstring eventType = 3;\n\tstring description = 4;\n\tbytes paramsJSON = 5;\n}",
      "doc": "修改用户账户"
    },
    {
      "name": "UpdateUserFeaturesRequest",
      "code": "message UpdateUserFeaturesRequest {\n\tint64 userId = 1;\n\trepeated string featureCodes = 2;\n}",
      "doc": "设置单个用户能使用的功能"
    },
    {
      "name": "UpdateUserIdentityRequest",
      "code": "message UpdateUserIdentityRequest {\n\tint64 userIdentityId = 1;\n\tstring type = 2;\n\tstring realName = 3;\n\tstring number = 4;\n\trepeated int64 fileIds = 5;\n}",
      "doc": "修改实名认证信息"
    },
    {
      "name": "UpdateUserInfoRequest",
      "code": "message UpdateUserInfoRequest {\n\tint64 userId = 1;\n\tstring fullname = 2;\n\tstring mobile = 3;\n\tstring email = 4;\n}",
      "doc": "修改用户基本信息"
    },
    {
      "name": "UpdateUserLoginRequest",
      "code": "message UpdateUserLoginRequest {\n\tint64 userId = 1;\n\tstring username = 2;\n\tstring password = 3;\n}",
      "doc": "修改用户登录信息"
    },
    {
      "name": "UpdateUserNodeRequest",
      "code": "message UpdateUserNodeRequest {\n\tint64 userNodeId = 1;\n\tstring name = 2;\n\tstring description = 3;\n\tbytes httpJSON = 4;\n\tbytes httpsJSON = 5;\n\tbytes accessAddrsJSON = 6;\n\tbool isOn = 7;\n}",
      "doc": "修改用户节点"
    },
    {
      "name": "UpdateUserNodeStatusRequest",
      "code": "message UpdateUserNodeStatusRequest {\n\tint64 userNodeId = 1;\n\tbytes statusJSON = 2;\n}",
      "doc": "更新节点状态"
    },
    {
      "name": "UpdateUserPlanRequest",
      "code": "message UpdateUserPlanRequest {\n\tint64 userPlanId = 1;\n\tint64 planId = 2;\n\tstring dayTo = 3;\n\tbool isOn = 4;\n\tstring name = 5;\n}",
      "doc": "修改已购套餐"
    },
    {
      "name": "UpdateUserPricePeriodRequest",
      "code": "message UpdateUserPricePeriodRequest {\n\tint64 userId = 1;\n\tstring pricePeriod = 2;\n}",
      "doc": "修改用户计费周期"
    },
    {
      "name": "UpdateUserPriceTypeRequest",
      "code": "message UpdateUserPriceTypeRequest {\n\tint64 userId = 1;\n\tstring priceType = 2;\n}",
      "doc": "修改用户计费方式"
    },
    {
      "name": "UpdateUserRequest",
      "code": "message UpdateUserRequest {\n\tint64 userId = 1;\n\tstring username = 2;\n\tstring password = 3;\n\tstring fullname = 4;\n\tstring mobile = 5;\n\tstring tel = 6;\n\tstring email = 7;\n\tstring remark = 8;\n\tbool isOn = 9;\n\tint64 nodeClusterId = 10;\n\tstring bandwidthAlgo = 11;\n}",
      "doc": "修改用户"
    },
    {
      "name": "UpdateUserTicketCategoryRequest",
      "code": "message UpdateUserTicketCategoryRequest {\n\tint64 userTicketCategoryId = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n}",
      "doc": "修改分类"
    },
    {
      "name": "UpdateUserTicketRequest",
      "code": "message UpdateUserTicketRequest {\n\tint64 userTicketId = 1;\n\tint64 userTicketCategoryId = 2;\n\tstring subject = 3;\n\tstring body = 4;\n}",
      "doc": "修改工单"
    },
    {
      "name": "UpgradeNodeRequest",
      "code": "message UpgradeNodeRequest {\n\tint64 nodeId = 1;\n}",
      "doc": "升级节点"
    },
    {
      "name": "UploadAPINodeFileRequest",
      "code": "message UploadAPINodeFileRequest {\n\tstring filename = 1; // 文件名\n\tstring sum = 2; // 整个文件的SUM值\n\tbytes chunkData = 3; // 片段数据\n\tbool isFirstChunk = 4; // 是否为第一个片段\n\tbool isLastChunk = 5; // 是否为最后一个片段\n}",
      "doc": "上传新版API节点文件"
    },
    {
      "name": "UploadAPINodeFileResponse",
      "code": "message UploadAPINodeFileResponse {\n\n}",
      "doc": ""
    },
    {
      "name": "UploadDeployFileToAPINodeRequest",
      "code": "message UploadDeployFileToAPINodeRequest {\n\tstring filename = 1; // 文件名\n\tstring sum = 2; // 整个文件的SUM值\n\tbytes chunkData = 3; // 片段数据\n\tbool isFirstChunk = 4; // 是否为第一个片段\n\tbool isLastChunk = 5; // 是否为最后一个片段\n}",
      "doc": "上传节点安装文件"
    },
    {
      "name": "UploadMetricStatsRequest",
      "code": "message UploadMetricStatsRequest {\n\tint64 serverId = 1;\n\tstring time = 2;\n\tint64 count = 3;\n\tfloat total = 4;\n\tint32 version = 5;\n\tint64 itemId = 6;\n\trepeated UploadingMetricStat metricStats = 7;\n}",
      "doc": "上传统计数据"
    },
    {
      "name": "UploadNSRecordHourlyStatsRequest",
      "code": "message UploadNSRecordHourlyStatsRequest {\n\trepeated NSRecordHourlyStat stats = 1;\n}",
      "doc": "上传统计"
    },
    {
      "name": "UploadServerBandwidthStatsRequest",
      "code": "message UploadServerBandwidthStatsRequest {\n\trepeated ServerBandwidthStat serverBandwidthStats = 1;\n}",
      "doc": "上传带宽统计"
    },
    {
      "name": "UploadServerDailyStatsRequest",
      "code": "message UploadServerDailyStatsRequest {\n\trepeated ServerDailyStat stats = 1;\n\trepeated DomainStat domainStats = 2;\n\n\n\tmessage DomainStat {\n\t\tint64 serverId = 1;\n\t\tstring domain = 2;\n\t\tint64 bytes = 3;\n\t\tint64 cachedBytes = 4;\n\t\tint64 countRequests = 5;\n\t\tint64 countCachedRequests = 6;\n\t\tint64 countAttackRequests = 8;\n\t\tint64 attackBytes = 9;\n\t\tint64 createdAt = 7;\n\t}\n}",
      "doc": "上传统计"
    },
    {
      "name": "UploadServerHTTPRequestStatRequest",
      "code": "message UploadServerHTTPRequestStatRequest {\n\tstring month = 1;\n\tstring day = 2;\n\trepeated RegionCity regionCities = 3;\n\trepeated RegionProvider regionProviders = 4;\n\trepeated System systems = 5;\n\trepeated Browser browsers = 6;\n\trepeated HTTPFirewallRuleGroup httpFirewallRuleGroups = 7;\n\n\n\tmessage RegionCity {\n\t\tint64 serverId = 1; // 网站ID\n\t\tint64 countRequests = 5;\n\t\tint64 bytes = 6;\n\t\tint64 countAttackRequests = 7;\n\t\tint64 attackBytes = 8;\n\t\tint64 countryId = 9;\n\t\tint64 provinceId = 10;\n\t\tint64 cityId = 11;\n\t}\n\n\n\tmessage RegionProvider {\n\t\tint64 serverId = 1; // 网站ID\n\t\tint64 count = 3;\n\t\tint64 providerId = 4;\n\t}\n\n\n\tmessage System {\n\t\tint64 serverId = 1; // 网站ID\n\t\tstring name = 2;\n\t\tstring version = 3;\n\t\tint64 count = 4;\n\t}\n\n\n\tmessage Browser {\n\t\tint64 serverId = 1; // 网站ID\n\t\tstring name = 2;\n\t\tstring version = 3;\n\t\tint64 count = 4;\n\t}\n\n\n\tmessage HTTPFirewallRuleGroup {\n\t\tint64 serverId = 1; // 网站ID\n\t\tint64 httpFirewallRuleGroupId = 2;\n\t\tstring action = 3;\n\t\tint64 count = 4;\n\t}\n}",
      "doc": "上传HTTP请求待统计数据"
    },
    {
      "name": "UploadingMetricStat",
      "code": "message UploadingMetricStat {\n\tint64 id = 1;\n\tstring hash = 2;\n\trepeated string keys = 3;\n\tfloat value = 4;\n}",
      "doc": "需要上传的统计数据"
    },
    {
      "name": "User",
      "code": "message User {\n\tint64 id = 1; // 用户ID\n\tstring username = 2; // 用户名\n\tstring fullname = 3; // 全称\n\tstring mobile = 4;\n\tstring tel = 5;\n\tstring email = 6;\n\tstring verifiedEmail = 20;\n\tstring remark = 7;\n\tbool isOn = 8;\n\tint64 createdAt = 9;\n\tstring registeredIP = 12;\n\tbool isVerified = 13;\n\tbool isRejected = 14;\n\tstring rejectReason = 15;\n\tbool isDeleted = 16;\n\tbool isIndividualIdentified = 17;\n\tbool isEnterpriseIdentified = 18;\n\tstring bandwidthAlgo = 21; // 带宽算法\n\tstring lang = 22; // 语言代号\n\n\tLogin otpLogin = 19; // OTP认证\n\n\tNodeCluster nodeCluster = 10;\n\trepeated UserFeature features = 11;\n}",
      "doc": ""
    },
    {
      "name": "UserADInstance",
      "code": "message UserADInstance {\n\tint64 id = 1;\n\tint64 userId = 2;\n\tint64 adPackageInstanceId = 3;\n\tint64 adPackagePeriodId = 4;\n\tint32 adPackagePeriodCount = 5;\n\tstring adPackagePeriodUnit = 6;\n\tstring dayFrom = 7; // 开始日期，格式：YYYYMMDD\n\tstring dayTo = 8; // 结束日期，格式：YYYYMMDD\n\tint64 createdAt = 9;\n\tint32 maxObjects = 10;\n\trepeated string objectCodes = 11;\n\n\tADPackageInstance adPackageInstance = 30;\n\tUser user = 31;\n\tbool canDelete = 32;\n\tbool isAvailable = 33; // 当前是否在生效中\n\tint32 countObjects = 34; // 防护对象数量\n\tbytes objectsJSON = 35; // 对象JSON\n}",
      "doc": "高防实例"
    },
    {
      "name": "UserAccessKey",
      "code": "message UserAccessKey {\n\tint64 id = 1;\n\tint64 userId = 2;\n\tint64 subUserId = 3;\n\tbool isOn = 4;\n\tstring uniqueId = 5;\n\tstring secret = 6;\n\tstring description = 7;\n\tint64 accessedAt = 8;\n}",
      "doc": "用户AccessKey"
    },
    {
      "name": "UserAccount",
      "code": "message UserAccount {\n\tint64 id = 1;\n\tint64 userId = 2;\n\tdouble total = 3;\n\tdouble totalFrozen = 4;\n\n\tUser user = 30;\n}",
      "doc": ""
    },
    {
      "name": "UserAccountDailyStat",
      "code": "message UserAccountDailyStat {\n\tint64 id = 1;\n\tstring day = 2;\n\tstring month = 3;\n\tfloat income = 4;\n\tfloat expense = 5;\n}",
      "doc": ""
    },
    {
      "name": "UserAccountLog",
      "code": "message UserAccountLog {\n\tint64 id = 1;\n\tint64 userId = 2;\n\tint64 userAccountId = 3;\n\tdouble delta = 4;\n\tdouble deltaFrozen = 5;\n\tdouble total = 6;\n\tdouble totalFrozen = 7;\n\tstring eventType = 8;\n\tstring description = 9;\n\tint64 createdAt = 10;\n\tbytes paramsJSON = 11;\n\n\tUser user = 30;\n\tUserAccount userAccount = 31;\n}",
      "doc": ""
    },
    {
      "name": "UserBandwidthStat",
      "code": "message UserBandwidthStat {\n\tint64 id = 1;\n\tint64 userId = 2;\n\tstring day = 3;\n\tstring timeAt = 4;\n\tint64 bytes = 5; // 峰值带宽字节\n}",
      "doc": "带宽统计数据"
    },
    {
      "name": "UserBill",
      "code": "message UserBill {\n\tint64 id = 1;\n\tUser user = 2;\n\tstring type = 3;\n\tstring typeName = 4;\n\tstring description = 5;\n\tdouble amount = 6;\n\tstring month = 7;\n\tbool isPaid = 8;\n\tint64 paidAt = 9;\n\tstring code = 10;\n\tbool canPay = 11;\n\tstring dayFrom = 12;\n\tstring dayTo = 13;\n\tstring pricePeriod = 14;\n\tbool isOverdue = 15; // 是否已逾期\n}",
      "doc": ""
    },
    {
      "name": "UserEmailVerification",
      "code": "message UserEmailVerification {\n\tint64 id = 1;\n\tstring email = 2; // Email\n\tint64 userId = 3; // 用户ID\n\tstring code = 4; // 代号\n\tint64 createdAt = 5; // 创建时间\n\tbool isSent = 6; // 已发送\n\tbool isVerified = 7; // 已激活\n\tint64 expiresAt = 8; // 过期时间，动态计算而来\n}",
      "doc": "电子邮箱认证"
    },
    {
      "name": "UserFeature",
      "code": "message UserFeature {\n\tstring code = 1;\n\tstring name = 2;\n\tstring description = 3;\n}",
      "doc": ""
    },
    {
      "name": "UserIdentity",
      "code": "message UserIdentity {\n\tint64 id = 1;\n\tstring orgType = 2;\n\tstring type = 3;\n\tstring realName = 4;\n\tstring number = 5;\n\trepeated int64 fileIds = 6;\n\tstring status = 7;\n\tint64 createdAt = 8;\n\tint64 updatedAt = 9;\n\tint64 submittedAt = 10;\n\tint64 rejectedAt = 11;\n\tint64 verifiedAt = 12;\n\tstring rejectReason = 13;\n}",
      "doc": ""
    },
    {
      "name": "UserNode",
      "code": "message UserNode {\n\tint64 id = 1;\n\tbool isOn = 2;\n\tstring uniqueId = 3;\n\tstring secret = 4;\n\tstring name = 5;\n\tstring description = 6;\n\tbytes httpJSON = 7;\n\tbytes httpsJSON = 8;\n\tbytes accessAddrsJSON = 9;\n\trepeated string accessAddrs = 10;\n\tbytes statusJSON = 11;\n}",
      "doc": ""
    },
    {
      "name": "UserOrder",
      "code": "message UserOrder {\n\tint64 userId = 2;\n\tstring code = 3;\n\tstring type = 4;\n\tint64 orderMethodId = 5;\n\tstring status = 6;\n\tfloat amount = 7;\n\tbytes paramsJSON = 8;\n\tint64 createdAt = 9;\n\tint64 cancelledAt = 10;\n\tint64 finishedAt = 11;\n\tbool isExpired = 12;\n\n\tUser user = 30;\n\tOrderMethod orderMethod = 31;\n\n\tbool canPay = 32; // 是否可以支付\n\tstring payURL = 33; // 构造后的支付URL\n}",
      "doc": "用户订单"
    },
    {
      "name": "UserPlan",
      "code": "message UserPlan {\n\tint64 id = 1; // 套餐ID\n\tint64 userId = 2; // 用户ID\n\tint64 planId = 3; // 套餐定义ID\n\tbool isOn = 4; // 是否启用\n\tstring dayTo = 5; // 到期日期Y-m-d\n\tstring name = 6; // 自定义备注名称\n\n\tUser user = 30; // 用户信息\n\tPlan plan = 31; // 套餐定义信息\n\trepeated Server servers = 33; // 绑定的网站列表\n\n\tServer server = 32 [deprecated = true]; // 绑定的网站，已过期，使用 servers 代替\n}",
      "doc": ""
    },
    {
      "name": "UserTicket",
      "code": "message UserTicket {\n\tint64 id = 1;\n\tint64 categoryId = 2;\n\tint64 userId = 3;\n\tstring subject = 4;\n\tstring body = 5;\n\tstring status = 6;\n\tint64 createdAt = 7;\n\tint64 lastLogAt = 8;\n\n\tUserTicketCategory userTicketCategory = 30;\n\tUser user = 31;\n\tUserTicketLog latestUserTicketLog = 32;\n}",
      "doc": "工单"
    },
    {
      "name": "UserTicketCategory",
      "code": "message UserTicketCategory {\n\tint64 id = 1;\n\tstring name = 2;\n\tbool isOn = 3;\n}",
      "doc": "工单分类"
    },
    {
      "name": "UserTicketLog",
      "code": "message UserTicketLog {\n\tint64 id = 1;\n\tint64 adminId = 2;\n\tint64 userId = 3;\n\tint64 ticketId = 4;\n\tstring status = 5;\n\tstring comment = 6;\n\tint64 createdAt = 7;\n\tbool isReadonly = 8;\n\n\tAdmin admin = 30;\n\tUser user = 31;\n}",
      "doc": "工单日志"
    },
    {
      "name": "UserTrafficBill",
      "code": "message UserTrafficBill {\n\tint64 id = 1;\n\tint64 billId = 2;\n\tint64 nodeRegionId = 3;\n\tdouble amount = 4;\n\tdouble bandwidthMB = 5;\n\tint32 bandwidthPercentile = 6;\n\tdouble trafficGB = 7;\n\tdouble trafficPackageGB = 8;\n\trepeated int64 userTrafficPackageIds = 9;\n\tdouble pricePerUnit = 10;\n\tstring priceType = 11;\n\n\tNodeRegion nodeRegion = 30;\n}",
      "doc": "用户流量带宽子账单"
    },
    {
      "name": "UserTrafficPackage",
      "code": "message UserTrafficPackage {\n\tint64 id = 1;\n\tint64 userId = 2;\n\tint64 trafficPackageId = 3;\n\tint64 totalBytes = 4;\n\tint64 usedBytes = 5;\n\tint64 nodeRegionId = 6;\n\tint64 trafficPackagePeriodId = 7;\n\tint32 trafficPackagePeriodCount = 8;\n\tstring trafficPackagePeriodUnit = 9;\n\tstring dayFrom = 10;\n\tstring dayTo = 11;\n\tint64 createdAt = 12;\n\n\tTrafficPackage trafficPackage = 30;\n\tNodeRegion nodeRegion = 31;\n\tUser user = 32;\n\tbool canDelete = 33;\n}",
      "doc": "用户流量包"
    },
    {
      "name": "ValidateHTTPCacheTaskKeysRequest",
      "code": "message ValidateHTTPCacheTaskKeysRequest {\n\trepeated string keys = 1;\n}",
      "doc": "校验缓存Key"
    },
    {
      "name": "ValidateHTTPCacheTaskKeysResponse",
      "code": "message ValidateHTTPCacheTaskKeysResponse {\n\trepeated FailKey failKeys = 1;\n\n\n\tmessage FailKey {\n\t\tstring key = 1;\n\t\tstring reasonCode = 2;\n\t}\n}",
      "doc": ""
    },
    {
      "name": "ValidateUserVerifyCodeRequest",
      "code": "message ValidateUserVerifyCodeRequest {\n\tstring type = 1; // 类型：重置密码（resetPassword）\n\tstring email = 2; // 已验证邮箱地址\n\tstring mobile = 3; // 已验证手机号\n\tstring code = 4; // 验证码\n\n\t// 找回密码\n\tstring newPassword = 10; // 新密码\n}",
      "doc": "校验验证码"
    },
    {
      "name": "ValidateUserVerifyCodeResponse",
      "code": "message ValidateUserVerifyCodeResponse {\n\tbool isOk = 1; // 是否成功\n\tstring errorCode = 2; // 错误代号\n\tstring errorMessage = 3; // 错误消息\n}",
      "doc": ""
    },
    {
      "name": "VerifyNSDomainRequest",
      "code": "message VerifyNSDomainRequest {\n\tint64 nsDomainId = 1;\n}",
      "doc": "验证域名信息"
    },
    {
      "name": "VerifyNSDomainResponse",
      "code": "message VerifyNSDomainResponse {\n\tbool isOk = 1; // 是否成功\n\tstring errorCode = 2; // 错误代码\n\tstring errorMessage = 3; // 错误消息\n\trepeated string currentTXTValues = 4; // 当前的TXT值\n\trepeated string currentNSValues = 5; // 当前的NS记录值\n}",
      "doc": ""
    },
    {
      "name": "VerifyUserEmailRequest",
      "code": "message VerifyUserEmailRequest {\n\tstring code = 1; // 激活码\n}",
      "doc": "认证邮箱"
    },
    {
      "name": "VerifyUserEmailResponse",
      "code": "message VerifyUserEmailResponse {\n\tint64 userId = 1; // 邮箱对应的用户ID\n\tstring email = 2; // 邮箱地址\n\tstring errorCode = 3; // 错误代号，如果为空，说明没有错误\n\tstring errorMessage = 4; // 错误信息\n}",
      "doc": ""
    },
    {
      "name": "VerifyUserIdentityRequest",
      "code": "message VerifyUserIdentityRequest {\n\tint64 userIdentityId = 1;\n}",
      "doc": "通过用户实名认证信息"
    },
    {
      "name": "VerifyUserRequest",
      "code": "message VerifyUserRequest {\n\tint64 userId = 1;\n\tbool isRejected = 2;\n\tstring rejectReason = 3;\n}",
      "doc": "审核用户"
    },
    {
      "name": "WriteHTTPAccessLogPolicyRequest",
      "code": "message WriteHTTPAccessLogPolicyRequest {\n\tint64 httpAccessLogPolicyId = 1;\n\tHTTPAccessLog httpAccessLog = 2;\n}",
      "doc": "测试写入某个访问日志策略"
    },
    {
      "name": "WriteLoginSessionValueRequest",
      "code": "message WriteLoginSessionValueRequest {\n\tstring sid = 1;\n\tstring key = 2;\n\tstring value = 3;\n}",
      "doc": "写入SESSION数据"
    }
  ],
  "links": [
    {
      "name": "json:hsts",
      "content": "# HSTS\n\n## 定义\n~~~json\n{\n  \"isOn\": \"是否启用\",\n  \"maxAge\": \"最大有效期，单位秒\",\n  \"includeSubDomains\": \"可选项，是否包含子域名\",\n  \"preload\": \"可选项，是否预加载\",\n  \"domains\": [\"可选项，支持的域名1\", \"可选项，支持的域名2\" ...]\n}\n~~~\n\n其中：\n* `maxAge` 可以填写一天（86400秒）或者更长时间\n* 如果不填写 `domains` 则支持所有域名\n\n## 示例\n### 不限制任何域名\n~~~json\n{\n  \"isOn\": true,\n  \"maxAge\": 86400,\n  \"includeSubDomains\":false, \n  \"preload\":false,\n  \"domains\":[]\n}\n~~~\n\n### 限制域名\n~~~json\n{\n  \"isOn\": true,\n  \"maxAge\": 86400,\n  \"includeSubDomains\":false, \n  \"preload\":false,\n  \"domains\":[\"example.com\", \"www.example.com\"]\n}\n~~~"
    },
    {
      "name": "json:http_access_log_ref",
      "content": "# 访问日志引用\n## 定义\n~~~json\n{\n  \"isPrior\": \"是否覆盖父级应用\",\n  \"isOn\": \"是否启用配置\",\n  \"fields\": [\"字段1\", \"字段2\", ...] // 可以留空\n  \"status1\": \"是否启用状态1xx\",\n  \"status2\": \"是否启用状态2xx\",\n  \"status3\": \"是否启用状态3xx\",\n  \"status4\": \"是否启用状态4xx\",\n  \"status5\": \"是否启用状态5xx\",\n  \"enableClientClosed\": \"是否记录客户端关闭事件\",\n  \"firewallOnly\": \"是否只记录防火墙（WAF）相关日志\"\n}\n~~~\n\n### 字段值\n* `1` - 请求Header\n* `2` - 响应Header\n* `3` - 请求URL参数\n* `4` - Cookie\n* `5` - 扩展信息\n* `6` - Referer\n* `7` - UserAgent\n* `8` - 请求Body\n* `9` - 响应Body（目前不支持）\n\n## 示例\n~~~json\n{\n  \"isPrior\": true,\n  \"isOn\": true,\n  \"fields\": [],\n  \"status1\": true,\n  \"status2\": true,\n  \"status3\": true,\n  \"status4\": true,\n  \"status5\": true,\n  \"enableClientClosed\": true,\n  \"firewallOnly\": true\n}\n~~~"
    },
    {
      "name": "json:http_cache_config",
      "content": "# HTTP缓存配置\n## 定义\n~~~json\n{\n  \"isPrior\": \"是否覆盖上级配置\",\n  \"isOn\": \"是否启用配置\",\n  \"addStatusHeader\": \"是否增加命中状态Header（X-Cache）\",\n  \"addAgeHeader\": \"是否增加Age Header\",\n  \"enableCacheControlMaxAge\": \"是否支持Cache-Control: max-age=...\",\n  \"disablePolicyRefs\": \"是否停用策略中定义的条件\",\n  \"purgeIsOn\": \"是否允许使用Purge方法清理\",\n  \"purgeKey\": \"Purge时使用的X-Edge-Purge-Key\",\n  \"stale\": \"陈旧缓存使用策略\",\n  \"cacheRefs\": [\"缓存条件1\", \"缓存条件2\", ...]\n}\n~~~\n其中：\n* `缓存条件` - 参考 {json:http_cache_ref}\n\n## 示例\n### 无缓存条件\n~~~json\n{\n  \"isPrior\": true,\n  \"isOn\": true,\n  \"addStatusHeader\": true,\n  \"addAgeHeader\": true,\n  \"enableCacheControlMaxAge\": true,\n  \"disablePolicyRefs\": false,\n  \"purgeIsOn\": false,\n  \"purgeKey\": \"\",\n  \"stale\": null,\n  \"cacheRefs\": []\n}\n~~~\n\n### 加入缓存条件\n~~~json\n{\n  \"isPrior\": true,\n  \"isOn\": true,\n  \"addStatusHeader\": true,\n  \"addAgeHeader\": true,\n  \"enableCacheControlMaxAge\": true,\n  \"disablePolicyRefs\": false,\n  \"purgeIsOn\": false,\n  \"purgeKey\": \"\",\n  \"stale\": null,\n  \"cacheRefs\": [\n    {\n\t  \"id\": 0,\n\t  \"isOn\": true,\n\t  \"key\": \"${scheme}://${host}${requestPath}${isArgs}${args}\",\n\t  \"life\": {\"count\": 2, \"unit\": \"hour\"},\n\t  \"status\": [200],\n      \"maxSize\": {\"count\": 32, \"unit\": \"mb\"},\n      \"minSize\": {\"count\": 0, \"unit\": \"kb\"},\n      \"skipCacheControlValues\": [\"private\", \"no-cache\", \"no-store\"],\n      \"skipSetCookie\": true,\n      \"enableRequestCachePragma\": false,\n      \"conds\": {\n        \"isOn\": true,\n        \"connector\": \"or\",\n        \"groups\": [\n          {\n            \"isOn\": true,\n            \"connector\": \"and\",\n            \"conds\": [\n              {\n                \"type\": \"url-extension\",\n                \"isRequest\": true,\n                \"param\": \"${requestPathLowerExtension}\",\n                \"operator\": \"in\",\n                \"value\": \"[\\\".css\\\",\\\".png\\\",\\\".js\\\",\\\".woff2\\\"]\",\n                \"isReverse\": false,\n                \"isCaseInsensitive\": false,\n                \"typeName\": \"URL扩展名\"\n              }\n            ],\n            \"isReverse\": false,\n            \"description\": \"\"\n          }\n        ]\n      },\n      \"allowChunkedEncoding\": true,\n      \"allowPartialContent\": false,\n      \"isReverse\": false,\n      \"methods\": []\n\t}\n  ]\n}\n~~~\n"
    },
    {
      "name": "json:http_cache_ref",
      "content": "# 缓存条件设置\n## 定义\n~~~json\n{\n  \"isOn\": \"是否启用配置\",\n  \"key\": \"每个缓存的Key规则，里面可以有变量\",\n  \"life\": \"缓存时长\",\n  \"expiresTime\": \"客户端过期时间\",\n  \"status\": [\"缓存的状态码1\", \"缓存的状态码2\", ...],\n  \"minSize\": \"能够缓存的最小尺寸\",\n  \"maxSize\": \"能够缓存的最大尺寸\",\n  \"methods\": [\"支持的请求方法1\", \"支持的请求方法2\", ...],\n  \"skipCacheControlValues\": \"可以跳过的响应的Cache-Control值\",\n  \"skipSetCookie\": \"是否跳过响应的Set-Cookie Header\",\n  \"enableRequestCachePragma\": \"是否支持客户端的Pragma: no-cache\",\n  \"allowChunkedEncoding\": \"是否允许分片内容\",\n  \"allowPartialContent\": \"支持分段内容缓存\",\n  \"conds\": \"请求条件\",\n  \"isReverse\": \"是否为反向条件，反向条件的不缓存\"\n}\n~~~\n\n## 示例\n~~~json\n{\n\t\"isOn\": true,\n\t\"key\": \"${scheme}://${host}${requestURI}\",\n\t\"life\": {\n\t\t\"count\": 1,\n\t\t\"unit\": \"day\"\n\t},\n\t\"expiresTime\": {\n\t\t\"isPrior\": true,\n\t\t\"isOn\": true,\n\t\t\"overwrite\": true,\n\t\t\"autoCalculate\": false,\n\t\t\"duration\": {\n\t\t\t\"count\": 1,\n\t\t\t\"unit\": \"day\"\n\t\t}\n\t},\n\t\"status\": [\n\t\t200\n\t],\n\t\"minSize\": {\n\t\t\"count\": 0,\n\t\t\"unit\": \"kb\"\n\t},\n\t\"maxSize\": {\n\t\t\"count\": 32,\n\t\t\"unit\": \"mb\"\n\t},\n\t\"methods\": [],\n\t\"skipCacheControlValues\": [\n\t\t\"private\",\n\t\t\"no-cache\",\n\t\t\"no-store\"\n\t],\n\t\"skipSetCookie\": true,\n\t\"enableRequestCachePragma\": false,\n\t\"allowChunkedEncoding\": true,\n\t\"allowPartialContent\": false,\n\t\"conds\": {\n\t\t\"isOn\": true,\n\t\t\"connector\": \"or\",\n\t\t\"groups\": [\n\t\t\t{\n\t\t\t\t\"isOn\": true,\n\t\t\t\t\"connector\": \"and\",\n\t\t\t\t\"conds\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"url-extension\",\n\t\t\t\t\t\t\"isRequest\": true,\n\t\t\t\t\t\t\"param\": \"${requestPathLowerExtension}\",\n\t\t\t\t\t\t\"operator\": \"in\",\n\t\t\t\t\t\t\"value\": \"[\\\".css\\\",\\\".png\\\",\\\".js\\\",\\\".woff2\\\"]\",\n\t\t\t\t\t\t\"isReverse\": false,\n\t\t\t\t\t\t\"isCaseInsensitive\": false,\n\t\t\t\t\t\t\"typeName\": \"URL扩展名\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"isReverse\": false,\n\t\t\t\t\"description\": \"\"\n\t\t\t}\n\t\t]\n\t},\n\t\"cachePolicy\": null,\n\t\"isReverse\": false,\n\t\"id\": 1\n}\n~~~"
    },
    {
      "name": "json:http_firewall_ref",
      "content": "# HTTP防火墙（即WAF）引用\n## 定义\n~~~json\n{\n  \"isPrior\": \"是否覆盖上级配置\",\n  \"isOn\": \"是否启用配置\",\n  \"firewallPolicyId\": \"WAF策略ID\"\n}\n~~~\n\n## 示例\n~~~json\n{\n  \"isPrior\": true,\n  \"isOn\": true,\n  \"firewallPolicyId\": 123\n}\n~~~"
    },
    {
      "name": "json:http_protocol",
      "content": "# HTTP协议配置\n\n## 定义\n~~~json\n{\n\t\"isOn\": \"是否启用\",\n  \t\"listen\": [\n      {\n\t\t\"protocol\": \"协议\",\n\t\t\"host\": \"主机地址，通常为空\",\n\t\t\"portRange\": \"端口或者端口范围\"\n\t  },\n\t  ...\n\t]\n}\n~~~\n\n## 示例\n\n### 监听80端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"http\",\n      \"host\": \"\",\n      \"portRange\": \"80\"\n\t}\n  ]\n}\n~~~\n\n### 监听80和8080端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"http\",\n      \"portRange\": \"80\"\n\t},\n    {\n      \"protocol\": \"http\",\n      \"portRange\": \"8080\"\n\t}\n  ]\n}\n~~~"
    },
    {
      "name": "json:http_remote_addr_config",
      "content": "# HTTP获取客户端IP地址方式配置\n## 定义\n~~~json\n{\n  \"isPrior\": \"是否覆盖父级应用\",\n  \"isOn\": \"是否启用配置\",\n  \"value\": \"自定义值变量\",\n  \"isCustomized\": \"是否自定义\"\n}\n~~~\n\n## 示例\n### 不启用自定义\n~~~json\n{\n  \"isPrior\": false,\n  \"isOn\": false,\n  \"value\": \"\",\n  \"isCustomized\": false\n}\n~~~\n\n### 启用自定义\n~~~json\n{\n  \"isPrior\": true,\n  \"isOn\": true,\n  \"value\": \"${remoteAddr}\",\n  \"isCustomized\": true\n}\n~~~"
    },
    {
      "name": "json:http_stat_stat_ref",
      "content": "# 统计引用\n## 定义\n~~~json\n{\n  \"isPrior\": \"是否覆盖父级配置\",\n  \"isOn\": \"是否启用配置\"\n}\n~~~\n\n## 示例\n~~~json\n{\n  \"isPrior\": true,\n  \"isOn\": true\n}\n~~~"
    },
    {
      "name": "json:http_websocket_ref",
      "content": "# WebSocket引用\n\n## 定义\n~~~json\n{\n\t\"isPrior\": \"是否覆盖上级配置，true|false\",\n\t\"isOn\": \"是否启用，true|false\",\n\t\"websocketId\": \"Websocket配置ID\"\n}\n~~~\n其中：\n* `Websocket配置ID` - 需要调用 `HTTPWebsocketService.CreateHTTPWebsocketRequest()` 生成 \n\n## 示例\n~~~json\n{\n\t\"isPrior\": true,\n\t\"isOn\": true,\n\t\"websocketId\": 123\n}\n~~~"
    },
    {
      "name": "json:https_protocol",
      "content": "# HTTPS协议配置\n\n## 定义\n~~~json\n{\n\t\"isOn\": \"是否启用\",\n  \t\"listen\": [\n      {\n\t\t\"protocol\": \"协议\",\n\t\t\"host\": \"主机地址，通常为空\",\n\t\t\"portRange\": \"端口或者端口范围\"\n\t  },\n\t  ...\n\t],\n  \t\"sslPolicyRef\": {\n\t  \"isOn\": \"启用SSL策略\",\n\t  \"sslPolicyId\": \"SSL策略ID\"\n\t}\n}\n~~~\n\n其中 `SSL策略ID` 通过 `/SSLPolicyService/createSSLPolicy` 接口创建。\n\n## 示例\n\n### 监听443端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"https\",\n      \"host\": \"\",\n      \"portRange\": \"443\"\n\t}\n  ],\n  \"sslPolicyRef\": {\n    \"isOn\": true,\n    \"sslPolicyId\": 123\n  }\n}\n~~~\n\n其中SSL策略ID `123` 通过 `/SSLPolicyService/createSSLPolicy` 接口创建。\n\n### 监听443和8443端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"https\",\n      \"portRange\": \"443\"\n\t},\n    {\n      \"protocol\": \"https\",\n      \"portRange\": \"8443\"\n\t}\n  ],\n  \"sslPolicyRef\": {\n    \"isOn\": true,\n    \"sslPolicyId\": 123\n  }\n}\n~~~\n\n其中SSL策略ID `123` 通过 `/SSLPolicyService/createSSLPolicy` 接口创建。"
    },
    {
      "name": "json:network_address",
      "content": "# 网络地址定义\n\n## 定义\n~~~json\n{\n\t\"protocol\": \"协议\",\n\t\"host\": \"主机地址，通常为空\",\n\t\"portRange\": \"端口或者端口范围\"\n}\n~~~\n\n## 示例\n对于 `http://example.com`：\n~~~json\n{\n  \"protocol\": \"http\",\n  \"host\": \"example.com\",\n  \"portRange\": \"80\"\n}\n~~~\n\n\n对于 `https://example.com`：\n~~~json\n{\n  \"protocol\": \"https\",\n  \"host\": \"example.com\",\n  \"portRange\": \"443\"\n}\n~~~\n"
    },
    {
      "name": "json:origin_refs",
      "content": "# 源站引用列表\n\n## 定义\n~~~json\n[\n  {\n\t\"isOn\": \"是否启用\",\n\t\"originId\": \"源站ID 1\"\n  },\n  {\n    \"isOn\": \"是否启用\",\n    \"originId\": \"源站ID 2\"\n  },\n  ...\n]\n~~~\n\n其中：\n* `originId` - 源站ID，可以通过 `/OriginService/createOrigin` 接口创建源站后获得\n\n## 示例\n~~~json\n[\n  {\n\t\"isOn\": true,\n\t\"originId\": 1\n  },\n  {\n    \"isOn\": true,\n    \"originId\": 2,\n  }\n]\n~~~"
    },
    {
      "name": "json:reverse_proxy_ref",
      "content": "# 反向代理引用\n## 定义\n~~~json\n{\n  \"isOn\": \"是否启用\",\n  \"isPrior\": \"是否覆盖上级配置，用于路由规则\",\n  \"reverseProxyId\": \"反向代理ID\"\n}\n~~~\n其中：\n* `reverseProxyId` - 反向代理ID，可以通过 `/ReverseProxyService/createReverseProxy` 创建\n\n## 示例\n~~~json\n{\n  \"isOn\": true,\n  \"reverseProxyId\": 123\n}\n~~~"
    },
    {
      "name": "json:scheduling",
      "content": "# 反向代理调度\n## 定义\n~~~json\n{\n\t\"code\": \"调度方法代号\",\n    \"options\": \"调度选项\"\n}\n~~~\n\n其中：\n* `code` 调度方法代号\n  * `random` - 随机\n  * `roundRobin` - 轮询\n  * `hash` - Hash算法\n    * `key` - 自定义Key，可以使用请求变量，比如 `${remoteAddr}`\n  * `sticky` - Sticky算法\n    * `type` - 类型：cookie、header、argument\n    * `param` - 参数值\n\n\n## 示例\n~~~json\n{\n  \"code\": \"random\",\n  \"options\": null\n}\n~~~"
    },
    {
      "name": "json:server_name",
      "content": "# 域名信息\n\n## 示例\n~~~json\n{\n  \"name\": \"example.com\",\n  \"type\": \"full\"\n}\n~~~"
    },
    {
      "name": "json:server_names",
      "content": "# 域名信息列表\n\n## 定义\n~~~\n[ 域名信息1, 域名信息2, ... ]\n~~~\n其中 `域名信息N` 等是单个域名信息定义，具体请参考 {json:server_name}\n\n## 示例\n### 示例1：单个域名\n~~~json\n[\n\t{\n\t\t\"name\": \"example.com\",\n\t\t\"type\": \"full\"\n\t}\n]\n~~~\n\n### 示例2：多个域名\n~~~json\n[\n\t{\n\t\t\"name\": \"example.com\",\n\t\t\"type\": \"full\"\n\t},\n\t{\n      \t\"name\": \"google.com\",\n      \t\"type\": \"full\"\n  \t},\n  \t{\n\t\t\"name\": \"facebook.com\",\n\t  \t\"type\": \"full\"\n  \t}\n]\n~~~\n\n### 示例3：域名合集\n域名合集效果跟多个域名是一样的，只不过在界面上以一个目录的形式呈现。\n~~~json\n[\n  \t{\n\t\t\"name\": \"\",\n\t  \t\"type\": \"full\",\n\t  \t\"subNames\": [\"example.com\", \"google.com\", \"facebook.com\"]\n  \t}\n]\n~~~\n"
    },
    {
      "name": "json:ssl_cert_refs",
      "content": "# SSL证书引用\n\n可以用来引用一组证书。\n\n## 定义\n~~~json\n[\n  {\n\t\"isOn\": \"是否启用\",\n\t\"certId\": \"证书ID 1\"\n  },\n  {\n    \"isOn\": \"是否启用\",\n    \"certId\": \"证书ID 2\"\n  },\n  ...\n]\n~~~\n\n## 示例\n~~~json\n[\n  {\n    \"isOn\": true,\n    \"certId\": 12345\n  },\n  {\n    \"isOn\": true,\n    \"certId\": 12346\n  }\n]\n~~~\n\n其中：\n* `certId` - 证书的ID"
    },
    {
      "name": "json:tcp_protocol",
      "content": "# TCP协议配置\n\n## 定义\n~~~json\n{\n\t\"isOn\": \"是否启用\",\n  \t\"listen\": [\n      {\n\t\t\"protocol\": \"协议\",\n\t\t\"host\": \"主机地址，通常为空\",\n\t\t\"portRange\": \"端口或者端口范围\"\n\t  },\n\t  ...\n\t]\n}\n~~~\n\n## 示例\n\n### 监听1234端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"tcp\",\n      \"host\": \"\",\n      \"portRange\": \"1234\"\n\t}\n  ]\n}\n~~~\n\n### 监听1234和2345端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"tcp\",\n      \"portRange\": \"1234\"\n\t},\n    {\n      \"protocol\": \"tcp\",\n      \"portRange\": \"2345\"\n\t}\n  ]\n}\n~~~\n\n### 监听1234到1240之间的所有端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"tcp\",\n      \"host\": \"\",\n      \"portRange\": \"1234-1240\"\n\t}\n  ]\n}\n~~~"
    },
    {
      "name": "json:tls_protocol",
      "content": "# TLS协议配置\n\n## 定义\n~~~json\n{\n\t\"isOn\": \"是否启用\",\n  \t\"listen\": [\n      {\n\t\t\"protocol\": \"协议\",\n\t\t\"host\": \"主机地址，通常为空\",\n\t\t\"portRange\": \"端口或者端口范围\"\n\t  },\n\t  ...\n\t],\n  \t\"sslPolicyRef\": {\n\t  \"isOn\": \"启用SSL策略\",\n\t  \"sslPolicyId\": \"SSL策略ID\"\n\t}\n}\n~~~\n\n其中 `SSL策略ID` 通过 `/SSLPolicyService/createSSLPolicy` 接口创建。\n\n## 示例\n\n### 监听8443端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"tls\",\n      \"host\": \"\",\n      \"portRange\": \"8443\"\n\t}\n  ],\n  \"sslPolicyRef\": {\n    \"isOn\": true,\n    \"sslPolicyId\": 123\n  }\n}\n~~~\n\n其中SSL策略ID `123` 通过 `/SSLPolicyService/createSSLPolicy` 接口创建。\n\n### 监听8443和8543端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"tls\",\n      \"portRange\": \"8443\"\n\t},\n    {\n      \"protocol\": \"tls\",\n      \"portRange\": \"8543\"\n\t}\n  ],\n  \"sslPolicyRef\": {\n    \"isOn\": true,\n    \"sslPolicyId\": 123\n  }\n}\n~~~\n\n其中SSL策略ID `123` 通过 `/SSLPolicyService/createSSLPolicy` 接口创建。\n\n"
    },
    {
      "name": "json:udp_protocol",
      "content": "# UDP协议配置\n\n## 定义\n~~~json\n{\n\t\"isOn\": \"是否启用\",\n  \t\"listen\": [\n      {\n\t\t\"protocol\": \"协议\",\n\t\t\"host\": \"主机地址，通常为空\",\n\t\t\"portRange\": \"端口或者端口范围\"\n\t  },\n\t  ...\n\t]\n}\n~~~\n\n## 示例\n\n### 监听1234端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"udp\",\n      \"host\": \"\",\n      \"portRange\": \"1234\"\n\t}\n  ]\n}\n~~~\n\n### 监听1234和2345端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"udp\",\n      \"portRange\": \"1234\"\n\t},\n    {\n      \"protocol\": \"udp\",\n      \"portRange\": \"2345\"\n\t}\n  ]\n}\n~~~\n\n### 监听1234到1240之间的所有端口\n~~~json\n{\n  \"isOn\": true,\n  \"listen\": [\n    {\n      \"protocol\": \"udp\",\n      \"host\": \"\",\n      \"portRange\": \"1234-1240\"\n\t}\n  ]\n}\n~~~"
    }
  ]
}